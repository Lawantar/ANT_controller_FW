
Ant-controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005184  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  08005240  08005240  00006240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005718  08005718  000070ec  2**0
                  CONTENTS
  4 .ARM          00000008  08005718  08005718  00006718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005720  08005720  000070ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005720  08005720  00006720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005724  08005724  00006724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000ec  20000000  08005728  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000514  200000ec  08005814  000070ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000600  08005814  00007600  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000070ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020285  00000000  00000000  00007114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b5c  00000000  00000000  00027399  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000d6bf  00000000  00000000  0002bef5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014b0  00000000  00000000  000395b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013d9  00000000  00000000  0003aa68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a788  00000000  00000000  0003be41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025ff7  00000000  00000000  000565c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009adf2  00000000  00000000  0007c5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001173b2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000040ac  00000000  00000000  001173f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  0011b4a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200000ec 	.word	0x200000ec
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005228 	.word	0x08005228

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200000f0 	.word	0x200000f0
 8000100:	08005228 	.word	0x08005228

08000104 <__gnu_thumb1_case_uqi>:
 8000104:	b402      	push	{r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0049      	lsls	r1, r1, #1
 800010c:	5c09      	ldrb	r1, [r1, r0]
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	448e      	add	lr, r1
 8000112:	bc02      	pop	{r1}
 8000114:	4770      	bx	lr
 8000116:	46c0      	nop			@ (mov r8, r8)

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	@ 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	@ 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <__aeabi_uldivmod>:
 8000418:	2b00      	cmp	r3, #0
 800041a:	d111      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 800041c:	2a00      	cmp	r2, #0
 800041e:	d10f      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 8000420:	2900      	cmp	r1, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_uldivmod+0xe>
 8000424:	2800      	cmp	r0, #0
 8000426:	d002      	beq.n	800042e <__aeabi_uldivmod+0x16>
 8000428:	2100      	movs	r1, #0
 800042a:	43c9      	mvns	r1, r1
 800042c:	0008      	movs	r0, r1
 800042e:	b407      	push	{r0, r1, r2}
 8000430:	4802      	ldr	r0, [pc, #8]	@ (800043c <__aeabi_uldivmod+0x24>)
 8000432:	a102      	add	r1, pc, #8	@ (adr r1, 800043c <__aeabi_uldivmod+0x24>)
 8000434:	1840      	adds	r0, r0, r1
 8000436:	9002      	str	r0, [sp, #8]
 8000438:	bd03      	pop	{r0, r1, pc}
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	ffffffd9 	.word	0xffffffd9
 8000440:	b403      	push	{r0, r1}
 8000442:	4668      	mov	r0, sp
 8000444:	b501      	push	{r0, lr}
 8000446:	9802      	ldr	r0, [sp, #8]
 8000448:	f000 f806 	bl	8000458 <__udivmoddi4>
 800044c:	9b01      	ldr	r3, [sp, #4]
 800044e:	469e      	mov	lr, r3
 8000450:	b002      	add	sp, #8
 8000452:	bc0c      	pop	{r2, r3}
 8000454:	4770      	bx	lr
 8000456:	46c0      	nop			@ (mov r8, r8)

08000458 <__udivmoddi4>:
 8000458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045a:	4657      	mov	r7, sl
 800045c:	464e      	mov	r6, r9
 800045e:	4645      	mov	r5, r8
 8000460:	46de      	mov	lr, fp
 8000462:	b5e0      	push	{r5, r6, r7, lr}
 8000464:	0004      	movs	r4, r0
 8000466:	000d      	movs	r5, r1
 8000468:	4692      	mov	sl, r2
 800046a:	4699      	mov	r9, r3
 800046c:	b083      	sub	sp, #12
 800046e:	428b      	cmp	r3, r1
 8000470:	d830      	bhi.n	80004d4 <__udivmoddi4+0x7c>
 8000472:	d02d      	beq.n	80004d0 <__udivmoddi4+0x78>
 8000474:	4649      	mov	r1, r9
 8000476:	4650      	mov	r0, sl
 8000478:	f000 f91a 	bl	80006b0 <__clzdi2>
 800047c:	0029      	movs	r1, r5
 800047e:	0006      	movs	r6, r0
 8000480:	0020      	movs	r0, r4
 8000482:	f000 f915 	bl	80006b0 <__clzdi2>
 8000486:	1a33      	subs	r3, r6, r0
 8000488:	4698      	mov	r8, r3
 800048a:	3b20      	subs	r3, #32
 800048c:	d434      	bmi.n	80004f8 <__udivmoddi4+0xa0>
 800048e:	469b      	mov	fp, r3
 8000490:	4653      	mov	r3, sl
 8000492:	465a      	mov	r2, fp
 8000494:	4093      	lsls	r3, r2
 8000496:	4642      	mov	r2, r8
 8000498:	001f      	movs	r7, r3
 800049a:	4653      	mov	r3, sl
 800049c:	4093      	lsls	r3, r2
 800049e:	001e      	movs	r6, r3
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d83b      	bhi.n	800051c <__udivmoddi4+0xc4>
 80004a4:	42af      	cmp	r7, r5
 80004a6:	d100      	bne.n	80004aa <__udivmoddi4+0x52>
 80004a8:	e079      	b.n	800059e <__udivmoddi4+0x146>
 80004aa:	465b      	mov	r3, fp
 80004ac:	1ba4      	subs	r4, r4, r6
 80004ae:	41bd      	sbcs	r5, r7
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	da00      	bge.n	80004b6 <__udivmoddi4+0x5e>
 80004b4:	e076      	b.n	80005a4 <__udivmoddi4+0x14c>
 80004b6:	2200      	movs	r2, #0
 80004b8:	2300      	movs	r3, #0
 80004ba:	9200      	str	r2, [sp, #0]
 80004bc:	9301      	str	r3, [sp, #4]
 80004be:	2301      	movs	r3, #1
 80004c0:	465a      	mov	r2, fp
 80004c2:	4093      	lsls	r3, r2
 80004c4:	9301      	str	r3, [sp, #4]
 80004c6:	2301      	movs	r3, #1
 80004c8:	4642      	mov	r2, r8
 80004ca:	4093      	lsls	r3, r2
 80004cc:	9300      	str	r3, [sp, #0]
 80004ce:	e029      	b.n	8000524 <__udivmoddi4+0xcc>
 80004d0:	4282      	cmp	r2, r0
 80004d2:	d9cf      	bls.n	8000474 <__udivmoddi4+0x1c>
 80004d4:	2200      	movs	r2, #0
 80004d6:	2300      	movs	r3, #0
 80004d8:	9200      	str	r2, [sp, #0]
 80004da:	9301      	str	r3, [sp, #4]
 80004dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <__udivmoddi4+0x8e>
 80004e2:	601c      	str	r4, [r3, #0]
 80004e4:	605d      	str	r5, [r3, #4]
 80004e6:	9800      	ldr	r0, [sp, #0]
 80004e8:	9901      	ldr	r1, [sp, #4]
 80004ea:	b003      	add	sp, #12
 80004ec:	bcf0      	pop	{r4, r5, r6, r7}
 80004ee:	46bb      	mov	fp, r7
 80004f0:	46b2      	mov	sl, r6
 80004f2:	46a9      	mov	r9, r5
 80004f4:	46a0      	mov	r8, r4
 80004f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f8:	4642      	mov	r2, r8
 80004fa:	469b      	mov	fp, r3
 80004fc:	2320      	movs	r3, #32
 80004fe:	1a9b      	subs	r3, r3, r2
 8000500:	4652      	mov	r2, sl
 8000502:	40da      	lsrs	r2, r3
 8000504:	4641      	mov	r1, r8
 8000506:	0013      	movs	r3, r2
 8000508:	464a      	mov	r2, r9
 800050a:	408a      	lsls	r2, r1
 800050c:	0017      	movs	r7, r2
 800050e:	4642      	mov	r2, r8
 8000510:	431f      	orrs	r7, r3
 8000512:	4653      	mov	r3, sl
 8000514:	4093      	lsls	r3, r2
 8000516:	001e      	movs	r6, r3
 8000518:	42af      	cmp	r7, r5
 800051a:	d9c3      	bls.n	80004a4 <__udivmoddi4+0x4c>
 800051c:	2200      	movs	r2, #0
 800051e:	2300      	movs	r3, #0
 8000520:	9200      	str	r2, [sp, #0]
 8000522:	9301      	str	r3, [sp, #4]
 8000524:	4643      	mov	r3, r8
 8000526:	2b00      	cmp	r3, #0
 8000528:	d0d8      	beq.n	80004dc <__udivmoddi4+0x84>
 800052a:	07fb      	lsls	r3, r7, #31
 800052c:	0872      	lsrs	r2, r6, #1
 800052e:	431a      	orrs	r2, r3
 8000530:	4646      	mov	r6, r8
 8000532:	087b      	lsrs	r3, r7, #1
 8000534:	e00e      	b.n	8000554 <__udivmoddi4+0xfc>
 8000536:	42ab      	cmp	r3, r5
 8000538:	d101      	bne.n	800053e <__udivmoddi4+0xe6>
 800053a:	42a2      	cmp	r2, r4
 800053c:	d80c      	bhi.n	8000558 <__udivmoddi4+0x100>
 800053e:	1aa4      	subs	r4, r4, r2
 8000540:	419d      	sbcs	r5, r3
 8000542:	2001      	movs	r0, #1
 8000544:	1924      	adds	r4, r4, r4
 8000546:	416d      	adcs	r5, r5
 8000548:	2100      	movs	r1, #0
 800054a:	3e01      	subs	r6, #1
 800054c:	1824      	adds	r4, r4, r0
 800054e:	414d      	adcs	r5, r1
 8000550:	2e00      	cmp	r6, #0
 8000552:	d006      	beq.n	8000562 <__udivmoddi4+0x10a>
 8000554:	42ab      	cmp	r3, r5
 8000556:	d9ee      	bls.n	8000536 <__udivmoddi4+0xde>
 8000558:	3e01      	subs	r6, #1
 800055a:	1924      	adds	r4, r4, r4
 800055c:	416d      	adcs	r5, r5
 800055e:	2e00      	cmp	r6, #0
 8000560:	d1f8      	bne.n	8000554 <__udivmoddi4+0xfc>
 8000562:	9800      	ldr	r0, [sp, #0]
 8000564:	9901      	ldr	r1, [sp, #4]
 8000566:	465b      	mov	r3, fp
 8000568:	1900      	adds	r0, r0, r4
 800056a:	4169      	adcs	r1, r5
 800056c:	2b00      	cmp	r3, #0
 800056e:	db24      	blt.n	80005ba <__udivmoddi4+0x162>
 8000570:	002b      	movs	r3, r5
 8000572:	465a      	mov	r2, fp
 8000574:	4644      	mov	r4, r8
 8000576:	40d3      	lsrs	r3, r2
 8000578:	002a      	movs	r2, r5
 800057a:	40e2      	lsrs	r2, r4
 800057c:	001c      	movs	r4, r3
 800057e:	465b      	mov	r3, fp
 8000580:	0015      	movs	r5, r2
 8000582:	2b00      	cmp	r3, #0
 8000584:	db2a      	blt.n	80005dc <__udivmoddi4+0x184>
 8000586:	0026      	movs	r6, r4
 8000588:	409e      	lsls	r6, r3
 800058a:	0033      	movs	r3, r6
 800058c:	0026      	movs	r6, r4
 800058e:	4647      	mov	r7, r8
 8000590:	40be      	lsls	r6, r7
 8000592:	0032      	movs	r2, r6
 8000594:	1a80      	subs	r0, r0, r2
 8000596:	4199      	sbcs	r1, r3
 8000598:	9000      	str	r0, [sp, #0]
 800059a:	9101      	str	r1, [sp, #4]
 800059c:	e79e      	b.n	80004dc <__udivmoddi4+0x84>
 800059e:	42a3      	cmp	r3, r4
 80005a0:	d8bc      	bhi.n	800051c <__udivmoddi4+0xc4>
 80005a2:	e782      	b.n	80004aa <__udivmoddi4+0x52>
 80005a4:	4642      	mov	r2, r8
 80005a6:	2320      	movs	r3, #32
 80005a8:	2100      	movs	r1, #0
 80005aa:	1a9b      	subs	r3, r3, r2
 80005ac:	2200      	movs	r2, #0
 80005ae:	9100      	str	r1, [sp, #0]
 80005b0:	9201      	str	r2, [sp, #4]
 80005b2:	2201      	movs	r2, #1
 80005b4:	40da      	lsrs	r2, r3
 80005b6:	9201      	str	r2, [sp, #4]
 80005b8:	e785      	b.n	80004c6 <__udivmoddi4+0x6e>
 80005ba:	4642      	mov	r2, r8
 80005bc:	2320      	movs	r3, #32
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	002a      	movs	r2, r5
 80005c2:	4646      	mov	r6, r8
 80005c4:	409a      	lsls	r2, r3
 80005c6:	0023      	movs	r3, r4
 80005c8:	40f3      	lsrs	r3, r6
 80005ca:	4644      	mov	r4, r8
 80005cc:	4313      	orrs	r3, r2
 80005ce:	002a      	movs	r2, r5
 80005d0:	40e2      	lsrs	r2, r4
 80005d2:	001c      	movs	r4, r3
 80005d4:	465b      	mov	r3, fp
 80005d6:	0015      	movs	r5, r2
 80005d8:	2b00      	cmp	r3, #0
 80005da:	dad4      	bge.n	8000586 <__udivmoddi4+0x12e>
 80005dc:	4642      	mov	r2, r8
 80005de:	002f      	movs	r7, r5
 80005e0:	2320      	movs	r3, #32
 80005e2:	0026      	movs	r6, r4
 80005e4:	4097      	lsls	r7, r2
 80005e6:	1a9b      	subs	r3, r3, r2
 80005e8:	40de      	lsrs	r6, r3
 80005ea:	003b      	movs	r3, r7
 80005ec:	4333      	orrs	r3, r6
 80005ee:	e7cd      	b.n	800058c <__udivmoddi4+0x134>

080005f0 <__aeabi_ui2f>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	1e04      	subs	r4, r0, #0
 80005f4:	d00e      	beq.n	8000614 <__aeabi_ui2f+0x24>
 80005f6:	f000 f83d 	bl	8000674 <__clzsi2>
 80005fa:	239e      	movs	r3, #158	@ 0x9e
 80005fc:	0001      	movs	r1, r0
 80005fe:	1a1b      	subs	r3, r3, r0
 8000600:	2b96      	cmp	r3, #150	@ 0x96
 8000602:	dc0c      	bgt.n	800061e <__aeabi_ui2f+0x2e>
 8000604:	2808      	cmp	r0, #8
 8000606:	d02f      	beq.n	8000668 <__aeabi_ui2f+0x78>
 8000608:	3908      	subs	r1, #8
 800060a:	408c      	lsls	r4, r1
 800060c:	0264      	lsls	r4, r4, #9
 800060e:	0a64      	lsrs	r4, r4, #9
 8000610:	b2d8      	uxtb	r0, r3
 8000612:	e001      	b.n	8000618 <__aeabi_ui2f+0x28>
 8000614:	2000      	movs	r0, #0
 8000616:	2400      	movs	r4, #0
 8000618:	05c0      	lsls	r0, r0, #23
 800061a:	4320      	orrs	r0, r4
 800061c:	bd70      	pop	{r4, r5, r6, pc}
 800061e:	2b99      	cmp	r3, #153	@ 0x99
 8000620:	dc16      	bgt.n	8000650 <__aeabi_ui2f+0x60>
 8000622:	1f42      	subs	r2, r0, #5
 8000624:	2805      	cmp	r0, #5
 8000626:	d000      	beq.n	800062a <__aeabi_ui2f+0x3a>
 8000628:	4094      	lsls	r4, r2
 800062a:	0022      	movs	r2, r4
 800062c:	4810      	ldr	r0, [pc, #64]	@ (8000670 <__aeabi_ui2f+0x80>)
 800062e:	4002      	ands	r2, r0
 8000630:	0765      	lsls	r5, r4, #29
 8000632:	d009      	beq.n	8000648 <__aeabi_ui2f+0x58>
 8000634:	250f      	movs	r5, #15
 8000636:	402c      	ands	r4, r5
 8000638:	2c04      	cmp	r4, #4
 800063a:	d005      	beq.n	8000648 <__aeabi_ui2f+0x58>
 800063c:	3204      	adds	r2, #4
 800063e:	0154      	lsls	r4, r2, #5
 8000640:	d502      	bpl.n	8000648 <__aeabi_ui2f+0x58>
 8000642:	239f      	movs	r3, #159	@ 0x9f
 8000644:	4002      	ands	r2, r0
 8000646:	1a5b      	subs	r3, r3, r1
 8000648:	0192      	lsls	r2, r2, #6
 800064a:	0a54      	lsrs	r4, r2, #9
 800064c:	b2d8      	uxtb	r0, r3
 800064e:	e7e3      	b.n	8000618 <__aeabi_ui2f+0x28>
 8000650:	0002      	movs	r2, r0
 8000652:	0020      	movs	r0, r4
 8000654:	321b      	adds	r2, #27
 8000656:	4090      	lsls	r0, r2
 8000658:	0002      	movs	r2, r0
 800065a:	1e50      	subs	r0, r2, #1
 800065c:	4182      	sbcs	r2, r0
 800065e:	2005      	movs	r0, #5
 8000660:	1a40      	subs	r0, r0, r1
 8000662:	40c4      	lsrs	r4, r0
 8000664:	4314      	orrs	r4, r2
 8000666:	e7e0      	b.n	800062a <__aeabi_ui2f+0x3a>
 8000668:	0264      	lsls	r4, r4, #9
 800066a:	2096      	movs	r0, #150	@ 0x96
 800066c:	0a64      	lsrs	r4, r4, #9
 800066e:	e7d3      	b.n	8000618 <__aeabi_ui2f+0x28>
 8000670:	fbffffff 	.word	0xfbffffff

08000674 <__clzsi2>:
 8000674:	211c      	movs	r1, #28
 8000676:	2301      	movs	r3, #1
 8000678:	041b      	lsls	r3, r3, #16
 800067a:	4298      	cmp	r0, r3
 800067c:	d301      	bcc.n	8000682 <__clzsi2+0xe>
 800067e:	0c00      	lsrs	r0, r0, #16
 8000680:	3910      	subs	r1, #16
 8000682:	0a1b      	lsrs	r3, r3, #8
 8000684:	4298      	cmp	r0, r3
 8000686:	d301      	bcc.n	800068c <__clzsi2+0x18>
 8000688:	0a00      	lsrs	r0, r0, #8
 800068a:	3908      	subs	r1, #8
 800068c:	091b      	lsrs	r3, r3, #4
 800068e:	4298      	cmp	r0, r3
 8000690:	d301      	bcc.n	8000696 <__clzsi2+0x22>
 8000692:	0900      	lsrs	r0, r0, #4
 8000694:	3904      	subs	r1, #4
 8000696:	a202      	add	r2, pc, #8	@ (adr r2, 80006a0 <__clzsi2+0x2c>)
 8000698:	5c10      	ldrb	r0, [r2, r0]
 800069a:	1840      	adds	r0, r0, r1
 800069c:	4770      	bx	lr
 800069e:	46c0      	nop			@ (mov r8, r8)
 80006a0:	02020304 	.word	0x02020304
 80006a4:	01010101 	.word	0x01010101
	...

080006b0 <__clzdi2>:
 80006b0:	b510      	push	{r4, lr}
 80006b2:	2900      	cmp	r1, #0
 80006b4:	d103      	bne.n	80006be <__clzdi2+0xe>
 80006b6:	f7ff ffdd 	bl	8000674 <__clzsi2>
 80006ba:	3020      	adds	r0, #32
 80006bc:	e002      	b.n	80006c4 <__clzdi2+0x14>
 80006be:	0008      	movs	r0, r1
 80006c0:	f7ff ffd8 	bl	8000674 <__clzsi2>
 80006c4:	bd10      	pop	{r4, pc}
 80006c6:	46c0      	nop			@ (mov r8, r8)

080006c8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80006c8:	b500      	push	{lr}
 80006ca:	b093      	sub	sp, #76	@ 0x4c
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80006cc:	2238      	movs	r2, #56	@ 0x38
 80006ce:	2100      	movs	r1, #0
 80006d0:	a804      	add	r0, sp, #16
 80006d2:	f003 ff0d 	bl	80044f0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80006d6:	2100      	movs	r1, #0
 80006d8:	2210      	movs	r2, #16
 80006da:	4668      	mov	r0, sp
 80006dc:	f003 ff08 	bl	80044f0 <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e0:	2080      	movs	r0, #128	@ 0x80
 80006e2:	0080      	lsls	r0, r0, #2
 80006e4:	f000 fd80 	bl	80011e8 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e8:	2302      	movs	r3, #2
 80006ea:	9304      	str	r3, [sp, #16]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ec:	33fe      	adds	r3, #254	@ 0xfe
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ee:	2240      	movs	r2, #64	@ 0x40
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f0:	9307      	str	r3, [sp, #28]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006f2:	2300      	movs	r3, #0
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80006f4:	a804      	add	r0, sp, #16
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006f6:	9308      	str	r3, [sp, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f8:	9209      	str	r2, [sp, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006fa:	930b      	str	r3, [sp, #44]	@ 0x2c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80006fc:	f000 fda0 	bl	8001240 <HAL_RCC_OscConfig>
 8000700:	1e01      	subs	r1, r0, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0x40>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000704:	b672      	cpsid	i
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000706:	e7fe      	b.n	8000706 <SystemClock_Config+0x3e>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000708:	2307      	movs	r3, #7
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800070a:	9001      	str	r0, [sp, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070c:	9002      	str	r0, [sp, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800070e:	9003      	str	r0, [sp, #12]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000710:	4668      	mov	r0, sp
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000712:	9300      	str	r3, [sp, #0]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000714:	f000 fffc 	bl	8001710 <HAL_RCC_ClockConfig>
 8000718:	2800      	cmp	r0, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0x58>
 800071c:	b672      	cpsid	i
	while (1) {
 800071e:	e7fe      	b.n	800071e <SystemClock_Config+0x56>
}
 8000720:	b013      	add	sp, #76	@ 0x4c
 8000722:	bd00      	pop	{pc}

08000724 <main>:
int main(void) {
 8000724:	b570      	push	{r4, r5, r6, lr}
 8000726:	b08e      	sub	sp, #56	@ 0x38
	HAL_Init();
 8000728:	f000 fb14 	bl	8000d54 <HAL_Init>
	SystemClock_Config();
 800072c:	f7ff ffcc 	bl	80006c8 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000730:	2214      	movs	r2, #20
 8000732:	2100      	movs	r1, #0
 8000734:	a809      	add	r0, sp, #36	@ 0x24
 8000736:	f003 fedb 	bl	80044f0 <memset>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800073a:	2102      	movs	r1, #2
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800073c:	2601      	movs	r6, #1
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 800073e:	20a0      	movs	r0, #160	@ 0xa0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000740:	4b79      	ldr	r3, [pc, #484]	@ (8000928 <main+0x204>)
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000742:	05c0      	lsls	r0, r0, #23
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000744:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2500      	movs	r5, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000748:	430a      	orrs	r2, r1
 800074a:	635a      	str	r2, [r3, #52]	@ 0x34
 800074c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800074e:	400a      	ands	r2, r1
 8000750:	9203      	str	r2, [sp, #12]
 8000752:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000754:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000756:	1849      	adds	r1, r1, r1
 8000758:	430a      	orrs	r2, r1
 800075a:	635a      	str	r2, [r3, #52]	@ 0x34
 800075c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800075e:	400a      	ands	r2, r1
 8000760:	9204      	str	r2, [sp, #16]
 8000762:	9a04      	ldr	r2, [sp, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000764:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000766:	0031      	movs	r1, r6
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000768:	4332      	orrs	r2, r6
 800076a:	635a      	str	r2, [r3, #52]	@ 0x34
 800076c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 800076e:	0032      	movs	r2, r6
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000770:	4033      	ands	r3, r6
 8000772:	9305      	str	r3, [sp, #20]
 8000774:	9b05      	ldr	r3, [sp, #20]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000776:	f000 fc89 	bl	800108c <HAL_GPIO_WritePin>
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077a:	20a0      	movs	r0, #160	@ 0xa0
 800077c:	a909      	add	r1, sp, #36	@ 0x24
 800077e:	05c0      	lsls	r0, r0, #23
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000780:	9609      	str	r6, [sp, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000782:	960a      	str	r6, [sp, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	950b      	str	r5, [sp, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000786:	950c      	str	r5, [sp, #48]	@ 0x30
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000788:	f000 fbce 	bl	8000f28 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 800078c:	2380      	movs	r3, #128	@ 0x80
 800078e:	005b      	lsls	r3, r3, #1
 8000790:	9309      	str	r3, [sp, #36]	@ 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000792:	20a0      	movs	r0, #160	@ 0xa0
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000794:	2388      	movs	r3, #136	@ 0x88
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000796:	a909      	add	r1, sp, #36	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000798:	035b      	lsls	r3, r3, #13
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800079a:	05c0      	lsls	r0, r0, #23
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800079c:	930a      	str	r3, [sp, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	950b      	str	r5, [sp, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a0:	f000 fbc2 	bl	8000f28 <HAL_GPIO_Init>
	hi2c2.Instance = I2C2;
 80007a4:	4c61      	ldr	r4, [pc, #388]	@ (800092c <main+0x208>)
 80007a6:	4b62      	ldr	r3, [pc, #392]	@ (8000930 <main+0x20c>)
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 80007a8:	0020      	movs	r0, r4
	hi2c2.Instance = I2C2;
 80007aa:	6023      	str	r3, [r4, #0]
	hi2c2.Init.Timing = 0x00303D5B;
 80007ac:	4b61      	ldr	r3, [pc, #388]	@ (8000934 <main+0x210>)
	hi2c2.Init.OwnAddress1 = 0;
 80007ae:	60a5      	str	r5, [r4, #8]
	hi2c2.Init.Timing = 0x00303D5B;
 80007b0:	6063      	str	r3, [r4, #4]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007b2:	60e6      	str	r6, [r4, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007b4:	6125      	str	r5, [r4, #16]
	hi2c2.Init.OwnAddress2 = 0;
 80007b6:	6165      	str	r5, [r4, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007b8:	61a5      	str	r5, [r4, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ba:	61e5      	str	r5, [r4, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007bc:	6225      	str	r5, [r4, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 80007be:	f000 fc6b 	bl	8001098 <HAL_I2C_Init>
 80007c2:	0001      	movs	r1, r0
 80007c4:	42a8      	cmp	r0, r5
 80007c6:	d001      	beq.n	80007cc <main+0xa8>
 80007c8:	b672      	cpsid	i
	while (1) {
 80007ca:	e7fe      	b.n	80007ca <main+0xa6>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE)
 80007cc:	0020      	movs	r0, r4
 80007ce:	f000 fcc1 	bl	8001154 <HAL_I2CEx_ConfigAnalogFilter>
 80007d2:	1e01      	subs	r1, r0, #0
 80007d4:	d001      	beq.n	80007da <main+0xb6>
 80007d6:	b672      	cpsid	i
	while (1) {
 80007d8:	e7fe      	b.n	80007d8 <main+0xb4>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 80007da:	0020      	movs	r0, r4
 80007dc:	f000 fce0 	bl	80011a0 <HAL_I2CEx_ConfigDigitalFilter>
 80007e0:	2800      	cmp	r0, #0
 80007e2:	d001      	beq.n	80007e8 <main+0xc4>
 80007e4:	b672      	cpsid	i
	while (1) {
 80007e6:	e7fe      	b.n	80007e6 <main+0xc2>
	huart1.Init.BaudRate = 115200;
 80007e8:	26e1      	movs	r6, #225	@ 0xe1
	huart1.Init.Mode = UART_MODE_TX_RX;
 80007ea:	250c      	movs	r5, #12
	huart1.Instance = USART1;
 80007ec:	4c52      	ldr	r4, [pc, #328]	@ (8000938 <main+0x214>)
 80007ee:	4b53      	ldr	r3, [pc, #332]	@ (800093c <main+0x218>)
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007f0:	60a0      	str	r0, [r4, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80007f2:	60e0      	str	r0, [r4, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80007f4:	6120      	str	r0, [r4, #16]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f6:	61a0      	str	r0, [r4, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f8:	61e0      	str	r0, [r4, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007fa:	6220      	str	r0, [r4, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007fc:	6260      	str	r0, [r4, #36]	@ 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007fe:	62a0      	str	r0, [r4, #40]	@ 0x28
	huart1.Init.BaudRate = 115200;
 8000800:	0276      	lsls	r6, r6, #9
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000802:	0020      	movs	r0, r4
	huart1.Instance = USART1;
 8000804:	6023      	str	r3, [r4, #0]
	huart1.Init.BaudRate = 115200;
 8000806:	6066      	str	r6, [r4, #4]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000808:	6165      	str	r5, [r4, #20]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800080a:	f002 fc1d 	bl	8003048 <HAL_UART_Init>
 800080e:	1e01      	subs	r1, r0, #0
 8000810:	d001      	beq.n	8000816 <main+0xf2>
 8000812:	b672      	cpsid	i
	while (1) {
 8000814:	e7fe      	b.n	8000814 <main+0xf0>
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 8000816:	0020      	movs	r0, r4
 8000818:	f002 fda4 	bl	8003364 <HAL_UARTEx_SetTxFifoThreshold>
 800081c:	1e01      	subs	r1, r0, #0
 800081e:	d001      	beq.n	8000824 <main+0x100>
 8000820:	b672      	cpsid	i
	while (1) {
 8000822:	e7fe      	b.n	8000822 <main+0xfe>
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 8000824:	0020      	movs	r0, r4
 8000826:	f002 fdbd 	bl	80033a4 <HAL_UARTEx_SetRxFifoThreshold>
 800082a:	2800      	cmp	r0, #0
 800082c:	d001      	beq.n	8000832 <main+0x10e>
 800082e:	b672      	cpsid	i
	while (1) {
 8000830:	e7fe      	b.n	8000830 <main+0x10c>
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 8000832:	0020      	movs	r0, r4
 8000834:	f002 fd78 	bl	8003328 <HAL_UARTEx_DisableFifoMode>
 8000838:	1e01      	subs	r1, r0, #0
 800083a:	d001      	beq.n	8000840 <main+0x11c>
 800083c:	b672      	cpsid	i
	while (1) {
 800083e:	e7fe      	b.n	800083e <main+0x11a>
	huart2.Instance = USART2;
 8000840:	4c3f      	ldr	r4, [pc, #252]	@ (8000940 <main+0x21c>)
 8000842:	4b40      	ldr	r3, [pc, #256]	@ (8000944 <main+0x220>)
	if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 8000844:	0002      	movs	r2, r0
	huart2.Instance = USART2;
 8000846:	6023      	str	r3, [r4, #0]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000848:	60a0      	str	r0, [r4, #8]
	if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 800084a:	0003      	movs	r3, r0
	huart2.Init.StopBits = UART_STOPBITS_1;
 800084c:	60e0      	str	r0, [r4, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800084e:	6120      	str	r0, [r4, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000850:	61a0      	str	r0, [r4, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000852:	61e0      	str	r0, [r4, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000854:	6220      	str	r0, [r4, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000856:	6260      	str	r0, [r4, #36]	@ 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000858:	62a0      	str	r0, [r4, #40]	@ 0x28
	if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 800085a:	0020      	movs	r0, r4
	huart2.Init.BaudRate = 115200;
 800085c:	6066      	str	r6, [r4, #4]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800085e:	6165      	str	r5, [r4, #20]
	if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 8000860:	f002 fd18 	bl	8003294 <HAL_RS485Ex_Init>
 8000864:	1e06      	subs	r6, r0, #0
 8000866:	d001      	beq.n	800086c <main+0x148>
 8000868:	b672      	cpsid	i
	while (1) {
 800086a:	e7fe      	b.n	800086a <main+0x146>
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800086c:	0001      	movs	r1, r0
 800086e:	2210      	movs	r2, #16
 8000870:	a809      	add	r0, sp, #36	@ 0x24
 8000872:	f003 fe3d 	bl	80044f0 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000876:	002a      	movs	r2, r5
 8000878:	0031      	movs	r1, r6
 800087a:	a806      	add	r0, sp, #24
 800087c:	f003 fe38 	bl	80044f0 <memset>
	htim3.Instance = TIM3;
 8000880:	4d31      	ldr	r5, [pc, #196]	@ (8000948 <main+0x224>)
 8000882:	4b32      	ldr	r3, [pc, #200]	@ (800094c <main+0x228>)
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8000884:	0028      	movs	r0, r5
	htim3.Instance = TIM3;
 8000886:	602b      	str	r3, [r5, #0]
	htim3.Init.Prescaler = 15;
 8000888:	230f      	movs	r3, #15
 800088a:	606b      	str	r3, [r5, #4]
	htim3.Init.Period = 50;
 800088c:	3323      	adds	r3, #35	@ 0x23
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800088e:	60ae      	str	r6, [r5, #8]
	htim3.Init.Period = 50;
 8000890:	60eb      	str	r3, [r5, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000892:	612e      	str	r6, [r5, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000894:	61ae      	str	r6, [r5, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8000896:	f001 fa25 	bl	8001ce4 <HAL_TIM_Base_Init>
 800089a:	2800      	cmp	r0, #0
 800089c:	d001      	beq.n	80008a2 <main+0x17e>
 800089e:	b672      	cpsid	i
	while (1) {
 80008a0:	e7fe      	b.n	80008a0 <main+0x17c>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008a2:	2380      	movs	r3, #128	@ 0x80
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80008a4:	0028      	movs	r0, r5
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008a6:	015b      	lsls	r3, r3, #5
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80008a8:	a909      	add	r1, sp, #36	@ 0x24
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008aa:	9309      	str	r3, [sp, #36]	@ 0x24
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80008ac:	f001 fa50 	bl	8001d50 <HAL_TIM_ConfigClockSource>
 80008b0:	2800      	cmp	r0, #0
 80008b2:	d001      	beq.n	80008b8 <main+0x194>
 80008b4:	b672      	cpsid	i
	while (1) {
 80008b6:	e7fe      	b.n	80008b6 <main+0x192>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008b8:	2300      	movs	r3, #0
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80008ba:	0028      	movs	r0, r5
 80008bc:	a906      	add	r1, sp, #24
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008be:	9306      	str	r3, [sp, #24]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c0:	9308      	str	r3, [sp, #32]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80008c2:	f001 fadd 	bl	8001e80 <HAL_TIMEx_MasterConfigSynchronization>
 80008c6:	1e06      	subs	r6, r0, #0
 80008c8:	d001      	beq.n	80008ce <main+0x1aa>
 80008ca:	b672      	cpsid	i
	while (1) {
 80008cc:	e7fe      	b.n	80008cc <main+0x1a8>
	HAL_GPIO_WritePin(GPIOA, 0, GPIO_PIN_SET); /* Driver HARDSTOP connect to GND */
 80008ce:	0001      	movs	r1, r0
 80008d0:	20a0      	movs	r0, #160	@ 0xa0
 80008d2:	2201      	movs	r2, #1
 80008d4:	05c0      	lsls	r0, r0, #23
 80008d6:	f000 fbd9 	bl	800108c <HAL_GPIO_WritePin>
	MT_PORT_SetTimerModule(&htim3);
 80008da:	0028      	movs	r0, r5
 80008dc:	f003 fa6e 	bl	8003dbc <MT_PORT_SetTimerModule>
	MT_PORT_SetUartModule(&huart2);
 80008e0:	0020      	movs	r0, r4
 80008e2:	f003 fa71 	bl	8003dc8 <MT_PORT_SetUartModule>
	mbDataInit();
 80008e6:	f000 f865 	bl	80009b4 <mbDataInit>
	eStatus = eMBInit(MB_RTU, 0x0A, 0, 115200, MB_PAR_NONE);
 80008ea:	23e1      	movs	r3, #225	@ 0xe1
		Data.elev_angle_d = HAL_GetTick() / 1000;
 80008ec:	25fa      	movs	r5, #250	@ 0xfa
	eStatus = eMBInit(MB_RTU, 0x0A, 0, 115200, MB_PAR_NONE);
 80008ee:	0032      	movs	r2, r6
 80008f0:	210a      	movs	r1, #10
 80008f2:	025b      	lsls	r3, r3, #9
 80008f4:	0030      	movs	r0, r6
 80008f6:	9600      	str	r6, [sp, #0]
 80008f8:	f003 f93e 	bl	8003b78 <eMBInit>
	eStatus = eMBEnable();
 80008fc:	f003 f9c0 	bl	8003c80 <eMBEnable>
		Data.elev_angle_d = HAL_GetTick() / 1000;
 8000900:	4c13      	ldr	r4, [pc, #76]	@ (8000950 <main+0x22c>)
 8000902:	00ad      	lsls	r5, r5, #2
		eMBPoll();
 8000904:	f003 f9cc 	bl	8003ca0 <eMBPoll>
		Data.elev_angle_d = HAL_GetTick() / 1000;
 8000908:	f000 fa44 	bl	8000d94 <HAL_GetTick>
 800090c:	0029      	movs	r1, r5
 800090e:	f7ff fc0d 	bl	800012c <__udivsi3>
 8000912:	f7ff fe6d 	bl	80005f0 <__aeabi_ui2f>
 8000916:	0a03      	lsrs	r3, r0, #8
 8000918:	7020      	strb	r0, [r4, #0]
 800091a:	7063      	strb	r3, [r4, #1]
 800091c:	0c03      	lsrs	r3, r0, #16
 800091e:	0e00      	lsrs	r0, r0, #24
 8000920:	70a3      	strb	r3, [r4, #2]
 8000922:	70e0      	strb	r0, [r4, #3]
	while (1) {
 8000924:	e7ee      	b.n	8000904 <main+0x1e0>
 8000926:	46c0      	nop			@ (mov r8, r8)
 8000928:	40021000 	.word	0x40021000
 800092c:	2000027c 	.word	0x2000027c
 8000930:	40005800 	.word	0x40005800
 8000934:	00303d5b 	.word	0x00303d5b
 8000938:	2000019c 	.word	0x2000019c
 800093c:	40013800 	.word	0x40013800
 8000940:	20000108 	.word	0x20000108
 8000944:	40004400 	.word	0x40004400
 8000948:	20000230 	.word	0x20000230
 800094c:	40000400 	.word	0x40000400
 8000950:	20000322 	.word	0x20000322

08000954 <eMBRegInputCB>:
}
 8000954:	2001      	movs	r0, #1
 8000956:	4770      	bx	lr

08000958 <eMBRegHoldingCB>:
		USHORT usNRegs, eMBRegisterMode eMode) {
 8000958:	b510      	push	{r4, lr}
 800095a:	0004      	movs	r4, r0
	if (eMode == MB_REG_WRITE) {
 800095c:	2b01      	cmp	r3, #1
 800095e:	d10f      	bne.n	8000980 <eMBRegHoldingCB+0x28>
		if ((usAddress >= REG_INPUT_START) && (usAddress + usNRegs <= REG_INPUT_NREGS + 1)) {
 8000960:	2900      	cmp	r1, #0
 8000962:	d00b      	beq.n	800097c <eMBRegHoldingCB+0x24>
 8000964:	1888      	adds	r0, r1, r2
 8000966:	282f      	cmp	r0, #47	@ 0x2f
 8000968:	dc08      	bgt.n	800097c <eMBRegHoldingCB+0x24>
			iRegIndex = (int) (usAddress - 1);
 800096a:	3901      	subs	r1, #1
			memcpy((unsigned char*)&Data + iRegIndex * 2, pucRegBuffer, usNRegs * 2);
 800096c:	0048      	lsls	r0, r1, #1
 800096e:	0021      	movs	r1, r4
 8000970:	4b0c      	ldr	r3, [pc, #48]	@ (80009a4 <eMBRegHoldingCB+0x4c>)
 8000972:	0052      	lsls	r2, r2, #1
 8000974:	18c0      	adds	r0, r0, r3
			memcpy(pucRegBuffer, (unsigned char*)&Data + iRegIndex * 2, usNRegs * 2);
 8000976:	f003 fe3e 	bl	80045f6 <memcpy>
	eMBErrorCode eStatus = MB_ENOERR;
 800097a:	2300      	movs	r3, #0
}
 800097c:	0018      	movs	r0, r3
 800097e:	bd10      	pop	{r4, pc}
	} else if (eMode == MB_REG_READ) {
 8000980:	2b00      	cmp	r3, #0
 8000982:	d10c      	bne.n	800099e <eMBRegHoldingCB+0x46>
			eStatus = MB_ENOREG;
 8000984:	3301      	adds	r3, #1
		if ((usAddress >= REG_INPUT_START) && (usAddress + usNRegs <= REG_INPUT_NREGS + 1)) {
 8000986:	2900      	cmp	r1, #0
 8000988:	d0f8      	beq.n	800097c <eMBRegHoldingCB+0x24>
 800098a:	1888      	adds	r0, r1, r2
 800098c:	282f      	cmp	r0, #47	@ 0x2f
 800098e:	dcf5      	bgt.n	800097c <eMBRegHoldingCB+0x24>
			iRegIndex = (int) (usAddress - 1);
 8000990:	3901      	subs	r1, #1
			memcpy(pucRegBuffer, (unsigned char*)&Data + iRegIndex * 2, usNRegs * 2);
 8000992:	4099      	lsls	r1, r3
 8000994:	409a      	lsls	r2, r3
 8000996:	4b03      	ldr	r3, [pc, #12]	@ (80009a4 <eMBRegHoldingCB+0x4c>)
 8000998:	0020      	movs	r0, r4
 800099a:	18c9      	adds	r1, r1, r3
 800099c:	e7eb      	b.n	8000976 <eMBRegHoldingCB+0x1e>
			eStatus = MB_ENOREG;
 800099e:	2301      	movs	r3, #1
 80009a0:	e7ec      	b.n	800097c <eMBRegHoldingCB+0x24>
 80009a2:	46c0      	nop			@ (mov r8, r8)
 80009a4:	200002d0 	.word	0x200002d0

080009a8 <eMBRegCoilsCB>:
}
 80009a8:	2001      	movs	r0, #1
 80009aa:	4770      	bx	lr

080009ac <eMBRegDiscreteCB>:
eMBErrorCode eMBRegDiscreteCB(UCHAR *pucRegBuffer, USHORT usAddress,
 80009ac:	2001      	movs	r0, #1
 80009ae:	4770      	bx	lr

080009b0 <Error_Handler>:
 80009b0:	b672      	cpsid	i
	while (1) {
 80009b2:	e7fe      	b.n	80009b2 <Error_Handler+0x2>

080009b4 <mbDataInit>:
#include "mbdata.h"

module_ctrl_t Data;

void mbDataInit(){
	Data.mode = 0xFFFF;
 80009b4:	2301      	movs	r3, #1
 80009b6:	4a1e      	ldr	r2, [pc, #120]	@ (8000a30 <mbDataInit+0x7c>)
 80009b8:	425b      	negs	r3, r3
	Data.acc_cal_coeffs[0] = 0.0f;
	Data.acc_cal_coeffs[1] = 0.0f;
	Data.acc_cal_coeffs[2] = 0.0f;
 80009ba:	0011      	movs	r1, r2
	Data.mode = 0xFFFF;
 80009bc:	7013      	strb	r3, [r2, #0]
 80009be:	7053      	strb	r3, [r2, #1]
	Data.acc_cal_coeffs[0] = 0.0f;
 80009c0:	2300      	movs	r3, #0
	Data.gyro_cal_coeffs[0] = 0.0f;
	Data.gyro_cal_coeffs[1] = 0.0f;
	Data.gyro_cal_coeffs[2] = 0.0f;
	Data.mag_cal_coeffs[0] = 0.0f;
	Data.mag_cal_coeffs[1] = 0.0f;
 80009c2:	311e      	adds	r1, #30
	Data.acc_cal_coeffs[0] = 0.0f;
 80009c4:	7093      	strb	r3, [r2, #2]
 80009c6:	70d3      	strb	r3, [r2, #3]
 80009c8:	7113      	strb	r3, [r2, #4]
 80009ca:	7153      	strb	r3, [r2, #5]
	Data.acc_cal_coeffs[1] = 0.0f;
 80009cc:	7193      	strb	r3, [r2, #6]
 80009ce:	71d3      	strb	r3, [r2, #7]
 80009d0:	7213      	strb	r3, [r2, #8]
 80009d2:	7253      	strb	r3, [r2, #9]
	Data.acc_cal_coeffs[2] = 0.0f;
 80009d4:	7293      	strb	r3, [r2, #10]
 80009d6:	72d3      	strb	r3, [r2, #11]
 80009d8:	7313      	strb	r3, [r2, #12]
 80009da:	7353      	strb	r3, [r2, #13]
	Data.gyro_cal_coeffs[0] = 0.0f;
 80009dc:	7393      	strb	r3, [r2, #14]
 80009de:	73d3      	strb	r3, [r2, #15]
 80009e0:	7413      	strb	r3, [r2, #16]
 80009e2:	7453      	strb	r3, [r2, #17]
	Data.gyro_cal_coeffs[1] = 0.0f;
 80009e4:	7493      	strb	r3, [r2, #18]
 80009e6:	74d3      	strb	r3, [r2, #19]
 80009e8:	7513      	strb	r3, [r2, #20]
 80009ea:	7553      	strb	r3, [r2, #21]
	Data.gyro_cal_coeffs[2] = 0.0f;
 80009ec:	7593      	strb	r3, [r2, #22]
 80009ee:	75d3      	strb	r3, [r2, #23]
 80009f0:	7613      	strb	r3, [r2, #24]
 80009f2:	7653      	strb	r3, [r2, #25]
	Data.mag_cal_coeffs[0] = 0.0f;
 80009f4:	7693      	strb	r3, [r2, #26]
 80009f6:	76d3      	strb	r3, [r2, #27]
 80009f8:	7713      	strb	r3, [r2, #28]
 80009fa:	7753      	strb	r3, [r2, #29]
	Data.mag_cal_coeffs[1] = 0.0f;
 80009fc:	7793      	strb	r3, [r2, #30]
 80009fe:	77d3      	strb	r3, [r2, #31]
 8000a00:	708b      	strb	r3, [r1, #2]
 8000a02:	70cb      	strb	r3, [r1, #3]
	Data.mag_cal_coeffs[2] = 0.0f;
 8000a04:	0011      	movs	r1, r2
 8000a06:	3122      	adds	r1, #34	@ 0x22
 8000a08:	700b      	strb	r3, [r1, #0]
 8000a0a:	704b      	strb	r3, [r1, #1]
 8000a0c:	708b      	strb	r3, [r1, #2]
 8000a0e:	70cb      	strb	r3, [r1, #3]
	Data.elev_angle_d = 0.0f;
 8000a10:	0011      	movs	r1, r2
 8000a12:	3152      	adds	r1, #82	@ 0x52
 8000a14:	700b      	strb	r3, [r1, #0]
 8000a16:	704b      	strb	r3, [r1, #1]
 8000a18:	708b      	strb	r3, [r1, #2]
 8000a1a:	70cb      	strb	r3, [r1, #3]
	Data.yaw_angle_d = 0.0f;
 8000a1c:	0011      	movs	r1, r2
	Data.status = 0x0000;
 8000a1e:	325a      	adds	r2, #90	@ 0x5a
	Data.yaw_angle_d = 0.0f;
 8000a20:	3156      	adds	r1, #86	@ 0x56
 8000a22:	700b      	strb	r3, [r1, #0]
 8000a24:	704b      	strb	r3, [r1, #1]
 8000a26:	708b      	strb	r3, [r1, #2]
 8000a28:	70cb      	strb	r3, [r1, #3]
	Data.status = 0x0000;
 8000a2a:	7013      	strb	r3, [r2, #0]
 8000a2c:	7053      	strb	r3, [r2, #1]
}
 8000a2e:	4770      	bx	lr
 8000a30:	200002d0 	.word	0x200002d0

08000a34 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a34:	2101      	movs	r1, #1
 8000a36:	4b0a      	ldr	r3, [pc, #40]	@ (8000a60 <HAL_MspInit+0x2c>)
{
 8000a38:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a3c:	430a      	orrs	r2, r1
 8000a3e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a42:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a44:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a46:	9200      	str	r2, [sp, #0]
 8000a48:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a4c:	0549      	lsls	r1, r1, #21
 8000a4e:	430a      	orrs	r2, r1
 8000a50:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000a52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a54:	400b      	ands	r3, r1
 8000a56:	9301      	str	r3, [sp, #4]
 8000a58:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a5a:	b002      	add	sp, #8
 8000a5c:	4770      	bx	lr
 8000a5e:	46c0      	nop			@ (mov r8, r8)
 8000a60:	40021000 	.word	0x40021000

08000a64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a64:	b510      	push	{r4, lr}
 8000a66:	0004      	movs	r4, r0
 8000a68:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6a:	2214      	movs	r2, #20
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	a803      	add	r0, sp, #12
 8000a70:	f003 fd3e 	bl	80044f0 <memset>
  if(hi2c->Instance==I2C2)
 8000a74:	4b11      	ldr	r3, [pc, #68]	@ (8000abc <HAL_I2C_MspInit+0x58>)
 8000a76:	6822      	ldr	r2, [r4, #0]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d11d      	bne.n	8000ab8 <HAL_I2C_MspInit+0x54>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	4c10      	ldr	r4, [pc, #64]	@ (8000ac0 <HAL_I2C_MspInit+0x5c>)
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a80:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a82:	6b63      	ldr	r3, [r4, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a84:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a86:	4313      	orrs	r3, r2
 8000a88:	6363      	str	r3, [r4, #52]	@ 0x34
 8000a8a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8c:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8e:	4013      	ands	r3, r2
 8000a90:	9301      	str	r3, [sp, #4]
 8000a92:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000a94:	23c0      	movs	r3, #192	@ 0xc0
 8000a96:	015b      	lsls	r3, r3, #5
 8000a98:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a9a:	2312      	movs	r3, #18
 8000a9c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8000a9e:	3b0c      	subs	r3, #12
 8000aa0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa2:	f000 fa41 	bl	8000f28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000aa6:	2280      	movs	r2, #128	@ 0x80
 8000aa8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8000aaa:	03d2      	lsls	r2, r2, #15
 8000aac:	4313      	orrs	r3, r2
 8000aae:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8000ab0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8000ab2:	4013      	ands	r3, r2
 8000ab4:	9302      	str	r3, [sp, #8]
 8000ab6:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000ab8:	b008      	add	sp, #32
 8000aba:	bd10      	pop	{r4, pc}
 8000abc:	40005800 	.word	0x40005800
 8000ac0:	40021000 	.word	0x40021000

08000ac4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ac4:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM3)
 8000ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8000af4 <HAL_TIM_Base_MspInit+0x30>)
 8000ac8:	6802      	ldr	r2, [r0, #0]
 8000aca:	429a      	cmp	r2, r3
 8000acc:	d110      	bne.n	8000af0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ace:	2102      	movs	r1, #2
 8000ad0:	4b09      	ldr	r3, [pc, #36]	@ (8000af8 <HAL_TIM_Base_MspInit+0x34>)
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000ad2:	2010      	movs	r0, #16
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ad4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ad6:	430a      	orrs	r2, r1
 8000ad8:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000ada:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000adc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ade:	400b      	ands	r3, r1
 8000ae0:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000ae2:	0011      	movs	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ae4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000ae6:	f000 f95b 	bl	8000da0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000aea:	2010      	movs	r0, #16
 8000aec:	f000 f982 	bl	8000df4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000af0:	bd07      	pop	{r0, r1, r2, pc}
 8000af2:	46c0      	nop			@ (mov r8, r8)
 8000af4:	40000400 	.word	0x40000400
 8000af8:	40021000 	.word	0x40021000

08000afc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000afc:	b510      	push	{r4, lr}
 8000afe:	0004      	movs	r4, r0
 8000b00:	b094      	sub	sp, #80	@ 0x50
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b02:	2214      	movs	r2, #20
 8000b04:	2100      	movs	r1, #0
 8000b06:	a805      	add	r0, sp, #20
 8000b08:	f003 fcf2 	bl	80044f0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b0c:	2228      	movs	r2, #40	@ 0x28
 8000b0e:	2100      	movs	r1, #0
 8000b10:	a80a      	add	r0, sp, #40	@ 0x28
 8000b12:	f003 fced 	bl	80044f0 <memset>
  if(huart->Instance==USART1)
 8000b16:	6823      	ldr	r3, [r4, #0]
 8000b18:	4a29      	ldr	r2, [pc, #164]	@ (8000bc0 <HAL_UART_MspInit+0xc4>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d127      	bne.n	8000b6e <HAL_UART_MspInit+0x72>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b1e:	2301      	movs	r3, #1
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b20:	a80a      	add	r0, sp, #40	@ 0x28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b22:	930a      	str	r3, [sp, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b24:	f000 feb6 	bl	8001894 <HAL_RCCEx_PeriphCLKConfig>
 8000b28:	2800      	cmp	r0, #0
 8000b2a:	d001      	beq.n	8000b30 <HAL_UART_MspInit+0x34>
    {
      Error_Handler();
 8000b2c:	f7ff ff40 	bl	80009b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b30:	2180      	movs	r1, #128	@ 0x80
 8000b32:	4b24      	ldr	r3, [pc, #144]	@ (8000bc4 <HAL_UART_MspInit+0xc8>)
 8000b34:	01c9      	lsls	r1, r1, #7
 8000b36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b38:	4823      	ldr	r0, [pc, #140]	@ (8000bc8 <HAL_UART_MspInit+0xcc>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b3a:	430a      	orrs	r2, r1
 8000b3c:	641a      	str	r2, [r3, #64]	@ 0x40
 8000b3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b40:	400a      	ands	r2, r1
 8000b42:	9201      	str	r2, [sp, #4]
 8000b44:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b46:	2202      	movs	r2, #2
 8000b48:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000b4a:	4311      	orrs	r1, r2
 8000b4c:	6359      	str	r1, [r3, #52]	@ 0x34
 8000b4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b50:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b52:	4013      	ands	r3, r2
 8000b54:	9302      	str	r3, [sp, #8]
 8000b56:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000b58:	23c0      	movs	r3, #192	@ 0xc0
 8000b5a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5e:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b62:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000b64:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b66:	f000 f9df 	bl	8000f28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b6a:	b014      	add	sp, #80	@ 0x50
 8000b6c:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART2)
 8000b6e:	4a17      	ldr	r2, [pc, #92]	@ (8000bcc <HAL_UART_MspInit+0xd0>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d1fa      	bne.n	8000b6a <HAL_UART_MspInit+0x6e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b74:	2180      	movs	r1, #128	@ 0x80
 8000b76:	4b13      	ldr	r3, [pc, #76]	@ (8000bc4 <HAL_UART_MspInit+0xc8>)
 8000b78:	0289      	lsls	r1, r1, #10
 8000b7a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7c:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b7e:	430a      	orrs	r2, r1
 8000b80:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000b82:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b84:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b86:	400a      	ands	r2, r1
 8000b88:	9203      	str	r2, [sp, #12]
 8000b8a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000b90:	4311      	orrs	r1, r2
 8000b92:	6359      	str	r1, [r3, #52]	@ 0x34
 8000b94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b96:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b98:	4013      	ands	r3, r2
 8000b9a:	9304      	str	r3, [sp, #16]
 8000b9c:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000b9e:	230e      	movs	r3, #14
 8000ba0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba2:	3b0c      	subs	r3, #12
 8000ba4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000ba6:	9209      	str	r2, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba8:	f000 f9be 	bl	8000f28 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000bac:	2200      	movs	r2, #0
 8000bae:	201c      	movs	r0, #28
 8000bb0:	0011      	movs	r1, r2
 8000bb2:	f000 f8f5 	bl	8000da0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000bb6:	201c      	movs	r0, #28
 8000bb8:	f000 f91c 	bl	8000df4 <HAL_NVIC_EnableIRQ>
}
 8000bbc:	e7d5      	b.n	8000b6a <HAL_UART_MspInit+0x6e>
 8000bbe:	46c0      	nop			@ (mov r8, r8)
 8000bc0:	40013800 	.word	0x40013800
 8000bc4:	40021000 	.word	0x40021000
 8000bc8:	50000400 	.word	0x50000400
 8000bcc:	40004400 	.word	0x40004400

08000bd0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <NMI_Handler>

08000bd2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd2:	e7fe      	b.n	8000bd2 <HardFault_Handler>

08000bd4 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000bd4:	4770      	bx	lr

08000bd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8000bd6:	4770      	bx	lr

08000bd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bda:	f000 f8cf 	bl	8000d7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bde:	bd10      	pop	{r4, pc}

08000be0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000be0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000be2:	4802      	ldr	r0, [pc, #8]	@ (8000bec <TIM3_IRQHandler+0xc>)
 8000be4:	f000 ff84 	bl	8001af0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000be8:	bd10      	pop	{r4, pc}
 8000bea:	46c0      	nop			@ (mov r8, r8)
 8000bec:	20000230 	.word	0x20000230

08000bf0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000bf0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bf2:	4802      	ldr	r0, [pc, #8]	@ (8000bfc <USART2_IRQHandler+0xc>)
 8000bf4:	f001 fbce 	bl	8002394 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bf8:	bd10      	pop	{r4, pc}
 8000bfa:	46c0      	nop			@ (mov r8, r8)
 8000bfc:	20000108 	.word	0x20000108

08000c00 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8000c00:	2001      	movs	r0, #1
 8000c02:	4770      	bx	lr

08000c04 <_kill>:

int _kill(int pid, int sig)
{
 8000c04:	b510      	push	{r4, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c06:	f003 fcc9 	bl	800459c <__errno>
 8000c0a:	2316      	movs	r3, #22
 8000c0c:	6003      	str	r3, [r0, #0]
  return -1;
 8000c0e:	2001      	movs	r0, #1
}
 8000c10:	4240      	negs	r0, r0
 8000c12:	bd10      	pop	{r4, pc}

08000c14 <_exit>:

void _exit (int status)
{
 8000c14:	b510      	push	{r4, lr}
  errno = EINVAL;
 8000c16:	f003 fcc1 	bl	800459c <__errno>
 8000c1a:	2316      	movs	r3, #22
 8000c1c:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8000c1e:	e7fe      	b.n	8000c1e <_exit+0xa>

08000c20 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c20:	b570      	push	{r4, r5, r6, lr}
 8000c22:	000e      	movs	r6, r1
 8000c24:	0014      	movs	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c26:	2500      	movs	r5, #0
 8000c28:	42a5      	cmp	r5, r4
 8000c2a:	db01      	blt.n	8000c30 <_read+0x10>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 8000c2c:	0020      	movs	r0, r4
 8000c2e:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 8000c30:	e000      	b.n	8000c34 <_read+0x14>
 8000c32:	bf00      	nop
 8000c34:	5570      	strb	r0, [r6, r5]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c36:	3501      	adds	r5, #1
 8000c38:	e7f6      	b.n	8000c28 <_read+0x8>

08000c3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c3a:	b570      	push	{r4, r5, r6, lr}
 8000c3c:	000e      	movs	r6, r1
 8000c3e:	0014      	movs	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c40:	2500      	movs	r5, #0
 8000c42:	42a5      	cmp	r5, r4
 8000c44:	db01      	blt.n	8000c4a <_write+0x10>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 8000c46:	0020      	movs	r0, r4
 8000c48:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 8000c4a:	5d70      	ldrb	r0, [r6, r5]
 8000c4c:	e000      	b.n	8000c50 <_write+0x16>
 8000c4e:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c50:	3501      	adds	r5, #1
 8000c52:	e7f6      	b.n	8000c42 <_write+0x8>

08000c54 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
 8000c54:	2001      	movs	r0, #1
}
 8000c56:	4240      	negs	r0, r0
 8000c58:	4770      	bx	lr

08000c5a <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8000c5a:	2380      	movs	r3, #128	@ 0x80
 8000c5c:	019b      	lsls	r3, r3, #6
  return 0;
}
 8000c5e:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8000c60:	604b      	str	r3, [r1, #4]
}
 8000c62:	4770      	bx	lr

08000c64 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8000c64:	2001      	movs	r0, #1
 8000c66:	4770      	bx	lr

08000c68 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8000c68:	2000      	movs	r0, #0
 8000c6a:	4770      	bx	lr

08000c6c <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c6c:	490b      	ldr	r1, [pc, #44]	@ (8000c9c <_sbrk+0x30>)
 8000c6e:	4a0c      	ldr	r2, [pc, #48]	@ (8000ca0 <_sbrk+0x34>)
{
 8000c70:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c72:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c74:	490b      	ldr	r1, [pc, #44]	@ (8000ca4 <_sbrk+0x38>)
{
 8000c76:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8000c78:	6808      	ldr	r0, [r1, #0]
 8000c7a:	2800      	cmp	r0, #0
 8000c7c:	d101      	bne.n	8000c82 <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 8000c7e:	480a      	ldr	r0, [pc, #40]	@ (8000ca8 <_sbrk+0x3c>)
 8000c80:	6008      	str	r0, [r1, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c82:	6808      	ldr	r0, [r1, #0]
 8000c84:	18c3      	adds	r3, r0, r3
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d906      	bls.n	8000c98 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 8000c8a:	f003 fc87 	bl	800459c <__errno>
 8000c8e:	230c      	movs	r3, #12
 8000c90:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000c92:	2001      	movs	r0, #1
 8000c94:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8000c96:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8000c98:	600b      	str	r3, [r1, #0]
  return (void *)prev_heap_end;
 8000c9a:	e7fc      	b.n	8000c96 <_sbrk+0x2a>
 8000c9c:	00000400 	.word	0x00000400
 8000ca0:	20002000 	.word	0x20002000
 8000ca4:	2000032c 	.word	0x2000032c
 8000ca8:	20000600 	.word	0x20000600

08000cac <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cac:	4770      	bx	lr
	...

08000cb0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cb0:	480d      	ldr	r0, [pc, #52]	@ (8000ce8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cb2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cb4:	f7ff fffa 	bl	8000cac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cb8:	480c      	ldr	r0, [pc, #48]	@ (8000cec <LoopForever+0x6>)
  ldr r1, =_edata
 8000cba:	490d      	ldr	r1, [pc, #52]	@ (8000cf0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cbc:	4a0d      	ldr	r2, [pc, #52]	@ (8000cf4 <LoopForever+0xe>)
  movs r3, #0
 8000cbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc0:	e002      	b.n	8000cc8 <LoopCopyDataInit>

08000cc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cc6:	3304      	adds	r3, #4

08000cc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ccc:	d3f9      	bcc.n	8000cc2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cce:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cd0:	4c0a      	ldr	r4, [pc, #40]	@ (8000cfc <LoopForever+0x16>)
  movs r3, #0
 8000cd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd4:	e001      	b.n	8000cda <LoopFillZerobss>

08000cd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd8:	3204      	adds	r2, #4

08000cda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cdc:	d3fb      	bcc.n	8000cd6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cde:	f003 fc63 	bl	80045a8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000ce2:	f7ff fd1f 	bl	8000724 <main>

08000ce6 <LoopForever>:

LoopForever:
  b LoopForever
 8000ce6:	e7fe      	b.n	8000ce6 <LoopForever>
  ldr   r0, =_estack
 8000ce8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000cec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf0:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 8000cf4:	08005728 	.word	0x08005728
  ldr r2, =_sbss
 8000cf8:	200000ec 	.word	0x200000ec
  ldr r4, =_ebss
 8000cfc:	20000600 	.word	0x20000600

08000d00 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d00:	e7fe      	b.n	8000d00 <ADC1_IRQHandler>
	...

08000d04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d04:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000d06:	4b10      	ldr	r3, [pc, #64]	@ (8000d48 <HAL_InitTick+0x44>)
{
 8000d08:	0005      	movs	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 8000d0a:	7819      	ldrb	r1, [r3, #0]
 8000d0c:	2900      	cmp	r1, #0
 8000d0e:	d101      	bne.n	8000d14 <HAL_InitTick+0x10>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d10:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 8000d12:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000d14:	20fa      	movs	r0, #250	@ 0xfa
 8000d16:	0080      	lsls	r0, r0, #2
 8000d18:	f7ff fa08 	bl	800012c <__udivsi3>
 8000d1c:	4c0b      	ldr	r4, [pc, #44]	@ (8000d4c <HAL_InitTick+0x48>)
 8000d1e:	0001      	movs	r1, r0
 8000d20:	6820      	ldr	r0, [r4, #0]
 8000d22:	f7ff fa03 	bl	800012c <__udivsi3>
 8000d26:	f000 f871 	bl	8000e0c <HAL_SYSTICK_Config>
 8000d2a:	1e04      	subs	r4, r0, #0
 8000d2c:	d1f0      	bne.n	8000d10 <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d2e:	2d03      	cmp	r5, #3
 8000d30:	d8ee      	bhi.n	8000d10 <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d32:	0002      	movs	r2, r0
 8000d34:	2001      	movs	r0, #1
 8000d36:	0029      	movs	r1, r5
 8000d38:	4240      	negs	r0, r0
 8000d3a:	f000 f831 	bl	8000da0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d3e:	4b04      	ldr	r3, [pc, #16]	@ (8000d50 <HAL_InitTick+0x4c>)
 8000d40:	0020      	movs	r0, r4
 8000d42:	601d      	str	r5, [r3, #0]
  return status;
 8000d44:	e7e5      	b.n	8000d12 <HAL_InitTick+0xe>
 8000d46:	46c0      	nop			@ (mov r8, r8)
 8000d48:	20000004 	.word	0x20000004
 8000d4c:	20000000 	.word	0x20000000
 8000d50:	20000008 	.word	0x20000008

08000d54 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d54:	2380      	movs	r3, #128	@ 0x80
 8000d56:	4a08      	ldr	r2, [pc, #32]	@ (8000d78 <HAL_Init+0x24>)
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	6811      	ldr	r1, [r2, #0]
{
 8000d5c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d5e:	430b      	orrs	r3, r1
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d60:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d62:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d64:	f7ff ffce 	bl	8000d04 <HAL_InitTick>
 8000d68:	1e04      	subs	r4, r0, #0
 8000d6a:	d103      	bne.n	8000d74 <HAL_Init+0x20>
  HAL_MspInit();
 8000d6c:	f7ff fe62 	bl	8000a34 <HAL_MspInit>
}
 8000d70:	0020      	movs	r0, r4
 8000d72:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000d74:	2401      	movs	r4, #1
 8000d76:	e7fb      	b.n	8000d70 <HAL_Init+0x1c>
 8000d78:	40022000 	.word	0x40022000

08000d7c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000d7c:	4a03      	ldr	r2, [pc, #12]	@ (8000d8c <HAL_IncTick+0x10>)
 8000d7e:	4b04      	ldr	r3, [pc, #16]	@ (8000d90 <HAL_IncTick+0x14>)
 8000d80:	6811      	ldr	r1, [r2, #0]
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	185b      	adds	r3, r3, r1
 8000d86:	6013      	str	r3, [r2, #0]
}
 8000d88:	4770      	bx	lr
 8000d8a:	46c0      	nop			@ (mov r8, r8)
 8000d8c:	20000330 	.word	0x20000330
 8000d90:	20000004 	.word	0x20000004

08000d94 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000d94:	4b01      	ldr	r3, [pc, #4]	@ (8000d9c <HAL_GetTick+0x8>)
 8000d96:	6818      	ldr	r0, [r3, #0]
}
 8000d98:	4770      	bx	lr
 8000d9a:	46c0      	nop			@ (mov r8, r8)
 8000d9c:	20000330 	.word	0x20000330

08000da0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da0:	b510      	push	{r4, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000da2:	24ff      	movs	r4, #255	@ 0xff
 8000da4:	2203      	movs	r2, #3
 8000da6:	000b      	movs	r3, r1
 8000da8:	0021      	movs	r1, r4
 8000daa:	4002      	ands	r2, r0
 8000dac:	00d2      	lsls	r2, r2, #3
 8000dae:	4091      	lsls	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000db0:	019b      	lsls	r3, r3, #6
 8000db2:	4023      	ands	r3, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000db4:	43c9      	mvns	r1, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000db6:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
 8000db8:	2800      	cmp	r0, #0
 8000dba:	db0a      	blt.n	8000dd2 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dbc:	24c0      	movs	r4, #192	@ 0xc0
 8000dbe:	4a0b      	ldr	r2, [pc, #44]	@ (8000dec <HAL_NVIC_SetPriority+0x4c>)
 8000dc0:	0880      	lsrs	r0, r0, #2
 8000dc2:	0080      	lsls	r0, r0, #2
 8000dc4:	1880      	adds	r0, r0, r2
 8000dc6:	00a4      	lsls	r4, r4, #2
 8000dc8:	5902      	ldr	r2, [r0, r4]
 8000dca:	400a      	ands	r2, r1
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	5103      	str	r3, [r0, r4]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 8000dd0:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dd2:	220f      	movs	r2, #15
 8000dd4:	4010      	ands	r0, r2
 8000dd6:	3808      	subs	r0, #8
 8000dd8:	4a05      	ldr	r2, [pc, #20]	@ (8000df0 <HAL_NVIC_SetPriority+0x50>)
 8000dda:	0880      	lsrs	r0, r0, #2
 8000ddc:	0080      	lsls	r0, r0, #2
 8000dde:	1880      	adds	r0, r0, r2
 8000de0:	69c2      	ldr	r2, [r0, #28]
 8000de2:	4011      	ands	r1, r2
 8000de4:	4319      	orrs	r1, r3
 8000de6:	61c1      	str	r1, [r0, #28]
 8000de8:	e7f2      	b.n	8000dd0 <HAL_NVIC_SetPriority+0x30>
 8000dea:	46c0      	nop			@ (mov r8, r8)
 8000dec:	e000e100 	.word	0xe000e100
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000df4:	2800      	cmp	r0, #0
 8000df6:	db05      	blt.n	8000e04 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000df8:	231f      	movs	r3, #31
 8000dfa:	4018      	ands	r0, r3
 8000dfc:	3b1e      	subs	r3, #30
 8000dfe:	4083      	lsls	r3, r0
 8000e00:	4a01      	ldr	r2, [pc, #4]	@ (8000e08 <HAL_NVIC_EnableIRQ+0x14>)
 8000e02:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000e04:	4770      	bx	lr
 8000e06:	46c0      	nop			@ (mov r8, r8)
 8000e08:	e000e100 	.word	0xe000e100

08000e0c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e0c:	2280      	movs	r2, #128	@ 0x80
 8000e0e:	1e43      	subs	r3, r0, #1
 8000e10:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e12:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d20d      	bcs.n	8000e34 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e18:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e1a:	4a07      	ldr	r2, [pc, #28]	@ (8000e38 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e1c:	4807      	ldr	r0, [pc, #28]	@ (8000e3c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e1e:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e20:	6a03      	ldr	r3, [r0, #32]
 8000e22:	0609      	lsls	r1, r1, #24
 8000e24:	021b      	lsls	r3, r3, #8
 8000e26:	0a1b      	lsrs	r3, r3, #8
 8000e28:	430b      	orrs	r3, r1
 8000e2a:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e2c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e2e:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e30:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e32:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8000e34:	4770      	bx	lr
 8000e36:	46c0      	nop			@ (mov r8, r8)
 8000e38:	e000e010 	.word	0xe000e010
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e40:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000e42:	2800      	cmp	r0, #0
 8000e44:	d008      	beq.n	8000e58 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000e46:	1d84      	adds	r4, r0, #6
 8000e48:	7fe3      	ldrb	r3, [r4, #31]
 8000e4a:	1d41      	adds	r1, r0, #5
 8000e4c:	2b02      	cmp	r3, #2
 8000e4e:	d005      	beq.n	8000e5c <HAL_DMA_Abort+0x1c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e50:	2304      	movs	r3, #4
 8000e52:	63c3      	str	r3, [r0, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e54:	2300      	movs	r3, #0
 8000e56:	77cb      	strb	r3, [r1, #31]
    return HAL_ERROR;
 8000e58:	2001      	movs	r0, #1
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
  }

  return HAL_OK;
}
 8000e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e5c:	250e      	movs	r5, #14
 8000e5e:	6802      	ldr	r2, [r0, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000e60:	6c46      	ldr	r6, [r0, #68]	@ 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e62:	6813      	ldr	r3, [r2, #0]
 8000e64:	43ab      	bics	r3, r5
 8000e66:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000e68:	6833      	ldr	r3, [r6, #0]
 8000e6a:	4d10      	ldr	r5, [pc, #64]	@ (8000eac <HAL_DMA_Abort+0x6c>)
 8000e6c:	402b      	ands	r3, r5
 8000e6e:	6033      	str	r3, [r6, #0]
    __HAL_DMA_DISABLE(hdma);
 8000e70:	2301      	movs	r3, #1
 8000e72:	6816      	ldr	r6, [r2, #0]
 8000e74:	439e      	bics	r6, r3
 8000e76:	6016      	str	r6, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8000e78:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8000e7a:	331b      	adds	r3, #27
 8000e7c:	401a      	ands	r2, r3
 8000e7e:	3b1b      	subs	r3, #27
 8000e80:	4093      	lsls	r3, r2
 8000e82:	4e0b      	ldr	r6, [pc, #44]	@ (8000eb0 <HAL_DMA_Abort+0x70>)
 8000e84:	6877      	ldr	r7, [r6, #4]
 8000e86:	433b      	orrs	r3, r7
 8000e88:	6073      	str	r3, [r6, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e8a:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8000e8c:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8000e8e:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8000e90:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d005      	beq.n	8000ea2 <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	402a      	ands	r2, r5
 8000e9a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e9c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8000e9e:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8000ea0:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000ea2:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 8000ea4:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 8000ea6:	77e3      	strb	r3, [r4, #31]
    __HAL_UNLOCK(hdma);
 8000ea8:	77c8      	strb	r0, [r1, #31]
  return HAL_OK;
 8000eaa:	e7d6      	b.n	8000e5a <HAL_DMA_Abort+0x1a>
 8000eac:	fffffeff 	.word	0xfffffeff
 8000eb0:	40020000 	.word	0x40020000

08000eb4 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000eb6:	1d81      	adds	r1, r0, #6
 8000eb8:	7fcb      	ldrb	r3, [r1, #31]
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d003      	beq.n	8000ec6 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ebe:	2304      	movs	r3, #4
 8000ec0:	63c3      	str	r3, [r0, #60]	@ 0x3c

    status = HAL_ERROR;
 8000ec2:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 8000ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ec6:	240e      	movs	r4, #14
 8000ec8:	6802      	ldr	r2, [r0, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8000eca:	271c      	movs	r7, #28
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ecc:	6813      	ldr	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000ece:	6c45      	ldr	r5, [r0, #68]	@ 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ed0:	43a3      	bics	r3, r4
 8000ed2:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	6814      	ldr	r4, [r2, #0]
 8000ed8:	439c      	bics	r4, r3
 8000eda:	6014      	str	r4, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000edc:	682a      	ldr	r2, [r5, #0]
 8000ede:	4c10      	ldr	r4, [pc, #64]	@ (8000f20 <HAL_DMA_Abort_IT+0x6c>)
 8000ee0:	4022      	ands	r2, r4
 8000ee2:	602a      	str	r2, [r5, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8000ee4:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8000ee6:	4d0f      	ldr	r5, [pc, #60]	@ (8000f24 <HAL_DMA_Abort_IT+0x70>)
 8000ee8:	403a      	ands	r2, r7
 8000eea:	4093      	lsls	r3, r2
 8000eec:	686e      	ldr	r6, [r5, #4]
 8000eee:	4333      	orrs	r3, r6
 8000ef0:	606b      	str	r3, [r5, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000ef2:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8000ef4:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8000ef6:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8000ef8:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d005      	beq.n	8000f0a <HAL_DMA_Abort_IT+0x56>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	4022      	ands	r2, r4
 8000f02:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f04:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8000f06:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8000f08:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000f0a:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 8000f0c:	2200      	movs	r2, #0
    hdma->State = HAL_DMA_STATE_READY;
 8000f0e:	77cb      	strb	r3, [r1, #31]
    __HAL_UNLOCK(hdma);
 8000f10:	1d43      	adds	r3, r0, #5
 8000f12:	77da      	strb	r2, [r3, #31]
    if (hdma->XferAbortCallback != NULL)
 8000f14:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d000      	beq.n	8000f1c <HAL_DMA_Abort_IT+0x68>
      hdma->XferAbortCallback(hdma);
 8000f1a:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	e7d1      	b.n	8000ec4 <HAL_DMA_Abort_IT+0x10>
 8000f20:	fffffeff 	.word	0xfffffeff
 8000f24:	40020000 	.word	0x40020000

08000f28 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 8000f28:	2300      	movs	r3, #0
{
 8000f2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f2c:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f2e:	680a      	ldr	r2, [r1, #0]
 8000f30:	0014      	movs	r4, r2
 8000f32:	40dc      	lsrs	r4, r3
 8000f34:	d101      	bne.n	8000f3a <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  }
}
 8000f36:	b005      	add	sp, #20
 8000f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f3a:	2501      	movs	r5, #1
 8000f3c:	0014      	movs	r4, r2
 8000f3e:	409d      	lsls	r5, r3
 8000f40:	402c      	ands	r4, r5
 8000f42:	9400      	str	r4, [sp, #0]
    if (iocurrent != 0x00u)
 8000f44:	422a      	tst	r2, r5
 8000f46:	d100      	bne.n	8000f4a <HAL_GPIO_Init+0x22>
 8000f48:	e091      	b.n	800106e <HAL_GPIO_Init+0x146>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f4a:	684a      	ldr	r2, [r1, #4]
 8000f4c:	005f      	lsls	r7, r3, #1
 8000f4e:	4694      	mov	ip, r2
 8000f50:	2203      	movs	r2, #3
 8000f52:	4664      	mov	r4, ip
 8000f54:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f56:	2403      	movs	r4, #3
 8000f58:	40bc      	lsls	r4, r7
 8000f5a:	43e4      	mvns	r4, r4
 8000f5c:	9401      	str	r4, [sp, #4]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f5e:	1e54      	subs	r4, r2, #1
 8000f60:	2c01      	cmp	r4, #1
 8000f62:	d82e      	bhi.n	8000fc2 <HAL_GPIO_Init+0x9a>
        temp = GPIOx->OSPEEDR;
 8000f64:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f66:	9c01      	ldr	r4, [sp, #4]
 8000f68:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f6a:	68cc      	ldr	r4, [r1, #12]
 8000f6c:	40bc      	lsls	r4, r7
 8000f6e:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8000f70:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8000f72:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f74:	2601      	movs	r6, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f76:	43ac      	bics	r4, r5
 8000f78:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f7a:	4664      	mov	r4, ip
 8000f7c:	0924      	lsrs	r4, r4, #4
 8000f7e:	4034      	ands	r4, r6
 8000f80:	409c      	lsls	r4, r3
 8000f82:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8000f84:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8000f86:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000f88:	9c01      	ldr	r4, [sp, #4]
 8000f8a:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f8c:	688c      	ldr	r4, [r1, #8]
 8000f8e:	40bc      	lsls	r4, r7
 8000f90:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8000f92:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f94:	2a02      	cmp	r2, #2
 8000f96:	d116      	bne.n	8000fc6 <HAL_GPIO_Init+0x9e>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f98:	2507      	movs	r5, #7
 8000f9a:	260f      	movs	r6, #15
 8000f9c:	401d      	ands	r5, r3
 8000f9e:	00ad      	lsls	r5, r5, #2
 8000fa0:	40ae      	lsls	r6, r5
        temp = GPIOx->AFR[position >> 3u];
 8000fa2:	08dc      	lsrs	r4, r3, #3
 8000fa4:	00a4      	lsls	r4, r4, #2
 8000fa6:	1904      	adds	r4, r0, r4
 8000fa8:	9402      	str	r4, [sp, #8]
 8000faa:	6a24      	ldr	r4, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fac:	9603      	str	r6, [sp, #12]
 8000fae:	0026      	movs	r6, r4
 8000fb0:	9c03      	ldr	r4, [sp, #12]
 8000fb2:	43a6      	bics	r6, r4
 8000fb4:	0034      	movs	r4, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fb6:	690e      	ldr	r6, [r1, #16]
 8000fb8:	40ae      	lsls	r6, r5
 8000fba:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3u] = temp;
 8000fbc:	9c02      	ldr	r4, [sp, #8]
 8000fbe:	6226      	str	r6, [r4, #32]
 8000fc0:	e001      	b.n	8000fc6 <HAL_GPIO_Init+0x9e>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fc2:	2a03      	cmp	r2, #3
 8000fc4:	d1df      	bne.n	8000f86 <HAL_GPIO_Init+0x5e>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fc6:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 8000fc8:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fca:	9d01      	ldr	r5, [sp, #4]
 8000fcc:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fce:	432a      	orrs	r2, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fd0:	24c0      	movs	r4, #192	@ 0xc0
      GPIOx->MODER = temp;
 8000fd2:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fd4:	4662      	mov	r2, ip
 8000fd6:	02a4      	lsls	r4, r4, #10
 8000fd8:	4222      	tst	r2, r4
 8000fda:	d048      	beq.n	800106e <HAL_GPIO_Init+0x146>
        temp = EXTI->EXTICR[position >> 2u];
 8000fdc:	4a25      	ldr	r2, [pc, #148]	@ (8001074 <HAL_GPIO_Init+0x14c>)
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000fde:	2503      	movs	r5, #3
        temp = EXTI->EXTICR[position >> 2u];
 8000fe0:	089c      	lsrs	r4, r3, #2
 8000fe2:	00a4      	lsls	r4, r4, #2
 8000fe4:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000fe6:	220f      	movs	r2, #15
 8000fe8:	401d      	ands	r5, r3
 8000fea:	00ed      	lsls	r5, r5, #3
 8000fec:	40aa      	lsls	r2, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000fee:	27a0      	movs	r7, #160	@ 0xa0
        temp = EXTI->EXTICR[position >> 2u];
 8000ff0:	6e26      	ldr	r6, [r4, #96]	@ 0x60
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000ff2:	05ff      	lsls	r7, r7, #23
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000ff4:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	42b8      	cmp	r0, r7
 8000ffa:	d00c      	beq.n	8001016 <HAL_GPIO_Init+0xee>
 8000ffc:	4f1e      	ldr	r7, [pc, #120]	@ (8001078 <HAL_GPIO_Init+0x150>)
 8000ffe:	3201      	adds	r2, #1
 8001000:	42b8      	cmp	r0, r7
 8001002:	d008      	beq.n	8001016 <HAL_GPIO_Init+0xee>
 8001004:	4f1d      	ldr	r7, [pc, #116]	@ (800107c <HAL_GPIO_Init+0x154>)
 8001006:	3201      	adds	r2, #1
 8001008:	42b8      	cmp	r0, r7
 800100a:	d004      	beq.n	8001016 <HAL_GPIO_Init+0xee>
 800100c:	4f1c      	ldr	r7, [pc, #112]	@ (8001080 <HAL_GPIO_Init+0x158>)
 800100e:	3203      	adds	r2, #3
 8001010:	42b8      	cmp	r0, r7
 8001012:	d100      	bne.n	8001016 <HAL_GPIO_Init+0xee>
 8001014:	3a02      	subs	r2, #2
 8001016:	40aa      	lsls	r2, r5
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001018:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800101a:	4332      	orrs	r2, r6
        EXTI->EXTICR[position >> 2u] = temp;
 800101c:	6622      	str	r2, [r4, #96]	@ 0x60
        temp = EXTI->RTSR1;
 800101e:	4c15      	ldr	r4, [pc, #84]	@ (8001074 <HAL_GPIO_Init+0x14c>)
        temp &= ~(iocurrent);
 8001020:	9a00      	ldr	r2, [sp, #0]
        temp = EXTI->RTSR1;
 8001022:	6826      	ldr	r6, [r4, #0]
          temp |= iocurrent;
 8001024:	9d00      	ldr	r5, [sp, #0]
        temp &= ~(iocurrent);
 8001026:	43d2      	mvns	r2, r2
          temp |= iocurrent;
 8001028:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800102a:	02ff      	lsls	r7, r7, #11
 800102c:	d401      	bmi.n	8001032 <HAL_GPIO_Init+0x10a>
        temp &= ~(iocurrent);
 800102e:	0035      	movs	r5, r6
 8001030:	4015      	ands	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001032:	4667      	mov	r7, ip
        EXTI->RTSR1 = temp;
 8001034:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 8001036:	6866      	ldr	r6, [r4, #4]
          temp |= iocurrent;
 8001038:	9d00      	ldr	r5, [sp, #0]
 800103a:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800103c:	02bf      	lsls	r7, r7, #10
 800103e:	d401      	bmi.n	8001044 <HAL_GPIO_Init+0x11c>
        temp &= ~(iocurrent);
 8001040:	0035      	movs	r5, r6
 8001042:	4015      	ands	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001044:	4667      	mov	r7, ip
        EXTI->FTSR1 = temp;
 8001046:	6065      	str	r5, [r4, #4]
        temp = EXTI->EMR1;
 8001048:	4c0e      	ldr	r4, [pc, #56]	@ (8001084 <HAL_GPIO_Init+0x15c>)
          temp |= iocurrent;
 800104a:	9d00      	ldr	r5, [sp, #0]
        temp = EXTI->EMR1;
 800104c:	6fe6      	ldr	r6, [r4, #124]	@ 0x7c
          temp |= iocurrent;
 800104e:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001050:	03bf      	lsls	r7, r7, #14
 8001052:	d401      	bmi.n	8001058 <HAL_GPIO_Init+0x130>
        temp &= ~(iocurrent);
 8001054:	0035      	movs	r5, r6
 8001056:	4015      	ands	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001058:	4667      	mov	r7, ip
        EXTI->EMR1 = temp;
 800105a:	67e5      	str	r5, [r4, #124]	@ 0x7c
        temp = EXTI->IMR1;
 800105c:	4c0a      	ldr	r4, [pc, #40]	@ (8001088 <HAL_GPIO_Init+0x160>)
          temp |= iocurrent;
 800105e:	9e00      	ldr	r6, [sp, #0]
        temp = EXTI->IMR1;
 8001060:	6fe5      	ldr	r5, [r4, #124]	@ 0x7c
          temp |= iocurrent;
 8001062:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001064:	03ff      	lsls	r7, r7, #15
 8001066:	d401      	bmi.n	800106c <HAL_GPIO_Init+0x144>
        temp &= ~(iocurrent);
 8001068:	4015      	ands	r5, r2
 800106a:	002e      	movs	r6, r5
        EXTI->IMR1 = temp;
 800106c:	67e6      	str	r6, [r4, #124]	@ 0x7c
    position++;
 800106e:	3301      	adds	r3, #1
 8001070:	e75d      	b.n	8000f2e <HAL_GPIO_Init+0x6>
 8001072:	46c0      	nop			@ (mov r8, r8)
 8001074:	40021800 	.word	0x40021800
 8001078:	50000400 	.word	0x50000400
 800107c:	50000800 	.word	0x50000800
 8001080:	50000c00 	.word	0x50000c00
 8001084:	40021808 	.word	0x40021808
 8001088:	40021804 	.word	0x40021804

0800108c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800108c:	2a00      	cmp	r2, #0
 800108e:	d001      	beq.n	8001094 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001090:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001092:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001094:	6281      	str	r1, [r0, #40]	@ 0x28
}
 8001096:	e7fc      	b.n	8001092 <HAL_GPIO_WritePin+0x6>

08001098 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001098:	b570      	push	{r4, r5, r6, lr}
 800109a:	0004      	movs	r4, r0
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
  {
    return HAL_ERROR;
 800109c:	2001      	movs	r0, #1
  if (hi2c == NULL)
 800109e:	2c00      	cmp	r4, #0
 80010a0:	d04e      	beq.n	8001140 <HAL_I2C_Init+0xa8>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010a2:	0025      	movs	r5, r4
 80010a4:	3541      	adds	r5, #65	@ 0x41
 80010a6:	782b      	ldrb	r3, [r5, #0]
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d105      	bne.n	80010ba <HAL_I2C_Init+0x22>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010ae:	0023      	movs	r3, r4
 80010b0:	3340      	adds	r3, #64	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80010b2:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 80010b4:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 80010b6:	f7ff fcd5 	bl	8000a64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010ba:	2324      	movs	r3, #36	@ 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010bc:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 80010be:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 80010c0:	6823      	ldr	r3, [r4, #0]
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80010c2:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 80010c4:	681a      	ldr	r2, [r3, #0]
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80010c6:	68a6      	ldr	r6, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 80010c8:	438a      	bics	r2, r1
 80010ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80010cc:	491d      	ldr	r1, [pc, #116]	@ (8001144 <HAL_I2C_Init+0xac>)
 80010ce:	6862      	ldr	r2, [r4, #4]
 80010d0:	400a      	ands	r2, r1
 80010d2:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80010d4:	689a      	ldr	r2, [r3, #8]
 80010d6:	491c      	ldr	r1, [pc, #112]	@ (8001148 <HAL_I2C_Init+0xb0>)
 80010d8:	400a      	ands	r2, r1
 80010da:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80010dc:	2801      	cmp	r0, #1
 80010de:	d107      	bne.n	80010f0 <HAL_I2C_Init+0x58>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80010e0:	2280      	movs	r2, #128	@ 0x80
 80010e2:	0212      	lsls	r2, r2, #8
 80010e4:	4332      	orrs	r2, r6
 80010e6:	609a      	str	r2, [r3, #8]
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80010e8:	685a      	ldr	r2, [r3, #4]
 80010ea:	4818      	ldr	r0, [pc, #96]	@ (800114c <HAL_I2C_Init+0xb4>)
 80010ec:	4002      	ands	r2, r0
 80010ee:	e009      	b.n	8001104 <HAL_I2C_Init+0x6c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80010f0:	2284      	movs	r2, #132	@ 0x84
 80010f2:	0212      	lsls	r2, r2, #8
 80010f4:	4332      	orrs	r2, r6
 80010f6:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80010f8:	2802      	cmp	r0, #2
 80010fa:	d1f5      	bne.n	80010e8 <HAL_I2C_Init+0x50>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80010fc:	2280      	movs	r2, #128	@ 0x80
 80010fe:	6858      	ldr	r0, [r3, #4]
 8001100:	0112      	lsls	r2, r2, #4
 8001102:	4302      	orrs	r2, r0
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001104:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001106:	6858      	ldr	r0, [r3, #4]
 8001108:	4a11      	ldr	r2, [pc, #68]	@ (8001150 <HAL_I2C_Init+0xb8>)
 800110a:	4302      	orrs	r2, r0
 800110c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800110e:	68da      	ldr	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001110:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001112:	400a      	ands	r2, r1
 8001114:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001116:	6961      	ldr	r1, [r4, #20]
 8001118:	6922      	ldr	r2, [r4, #16]
 800111a:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 800111c:	69a1      	ldr	r1, [r4, #24]
 800111e:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001120:	430a      	orrs	r2, r1
 8001122:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001124:	6a21      	ldr	r1, [r4, #32]
 8001126:	69e2      	ldr	r2, [r4, #28]
 8001128:	430a      	orrs	r2, r1
 800112a:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800112c:	2201      	movs	r2, #1
 800112e:	6819      	ldr	r1, [r3, #0]
 8001130:	430a      	orrs	r2, r1
 8001132:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8001134:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001136:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001138:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 800113a:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800113c:	3442      	adds	r4, #66	@ 0x42
 800113e:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8001140:	bd70      	pop	{r4, r5, r6, pc}
 8001142:	46c0      	nop			@ (mov r8, r8)
 8001144:	f0ffffff 	.word	0xf0ffffff
 8001148:	ffff7fff 	.word	0xffff7fff
 800114c:	fffff7ff 	.word	0xfffff7ff
 8001150:	02008000 	.word	0x02008000

08001154 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001154:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001156:	0004      	movs	r4, r0
 8001158:	3441      	adds	r4, #65	@ 0x41
 800115a:	7822      	ldrb	r2, [r4, #0]
{
 800115c:	0003      	movs	r3, r0
 800115e:	000f      	movs	r7, r1
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001160:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001162:	b2d6      	uxtb	r6, r2
 8001164:	2a20      	cmp	r2, #32
 8001166:	d118      	bne.n	800119a <HAL_I2CEx_ConfigAnalogFilter+0x46>
    __HAL_LOCK(hi2c);
 8001168:	001d      	movs	r5, r3
 800116a:	3540      	adds	r5, #64	@ 0x40
 800116c:	782a      	ldrb	r2, [r5, #0]
 800116e:	2a01      	cmp	r2, #1
 8001170:	d013      	beq.n	800119a <HAL_I2CEx_ConfigAnalogFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001172:	2224      	movs	r2, #36	@ 0x24
 8001174:	7022      	strb	r2, [r4, #0]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	3a23      	subs	r2, #35	@ 0x23
 800117a:	6819      	ldr	r1, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800117c:	4807      	ldr	r0, [pc, #28]	@ (800119c <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 800117e:	4391      	bics	r1, r2
 8001180:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001182:	6819      	ldr	r1, [r3, #0]
 8001184:	4001      	ands	r1, r0
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001186:	2000      	movs	r0, #0
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001188:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 800118a:	6819      	ldr	r1, [r3, #0]
 800118c:	4339      	orrs	r1, r7
 800118e:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8001190:	6819      	ldr	r1, [r3, #0]
 8001192:	430a      	orrs	r2, r1
 8001194:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001196:	7026      	strb	r6, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8001198:	7028      	strb	r0, [r5, #0]
  }
  else
  {
    return HAL_BUSY;
  }
}
 800119a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800119c:	ffffefff 	.word	0xffffefff

080011a0 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011a0:	0002      	movs	r2, r0
{
 80011a2:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80011a4:	3241      	adds	r2, #65	@ 0x41
 80011a6:	7814      	ldrb	r4, [r2, #0]
{
 80011a8:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80011aa:	b2e5      	uxtb	r5, r4
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011ac:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80011ae:	2c20      	cmp	r4, #32
 80011b0:	d117      	bne.n	80011e2 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 80011b2:	001c      	movs	r4, r3
 80011b4:	3440      	adds	r4, #64	@ 0x40
 80011b6:	7826      	ldrb	r6, [r4, #0]
 80011b8:	2e01      	cmp	r6, #1
 80011ba:	d012      	beq.n	80011e2 <HAL_I2CEx_ConfigDigitalFilter+0x42>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80011bc:	3022      	adds	r0, #34	@ 0x22
 80011be:	7010      	strb	r0, [r2, #0]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	3823      	subs	r0, #35	@ 0x23
 80011c4:	681e      	ldr	r6, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80011c6:	4f07      	ldr	r7, [pc, #28]	@ (80011e4 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    __HAL_I2C_DISABLE(hi2c);
 80011c8:	4386      	bics	r6, r0
 80011ca:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 80011cc:	681e      	ldr	r6, [r3, #0]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80011ce:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 80011d0:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 80011d2:	4331      	orrs	r1, r6

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80011d4:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80011d6:	6819      	ldr	r1, [r3, #0]
 80011d8:	4308      	orrs	r0, r1
 80011da:	6018      	str	r0, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011dc:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80011de:	7015      	strb	r5, [r2, #0]
    __HAL_UNLOCK(hi2c);
 80011e0:	7020      	strb	r0, [r4, #0]
  }
  else
  {
    return HAL_BUSY;
  }
}
 80011e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011e4:	fffff0ff 	.word	0xfffff0ff

080011e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011e8:	b510      	push	{r4, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80011ea:	4c11      	ldr	r4, [pc, #68]	@ (8001230 <HAL_PWREx_ControlVoltageScaling+0x48>)
 80011ec:	4911      	ldr	r1, [pc, #68]	@ (8001234 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 80011ee:	6823      	ldr	r3, [r4, #0]
{
 80011f0:	0002      	movs	r2, r0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80011f2:	400b      	ands	r3, r1
 80011f4:	4303      	orrs	r3, r0
 80011f6:	6023      	str	r3, [r4, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011f8:	2380      	movs	r3, #128	@ 0x80
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80011fa:	2000      	movs	r0, #0
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	429a      	cmp	r2, r3
 8001200:	d10e      	bne.n	8001220 <HAL_PWREx_ControlVoltageScaling+0x38>
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001202:	4b0d      	ldr	r3, [pc, #52]	@ (8001238 <HAL_PWREx_ControlVoltageScaling+0x50>)
 8001204:	490d      	ldr	r1, [pc, #52]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0x54>)
 8001206:	6818      	ldr	r0, [r3, #0]
 8001208:	2306      	movs	r3, #6
 800120a:	4358      	muls	r0, r3
 800120c:	f7fe ff8e 	bl	800012c <__udivsi3>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001210:	2280      	movs	r2, #128	@ 0x80
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001212:	1c43      	adds	r3, r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001214:	00d2      	lsls	r2, r2, #3
 8001216:	6961      	ldr	r1, [r4, #20]
 8001218:	0008      	movs	r0, r1
 800121a:	4010      	ands	r0, r2
 800121c:	4211      	tst	r1, r2
 800121e:	d100      	bne.n	8001222 <HAL_PWREx_ControlVoltageScaling+0x3a>
}
 8001220:	bd10      	pop	{r4, pc}
      if (wait_loop_index != 0U)
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <HAL_PWREx_ControlVoltageScaling+0x42>
        wait_loop_index--;
 8001226:	3b01      	subs	r3, #1
 8001228:	e7f5      	b.n	8001216 <HAL_PWREx_ControlVoltageScaling+0x2e>
        return HAL_TIMEOUT;
 800122a:	2003      	movs	r0, #3
 800122c:	e7f8      	b.n	8001220 <HAL_PWREx_ControlVoltageScaling+0x38>
 800122e:	46c0      	nop			@ (mov r8, r8)
 8001230:	40007000 	.word	0x40007000
 8001234:	fffff9ff 	.word	0xfffff9ff
 8001238:	20000000 	.word	0x20000000
 800123c:	000f4240 	.word	0x000f4240

08001240 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001242:	0004      	movs	r4, r0
 8001244:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001246:	2800      	cmp	r0, #0
 8001248:	d102      	bne.n	8001250 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 800124a:	2001      	movs	r0, #1
        }
      }
    }
  }
  return HAL_OK;
}
 800124c:	b005      	add	sp, #20
 800124e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001250:	6803      	ldr	r3, [r0, #0]
 8001252:	07db      	lsls	r3, r3, #31
 8001254:	d410      	bmi.n	8001278 <HAL_RCC_OscConfig+0x38>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001256:	6823      	ldr	r3, [r4, #0]
 8001258:	079b      	lsls	r3, r3, #30
 800125a:	d45c      	bmi.n	8001316 <HAL_RCC_OscConfig+0xd6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800125c:	6823      	ldr	r3, [r4, #0]
 800125e:	071b      	lsls	r3, r3, #28
 8001260:	d500      	bpl.n	8001264 <HAL_RCC_OscConfig+0x24>
 8001262:	e0c1      	b.n	80013e8 <HAL_RCC_OscConfig+0x1a8>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001264:	6823      	ldr	r3, [r4, #0]
 8001266:	075b      	lsls	r3, r3, #29
 8001268:	d500      	bpl.n	800126c <HAL_RCC_OscConfig+0x2c>
 800126a:	e0f2      	b.n	8001452 <HAL_RCC_OscConfig+0x212>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800126c:	69e3      	ldr	r3, [r4, #28]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d000      	beq.n	8001274 <HAL_RCC_OscConfig+0x34>
 8001272:	e179      	b.n	8001568 <HAL_RCC_OscConfig+0x328>
  return HAL_OK;
 8001274:	2000      	movs	r0, #0
 8001276:	e7e9      	b.n	800124c <HAL_RCC_OscConfig+0xc>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001278:	2238      	movs	r2, #56	@ 0x38
 800127a:	4daf      	ldr	r5, [pc, #700]	@ (8001538 <HAL_RCC_OscConfig+0x2f8>)
 800127c:	68ab      	ldr	r3, [r5, #8]
 800127e:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001280:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001282:	2b10      	cmp	r3, #16
 8001284:	d109      	bne.n	800129a <HAL_RCC_OscConfig+0x5a>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001286:	43d3      	mvns	r3, r2
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001288:	079b      	lsls	r3, r3, #30
 800128a:	d108      	bne.n	800129e <HAL_RCC_OscConfig+0x5e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800128c:	682b      	ldr	r3, [r5, #0]
 800128e:	039b      	lsls	r3, r3, #14
 8001290:	d5e1      	bpl.n	8001256 <HAL_RCC_OscConfig+0x16>
 8001292:	6863      	ldr	r3, [r4, #4]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d1de      	bne.n	8001256 <HAL_RCC_OscConfig+0x16>
 8001298:	e7d7      	b.n	800124a <HAL_RCC_OscConfig+0xa>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800129a:	2b08      	cmp	r3, #8
 800129c:	d0f6      	beq.n	800128c <HAL_RCC_OscConfig+0x4c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800129e:	2280      	movs	r2, #128	@ 0x80
 80012a0:	6863      	ldr	r3, [r4, #4]
 80012a2:	0252      	lsls	r2, r2, #9
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d111      	bne.n	80012cc <HAL_RCC_OscConfig+0x8c>
 80012a8:	682a      	ldr	r2, [r5, #0]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80012ae:	f7ff fd71 	bl	8000d94 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012b2:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 80012b4:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012b6:	02bf      	lsls	r7, r7, #10
 80012b8:	682b      	ldr	r3, [r5, #0]
 80012ba:	423b      	tst	r3, r7
 80012bc:	d1cb      	bne.n	8001256 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012be:	f7ff fd69 	bl	8000d94 <HAL_GetTick>
 80012c2:	1b80      	subs	r0, r0, r6
 80012c4:	2864      	cmp	r0, #100	@ 0x64
 80012c6:	d9f7      	bls.n	80012b8 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 80012c8:	2003      	movs	r0, #3
 80012ca:	e7bf      	b.n	800124c <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012cc:	21a0      	movs	r1, #160	@ 0xa0
 80012ce:	02c9      	lsls	r1, r1, #11
 80012d0:	428b      	cmp	r3, r1
 80012d2:	d108      	bne.n	80012e6 <HAL_RCC_OscConfig+0xa6>
 80012d4:	2380      	movs	r3, #128	@ 0x80
 80012d6:	6829      	ldr	r1, [r5, #0]
 80012d8:	02db      	lsls	r3, r3, #11
 80012da:	430b      	orrs	r3, r1
 80012dc:	602b      	str	r3, [r5, #0]
 80012de:	682b      	ldr	r3, [r5, #0]
 80012e0:	431a      	orrs	r2, r3
 80012e2:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012e4:	e7e3      	b.n	80012ae <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012e6:	682a      	ldr	r2, [r5, #0]
 80012e8:	4994      	ldr	r1, [pc, #592]	@ (800153c <HAL_RCC_OscConfig+0x2fc>)
 80012ea:	400a      	ands	r2, r1
 80012ec:	602a      	str	r2, [r5, #0]
 80012ee:	682a      	ldr	r2, [r5, #0]
 80012f0:	4993      	ldr	r1, [pc, #588]	@ (8001540 <HAL_RCC_OscConfig+0x300>)
 80012f2:	400a      	ands	r2, r1
 80012f4:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d1d9      	bne.n	80012ae <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 80012fa:	f7ff fd4b 	bl	8000d94 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012fe:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8001300:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001302:	02bf      	lsls	r7, r7, #10
 8001304:	682b      	ldr	r3, [r5, #0]
 8001306:	423b      	tst	r3, r7
 8001308:	d0a5      	beq.n	8001256 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800130a:	f7ff fd43 	bl	8000d94 <HAL_GetTick>
 800130e:	1b80      	subs	r0, r0, r6
 8001310:	2864      	cmp	r0, #100	@ 0x64
 8001312:	d9f7      	bls.n	8001304 <HAL_RCC_OscConfig+0xc4>
 8001314:	e7d8      	b.n	80012c8 <HAL_RCC_OscConfig+0x88>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001316:	2238      	movs	r2, #56	@ 0x38
 8001318:	4d87      	ldr	r5, [pc, #540]	@ (8001538 <HAL_RCC_OscConfig+0x2f8>)
 800131a:	68ab      	ldr	r3, [r5, #8]
 800131c:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800131e:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001320:	2b10      	cmp	r3, #16
 8001322:	d128      	bne.n	8001376 <HAL_RCC_OscConfig+0x136>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001324:	2103      	movs	r1, #3
 8001326:	400a      	ands	r2, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001328:	2a02      	cmp	r2, #2
 800132a:	d126      	bne.n	800137a <HAL_RCC_OscConfig+0x13a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800132c:	682a      	ldr	r2, [r5, #0]
 800132e:	0552      	lsls	r2, r2, #21
 8001330:	d503      	bpl.n	800133a <HAL_RCC_OscConfig+0xfa>
 8001332:	68e2      	ldr	r2, [r4, #12]
 8001334:	2a00      	cmp	r2, #0
 8001336:	d100      	bne.n	800133a <HAL_RCC_OscConfig+0xfa>
 8001338:	e787      	b.n	800124a <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800133a:	6869      	ldr	r1, [r5, #4]
 800133c:	6962      	ldr	r2, [r4, #20]
 800133e:	4881      	ldr	r0, [pc, #516]	@ (8001544 <HAL_RCC_OscConfig+0x304>)
 8001340:	0212      	lsls	r2, r2, #8
 8001342:	4001      	ands	r1, r0
 8001344:	430a      	orrs	r2, r1
 8001346:	606a      	str	r2, [r5, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001348:	2b00      	cmp	r3, #0
 800134a:	d10c      	bne.n	8001366 <HAL_RCC_OscConfig+0x126>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800134c:	682b      	ldr	r3, [r5, #0]
 800134e:	4a7e      	ldr	r2, [pc, #504]	@ (8001548 <HAL_RCC_OscConfig+0x308>)
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001350:	497e      	ldr	r1, [pc, #504]	@ (800154c <HAL_RCC_OscConfig+0x30c>)
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001352:	4013      	ands	r3, r2
 8001354:	6922      	ldr	r2, [r4, #16]
 8001356:	4313      	orrs	r3, r2
 8001358:	602b      	str	r3, [r5, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800135a:	682b      	ldr	r3, [r5, #0]
 800135c:	4a7c      	ldr	r2, [pc, #496]	@ (8001550 <HAL_RCC_OscConfig+0x310>)
 800135e:	049b      	lsls	r3, r3, #18
 8001360:	0f5b      	lsrs	r3, r3, #29
 8001362:	40da      	lsrs	r2, r3
 8001364:	600a      	str	r2, [r1, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001366:	4b7b      	ldr	r3, [pc, #492]	@ (8001554 <HAL_RCC_OscConfig+0x314>)
 8001368:	6818      	ldr	r0, [r3, #0]
 800136a:	f7ff fccb 	bl	8000d04 <HAL_InitTick>
 800136e:	2800      	cmp	r0, #0
 8001370:	d100      	bne.n	8001374 <HAL_RCC_OscConfig+0x134>
 8001372:	e773      	b.n	800125c <HAL_RCC_OscConfig+0x1c>
 8001374:	e769      	b.n	800124a <HAL_RCC_OscConfig+0xa>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001376:	2b00      	cmp	r3, #0
 8001378:	d0d8      	beq.n	800132c <HAL_RCC_OscConfig+0xec>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800137a:	68e3      	ldr	r3, [r4, #12]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d020      	beq.n	80013c2 <HAL_RCC_OscConfig+0x182>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001380:	682b      	ldr	r3, [r5, #0]
 8001382:	4a71      	ldr	r2, [pc, #452]	@ (8001548 <HAL_RCC_OscConfig+0x308>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001384:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001386:	4013      	ands	r3, r2
 8001388:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800138a:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800138c:	4313      	orrs	r3, r2
 800138e:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 8001390:	2380      	movs	r3, #128	@ 0x80
 8001392:	682a      	ldr	r2, [r5, #0]
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	4313      	orrs	r3, r2
 8001398:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800139a:	f7ff fcfb 	bl	8000d94 <HAL_GetTick>
 800139e:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013a0:	682b      	ldr	r3, [r5, #0]
 80013a2:	423b      	tst	r3, r7
 80013a4:	d007      	beq.n	80013b6 <HAL_RCC_OscConfig+0x176>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a6:	686a      	ldr	r2, [r5, #4]
 80013a8:	6963      	ldr	r3, [r4, #20]
 80013aa:	4966      	ldr	r1, [pc, #408]	@ (8001544 <HAL_RCC_OscConfig+0x304>)
 80013ac:	021b      	lsls	r3, r3, #8
 80013ae:	400a      	ands	r2, r1
 80013b0:	4313      	orrs	r3, r2
 80013b2:	606b      	str	r3, [r5, #4]
 80013b4:	e752      	b.n	800125c <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013b6:	f7ff fced 	bl	8000d94 <HAL_GetTick>
 80013ba:	1b80      	subs	r0, r0, r6
 80013bc:	2802      	cmp	r0, #2
 80013be:	d9ef      	bls.n	80013a0 <HAL_RCC_OscConfig+0x160>
 80013c0:	e782      	b.n	80012c8 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 80013c2:	682b      	ldr	r3, [r5, #0]
 80013c4:	4a64      	ldr	r2, [pc, #400]	@ (8001558 <HAL_RCC_OscConfig+0x318>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013c6:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_DISABLE();
 80013c8:	4013      	ands	r3, r2
 80013ca:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80013cc:	f7ff fce2 	bl	8000d94 <HAL_GetTick>
 80013d0:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013d2:	00ff      	lsls	r7, r7, #3
 80013d4:	682b      	ldr	r3, [r5, #0]
 80013d6:	423b      	tst	r3, r7
 80013d8:	d100      	bne.n	80013dc <HAL_RCC_OscConfig+0x19c>
 80013da:	e73f      	b.n	800125c <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013dc:	f7ff fcda 	bl	8000d94 <HAL_GetTick>
 80013e0:	1b80      	subs	r0, r0, r6
 80013e2:	2802      	cmp	r0, #2
 80013e4:	d9f6      	bls.n	80013d4 <HAL_RCC_OscConfig+0x194>
 80013e6:	e76f      	b.n	80012c8 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80013e8:	2238      	movs	r2, #56	@ 0x38
 80013ea:	4d53      	ldr	r5, [pc, #332]	@ (8001538 <HAL_RCC_OscConfig+0x2f8>)
 80013ec:	68ab      	ldr	r3, [r5, #8]
 80013ee:	4013      	ands	r3, r2
 80013f0:	2b18      	cmp	r3, #24
 80013f2:	d108      	bne.n	8001406 <HAL_RCC_OscConfig+0x1c6>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80013f4:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 80013f6:	079b      	lsls	r3, r3, #30
 80013f8:	d400      	bmi.n	80013fc <HAL_RCC_OscConfig+0x1bc>
 80013fa:	e733      	b.n	8001264 <HAL_RCC_OscConfig+0x24>
 80013fc:	69a3      	ldr	r3, [r4, #24]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d000      	beq.n	8001404 <HAL_RCC_OscConfig+0x1c4>
 8001402:	e72f      	b.n	8001264 <HAL_RCC_OscConfig+0x24>
 8001404:	e721      	b.n	800124a <HAL_RCC_OscConfig+0xa>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001406:	69a2      	ldr	r2, [r4, #24]
 8001408:	2301      	movs	r3, #1
 800140a:	2a00      	cmp	r2, #0
 800140c:	d010      	beq.n	8001430 <HAL_RCC_OscConfig+0x1f0>
        __HAL_RCC_LSI_ENABLE();
 800140e:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001410:	2702      	movs	r7, #2
        __HAL_RCC_LSI_ENABLE();
 8001412:	4313      	orrs	r3, r2
 8001414:	662b      	str	r3, [r5, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001416:	f7ff fcbd 	bl	8000d94 <HAL_GetTick>
 800141a:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800141c:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 800141e:	423b      	tst	r3, r7
 8001420:	d000      	beq.n	8001424 <HAL_RCC_OscConfig+0x1e4>
 8001422:	e71f      	b.n	8001264 <HAL_RCC_OscConfig+0x24>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001424:	f7ff fcb6 	bl	8000d94 <HAL_GetTick>
 8001428:	1b80      	subs	r0, r0, r6
 800142a:	2802      	cmp	r0, #2
 800142c:	d9f6      	bls.n	800141c <HAL_RCC_OscConfig+0x1dc>
 800142e:	e74b      	b.n	80012c8 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_LSI_DISABLE();
 8001430:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001432:	2702      	movs	r7, #2
        __HAL_RCC_LSI_DISABLE();
 8001434:	439a      	bics	r2, r3
 8001436:	662a      	str	r2, [r5, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001438:	f7ff fcac 	bl	8000d94 <HAL_GetTick>
 800143c:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800143e:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8001440:	423b      	tst	r3, r7
 8001442:	d100      	bne.n	8001446 <HAL_RCC_OscConfig+0x206>
 8001444:	e70e      	b.n	8001264 <HAL_RCC_OscConfig+0x24>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001446:	f7ff fca5 	bl	8000d94 <HAL_GetTick>
 800144a:	1b80      	subs	r0, r0, r6
 800144c:	2802      	cmp	r0, #2
 800144e:	d9f6      	bls.n	800143e <HAL_RCC_OscConfig+0x1fe>
 8001450:	e73a      	b.n	80012c8 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001452:	2238      	movs	r2, #56	@ 0x38
 8001454:	4d38      	ldr	r5, [pc, #224]	@ (8001538 <HAL_RCC_OscConfig+0x2f8>)
 8001456:	68ab      	ldr	r3, [r5, #8]
 8001458:	4013      	ands	r3, r2
 800145a:	2b20      	cmp	r3, #32
 800145c:	d108      	bne.n	8001470 <HAL_RCC_OscConfig+0x230>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800145e:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 8001460:	079b      	lsls	r3, r3, #30
 8001462:	d400      	bmi.n	8001466 <HAL_RCC_OscConfig+0x226>
 8001464:	e702      	b.n	800126c <HAL_RCC_OscConfig+0x2c>
 8001466:	68a3      	ldr	r3, [r4, #8]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d000      	beq.n	800146e <HAL_RCC_OscConfig+0x22e>
 800146c:	e6fe      	b.n	800126c <HAL_RCC_OscConfig+0x2c>
 800146e:	e6ec      	b.n	800124a <HAL_RCC_OscConfig+0xa>
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001470:	2280      	movs	r2, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001472:	2100      	movs	r1, #0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001474:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8001476:	0552      	lsls	r2, r2, #21
    FlagStatus       pwrclkchanged = RESET;
 8001478:	9100      	str	r1, [sp, #0]
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800147a:	4213      	tst	r3, r2
 800147c:	d108      	bne.n	8001490 <HAL_RCC_OscConfig+0x250>
        __HAL_RCC_PWR_CLK_ENABLE();
 800147e:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8001480:	4313      	orrs	r3, r2
 8001482:	63eb      	str	r3, [r5, #60]	@ 0x3c
 8001484:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8001486:	4013      	ands	r3, r2
 8001488:	9303      	str	r3, [sp, #12]
 800148a:	9b03      	ldr	r3, [sp, #12]
        pwrclkchanged = SET;
 800148c:	2301      	movs	r3, #1
 800148e:	9300      	str	r3, [sp, #0]
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001490:	2780      	movs	r7, #128	@ 0x80
 8001492:	4e32      	ldr	r6, [pc, #200]	@ (800155c <HAL_RCC_OscConfig+0x31c>)
 8001494:	007f      	lsls	r7, r7, #1
 8001496:	6833      	ldr	r3, [r6, #0]
 8001498:	423b      	tst	r3, r7
 800149a:	d015      	beq.n	80014c8 <HAL_RCC_OscConfig+0x288>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800149c:	68a3      	ldr	r3, [r4, #8]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d122      	bne.n	80014e8 <HAL_RCC_OscConfig+0x2a8>
 80014a2:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 80014a4:	4313      	orrs	r3, r2
 80014a6:	65eb      	str	r3, [r5, #92]	@ 0x5c
        tickstart = HAL_GetTick();
 80014a8:	f7ff fc74 	bl	8000d94 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014ac:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 80014ae:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014b0:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 80014b2:	423b      	tst	r3, r7
 80014b4:	d038      	beq.n	8001528 <HAL_RCC_OscConfig+0x2e8>
      if (pwrclkchanged == SET)
 80014b6:	9b00      	ldr	r3, [sp, #0]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d000      	beq.n	80014be <HAL_RCC_OscConfig+0x27e>
 80014bc:	e6d6      	b.n	800126c <HAL_RCC_OscConfig+0x2c>
        __HAL_RCC_PWR_CLK_DISABLE();
 80014be:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 80014c0:	4a27      	ldr	r2, [pc, #156]	@ (8001560 <HAL_RCC_OscConfig+0x320>)
 80014c2:	4013      	ands	r3, r2
 80014c4:	63eb      	str	r3, [r5, #60]	@ 0x3c
 80014c6:	e6d1      	b.n	800126c <HAL_RCC_OscConfig+0x2c>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014c8:	6833      	ldr	r3, [r6, #0]
 80014ca:	433b      	orrs	r3, r7
 80014cc:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80014ce:	f7ff fc61 	bl	8000d94 <HAL_GetTick>
 80014d2:	9001      	str	r0, [sp, #4]
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014d4:	6833      	ldr	r3, [r6, #0]
 80014d6:	423b      	tst	r3, r7
 80014d8:	d1e0      	bne.n	800149c <HAL_RCC_OscConfig+0x25c>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014da:	f7ff fc5b 	bl	8000d94 <HAL_GetTick>
 80014de:	9b01      	ldr	r3, [sp, #4]
 80014e0:	1ac0      	subs	r0, r0, r3
 80014e2:	2802      	cmp	r0, #2
 80014e4:	d9f6      	bls.n	80014d4 <HAL_RCC_OscConfig+0x294>
 80014e6:	e6ef      	b.n	80012c8 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014e8:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 80014ea:	2b05      	cmp	r3, #5
 80014ec:	d105      	bne.n	80014fa <HAL_RCC_OscConfig+0x2ba>
 80014ee:	3b01      	subs	r3, #1
 80014f0:	4313      	orrs	r3, r2
 80014f2:	65eb      	str	r3, [r5, #92]	@ 0x5c
 80014f4:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 80014f6:	2301      	movs	r3, #1
 80014f8:	e7d4      	b.n	80014a4 <HAL_RCC_OscConfig+0x264>
 80014fa:	2101      	movs	r1, #1
 80014fc:	438a      	bics	r2, r1
 80014fe:	65ea      	str	r2, [r5, #92]	@ 0x5c
 8001500:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 8001502:	3103      	adds	r1, #3
 8001504:	438a      	bics	r2, r1
 8001506:	65ea      	str	r2, [r5, #92]	@ 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001508:	2b00      	cmp	r3, #0
 800150a:	d1cd      	bne.n	80014a8 <HAL_RCC_OscConfig+0x268>
        tickstart = HAL_GetTick();
 800150c:	f7ff fc42 	bl	8000d94 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001510:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8001512:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001514:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 8001516:	423b      	tst	r3, r7
 8001518:	d0cd      	beq.n	80014b6 <HAL_RCC_OscConfig+0x276>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800151a:	f7ff fc3b 	bl	8000d94 <HAL_GetTick>
 800151e:	4b11      	ldr	r3, [pc, #68]	@ (8001564 <HAL_RCC_OscConfig+0x324>)
 8001520:	1b80      	subs	r0, r0, r6
 8001522:	4298      	cmp	r0, r3
 8001524:	d9f6      	bls.n	8001514 <HAL_RCC_OscConfig+0x2d4>
 8001526:	e6cf      	b.n	80012c8 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001528:	f7ff fc34 	bl	8000d94 <HAL_GetTick>
 800152c:	4b0d      	ldr	r3, [pc, #52]	@ (8001564 <HAL_RCC_OscConfig+0x324>)
 800152e:	1b80      	subs	r0, r0, r6
 8001530:	4298      	cmp	r0, r3
 8001532:	d9bd      	bls.n	80014b0 <HAL_RCC_OscConfig+0x270>
 8001534:	e6c8      	b.n	80012c8 <HAL_RCC_OscConfig+0x88>
 8001536:	46c0      	nop			@ (mov r8, r8)
 8001538:	40021000 	.word	0x40021000
 800153c:	fffeffff 	.word	0xfffeffff
 8001540:	fffbffff 	.word	0xfffbffff
 8001544:	ffff80ff 	.word	0xffff80ff
 8001548:	ffffc7ff 	.word	0xffffc7ff
 800154c:	20000000 	.word	0x20000000
 8001550:	00f42400 	.word	0x00f42400
 8001554:	20000008 	.word	0x20000008
 8001558:	fffffeff 	.word	0xfffffeff
 800155c:	40007000 	.word	0x40007000
 8001560:	efffffff 	.word	0xefffffff
 8001564:	00001388 	.word	0x00001388
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001568:	2138      	movs	r1, #56	@ 0x38
 800156a:	4d43      	ldr	r5, [pc, #268]	@ (8001678 <HAL_RCC_OscConfig+0x438>)
 800156c:	68aa      	ldr	r2, [r5, #8]
 800156e:	400a      	ands	r2, r1
 8001570:	2a10      	cmp	r2, #16
 8001572:	d053      	beq.n	800161c <HAL_RCC_OscConfig+0x3dc>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001574:	4a41      	ldr	r2, [pc, #260]	@ (800167c <HAL_RCC_OscConfig+0x43c>)
 8001576:	2b02      	cmp	r3, #2
 8001578:	d13a      	bne.n	80015f0 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_DISABLE();
 800157a:	682b      	ldr	r3, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800157c:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 800157e:	4013      	ands	r3, r2
 8001580:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001582:	f7ff fc07 	bl	8000d94 <HAL_GetTick>
 8001586:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001588:	04bf      	lsls	r7, r7, #18
 800158a:	682b      	ldr	r3, [r5, #0]
 800158c:	423b      	tst	r3, r7
 800158e:	d129      	bne.n	80015e4 <HAL_RCC_OscConfig+0x3a4>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001590:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8001592:	6a23      	ldr	r3, [r4, #32]
 8001594:	68ea      	ldr	r2, [r5, #12]
 8001596:	430b      	orrs	r3, r1
 8001598:	4939      	ldr	r1, [pc, #228]	@ (8001680 <HAL_RCC_OscConfig+0x440>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800159a:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800159c:	400a      	ands	r2, r1
 800159e:	4313      	orrs	r3, r2
 80015a0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015a2:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015a4:	4313      	orrs	r3, r2
 80015a6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80015a8:	4313      	orrs	r3, r2
 80015aa:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80015ac:	4313      	orrs	r3, r2
 80015ae:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80015b0:	0212      	lsls	r2, r2, #8
 80015b2:	4313      	orrs	r3, r2
 80015b4:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 80015b6:	2380      	movs	r3, #128	@ 0x80
 80015b8:	682a      	ldr	r2, [r5, #0]
 80015ba:	045b      	lsls	r3, r3, #17
 80015bc:	4313      	orrs	r3, r2
 80015be:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80015c0:	2380      	movs	r3, #128	@ 0x80
 80015c2:	68ea      	ldr	r2, [r5, #12]
 80015c4:	055b      	lsls	r3, r3, #21
 80015c6:	4313      	orrs	r3, r2
 80015c8:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 80015ca:	f7ff fbe3 	bl	8000d94 <HAL_GetTick>
 80015ce:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015d0:	682b      	ldr	r3, [r5, #0]
 80015d2:	4233      	tst	r3, r6
 80015d4:	d000      	beq.n	80015d8 <HAL_RCC_OscConfig+0x398>
 80015d6:	e64d      	b.n	8001274 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015d8:	f7ff fbdc 	bl	8000d94 <HAL_GetTick>
 80015dc:	1b00      	subs	r0, r0, r4
 80015de:	2802      	cmp	r0, #2
 80015e0:	d9f6      	bls.n	80015d0 <HAL_RCC_OscConfig+0x390>
 80015e2:	e671      	b.n	80012c8 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015e4:	f7ff fbd6 	bl	8000d94 <HAL_GetTick>
 80015e8:	1b80      	subs	r0, r0, r6
 80015ea:	2802      	cmp	r0, #2
 80015ec:	d9cd      	bls.n	800158a <HAL_RCC_OscConfig+0x34a>
 80015ee:	e66b      	b.n	80012c8 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_PLL_DISABLE();
 80015f0:	682b      	ldr	r3, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015f2:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 80015f4:	4013      	ands	r3, r2
 80015f6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80015f8:	f7ff fbcc 	bl	8000d94 <HAL_GetTick>
 80015fc:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015fe:	04b6      	lsls	r6, r6, #18
 8001600:	682b      	ldr	r3, [r5, #0]
 8001602:	4233      	tst	r3, r6
 8001604:	d104      	bne.n	8001610 <HAL_RCC_OscConfig+0x3d0>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001606:	68eb      	ldr	r3, [r5, #12]
 8001608:	4a1e      	ldr	r2, [pc, #120]	@ (8001684 <HAL_RCC_OscConfig+0x444>)
 800160a:	4013      	ands	r3, r2
 800160c:	60eb      	str	r3, [r5, #12]
 800160e:	e631      	b.n	8001274 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001610:	f7ff fbc0 	bl	8000d94 <HAL_GetTick>
 8001614:	1b00      	subs	r0, r0, r4
 8001616:	2802      	cmp	r0, #2
 8001618:	d9f2      	bls.n	8001600 <HAL_RCC_OscConfig+0x3c0>
 800161a:	e655      	b.n	80012c8 <HAL_RCC_OscConfig+0x88>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800161c:	2b01      	cmp	r3, #1
 800161e:	d100      	bne.n	8001622 <HAL_RCC_OscConfig+0x3e2>
 8001620:	e613      	b.n	800124a <HAL_RCC_OscConfig+0xa>
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001622:	2203      	movs	r2, #3
        temp_pllckcfg = RCC->PLLCFGR;
 8001624:	68e8      	ldr	r0, [r5, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001626:	6a21      	ldr	r1, [r4, #32]
 8001628:	4002      	ands	r2, r0
 800162a:	428a      	cmp	r2, r1
 800162c:	d000      	beq.n	8001630 <HAL_RCC_OscConfig+0x3f0>
 800162e:	e60c      	b.n	800124a <HAL_RCC_OscConfig+0xa>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001630:	2270      	movs	r2, #112	@ 0x70
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001632:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001634:	4002      	ands	r2, r0
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001636:	428a      	cmp	r2, r1
 8001638:	d000      	beq.n	800163c <HAL_RCC_OscConfig+0x3fc>
 800163a:	e606      	b.n	800124a <HAL_RCC_OscConfig+0xa>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800163c:	21fe      	movs	r1, #254	@ 0xfe
 800163e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001640:	01c9      	lsls	r1, r1, #7
 8001642:	4001      	ands	r1, r0
 8001644:	0212      	lsls	r2, r2, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001646:	4291      	cmp	r1, r2
 8001648:	d000      	beq.n	800164c <HAL_RCC_OscConfig+0x40c>
 800164a:	e5fe      	b.n	800124a <HAL_RCC_OscConfig+0xa>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800164c:	22f8      	movs	r2, #248	@ 0xf8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800164e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001650:	0392      	lsls	r2, r2, #14
 8001652:	4002      	ands	r2, r0
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001654:	428a      	cmp	r2, r1
 8001656:	d000      	beq.n	800165a <HAL_RCC_OscConfig+0x41a>
 8001658:	e5f7      	b.n	800124a <HAL_RCC_OscConfig+0xa>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800165a:	22e0      	movs	r2, #224	@ 0xe0
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800165c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800165e:	0512      	lsls	r2, r2, #20
 8001660:	4002      	ands	r2, r0
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001662:	428a      	cmp	r2, r1
 8001664:	d000      	beq.n	8001668 <HAL_RCC_OscConfig+0x428>
 8001666:	e5f0      	b.n	800124a <HAL_RCC_OscConfig+0xa>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001668:	6b63      	ldr	r3, [r4, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800166a:	0f40      	lsrs	r0, r0, #29
 800166c:	0740      	lsls	r0, r0, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800166e:	1ac0      	subs	r0, r0, r3
 8001670:	1e43      	subs	r3, r0, #1
 8001672:	4198      	sbcs	r0, r3
 8001674:	b2c0      	uxtb	r0, r0
 8001676:	e5e9      	b.n	800124c <HAL_RCC_OscConfig+0xc>
 8001678:	40021000 	.word	0x40021000
 800167c:	feffffff 	.word	0xfeffffff
 8001680:	11c1808c 	.word	0x11c1808c
 8001684:	eefefffc 	.word	0xeefefffc

08001688 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001688:	2338      	movs	r3, #56	@ 0x38
{
 800168a:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800168c:	4c1d      	ldr	r4, [pc, #116]	@ (8001704 <HAL_RCC_GetSysClockFreq+0x7c>)
 800168e:	68a2      	ldr	r2, [r4, #8]
 8001690:	421a      	tst	r2, r3
 8001692:	d105      	bne.n	80016a0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001694:	6823      	ldr	r3, [r4, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001696:	481c      	ldr	r0, [pc, #112]	@ (8001708 <HAL_RCC_GetSysClockFreq+0x80>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001698:	049b      	lsls	r3, r3, #18
 800169a:	0f5b      	lsrs	r3, r3, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 800169c:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 800169e:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016a0:	68a2      	ldr	r2, [r4, #8]
 80016a2:	401a      	ands	r2, r3
 80016a4:	2a08      	cmp	r2, #8
 80016a6:	d027      	beq.n	80016f8 <HAL_RCC_GetSysClockFreq+0x70>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016a8:	68a2      	ldr	r2, [r4, #8]
 80016aa:	401a      	ands	r2, r3
 80016ac:	2a10      	cmp	r2, #16
 80016ae:	d117      	bne.n	80016e0 <HAL_RCC_GetSysClockFreq+0x58>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80016b0:	68e3      	ldr	r3, [r4, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80016b2:	68e1      	ldr	r1, [r4, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80016b4:	43db      	mvns	r3, r3
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80016b6:	68e5      	ldr	r5, [r4, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80016b8:	0649      	lsls	r1, r1, #25
 80016ba:	0f49      	lsrs	r1, r1, #29
 80016bc:	326f      	adds	r2, #111	@ 0x6f
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80016be:	0a2d      	lsrs	r5, r5, #8
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80016c0:	3101      	adds	r1, #1
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80016c2:	4015      	ands	r5, r2
    switch (pllsource)
 80016c4:	079b      	lsls	r3, r3, #30
 80016c6:	d109      	bne.n	80016dc <HAL_RCC_GetSysClockFreq+0x54>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80016c8:	4810      	ldr	r0, [pc, #64]	@ (800170c <HAL_RCC_GetSysClockFreq+0x84>)
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80016ca:	f7fe fd2f 	bl	800012c <__udivsi3>
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80016ce:	68e1      	ldr	r1, [r4, #12]
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80016d0:	4368      	muls	r0, r5
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80016d2:	0f49      	lsrs	r1, r1, #29
 80016d4:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 80016d6:	f7fe fd29 	bl	800012c <__udivsi3>
 80016da:	e7e0      	b.n	800169e <HAL_RCC_GetSysClockFreq+0x16>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80016dc:	480a      	ldr	r0, [pc, #40]	@ (8001708 <HAL_RCC_GetSysClockFreq+0x80>)
 80016de:	e7f4      	b.n	80016ca <HAL_RCC_GetSysClockFreq+0x42>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80016e0:	68a2      	ldr	r2, [r4, #8]
 80016e2:	401a      	ands	r2, r3
 80016e4:	2a20      	cmp	r2, #32
 80016e6:	d009      	beq.n	80016fc <HAL_RCC_GetSysClockFreq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80016e8:	68a2      	ldr	r2, [r4, #8]
    sysclockfreq = 0U;
 80016ea:	2000      	movs	r0, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80016ec:	4013      	ands	r3, r2
 80016ee:	2b18      	cmp	r3, #24
 80016f0:	d1d5      	bne.n	800169e <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSI_VALUE;
 80016f2:	20fa      	movs	r0, #250	@ 0xfa
 80016f4:	01c0      	lsls	r0, r0, #7
 80016f6:	e7d2      	b.n	800169e <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = HSE_VALUE;
 80016f8:	4804      	ldr	r0, [pc, #16]	@ (800170c <HAL_RCC_GetSysClockFreq+0x84>)
 80016fa:	e7d0      	b.n	800169e <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSE_VALUE;
 80016fc:	2080      	movs	r0, #128	@ 0x80
 80016fe:	0200      	lsls	r0, r0, #8
 8001700:	e7cd      	b.n	800169e <HAL_RCC_GetSysClockFreq+0x16>
 8001702:	46c0      	nop			@ (mov r8, r8)
 8001704:	40021000 	.word	0x40021000
 8001708:	00f42400 	.word	0x00f42400
 800170c:	007a1200 	.word	0x007a1200

08001710 <HAL_RCC_ClockConfig>:
{
 8001710:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001712:	0004      	movs	r4, r0
 8001714:	000d      	movs	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001716:	2800      	cmp	r0, #0
 8001718:	d101      	bne.n	800171e <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 800171a:	2001      	movs	r0, #1
}
 800171c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800171e:	2707      	movs	r7, #7
 8001720:	4e4a      	ldr	r6, [pc, #296]	@ (800184c <HAL_RCC_ClockConfig+0x13c>)
 8001722:	6833      	ldr	r3, [r6, #0]
 8001724:	403b      	ands	r3, r7
 8001726:	428b      	cmp	r3, r1
 8001728:	d32a      	bcc.n	8001780 <HAL_RCC_ClockConfig+0x70>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800172a:	6822      	ldr	r2, [r4, #0]
 800172c:	0793      	lsls	r3, r2, #30
 800172e:	d43b      	bmi.n	80017a8 <HAL_RCC_ClockConfig+0x98>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001730:	07d2      	lsls	r2, r2, #31
 8001732:	d448      	bmi.n	80017c6 <HAL_RCC_ClockConfig+0xb6>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001734:	2707      	movs	r7, #7
 8001736:	6833      	ldr	r3, [r6, #0]
 8001738:	403b      	ands	r3, r7
 800173a:	42ab      	cmp	r3, r5
 800173c:	d90a      	bls.n	8001754 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800173e:	6833      	ldr	r3, [r6, #0]
 8001740:	43bb      	bics	r3, r7
 8001742:	432b      	orrs	r3, r5
 8001744:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001746:	f7ff fb25 	bl	8000d94 <HAL_GetTick>
 800174a:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800174c:	6833      	ldr	r3, [r6, #0]
 800174e:	403b      	ands	r3, r7
 8001750:	42ab      	cmp	r3, r5
 8001752:	d16b      	bne.n	800182c <HAL_RCC_ClockConfig+0x11c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001754:	6823      	ldr	r3, [r4, #0]
 8001756:	4d3e      	ldr	r5, [pc, #248]	@ (8001850 <HAL_RCC_ClockConfig+0x140>)
 8001758:	075b      	lsls	r3, r3, #29
 800175a:	d46f      	bmi.n	800183c <HAL_RCC_ClockConfig+0x12c>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800175c:	f7ff ff94 	bl	8001688 <HAL_RCC_GetSysClockFreq>
 8001760:	68ab      	ldr	r3, [r5, #8]
 8001762:	493c      	ldr	r1, [pc, #240]	@ (8001854 <HAL_RCC_ClockConfig+0x144>)
 8001764:	051b      	lsls	r3, r3, #20
 8001766:	0f1b      	lsrs	r3, r3, #28
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	585b      	ldr	r3, [r3, r1]
 800176c:	211f      	movs	r1, #31
 800176e:	400b      	ands	r3, r1
 8001770:	40d8      	lsrs	r0, r3
 8001772:	4a39      	ldr	r2, [pc, #228]	@ (8001858 <HAL_RCC_ClockConfig+0x148>)
  return HAL_InitTick(uwTickPrio);
 8001774:	4b39      	ldr	r3, [pc, #228]	@ (800185c <HAL_RCC_ClockConfig+0x14c>)
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001776:	6010      	str	r0, [r2, #0]
  return HAL_InitTick(uwTickPrio);
 8001778:	6818      	ldr	r0, [r3, #0]
 800177a:	f7ff fac3 	bl	8000d04 <HAL_InitTick>
 800177e:	e7cd      	b.n	800171c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001780:	6833      	ldr	r3, [r6, #0]
 8001782:	43bb      	bics	r3, r7
 8001784:	430b      	orrs	r3, r1
 8001786:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001788:	f7ff fb04 	bl	8000d94 <HAL_GetTick>
 800178c:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800178e:	6833      	ldr	r3, [r6, #0]
 8001790:	403b      	ands	r3, r7
 8001792:	42ab      	cmp	r3, r5
 8001794:	d0c9      	beq.n	800172a <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001796:	f7ff fafd 	bl	8000d94 <HAL_GetTick>
 800179a:	9b01      	ldr	r3, [sp, #4]
 800179c:	1ac0      	subs	r0, r0, r3
 800179e:	4b30      	ldr	r3, [pc, #192]	@ (8001860 <HAL_RCC_ClockConfig+0x150>)
 80017a0:	4298      	cmp	r0, r3
 80017a2:	d9f4      	bls.n	800178e <HAL_RCC_ClockConfig+0x7e>
        return HAL_TIMEOUT;
 80017a4:	2003      	movs	r0, #3
 80017a6:	e7b9      	b.n	800171c <HAL_RCC_ClockConfig+0xc>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017a8:	4929      	ldr	r1, [pc, #164]	@ (8001850 <HAL_RCC_ClockConfig+0x140>)
 80017aa:	0753      	lsls	r3, r2, #29
 80017ac:	d504      	bpl.n	80017b8 <HAL_RCC_ClockConfig+0xa8>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80017ae:	23e0      	movs	r3, #224	@ 0xe0
 80017b0:	6888      	ldr	r0, [r1, #8]
 80017b2:	01db      	lsls	r3, r3, #7
 80017b4:	4303      	orrs	r3, r0
 80017b6:	608b      	str	r3, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017b8:	688b      	ldr	r3, [r1, #8]
 80017ba:	482a      	ldr	r0, [pc, #168]	@ (8001864 <HAL_RCC_ClockConfig+0x154>)
 80017bc:	4003      	ands	r3, r0
 80017be:	68a0      	ldr	r0, [r4, #8]
 80017c0:	4303      	orrs	r3, r0
 80017c2:	608b      	str	r3, [r1, #8]
 80017c4:	e7b4      	b.n	8001730 <HAL_RCC_ClockConfig+0x20>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017c6:	6862      	ldr	r2, [r4, #4]
 80017c8:	4f21      	ldr	r7, [pc, #132]	@ (8001850 <HAL_RCC_ClockConfig+0x140>)
 80017ca:	2a01      	cmp	r2, #1
 80017cc:	d119      	bne.n	8001802 <HAL_RCC_ClockConfig+0xf2>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	039b      	lsls	r3, r3, #14
 80017d2:	d5a2      	bpl.n	800171a <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80017d4:	2107      	movs	r1, #7
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	438b      	bics	r3, r1
 80017da:	4313      	orrs	r3, r2
 80017dc:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 80017de:	f7ff fad9 	bl	8000d94 <HAL_GetTick>
 80017e2:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017e4:	2338      	movs	r3, #56	@ 0x38
 80017e6:	68ba      	ldr	r2, [r7, #8]
 80017e8:	401a      	ands	r2, r3
 80017ea:	6863      	ldr	r3, [r4, #4]
 80017ec:	00db      	lsls	r3, r3, #3
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d0a0      	beq.n	8001734 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017f2:	f7ff facf 	bl	8000d94 <HAL_GetTick>
 80017f6:	9b01      	ldr	r3, [sp, #4]
 80017f8:	1ac0      	subs	r0, r0, r3
 80017fa:	4b19      	ldr	r3, [pc, #100]	@ (8001860 <HAL_RCC_ClockConfig+0x150>)
 80017fc:	4298      	cmp	r0, r3
 80017fe:	d9f1      	bls.n	80017e4 <HAL_RCC_ClockConfig+0xd4>
 8001800:	e7d0      	b.n	80017a4 <HAL_RCC_ClockConfig+0x94>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001802:	2a02      	cmp	r2, #2
 8001804:	d103      	bne.n	800180e <HAL_RCC_ClockConfig+0xfe>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	019b      	lsls	r3, r3, #6
 800180a:	d4e3      	bmi.n	80017d4 <HAL_RCC_ClockConfig+0xc4>
 800180c:	e785      	b.n	800171a <HAL_RCC_ClockConfig+0xa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800180e:	2a00      	cmp	r2, #0
 8001810:	d103      	bne.n	800181a <HAL_RCC_ClockConfig+0x10a>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	055b      	lsls	r3, r3, #21
 8001816:	d4dd      	bmi.n	80017d4 <HAL_RCC_ClockConfig+0xc4>
 8001818:	e77f      	b.n	800171a <HAL_RCC_ClockConfig+0xa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800181a:	2302      	movs	r3, #2
 800181c:	2a03      	cmp	r2, #3
 800181e:	d103      	bne.n	8001828 <HAL_RCC_ClockConfig+0x118>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001820:	6e39      	ldr	r1, [r7, #96]	@ 0x60
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001822:	4219      	tst	r1, r3
 8001824:	d1d6      	bne.n	80017d4 <HAL_RCC_ClockConfig+0xc4>
 8001826:	e778      	b.n	800171a <HAL_RCC_ClockConfig+0xa>
 8001828:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800182a:	e7fa      	b.n	8001822 <HAL_RCC_ClockConfig+0x112>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800182c:	f7ff fab2 	bl	8000d94 <HAL_GetTick>
 8001830:	9b01      	ldr	r3, [sp, #4]
 8001832:	1ac0      	subs	r0, r0, r3
 8001834:	4b0a      	ldr	r3, [pc, #40]	@ (8001860 <HAL_RCC_ClockConfig+0x150>)
 8001836:	4298      	cmp	r0, r3
 8001838:	d988      	bls.n	800174c <HAL_RCC_ClockConfig+0x3c>
 800183a:	e7b3      	b.n	80017a4 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800183c:	68ab      	ldr	r3, [r5, #8]
 800183e:	4a0a      	ldr	r2, [pc, #40]	@ (8001868 <HAL_RCC_ClockConfig+0x158>)
 8001840:	4013      	ands	r3, r2
 8001842:	68e2      	ldr	r2, [r4, #12]
 8001844:	4313      	orrs	r3, r2
 8001846:	60ab      	str	r3, [r5, #8]
 8001848:	e788      	b.n	800175c <HAL_RCC_ClockConfig+0x4c>
 800184a:	46c0      	nop			@ (mov r8, r8)
 800184c:	40022000 	.word	0x40022000
 8001850:	40021000 	.word	0x40021000
 8001854:	08005260 	.word	0x08005260
 8001858:	20000000 	.word	0x20000000
 800185c:	20000008 	.word	0x20000008
 8001860:	00001388 	.word	0x00001388
 8001864:	fffff0ff 	.word	0xfffff0ff
 8001868:	ffff8fff 	.word	0xffff8fff

0800186c <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800186c:	4b06      	ldr	r3, [pc, #24]	@ (8001888 <HAL_RCC_GetPCLK1Freq+0x1c>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800186e:	4907      	ldr	r1, [pc, #28]	@ (800188c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001870:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8001872:	4a07      	ldr	r2, [pc, #28]	@ (8001890 <HAL_RCC_GetPCLK1Freq+0x24>)
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001874:	045b      	lsls	r3, r3, #17
 8001876:	0f5b      	lsrs	r3, r3, #29
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	585b      	ldr	r3, [r3, r1]
 800187c:	211f      	movs	r1, #31
 800187e:	6810      	ldr	r0, [r2, #0]
 8001880:	400b      	ands	r3, r1
 8001882:	40d8      	lsrs	r0, r3
}
 8001884:	4770      	bx	lr
 8001886:	46c0      	nop			@ (mov r8, r8)
 8001888:	40021000 	.word	0x40021000
 800188c:	08005240 	.word	0x08005240
 8001890:	20000000 	.word	0x20000000

08001894 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001894:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001896:	6803      	ldr	r3, [r0, #0]
{
 8001898:	0005      	movs	r5, r0
 800189a:	b085      	sub	sp, #20
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800189c:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800189e:	039b      	lsls	r3, r3, #14
 80018a0:	d552      	bpl.n	8001948 <HAL_RCCEx_PeriphCLKConfig+0xb4>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018a2:	2280      	movs	r2, #128	@ 0x80
 80018a4:	4c5f      	ldr	r4, [pc, #380]	@ (8001a24 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80018a6:	0552      	lsls	r2, r2, #21
 80018a8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
    FlagStatus       pwrclkchanged = RESET;
 80018aa:	9000      	str	r0, [sp, #0]
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018ac:	4213      	tst	r3, r2
 80018ae:	d108      	bne.n	80018c2 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018b0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80018b2:	4313      	orrs	r3, r2
 80018b4:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80018b6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80018b8:	4013      	ands	r3, r2
 80018ba:	9303      	str	r3, [sp, #12]
 80018bc:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 80018be:	2301      	movs	r3, #1
 80018c0:	9300      	str	r3, [sp, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018c2:	2780      	movs	r7, #128	@ 0x80
 80018c4:	4e58      	ldr	r6, [pc, #352]	@ (8001a28 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80018c6:	007f      	lsls	r7, r7, #1
 80018c8:	6833      	ldr	r3, [r6, #0]
 80018ca:	433b      	orrs	r3, r7
 80018cc:	6033      	str	r3, [r6, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80018ce:	f7ff fa61 	bl	8000d94 <HAL_GetTick>
 80018d2:	9001      	str	r0, [sp, #4]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80018d4:	6833      	ldr	r3, [r6, #0]
 80018d6:	423b      	tst	r3, r7
 80018d8:	d028      	beq.n	800192c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80018da:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 80018dc:	22c0      	movs	r2, #192	@ 0xc0
 80018de:	0008      	movs	r0, r1
 80018e0:	0092      	lsls	r2, r2, #2

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80018e2:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80018e4:	4010      	ands	r0, r2
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80018e6:	4211      	tst	r1, r2
 80018e8:	d018      	beq.n	800191c <HAL_RCCEx_PeriphCLKConfig+0x88>
 80018ea:	4298      	cmp	r0, r3
 80018ec:	d00c      	beq.n	8001908 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80018ee:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80018f0:	4a4e      	ldr	r2, [pc, #312]	@ (8001a2c <HAL_RCCEx_PeriphCLKConfig+0x198>)
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80018f2:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80018f4:	4013      	ands	r3, r2
        __HAL_RCC_BACKUPRESET_FORCE();
 80018f6:	2280      	movs	r2, #128	@ 0x80
 80018f8:	0252      	lsls	r2, r2, #9
 80018fa:	430a      	orrs	r2, r1
 80018fc:	65e2      	str	r2, [r4, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80018fe:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001900:	494b      	ldr	r1, [pc, #300]	@ (8001a30 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8001902:	400a      	ands	r2, r1
 8001904:	65e2      	str	r2, [r4, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001906:	65e3      	str	r3, [r4, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001908:	07db      	lsls	r3, r3, #31
 800190a:	d507      	bpl.n	800191c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800190c:	f7ff fa42 	bl	8000d94 <HAL_GetTick>

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001910:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8001912:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001914:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8001916:	423b      	tst	r3, r7
 8001918:	d100      	bne.n	800191c <HAL_RCCEx_PeriphCLKConfig+0x88>
 800191a:	e07b      	b.n	8001a14 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }

      if (ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800191c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800191e:	4a43      	ldr	r2, [pc, #268]	@ (8001a2c <HAL_RCCEx_PeriphCLKConfig+0x198>)
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001920:	2000      	movs	r0, #0
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001922:	4013      	ands	r3, r2
 8001924:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8001926:	4313      	orrs	r3, r2
 8001928:	65e3      	str	r3, [r4, #92]	@ 0x5c
 800192a:	e006      	b.n	800193a <HAL_RCCEx_PeriphCLKConfig+0xa6>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800192c:	f7ff fa32 	bl	8000d94 <HAL_GetTick>
 8001930:	9b01      	ldr	r3, [sp, #4]
 8001932:	1ac0      	subs	r0, r0, r3
 8001934:	2802      	cmp	r0, #2
 8001936:	d9cd      	bls.n	80018d4 <HAL_RCCEx_PeriphCLKConfig+0x40>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001938:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800193a:	9b00      	ldr	r3, [sp, #0]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d103      	bne.n	8001948 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001940:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001942:	4a3c      	ldr	r2, [pc, #240]	@ (8001a34 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001944:	4013      	ands	r3, r2
 8001946:	63e3      	str	r3, [r4, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001948:	682b      	ldr	r3, [r5, #0]
 800194a:	07da      	lsls	r2, r3, #31
 800194c:	d506      	bpl.n	800195c <HAL_RCCEx_PeriphCLKConfig+0xc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800194e:	2403      	movs	r4, #3
 8001950:	4934      	ldr	r1, [pc, #208]	@ (8001a24 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001952:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8001954:	43a2      	bics	r2, r4
 8001956:	686c      	ldr	r4, [r5, #4]
 8001958:	4322      	orrs	r2, r4
 800195a:	654a      	str	r2, [r1, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800195c:	06da      	lsls	r2, r3, #27
 800195e:	d506      	bpl.n	800196e <HAL_RCCEx_PeriphCLKConfig+0xda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001960:	4930      	ldr	r1, [pc, #192]	@ (8001a24 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001962:	4c35      	ldr	r4, [pc, #212]	@ (8001a38 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001964:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8001966:	4022      	ands	r2, r4
 8001968:	68ac      	ldr	r4, [r5, #8]
 800196a:	4322      	orrs	r2, r4
 800196c:	654a      	str	r2, [r1, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800196e:	059a      	lsls	r2, r3, #22
 8001970:	d506      	bpl.n	8001980 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001972:	492c      	ldr	r1, [pc, #176]	@ (8001a24 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001974:	4c31      	ldr	r4, [pc, #196]	@ (8001a3c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001976:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8001978:	4022      	ands	r2, r4
 800197a:	696c      	ldr	r4, [r5, #20]
 800197c:	4322      	orrs	r2, r4
 800197e:	654a      	str	r2, [r1, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001980:	055a      	lsls	r2, r3, #21
 8001982:	d506      	bpl.n	8001992 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001984:	4927      	ldr	r1, [pc, #156]	@ (8001a24 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001986:	4c2e      	ldr	r4, [pc, #184]	@ (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001988:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 800198a:	4022      	ands	r2, r4
 800198c:	69ac      	ldr	r4, [r5, #24]
 800198e:	4322      	orrs	r2, r4
 8001990:	654a      	str	r2, [r1, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001992:	069a      	lsls	r2, r3, #26
 8001994:	d506      	bpl.n	80019a4 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001996:	4923      	ldr	r1, [pc, #140]	@ (8001a24 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001998:	4c2a      	ldr	r4, [pc, #168]	@ (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800199a:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 800199c:	4022      	ands	r2, r4
 800199e:	68ec      	ldr	r4, [r5, #12]
 80019a0:	4322      	orrs	r2, r4
 80019a2:	654a      	str	r2, [r1, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80019a4:	045a      	lsls	r2, r3, #17
 80019a6:	d50f      	bpl.n	80019c8 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80019a8:	491e      	ldr	r1, [pc, #120]	@ (8001a24 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80019aa:	69ec      	ldr	r4, [r5, #28]
 80019ac:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 80019ae:	0092      	lsls	r2, r2, #2
 80019b0:	0892      	lsrs	r2, r2, #2
 80019b2:	4322      	orrs	r2, r4
 80019b4:	654a      	str	r2, [r1, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80019b6:	2280      	movs	r2, #128	@ 0x80
 80019b8:	05d2      	lsls	r2, r2, #23
 80019ba:	4294      	cmp	r4, r2
 80019bc:	d104      	bne.n	80019c8 <HAL_RCCEx_PeriphCLKConfig+0x134>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80019be:	2280      	movs	r2, #128	@ 0x80
 80019c0:	68cc      	ldr	r4, [r1, #12]
 80019c2:	0252      	lsls	r2, r2, #9
 80019c4:	4322      	orrs	r2, r4
 80019c6:	60ca      	str	r2, [r1, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80019c8:	029a      	lsls	r2, r3, #10
 80019ca:	d50f      	bpl.n	80019ec <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80019cc:	4915      	ldr	r1, [pc, #84]	@ (8001a24 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80019ce:	4e1e      	ldr	r6, [pc, #120]	@ (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80019d0:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 80019d2:	6a2c      	ldr	r4, [r5, #32]
 80019d4:	4032      	ands	r2, r6
 80019d6:	4322      	orrs	r2, r4
 80019d8:	654a      	str	r2, [r1, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80019da:	2280      	movs	r2, #128	@ 0x80
 80019dc:	03d2      	lsls	r2, r2, #15
 80019de:	4294      	cmp	r4, r2
 80019e0:	d104      	bne.n	80019ec <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80019e2:	2280      	movs	r2, #128	@ 0x80
 80019e4:	68cc      	ldr	r4, [r1, #12]
 80019e6:	0452      	lsls	r2, r2, #17
 80019e8:	4322      	orrs	r2, r4
 80019ea:	60ca      	str	r2, [r1, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80019ec:	051b      	lsls	r3, r3, #20
 80019ee:	d50f      	bpl.n	8001a10 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80019f0:	4a0c      	ldr	r2, [pc, #48]	@ (8001a24 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80019f2:	4c16      	ldr	r4, [pc, #88]	@ (8001a4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80019f4:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80019f6:	6929      	ldr	r1, [r5, #16]
 80019f8:	4023      	ands	r3, r4
 80019fa:	430b      	orrs	r3, r1
 80019fc:	6553      	str	r3, [r2, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80019fe:	2380      	movs	r3, #128	@ 0x80
 8001a00:	01db      	lsls	r3, r3, #7
 8001a02:	4299      	cmp	r1, r3
 8001a04:	d104      	bne.n	8001a10 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001a06:	2380      	movs	r3, #128	@ 0x80
 8001a08:	68d1      	ldr	r1, [r2, #12]
 8001a0a:	025b      	lsls	r3, r3, #9
 8001a0c:	430b      	orrs	r3, r1
 8001a0e:	60d3      	str	r3, [r2, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 8001a10:	b005      	add	sp, #20
 8001a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a14:	f7ff f9be 	bl	8000d94 <HAL_GetTick>
 8001a18:	4b0d      	ldr	r3, [pc, #52]	@ (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001a1a:	1b80      	subs	r0, r0, r6
 8001a1c:	4298      	cmp	r0, r3
 8001a1e:	d800      	bhi.n	8001a22 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8001a20:	e778      	b.n	8001914 <HAL_RCCEx_PeriphCLKConfig+0x80>
 8001a22:	e789      	b.n	8001938 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001a24:	40021000 	.word	0x40021000
 8001a28:	40007000 	.word	0x40007000
 8001a2c:	fffffcff 	.word	0xfffffcff
 8001a30:	fffeffff 	.word	0xfffeffff
 8001a34:	efffffff 	.word	0xefffffff
 8001a38:	fffff3ff 	.word	0xfffff3ff
 8001a3c:	fff3ffff 	.word	0xfff3ffff
 8001a40:	ffcfffff 	.word	0xffcfffff
 8001a44:	ffffcfff 	.word	0xffffcfff
 8001a48:	ffbfffff 	.word	0xffbfffff
 8001a4c:	ffff3fff 	.word	0xffff3fff
 8001a50:	00001388 	.word	0x00001388

08001a54 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a54:	0001      	movs	r1, r0
{
 8001a56:	0003      	movs	r3, r0
  {
    return HAL_ERROR;
 8001a58:	2001      	movs	r0, #1
{
 8001a5a:	b510      	push	{r4, lr}
  if (htim->State != HAL_TIM_STATE_READY)
 8001a5c:	313d      	adds	r1, #61	@ 0x3d
 8001a5e:	780c      	ldrb	r4, [r1, #0]
 8001a60:	b2e2      	uxtb	r2, r4
 8001a62:	4284      	cmp	r4, r0
 8001a64:	d11c      	bne.n	8001aa0 <HAL_TIM_Base_Start_IT+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a66:	1800      	adds	r0, r0, r0
 8001a68:	7008      	strb	r0, [r1, #0]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	68d9      	ldr	r1, [r3, #12]
 8001a6e:	4311      	orrs	r1, r2
 8001a70:	60d9      	str	r1, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a72:	490d      	ldr	r1, [pc, #52]	@ (8001aa8 <HAL_TIM_Base_Start_IT+0x54>)
 8001a74:	428b      	cmp	r3, r1
 8001a76:	d006      	beq.n	8001a86 <HAL_TIM_Base_Start_IT+0x32>
 8001a78:	2180      	movs	r1, #128	@ 0x80
 8001a7a:	05c9      	lsls	r1, r1, #23
 8001a7c:	428b      	cmp	r3, r1
 8001a7e:	d002      	beq.n	8001a86 <HAL_TIM_Base_Start_IT+0x32>
 8001a80:	490a      	ldr	r1, [pc, #40]	@ (8001aac <HAL_TIM_Base_Start_IT+0x58>)
 8001a82:	428b      	cmp	r3, r1
 8001a84:	d10d      	bne.n	8001aa2 <HAL_TIM_Base_Start_IT+0x4e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a86:	689a      	ldr	r2, [r3, #8]
 8001a88:	4909      	ldr	r1, [pc, #36]	@ (8001ab0 <HAL_TIM_Base_Start_IT+0x5c>)
 8001a8a:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a8c:	2a06      	cmp	r2, #6
 8001a8e:	d006      	beq.n	8001a9e <HAL_TIM_Base_Start_IT+0x4a>
 8001a90:	3907      	subs	r1, #7
 8001a92:	428a      	cmp	r2, r1
 8001a94:	d003      	beq.n	8001a9e <HAL_TIM_Base_Start_IT+0x4a>
    {
      __HAL_TIM_ENABLE(htim);
 8001a96:	2201      	movs	r2, #1
 8001a98:	6819      	ldr	r1, [r3, #0]
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 8001a9e:	2000      	movs	r0, #0
}
 8001aa0:	bd10      	pop	{r4, pc}
    __HAL_TIM_ENABLE(htim);
 8001aa2:	6819      	ldr	r1, [r3, #0]
 8001aa4:	e7f9      	b.n	8001a9a <HAL_TIM_Base_Start_IT+0x46>
 8001aa6:	46c0      	nop			@ (mov r8, r8)
 8001aa8:	40012c00 	.word	0x40012c00
 8001aac:	40000400 	.word	0x40000400
 8001ab0:	00010007 	.word	0x00010007

08001ab4 <HAL_TIM_Base_Stop_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	6803      	ldr	r3, [r0, #0]
{
 8001ab8:	b510      	push	{r4, lr}
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8001aba:	68da      	ldr	r2, [r3, #12]
 8001abc:	438a      	bics	r2, r1
 8001abe:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001ac0:	6a1c      	ldr	r4, [r3, #32]
 8001ac2:	4a07      	ldr	r2, [pc, #28]	@ (8001ae0 <HAL_TIM_Base_Stop_IT+0x2c>)
 8001ac4:	4214      	tst	r4, r2
 8001ac6:	d106      	bne.n	8001ad6 <HAL_TIM_Base_Stop_IT+0x22>
 8001ac8:	6a1c      	ldr	r4, [r3, #32]
 8001aca:	4a06      	ldr	r2, [pc, #24]	@ (8001ae4 <HAL_TIM_Base_Stop_IT+0x30>)
 8001acc:	4214      	tst	r4, r2
 8001ace:	d102      	bne.n	8001ad6 <HAL_TIM_Base_Stop_IT+0x22>
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	438a      	bics	r2, r1
 8001ad4:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	303d      	adds	r0, #61	@ 0x3d
 8001ada:	7003      	strb	r3, [r0, #0]

  /* Return function status */
  return HAL_OK;
}
 8001adc:	2000      	movs	r0, #0
 8001ade:	bd10      	pop	{r4, pc}
 8001ae0:	00001111 	.word	0x00001111
 8001ae4:	00000444 	.word	0x00000444

08001ae8 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8001ae8:	4770      	bx	lr

08001aea <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8001aea:	4770      	bx	lr

08001aec <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8001aec:	4770      	bx	lr

08001aee <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8001aee:	4770      	bx	lr

08001af0 <HAL_TIM_IRQHandler>:
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001af0:	2202      	movs	r2, #2
  uint32_t itsource = htim->Instance->DIER;
 8001af2:	6803      	ldr	r3, [r0, #0]
{
 8001af4:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 8001af6:	68dd      	ldr	r5, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001af8:	691e      	ldr	r6, [r3, #16]
{
 8001afa:	0004      	movs	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001afc:	4216      	tst	r6, r2
 8001afe:	d00d      	beq.n	8001b1c <HAL_TIM_IRQHandler+0x2c>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001b00:	4215      	tst	r5, r2
 8001b02:	d00b      	beq.n	8001b1c <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001b04:	3a05      	subs	r2, #5
 8001b06:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b08:	3204      	adds	r2, #4
 8001b0a:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	079b      	lsls	r3, r3, #30
 8001b10:	d100      	bne.n	8001b14 <HAL_TIM_IRQHandler+0x24>
 8001b12:	e07c      	b.n	8001c0e <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8001b14:	f7ff ffe9 	bl	8001aea <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001b1c:	2304      	movs	r3, #4
 8001b1e:	421e      	tst	r6, r3
 8001b20:	d012      	beq.n	8001b48 <HAL_TIM_IRQHandler+0x58>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001b22:	421d      	tst	r5, r3
 8001b24:	d010      	beq.n	8001b48 <HAL_TIM_IRQHandler+0x58>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001b26:	2205      	movs	r2, #5
 8001b28:	6823      	ldr	r3, [r4, #0]
 8001b2a:	4252      	negs	r2, r2
 8001b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b2e:	3207      	adds	r2, #7
 8001b30:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b32:	699a      	ldr	r2, [r3, #24]
 8001b34:	23c0      	movs	r3, #192	@ 0xc0
 8001b36:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8001b38:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b3a:	421a      	tst	r2, r3
 8001b3c:	d100      	bne.n	8001b40 <HAL_TIM_IRQHandler+0x50>
 8001b3e:	e06c      	b.n	8001c1a <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001b40:	f7ff ffd3 	bl	8001aea <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b44:	2300      	movs	r3, #0
 8001b46:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001b48:	2308      	movs	r3, #8
 8001b4a:	421e      	tst	r6, r3
 8001b4c:	d00f      	beq.n	8001b6e <HAL_TIM_IRQHandler+0x7e>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001b4e:	421d      	tst	r5, r3
 8001b50:	d00d      	beq.n	8001b6e <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001b52:	2209      	movs	r2, #9
 8001b54:	6823      	ldr	r3, [r4, #0]
 8001b56:	4252      	negs	r2, r2
 8001b58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b5a:	320d      	adds	r2, #13
 8001b5c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b5e:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8001b60:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b62:	079b      	lsls	r3, r3, #30
 8001b64:	d05f      	beq.n	8001c26 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001b66:	f7ff ffc0 	bl	8001aea <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001b6e:	2310      	movs	r3, #16
 8001b70:	421e      	tst	r6, r3
 8001b72:	d011      	beq.n	8001b98 <HAL_TIM_IRQHandler+0xa8>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001b74:	421d      	tst	r5, r3
 8001b76:	d00f      	beq.n	8001b98 <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001b78:	2211      	movs	r2, #17
 8001b7a:	6823      	ldr	r3, [r4, #0]
 8001b7c:	4252      	negs	r2, r2
 8001b7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b80:	3219      	adds	r2, #25
 8001b82:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b84:	69da      	ldr	r2, [r3, #28]
 8001b86:	23c0      	movs	r3, #192	@ 0xc0
 8001b88:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8001b8a:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b8c:	421a      	tst	r2, r3
 8001b8e:	d050      	beq.n	8001c32 <HAL_TIM_IRQHandler+0x142>
        HAL_TIM_IC_CaptureCallback(htim);
 8001b90:	f7ff ffab 	bl	8001aea <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b94:	2300      	movs	r3, #0
 8001b96:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001b98:	2301      	movs	r3, #1
 8001b9a:	421e      	tst	r6, r3
 8001b9c:	d008      	beq.n	8001bb0 <HAL_TIM_IRQHandler+0xc0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001b9e:	421d      	tst	r5, r3
 8001ba0:	d006      	beq.n	8001bb0 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	6823      	ldr	r3, [r4, #0]
 8001ba6:	4252      	negs	r2, r2
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ba8:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001baa:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001bac:	f002 f9b4 	bl	8003f18 <HAL_TIM_PeriodElapsedCallback>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001bb0:	2382      	movs	r3, #130	@ 0x82
 8001bb2:	019b      	lsls	r3, r3, #6
 8001bb4:	421e      	tst	r6, r3
 8001bb6:	d007      	beq.n	8001bc8 <HAL_TIM_IRQHandler+0xd8>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001bb8:	062b      	lsls	r3, r5, #24
 8001bba:	d505      	bpl.n	8001bc8 <HAL_TIM_IRQHandler+0xd8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8001bbc:	6823      	ldr	r3, [r4, #0]
 8001bbe:	4a20      	ldr	r2, [pc, #128]	@ (8001c40 <HAL_TIM_IRQHandler+0x150>)
      HAL_TIMEx_BreakCallback(htim);
 8001bc0:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8001bc2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001bc4:	f000 f991 	bl	8001eea <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001bc8:	05f3      	lsls	r3, r6, #23
 8001bca:	d507      	bpl.n	8001bdc <HAL_TIM_IRQHandler+0xec>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001bcc:	062b      	lsls	r3, r5, #24
 8001bce:	d505      	bpl.n	8001bdc <HAL_TIM_IRQHandler+0xec>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001bd0:	6823      	ldr	r3, [r4, #0]
 8001bd2:	4a1c      	ldr	r2, [pc, #112]	@ (8001c44 <HAL_TIM_IRQHandler+0x154>)
      HAL_TIMEx_Break2Callback(htim);
 8001bd4:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001bd6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8001bd8:	f000 f988 	bl	8001eec <HAL_TIMEx_Break2Callback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001bdc:	2340      	movs	r3, #64	@ 0x40
 8001bde:	421e      	tst	r6, r3
 8001be0:	d008      	beq.n	8001bf4 <HAL_TIM_IRQHandler+0x104>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001be2:	421d      	tst	r5, r3
 8001be4:	d006      	beq.n	8001bf4 <HAL_TIM_IRQHandler+0x104>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001be6:	2241      	movs	r2, #65	@ 0x41
 8001be8:	6823      	ldr	r3, [r4, #0]
 8001bea:	4252      	negs	r2, r2
      HAL_TIM_TriggerCallback(htim);
 8001bec:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001bee:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001bf0:	f7ff ff7d 	bl	8001aee <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001bf4:	2320      	movs	r3, #32
 8001bf6:	421e      	tst	r6, r3
 8001bf8:	d008      	beq.n	8001c0c <HAL_TIM_IRQHandler+0x11c>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001bfa:	421d      	tst	r5, r3
 8001bfc:	d006      	beq.n	8001c0c <HAL_TIM_IRQHandler+0x11c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001bfe:	2221      	movs	r2, #33	@ 0x21
 8001c00:	6823      	ldr	r3, [r4, #0]
 8001c02:	4252      	negs	r2, r2
      HAL_TIMEx_CommutCallback(htim);
 8001c04:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001c06:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8001c08:	f000 f96e 	bl	8001ee8 <HAL_TIMEx_CommutCallback>
}
 8001c0c:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c0e:	f7ff ff6b 	bl	8001ae8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c12:	0020      	movs	r0, r4
 8001c14:	f7ff ff6a 	bl	8001aec <HAL_TIM_PWM_PulseFinishedCallback>
 8001c18:	e77e      	b.n	8001b18 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c1a:	f7ff ff65 	bl	8001ae8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c1e:	0020      	movs	r0, r4
 8001c20:	f7ff ff64 	bl	8001aec <HAL_TIM_PWM_PulseFinishedCallback>
 8001c24:	e78e      	b.n	8001b44 <HAL_TIM_IRQHandler+0x54>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c26:	f7ff ff5f 	bl	8001ae8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c2a:	0020      	movs	r0, r4
 8001c2c:	f7ff ff5e 	bl	8001aec <HAL_TIM_PWM_PulseFinishedCallback>
 8001c30:	e79b      	b.n	8001b6a <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c32:	f7ff ff59 	bl	8001ae8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c36:	0020      	movs	r0, r4
 8001c38:	f7ff ff58 	bl	8001aec <HAL_TIM_PWM_PulseFinishedCallback>
 8001c3c:	e7aa      	b.n	8001b94 <HAL_TIM_IRQHandler+0xa4>
 8001c3e:	46c0      	nop			@ (mov r8, r8)
 8001c40:	ffffdf7f 	.word	0xffffdf7f
 8001c44:	fffffeff 	.word	0xfffffeff

08001c48 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c48:	4a20      	ldr	r2, [pc, #128]	@ (8001ccc <TIM_Base_SetConfig+0x84>)
{
 8001c4a:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8001c4c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c4e:	4290      	cmp	r0, r2
 8001c50:	d006      	beq.n	8001c60 <TIM_Base_SetConfig+0x18>
 8001c52:	2480      	movs	r4, #128	@ 0x80
 8001c54:	05e4      	lsls	r4, r4, #23
 8001c56:	42a0      	cmp	r0, r4
 8001c58:	d002      	beq.n	8001c60 <TIM_Base_SetConfig+0x18>
 8001c5a:	4c1d      	ldr	r4, [pc, #116]	@ (8001cd0 <TIM_Base_SetConfig+0x88>)
 8001c5c:	42a0      	cmp	r0, r4
 8001c5e:	d10c      	bne.n	8001c7a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c60:	2470      	movs	r4, #112	@ 0x70
 8001c62:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8001c64:	684c      	ldr	r4, [r1, #4]
 8001c66:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c68:	4290      	cmp	r0, r2
 8001c6a:	d00f      	beq.n	8001c8c <TIM_Base_SetConfig+0x44>
 8001c6c:	2480      	movs	r4, #128	@ 0x80
 8001c6e:	05e4      	lsls	r4, r4, #23
 8001c70:	42a0      	cmp	r0, r4
 8001c72:	d00b      	beq.n	8001c8c <TIM_Base_SetConfig+0x44>
 8001c74:	4c16      	ldr	r4, [pc, #88]	@ (8001cd0 <TIM_Base_SetConfig+0x88>)
 8001c76:	42a0      	cmp	r0, r4
 8001c78:	d008      	beq.n	8001c8c <TIM_Base_SetConfig+0x44>
 8001c7a:	4c16      	ldr	r4, [pc, #88]	@ (8001cd4 <TIM_Base_SetConfig+0x8c>)
 8001c7c:	42a0      	cmp	r0, r4
 8001c7e:	d005      	beq.n	8001c8c <TIM_Base_SetConfig+0x44>
 8001c80:	4c15      	ldr	r4, [pc, #84]	@ (8001cd8 <TIM_Base_SetConfig+0x90>)
 8001c82:	42a0      	cmp	r0, r4
 8001c84:	d002      	beq.n	8001c8c <TIM_Base_SetConfig+0x44>
 8001c86:	4c15      	ldr	r4, [pc, #84]	@ (8001cdc <TIM_Base_SetConfig+0x94>)
 8001c88:	42a0      	cmp	r0, r4
 8001c8a:	d103      	bne.n	8001c94 <TIM_Base_SetConfig+0x4c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c8c:	4c14      	ldr	r4, [pc, #80]	@ (8001ce0 <TIM_Base_SetConfig+0x98>)
 8001c8e:	401c      	ands	r4, r3
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c90:	68cb      	ldr	r3, [r1, #12]
 8001c92:	4323      	orrs	r3, r4
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c94:	2480      	movs	r4, #128	@ 0x80
 8001c96:	43a3      	bics	r3, r4
 8001c98:	694c      	ldr	r4, [r1, #20]
 8001c9a:	4323      	orrs	r3, r4

  TIMx->CR1 = tmpcr1;
 8001c9c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c9e:	688b      	ldr	r3, [r1, #8]
 8001ca0:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ca2:	680b      	ldr	r3, [r1, #0]
 8001ca4:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ca6:	4290      	cmp	r0, r2
 8001ca8:	d005      	beq.n	8001cb6 <TIM_Base_SetConfig+0x6e>
 8001caa:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd8 <TIM_Base_SetConfig+0x90>)
 8001cac:	4298      	cmp	r0, r3
 8001cae:	d002      	beq.n	8001cb6 <TIM_Base_SetConfig+0x6e>
 8001cb0:	4b0a      	ldr	r3, [pc, #40]	@ (8001cdc <TIM_Base_SetConfig+0x94>)
 8001cb2:	4298      	cmp	r0, r3
 8001cb4:	d101      	bne.n	8001cba <TIM_Base_SetConfig+0x72>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001cb6:	690b      	ldr	r3, [r1, #16]
 8001cb8:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001cba:	2201      	movs	r2, #1
 8001cbc:	6142      	str	r2, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001cbe:	6903      	ldr	r3, [r0, #16]
 8001cc0:	4213      	tst	r3, r2
 8001cc2:	d002      	beq.n	8001cca <TIM_Base_SetConfig+0x82>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001cc4:	6903      	ldr	r3, [r0, #16]
 8001cc6:	4393      	bics	r3, r2
 8001cc8:	6103      	str	r3, [r0, #16]
  }
}
 8001cca:	bd10      	pop	{r4, pc}
 8001ccc:	40012c00 	.word	0x40012c00
 8001cd0:	40000400 	.word	0x40000400
 8001cd4:	40002000 	.word	0x40002000
 8001cd8:	40014400 	.word	0x40014400
 8001cdc:	40014800 	.word	0x40014800
 8001ce0:	fffffcff 	.word	0xfffffcff

08001ce4 <HAL_TIM_Base_Init>:
{
 8001ce4:	b570      	push	{r4, r5, r6, lr}
 8001ce6:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001ce8:	2001      	movs	r0, #1
  if (htim == NULL)
 8001cea:	2c00      	cmp	r4, #0
 8001cec:	d023      	beq.n	8001d36 <HAL_TIM_Base_Init+0x52>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001cee:	0025      	movs	r5, r4
 8001cf0:	353d      	adds	r5, #61	@ 0x3d
 8001cf2:	782b      	ldrb	r3, [r5, #0]
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d105      	bne.n	8001d06 <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8001cfa:	0023      	movs	r3, r4
 8001cfc:	333c      	adds	r3, #60	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001cfe:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8001d00:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 8001d02:	f7fe fedf 	bl	8000ac4 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001d06:	2302      	movs	r3, #2
 8001d08:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d0a:	6820      	ldr	r0, [r4, #0]
 8001d0c:	1d21      	adds	r1, r4, #4
 8001d0e:	f7ff ff9b 	bl	8001c48 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d12:	0022      	movs	r2, r4
 8001d14:	2301      	movs	r3, #1
  return HAL_OK;
 8001d16:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d18:	3248      	adds	r2, #72	@ 0x48
 8001d1a:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d1c:	3447      	adds	r4, #71	@ 0x47
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d1e:	3a0a      	subs	r2, #10
 8001d20:	7013      	strb	r3, [r2, #0]
 8001d22:	7053      	strb	r3, [r2, #1]
 8001d24:	7093      	strb	r3, [r2, #2]
 8001d26:	70d3      	strb	r3, [r2, #3]
 8001d28:	7113      	strb	r3, [r2, #4]
 8001d2a:	7153      	strb	r3, [r2, #5]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d2c:	7193      	strb	r3, [r2, #6]
 8001d2e:	71d3      	strb	r3, [r2, #7]
 8001d30:	7213      	strb	r3, [r2, #8]
 8001d32:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8001d34:	702b      	strb	r3, [r5, #0]
}
 8001d36:	bd70      	pop	{r4, r5, r6, pc}

08001d38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001d38:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001d3a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d3c:	4d03      	ldr	r5, [pc, #12]	@ (8001d4c <TIM_ETR_SetConfig+0x14>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	021b      	lsls	r3, r3, #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d42:	402c      	ands	r4, r5
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d44:	4313      	orrs	r3, r2
 8001d46:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d48:	6083      	str	r3, [r0, #8]
}
 8001d4a:	bd30      	pop	{r4, r5, pc}
 8001d4c:	ffff00ff 	.word	0xffff00ff

08001d50 <HAL_TIM_ConfigClockSource>:
{
 8001d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8001d52:	0005      	movs	r5, r0
 8001d54:	2202      	movs	r2, #2
 8001d56:	353c      	adds	r5, #60	@ 0x3c
 8001d58:	782c      	ldrb	r4, [r5, #0]
{
 8001d5a:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8001d5c:	0010      	movs	r0, r2
 8001d5e:	2c01      	cmp	r4, #1
 8001d60:	d01b      	beq.n	8001d9a <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8001d62:	001e      	movs	r6, r3
  __HAL_LOCK(htim);
 8001d64:	3801      	subs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001d66:	363d      	adds	r6, #61	@ 0x3d
  __HAL_LOCK(htim);
 8001d68:	7028      	strb	r0, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001d6a:	7032      	strb	r2, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 8001d6c:	681c      	ldr	r4, [r3, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d6e:	4a41      	ldr	r2, [pc, #260]	@ (8001e74 <HAL_TIM_ConfigClockSource+0x124>)
  tmpsmcr = htim->Instance->SMCR;
 8001d70:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d72:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8001d74:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8001d76:	680b      	ldr	r3, [r1, #0]
 8001d78:	2b60      	cmp	r3, #96	@ 0x60
 8001d7a:	d04e      	beq.n	8001e1a <HAL_TIM_ConfigClockSource+0xca>
 8001d7c:	d82d      	bhi.n	8001dda <HAL_TIM_ConfigClockSource+0x8a>
 8001d7e:	2b40      	cmp	r3, #64	@ 0x40
 8001d80:	d062      	beq.n	8001e48 <HAL_TIM_ConfigClockSource+0xf8>
 8001d82:	d813      	bhi.n	8001dac <HAL_TIM_ConfigClockSource+0x5c>
 8001d84:	2b20      	cmp	r3, #32
 8001d86:	d00b      	beq.n	8001da0 <HAL_TIM_ConfigClockSource+0x50>
 8001d88:	d808      	bhi.n	8001d9c <HAL_TIM_ConfigClockSource+0x4c>
 8001d8a:	2210      	movs	r2, #16
 8001d8c:	0019      	movs	r1, r3
 8001d8e:	4391      	bics	r1, r2
 8001d90:	d006      	beq.n	8001da0 <HAL_TIM_ConfigClockSource+0x50>
  htim->State = HAL_TIM_STATE_READY;
 8001d92:	2301      	movs	r3, #1
 8001d94:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 8001d96:	2300      	movs	r3, #0
 8001d98:	702b      	strb	r3, [r5, #0]
}
 8001d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 8001d9c:	2b30      	cmp	r3, #48	@ 0x30
 8001d9e:	d1f8      	bne.n	8001d92 <HAL_TIM_ConfigClockSource+0x42>
  tmpsmcr = TIMx->SMCR;
 8001da0:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001da2:	4935      	ldr	r1, [pc, #212]	@ (8001e78 <HAL_TIM_ConfigClockSource+0x128>)
 8001da4:	400a      	ands	r2, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001da6:	4313      	orrs	r3, r2
 8001da8:	2207      	movs	r2, #7
 8001daa:	e028      	b.n	8001dfe <HAL_TIM_ConfigClockSource+0xae>
  switch (sClockSourceConfig->ClockSource)
 8001dac:	2b50      	cmp	r3, #80	@ 0x50
 8001dae:	d1f0      	bne.n	8001d92 <HAL_TIM_ConfigClockSource+0x42>
                               sClockSourceConfig->ClockPolarity,
 8001db0:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8001db2:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8001db4:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001db6:	6a27      	ldr	r7, [r4, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001db8:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001dba:	4387      	bics	r7, r0
 8001dbc:	6227      	str	r7, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001dbe:	27f0      	movs	r7, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8001dc0:	69a0      	ldr	r0, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001dc2:	43b8      	bics	r0, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001dc4:	4303      	orrs	r3, r0
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001dc6:	200a      	movs	r0, #10
 8001dc8:	4381      	bics	r1, r0
  tmpccer |= TIM_ICPolarity;
 8001dca:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001dcc:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8001dce:	6222      	str	r2, [r4, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001dd0:	4b29      	ldr	r3, [pc, #164]	@ (8001e78 <HAL_TIM_ConfigClockSource+0x128>)
  tmpsmcr = TIMx->SMCR;
 8001dd2:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001dd4:	401a      	ands	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001dd6:	2357      	movs	r3, #87	@ 0x57
 8001dd8:	e011      	b.n	8001dfe <HAL_TIM_ConfigClockSource+0xae>
  switch (sClockSourceConfig->ClockSource)
 8001dda:	2280      	movs	r2, #128	@ 0x80
 8001ddc:	0152      	lsls	r2, r2, #5
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d00f      	beq.n	8001e02 <HAL_TIM_ConfigClockSource+0xb2>
 8001de2:	2280      	movs	r2, #128	@ 0x80
 8001de4:	0192      	lsls	r2, r2, #6
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d00d      	beq.n	8001e06 <HAL_TIM_ConfigClockSource+0xb6>
 8001dea:	2b70      	cmp	r3, #112	@ 0x70
 8001dec:	d1d1      	bne.n	8001d92 <HAL_TIM_ConfigClockSource+0x42>
      TIM_ETR_SetConfig(htim->Instance,
 8001dee:	68cb      	ldr	r3, [r1, #12]
 8001df0:	684a      	ldr	r2, [r1, #4]
 8001df2:	0020      	movs	r0, r4
 8001df4:	6889      	ldr	r1, [r1, #8]
 8001df6:	f7ff ff9f 	bl	8001d38 <TIM_ETR_SetConfig>
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001dfa:	2377      	movs	r3, #119	@ 0x77
      tmpsmcr = htim->Instance->SMCR;
 8001dfc:	68a2      	ldr	r2, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001dfe:	4313      	orrs	r3, r2
      htim->Instance->SMCR = tmpsmcr;
 8001e00:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001e02:	2000      	movs	r0, #0
 8001e04:	e7c5      	b.n	8001d92 <HAL_TIM_ConfigClockSource+0x42>
      TIM_ETR_SetConfig(htim->Instance,
 8001e06:	68cb      	ldr	r3, [r1, #12]
 8001e08:	684a      	ldr	r2, [r1, #4]
 8001e0a:	0020      	movs	r0, r4
 8001e0c:	6889      	ldr	r1, [r1, #8]
 8001e0e:	f7ff ff93 	bl	8001d38 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001e12:	2380      	movs	r3, #128	@ 0x80
 8001e14:	68a2      	ldr	r2, [r4, #8]
 8001e16:	01db      	lsls	r3, r3, #7
 8001e18:	e7f1      	b.n	8001dfe <HAL_TIM_ConfigClockSource+0xae>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e1a:	2710      	movs	r7, #16
                               sClockSourceConfig->ClockPolarity,
 8001e1c:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8001e1e:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 8001e20:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e22:	6a20      	ldr	r0, [r4, #32]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001e24:	0312      	lsls	r2, r2, #12
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e26:	43b8      	bics	r0, r7
 8001e28:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e2a:	69a0      	ldr	r0, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001e2c:	4f13      	ldr	r7, [pc, #76]	@ (8001e7c <HAL_TIM_ConfigClockSource+0x12c>)
  tmpccer |= (TIM_ICPolarity << 4U);
 8001e2e:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001e30:	4038      	ands	r0, r7
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001e32:	4302      	orrs	r2, r0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001e34:	20a0      	movs	r0, #160	@ 0xa0
 8001e36:	4381      	bics	r1, r0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001e38:	430b      	orrs	r3, r1
  TIMx->CCMR1 = tmpccmr1 ;
 8001e3a:	61a2      	str	r2, [r4, #24]
  TIMx->CCER = tmpccer;
 8001e3c:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8001e3e:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001e40:	4b0d      	ldr	r3, [pc, #52]	@ (8001e78 <HAL_TIM_ConfigClockSource+0x128>)
 8001e42:	401a      	ands	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001e44:	2367      	movs	r3, #103	@ 0x67
 8001e46:	e7da      	b.n	8001dfe <HAL_TIM_ConfigClockSource+0xae>
                               sClockSourceConfig->ClockPolarity,
 8001e48:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8001e4a:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8001e4c:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e4e:	6a27      	ldr	r7, [r4, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001e50:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e52:	4387      	bics	r7, r0
 8001e54:	6227      	str	r7, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001e56:	27f0      	movs	r7, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8001e58:	69a0      	ldr	r0, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001e5a:	43b8      	bics	r0, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001e5c:	4303      	orrs	r3, r0
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001e5e:	200a      	movs	r0, #10
 8001e60:	4381      	bics	r1, r0
  tmpccer |= TIM_ICPolarity;
 8001e62:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001e64:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8001e66:	6222      	str	r2, [r4, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001e68:	4b03      	ldr	r3, [pc, #12]	@ (8001e78 <HAL_TIM_ConfigClockSource+0x128>)
  tmpsmcr = TIMx->SMCR;
 8001e6a:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001e6c:	401a      	ands	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001e6e:	2347      	movs	r3, #71	@ 0x47
 8001e70:	e7c5      	b.n	8001dfe <HAL_TIM_ConfigClockSource+0xae>
 8001e72:	46c0      	nop			@ (mov r8, r8)
 8001e74:	ffce0088 	.word	0xffce0088
 8001e78:	ffcfff8f 	.word	0xffcfff8f
 8001e7c:	ffff0fff 	.word	0xffff0fff

08001e80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001e80:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001e82:	0004      	movs	r4, r0
 8001e84:	2202      	movs	r2, #2
 8001e86:	343c      	adds	r4, #60	@ 0x3c
 8001e88:	7825      	ldrb	r5, [r4, #0]
{
 8001e8a:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8001e8c:	0010      	movs	r0, r2
 8001e8e:	2d01      	cmp	r5, #1
 8001e90:	d023      	beq.n	8001eda <HAL_TIMEx_MasterConfigSynchronization+0x5a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e92:	001d      	movs	r5, r3
 8001e94:	353d      	adds	r5, #61	@ 0x3d
 8001e96:	702a      	strb	r2, [r5, #0]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001e98:	681a      	ldr	r2, [r3, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001e9a:	4e10      	ldr	r6, [pc, #64]	@ (8001edc <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
  tmpcr2 = htim->Instance->CR2;
 8001e9c:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8001e9e:	6890      	ldr	r0, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001ea0:	42b2      	cmp	r2, r6
 8001ea2:	d103      	bne.n	8001eac <HAL_TIMEx_MasterConfigSynchronization+0x2c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001ea4:	4f0e      	ldr	r7, [pc, #56]	@ (8001ee0 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8001ea6:	403b      	ands	r3, r7
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001ea8:	684f      	ldr	r7, [r1, #4]
 8001eaa:	433b      	orrs	r3, r7
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001eac:	2770      	movs	r7, #112	@ 0x70
 8001eae:	43bb      	bics	r3, r7
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001eb0:	680f      	ldr	r7, [r1, #0]
 8001eb2:	433b      	orrs	r3, r7

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001eb4:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001eb6:	42b2      	cmp	r2, r6
 8001eb8:	d006      	beq.n	8001ec8 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8001eba:	2380      	movs	r3, #128	@ 0x80
 8001ebc:	05db      	lsls	r3, r3, #23
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d002      	beq.n	8001ec8 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8001ec2:	4b08      	ldr	r3, [pc, #32]	@ (8001ee4 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d104      	bne.n	8001ed2 <HAL_TIMEx_MasterConfigSynchronization+0x52>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001ec8:	2380      	movs	r3, #128	@ 0x80
 8001eca:	4398      	bics	r0, r3
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001ecc:	688b      	ldr	r3, [r1, #8]
 8001ece:	4318      	orrs	r0, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001ed0:	6090      	str	r0, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001ed2:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8001ed4:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001ed6:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8001ed8:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8001eda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001edc:	40012c00 	.word	0x40012c00
 8001ee0:	ff0fffff 	.word	0xff0fffff
 8001ee4:	40000400 	.word	0x40000400

08001ee8 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8001ee8:	4770      	bx	lr

08001eea <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8001eea:	4770      	bx	lr

08001eec <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 8001eec:	4770      	bx	lr
	...

08001ef0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001ef0:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ef2:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8001efc:	6801      	ldr	r1, [r0, #0]
 8001efe:	4d13      	ldr	r5, [pc, #76]	@ (8001f4c <UART_EndRxTransfer+0x5c>)
 8001f00:	680b      	ldr	r3, [r1, #0]
 8001f02:	402b      	ands	r3, r5
 8001f04:	600b      	str	r3, [r1, #0]
 8001f06:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f0a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f0e:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8001f12:	6802      	ldr	r2, [r0, #0]
 8001f14:	4c0e      	ldr	r4, [pc, #56]	@ (8001f50 <UART_EndRxTransfer+0x60>)
 8001f16:	6893      	ldr	r3, [r2, #8]
 8001f18:	4023      	ands	r3, r4
 8001f1a:	6093      	str	r3, [r2, #8]
 8001f1c:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f20:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d10a      	bne.n	8001f3c <UART_EndRxTransfer+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f26:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f2a:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f2e:	2410      	movs	r4, #16
 8001f30:	6802      	ldr	r2, [r0, #0]
 8001f32:	6813      	ldr	r3, [r2, #0]
 8001f34:	43a3      	bics	r3, r4
 8001f36:	6013      	str	r3, [r2, #0]
 8001f38:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001f3c:	0003      	movs	r3, r0
 8001f3e:	2220      	movs	r2, #32
 8001f40:	338c      	adds	r3, #140	@ 0x8c
 8001f42:	601a      	str	r2, [r3, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f44:	2300      	movs	r3, #0
 8001f46:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001f48:	6743      	str	r3, [r0, #116]	@ 0x74
}
 8001f4a:	bd30      	pop	{r4, r5, pc}
 8001f4c:	fffffedf 	.word	0xfffffedf
 8001f50:	effffffe 	.word	0xeffffffe

08001f54 <UART_TxISR_16BIT.part.0>:
  * @note   Function is called under interruption only, once
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
 8001f54:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f56:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f382 8810 	msr	PRIMASK, r2
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
  {
    if (huart->TxXferCount == 0U)
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8001f60:	2580      	movs	r5, #128	@ 0x80
 8001f62:	6801      	ldr	r1, [r0, #0]
 8001f64:	680b      	ldr	r3, [r1, #0]
 8001f66:	43ab      	bics	r3, r5
 8001f68:	600b      	str	r3, [r1, #0]
 8001f6a:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f6e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f72:	f382 8810 	msr	PRIMASK, r2

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001f76:	2340      	movs	r3, #64	@ 0x40
 8001f78:	6802      	ldr	r2, [r0, #0]
 8001f7a:	6810      	ldr	r0, [r2, #0]
 8001f7c:	4303      	orrs	r3, r0
 8001f7e:	6013      	str	r3, [r2, #0]
 8001f80:	f381 8810 	msr	PRIMASK, r1
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8001f84:	bd30      	pop	{r4, r5, pc}

08001f86 <UART_TxISR_8BIT>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001f86:	0003      	movs	r3, r0
 8001f88:	3388      	adds	r3, #136	@ 0x88
 8001f8a:	681b      	ldr	r3, [r3, #0]
{
 8001f8c:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001f8e:	2b21      	cmp	r3, #33	@ 0x21
 8001f90:	d106      	bne.n	8001fa0 <UART_TxISR_8BIT+0x1a>
    if (huart->TxXferCount == 0U)
 8001f92:	0002      	movs	r2, r0
 8001f94:	3256      	adds	r2, #86	@ 0x56
 8001f96:	8813      	ldrh	r3, [r2, #0]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d102      	bne.n	8001fa2 <UART_TxISR_8BIT+0x1c>
 8001f9c:	f7ff ffda 	bl	8001f54 <UART_TxISR_16BIT.part.0>
}
 8001fa0:	bd10      	pop	{r4, pc}
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8001fa2:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8001fa4:	6801      	ldr	r1, [r0, #0]
 8001fa6:	781c      	ldrb	r4, [r3, #0]
      huart->pTxBuffPtr++;
 8001fa8:	3301      	adds	r3, #1
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8001faa:	628c      	str	r4, [r1, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8001fac:	6503      	str	r3, [r0, #80]	@ 0x50
      huart->TxXferCount--;
 8001fae:	8813      	ldrh	r3, [r2, #0]
 8001fb0:	3b01      	subs	r3, #1
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	8013      	strh	r3, [r2, #0]
}
 8001fb6:	e7f3      	b.n	8001fa0 <UART_TxISR_8BIT+0x1a>

08001fb8 <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001fb8:	0003      	movs	r3, r0
 8001fba:	3388      	adds	r3, #136	@ 0x88
 8001fbc:	681b      	ldr	r3, [r3, #0]
{
 8001fbe:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001fc0:	2b21      	cmp	r3, #33	@ 0x21
 8001fc2:	d106      	bne.n	8001fd2 <UART_TxISR_16BIT+0x1a>
  {
    if (huart->TxXferCount == 0U)
 8001fc4:	0001      	movs	r1, r0
 8001fc6:	3156      	adds	r1, #86	@ 0x56
 8001fc8:	880b      	ldrh	r3, [r1, #0]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d102      	bne.n	8001fd4 <UART_TxISR_16BIT+0x1c>
 8001fce:	f7ff ffc1 	bl	8001f54 <UART_TxISR_16BIT.part.0>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8001fd2:	bd10      	pop	{r4, pc}
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8001fd4:	6d02      	ldr	r2, [r0, #80]	@ 0x50
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8001fd6:	6804      	ldr	r4, [r0, #0]
 8001fd8:	8813      	ldrh	r3, [r2, #0]
      huart->pTxBuffPtr += 2U;
 8001fda:	3202      	adds	r2, #2
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8001fdc:	05db      	lsls	r3, r3, #23
 8001fde:	0ddb      	lsrs	r3, r3, #23
 8001fe0:	62a3      	str	r3, [r4, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8001fe2:	6502      	str	r2, [r0, #80]	@ 0x50
      huart->TxXferCount--;
 8001fe4:	880b      	ldrh	r3, [r1, #0]
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	800b      	strh	r3, [r1, #0]
}
 8001fec:	e7f1      	b.n	8001fd2 <UART_TxISR_16BIT+0x1a>
	...

08001ff0 <UART_TxISR_8BIT_FIFOEN>:
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001ff0:	0003      	movs	r3, r0
 8001ff2:	3388      	adds	r3, #136	@ 0x88
 8001ff4:	681b      	ldr	r3, [r3, #0]
{
 8001ff6:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001ff8:	2b21      	cmp	r3, #33	@ 0x21
 8001ffa:	d121      	bne.n	8002040 <UART_TxISR_8BIT_FIFOEN+0x50>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8001ffc:	0003      	movs	r3, r0
    {
      if (huart->TxXferCount == 0U)
 8001ffe:	0001      	movs	r1, r0
        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);

        break; /* force exit loop */
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8002000:	2480      	movs	r4, #128	@ 0x80
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8002002:	336a      	adds	r3, #106	@ 0x6a
 8002004:	881b      	ldrh	r3, [r3, #0]
      if (huart->TxXferCount == 0U)
 8002006:	3156      	adds	r1, #86	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8002008:	2b00      	cmp	r3, #0
 800200a:	d019      	beq.n	8002040 <UART_TxISR_8BIT_FIFOEN+0x50>
      if (huart->TxXferCount == 0U)
 800200c:	880a      	ldrh	r2, [r1, #0]
 800200e:	2a00      	cmp	r2, #0
 8002010:	d117      	bne.n	8002042 <UART_TxISR_8BIT_FIFOEN+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002012:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002016:	3201      	adds	r2, #1
 8002018:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800201c:	6801      	ldr	r1, [r0, #0]
 800201e:	4d11      	ldr	r5, [pc, #68]	@ (8002064 <UART_TxISR_8BIT_FIFOEN+0x74>)
 8002020:	688b      	ldr	r3, [r1, #8]
 8002022:	402b      	ands	r3, r5
 8002024:	608b      	str	r3, [r1, #8]
 8002026:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800202a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800202e:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002032:	2340      	movs	r3, #64	@ 0x40
 8002034:	6802      	ldr	r2, [r0, #0]
 8002036:	6810      	ldr	r0, [r2, #0]
 8002038:	4303      	orrs	r3, r0
 800203a:	6013      	str	r3, [r2, #0]
 800203c:	f381 8810 	msr	PRIMASK, r1
      {
        /* Nothing to do */
      }
    }
  }
}
 8002040:	bd70      	pop	{r4, r5, r6, pc}
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8002042:	6805      	ldr	r5, [r0, #0]
 8002044:	69ea      	ldr	r2, [r5, #28]
 8002046:	4222      	tst	r2, r4
 8002048:	d008      	beq.n	800205c <UART_TxISR_8BIT_FIFOEN+0x6c>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800204a:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800204c:	7816      	ldrb	r6, [r2, #0]
        huart->pTxBuffPtr++;
 800204e:	3201      	adds	r2, #1
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8002050:	62ae      	str	r6, [r5, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8002052:	6502      	str	r2, [r0, #80]	@ 0x50
        huart->TxXferCount--;
 8002054:	880a      	ldrh	r2, [r1, #0]
 8002056:	3a01      	subs	r2, #1
 8002058:	b292      	uxth	r2, r2
 800205a:	800a      	strh	r2, [r1, #0]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800205c:	3b01      	subs	r3, #1
 800205e:	b29b      	uxth	r3, r3
 8002060:	e7d2      	b.n	8002008 <UART_TxISR_8BIT_FIFOEN+0x18>
 8002062:	46c0      	nop			@ (mov r8, r8)
 8002064:	ff7fffff 	.word	0xff7fffff

08002068 <UART_TxISR_16BIT_FIFOEN>:
{
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002068:	0003      	movs	r3, r0
 800206a:	3388      	adds	r3, #136	@ 0x88
 800206c:	681b      	ldr	r3, [r3, #0]
{
 800206e:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002070:	2b21      	cmp	r3, #33	@ 0x21
 8002072:	d121      	bne.n	80020b8 <UART_TxISR_16BIT_FIFOEN+0x50>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8002074:	0003      	movs	r3, r0
    {
      if (huart->TxXferCount == 0U)
 8002076:	0001      	movs	r1, r0
        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);

        break; /* force exit loop */
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8002078:	2480      	movs	r4, #128	@ 0x80
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800207a:	336a      	adds	r3, #106	@ 0x6a
 800207c:	881b      	ldrh	r3, [r3, #0]
      if (huart->TxXferCount == 0U)
 800207e:	3156      	adds	r1, #86	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8002080:	2b00      	cmp	r3, #0
 8002082:	d019      	beq.n	80020b8 <UART_TxISR_16BIT_FIFOEN+0x50>
      if (huart->TxXferCount == 0U)
 8002084:	880a      	ldrh	r2, [r1, #0]
 8002086:	2a00      	cmp	r2, #0
 8002088:	d117      	bne.n	80020ba <UART_TxISR_16BIT_FIFOEN+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800208a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800208e:	3201      	adds	r2, #1
 8002090:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8002094:	6801      	ldr	r1, [r0, #0]
 8002096:	4d12      	ldr	r5, [pc, #72]	@ (80020e0 <UART_TxISR_16BIT_FIFOEN+0x78>)
 8002098:	688b      	ldr	r3, [r1, #8]
 800209a:	402b      	ands	r3, r5
 800209c:	608b      	str	r3, [r1, #8]
 800209e:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020a2:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020a6:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80020aa:	2340      	movs	r3, #64	@ 0x40
 80020ac:	6802      	ldr	r2, [r0, #0]
 80020ae:	6810      	ldr	r0, [r2, #0]
 80020b0:	4303      	orrs	r3, r0
 80020b2:	6013      	str	r3, [r2, #0]
 80020b4:	f381 8810 	msr	PRIMASK, r1
      {
        /* Nothing to do */
      }
    }
  }
}
 80020b8:	bd70      	pop	{r4, r5, r6, pc}
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80020ba:	6806      	ldr	r6, [r0, #0]
 80020bc:	69f2      	ldr	r2, [r6, #28]
 80020be:	4222      	tst	r2, r4
 80020c0:	d00a      	beq.n	80020d8 <UART_TxISR_16BIT_FIFOEN+0x70>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 80020c2:	6d05      	ldr	r5, [r0, #80]	@ 0x50
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80020c4:	882a      	ldrh	r2, [r5, #0]
        huart->pTxBuffPtr += 2U;
 80020c6:	3502      	adds	r5, #2
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80020c8:	05d2      	lsls	r2, r2, #23
 80020ca:	0dd2      	lsrs	r2, r2, #23
 80020cc:	62b2      	str	r2, [r6, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 80020ce:	6505      	str	r5, [r0, #80]	@ 0x50
        huart->TxXferCount--;
 80020d0:	880a      	ldrh	r2, [r1, #0]
 80020d2:	3a01      	subs	r2, #1
 80020d4:	b292      	uxth	r2, r2
 80020d6:	800a      	strh	r2, [r1, #0]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80020d8:	3b01      	subs	r3, #1
 80020da:	b29b      	uxth	r3, r3
 80020dc:	e7d0      	b.n	8002080 <UART_TxISR_16BIT_FIFOEN+0x18>
 80020de:	46c0      	nop			@ (mov r8, r8)
 80020e0:	ff7fffff 	.word	0xff7fffff

080020e4 <HAL_UART_Transmit_IT>:
{
 80020e4:	b530      	push	{r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 80020e6:	0005      	movs	r5, r0
 80020e8:	3588      	adds	r5, #136	@ 0x88
 80020ea:	682c      	ldr	r4, [r5, #0]
{
 80020ec:	0003      	movs	r3, r0
    return HAL_BUSY;
 80020ee:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 80020f0:	2c20      	cmp	r4, #32
 80020f2:	d137      	bne.n	8002164 <HAL_UART_Transmit_IT+0x80>
      return HAL_ERROR;
 80020f4:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 80020f6:	2900      	cmp	r1, #0
 80020f8:	d034      	beq.n	8002164 <HAL_UART_Transmit_IT+0x80>
 80020fa:	2a00      	cmp	r2, #0
 80020fc:	d032      	beq.n	8002164 <HAL_UART_Transmit_IT+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020fe:	2080      	movs	r0, #128	@ 0x80
 8002100:	689c      	ldr	r4, [r3, #8]
 8002102:	0140      	lsls	r0, r0, #5
 8002104:	4284      	cmp	r4, r0
 8002106:	d105      	bne.n	8002114 <HAL_UART_Transmit_IT+0x30>
 8002108:	6918      	ldr	r0, [r3, #16]
 800210a:	2800      	cmp	r0, #0
 800210c:	d102      	bne.n	8002114 <HAL_UART_Transmit_IT+0x30>
      return HAL_ERROR;
 800210e:	3001      	adds	r0, #1
      if ((((uint32_t)pData) & 1U) != 0U)
 8002110:	4201      	tst	r1, r0
 8002112:	d127      	bne.n	8002164 <HAL_UART_Transmit_IT+0x80>
    huart->pTxBuffPtr  = pData;
 8002114:	6519      	str	r1, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8002116:	0019      	movs	r1, r3
 8002118:	3154      	adds	r1, #84	@ 0x54
 800211a:	800a      	strh	r2, [r1, #0]
    huart->TxXferCount = Size;
 800211c:	804a      	strh	r2, [r1, #2]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800211e:	001a      	movs	r2, r3
 8002120:	2100      	movs	r1, #0
 8002122:	3290      	adds	r2, #144	@ 0x90
 8002124:	6011      	str	r1, [r2, #0]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002126:	2221      	movs	r2, #33	@ 0x21
 8002128:	2180      	movs	r1, #128	@ 0x80
 800212a:	602a      	str	r2, [r5, #0]
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800212c:	2280      	movs	r2, #128	@ 0x80
 800212e:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8002130:	0592      	lsls	r2, r2, #22
 8002132:	0149      	lsls	r1, r1, #5
 8002134:	4290      	cmp	r0, r2
 8002136:	d116      	bne.n	8002166 <HAL_UART_Transmit_IT+0x82>
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8002138:	4a14      	ldr	r2, [pc, #80]	@ (800218c <HAL_UART_Transmit_IT+0xa8>)
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800213a:	428c      	cmp	r4, r1
 800213c:	d103      	bne.n	8002146 <HAL_UART_Transmit_IT+0x62>
 800213e:	6919      	ldr	r1, [r3, #16]
 8002140:	2900      	cmp	r1, #0
 8002142:	d100      	bne.n	8002146 <HAL_UART_Transmit_IT+0x62>
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8002144:	4a12      	ldr	r2, [pc, #72]	@ (8002190 <HAL_UART_Transmit_IT+0xac>)
 8002146:	679a      	str	r2, [r3, #120]	@ 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002148:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800214c:	2201      	movs	r2, #1
 800214e:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	2380      	movs	r3, #128	@ 0x80
 8002156:	6890      	ldr	r0, [r2, #8]
 8002158:	041b      	lsls	r3, r3, #16
 800215a:	4303      	orrs	r3, r0
 800215c:	6093      	str	r3, [r2, #8]
 800215e:	f381 8810 	msr	PRIMASK, r1
    return HAL_OK;
 8002162:	2000      	movs	r0, #0
}
 8002164:	bd30      	pop	{r4, r5, pc}
        huart->TxISR = UART_TxISR_8BIT;
 8002166:	4a0b      	ldr	r2, [pc, #44]	@ (8002194 <HAL_UART_Transmit_IT+0xb0>)
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002168:	428c      	cmp	r4, r1
 800216a:	d103      	bne.n	8002174 <HAL_UART_Transmit_IT+0x90>
 800216c:	6919      	ldr	r1, [r3, #16]
 800216e:	2900      	cmp	r1, #0
 8002170:	d100      	bne.n	8002174 <HAL_UART_Transmit_IT+0x90>
        huart->TxISR = UART_TxISR_16BIT;
 8002172:	4a09      	ldr	r2, [pc, #36]	@ (8002198 <HAL_UART_Transmit_IT+0xb4>)
 8002174:	679a      	str	r2, [r3, #120]	@ 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002176:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800217a:	2201      	movs	r2, #1
 800217c:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	2380      	movs	r3, #128	@ 0x80
 8002184:	6810      	ldr	r0, [r2, #0]
 8002186:	4303      	orrs	r3, r0
 8002188:	6013      	str	r3, [r2, #0]
 800218a:	e7e8      	b.n	800215e <HAL_UART_Transmit_IT+0x7a>
 800218c:	08001ff1 	.word	0x08001ff1
 8002190:	08002069 	.word	0x08002069
 8002194:	08001f87 	.word	0x08001f87
 8002198:	08001fb9 	.word	0x08001fb9

0800219c <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 800219c:	4770      	bx	lr

0800219e <UART_DMAAbortOnError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800219e:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxXferCount = 0U;
 80021a0:	2300      	movs	r3, #0
 80021a2:	0002      	movs	r2, r0
{
 80021a4:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 80021a6:	325e      	adds	r2, #94	@ 0x5e
 80021a8:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 80021aa:	3a08      	subs	r2, #8
 80021ac:	8013      	strh	r3, [r2, #0]
  HAL_UART_ErrorCallback(huart);
 80021ae:	f7ff fff5 	bl	800219c <HAL_UART_ErrorCallback>
}
 80021b2:	bd10      	pop	{r4, pc}

080021b4 <HAL_UART_AbortTransmitCpltCallback>:
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
 80021b4:	4770      	bx	lr
	...

080021b8 <HAL_UART_AbortTransmit_IT>:
{
 80021b8:	b570      	push	{r4, r5, r6, lr}
 80021ba:	0004      	movs	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021bc:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021c0:	2101      	movs	r1, #1
 80021c2:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TCIE | USART_CR1_TXEIE_TXFNFIE));
 80021c6:	25c0      	movs	r5, #192	@ 0xc0
 80021c8:	6822      	ldr	r2, [r4, #0]
 80021ca:	6813      	ldr	r3, [r2, #0]
 80021cc:	43ab      	bics	r3, r5
 80021ce:	6013      	str	r3, [r2, #0]
 80021d0:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021d4:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021d8:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80021dc:	6822      	ldr	r2, [r4, #0]
 80021de:	4d20      	ldr	r5, [pc, #128]	@ (8002260 <HAL_UART_AbortTransmit_IT+0xa8>)
 80021e0:	6893      	ldr	r3, [r2, #8]
 80021e2:	402b      	ands	r3, r5
 80021e4:	6093      	str	r3, [r2, #8]
 80021e6:	f380 8810 	msr	PRIMASK, r0
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80021ea:	6823      	ldr	r3, [r4, #0]
 80021ec:	2280      	movs	r2, #128	@ 0x80
 80021ee:	689d      	ldr	r5, [r3, #8]
 80021f0:	0028      	movs	r0, r5
 80021f2:	4010      	ands	r0, r2
 80021f4:	4215      	tst	r5, r2
 80021f6:	d022      	beq.n	800223e <HAL_UART_AbortTransmit_IT+0x86>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021f8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021fc:	f381 8810 	msr	PRIMASK, r1
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002200:	6821      	ldr	r1, [r4, #0]
 8002202:	688b      	ldr	r3, [r1, #8]
 8002204:	4393      	bics	r3, r2
 8002206:	608b      	str	r3, [r1, #8]
 8002208:	f380 8810 	msr	PRIMASK, r0
    if (huart->hdmatx != NULL)
 800220c:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 800220e:	2800      	cmp	r0, #0
 8002210:	d00a      	beq.n	8002228 <HAL_UART_AbortTransmit_IT+0x70>
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 8002212:	4b14      	ldr	r3, [pc, #80]	@ (8002264 <HAL_UART_AbortTransmit_IT+0xac>)
 8002214:	6383      	str	r3, [r0, #56]	@ 0x38
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8002216:	f7fe fe4d 	bl	8000eb4 <HAL_DMA_Abort_IT>
 800221a:	2800      	cmp	r0, #0
 800221c:	d002      	beq.n	8002224 <HAL_UART_AbortTransmit_IT+0x6c>
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 800221e:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8002220:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8002222:	4798      	blx	r3
}
 8002224:	2000      	movs	r0, #0
 8002226:	bd70      	pop	{r4, r5, r6, pc}
      huart->TxXferCount = 0U;
 8002228:	0023      	movs	r3, r4
 800222a:	3356      	adds	r3, #86	@ 0x56
 800222c:	8018      	strh	r0, [r3, #0]
      huart->TxISR = NULL;
 800222e:	67a0      	str	r0, [r4, #120]	@ 0x78
      huart->gState = HAL_UART_STATE_READY;
 8002230:	3332      	adds	r3, #50	@ 0x32
    huart->gState = HAL_UART_STATE_READY;
 8002232:	2220      	movs	r2, #32
    HAL_UART_AbortTransmitCpltCallback(huart);
 8002234:	0020      	movs	r0, r4
    huart->gState = HAL_UART_STATE_READY;
 8002236:	601a      	str	r2, [r3, #0]
    HAL_UART_AbortTransmitCpltCallback(huart);
 8002238:	f7ff ffbc 	bl	80021b4 <HAL_UART_AbortTransmitCpltCallback>
 800223c:	e7f2      	b.n	8002224 <HAL_UART_AbortTransmit_IT+0x6c>
    huart->TxXferCount = 0U;
 800223e:	0022      	movs	r2, r4
 8002240:	3256      	adds	r2, #86	@ 0x56
 8002242:	8010      	strh	r0, [r2, #0]
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8002244:	2280      	movs	r2, #128	@ 0x80
 8002246:	6e61      	ldr	r1, [r4, #100]	@ 0x64
    huart->TxISR = NULL;
 8002248:	67a0      	str	r0, [r4, #120]	@ 0x78
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800224a:	0592      	lsls	r2, r2, #22
 800224c:	4291      	cmp	r1, r2
 800224e:	d103      	bne.n	8002258 <HAL_UART_AbortTransmit_IT+0xa0>
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8002250:	2210      	movs	r2, #16
 8002252:	6999      	ldr	r1, [r3, #24]
 8002254:	430a      	orrs	r2, r1
 8002256:	619a      	str	r2, [r3, #24]
    huart->gState = HAL_UART_STATE_READY;
 8002258:	0023      	movs	r3, r4
 800225a:	3388      	adds	r3, #136	@ 0x88
 800225c:	e7e9      	b.n	8002232 <HAL_UART_AbortTransmit_IT+0x7a>
 800225e:	46c0      	nop			@ (mov r8, r8)
 8002260:	ff7fffff 	.word	0xff7fffff
 8002264:	08002269 	.word	0x08002269

08002268 <UART_DMATxOnlyAbortCallback>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002268:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->TxXferCount = 0U;
 800226a:	2200      	movs	r2, #0
 800226c:	0003      	movs	r3, r0
 800226e:	3356      	adds	r3, #86	@ 0x56
{
 8002270:	b510      	push	{r4, lr}
  huart->TxXferCount = 0U;
 8002272:	801a      	strh	r2, [r3, #0]
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8002274:	2380      	movs	r3, #128	@ 0x80
 8002276:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 8002278:	059b      	lsls	r3, r3, #22
 800227a:	429a      	cmp	r2, r3
 800227c:	d104      	bne.n	8002288 <UART_DMATxOnlyAbortCallback+0x20>
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800227e:	2310      	movs	r3, #16
 8002280:	6802      	ldr	r2, [r0, #0]
 8002282:	6991      	ldr	r1, [r2, #24]
 8002284:	430b      	orrs	r3, r1
 8002286:	6193      	str	r3, [r2, #24]
  huart->gState = HAL_UART_STATE_READY;
 8002288:	0003      	movs	r3, r0
 800228a:	2220      	movs	r2, #32
 800228c:	3388      	adds	r3, #136	@ 0x88
 800228e:	601a      	str	r2, [r3, #0]
  HAL_UART_AbortTransmitCpltCallback(huart);
 8002290:	f7ff ff90 	bl	80021b4 <HAL_UART_AbortTransmitCpltCallback>
}
 8002294:	bd10      	pop	{r4, pc}

08002296 <HAL_UART_AbortReceiveCpltCallback>:
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
 8002296:	4770      	bx	lr

08002298 <HAL_UART_AbortReceive_IT>:
{
 8002298:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800229a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800229e:	2201      	movs	r2, #1
 80022a0:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 80022a4:	6801      	ldr	r1, [r0, #0]
 80022a6:	4d2d      	ldr	r5, [pc, #180]	@ (800235c <HAL_UART_AbortReceive_IT+0xc4>)
 80022a8:	680b      	ldr	r3, [r1, #0]
 80022aa:	402b      	ands	r3, r5
 80022ac:	600b      	str	r3, [r1, #0]
 80022ae:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022b2:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022b6:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80022ba:	6802      	ldr	r2, [r0, #0]
 80022bc:	4c28      	ldr	r4, [pc, #160]	@ (8002360 <HAL_UART_AbortReceive_IT+0xc8>)
 80022be:	6893      	ldr	r3, [r2, #8]
 80022c0:	4023      	ands	r3, r4
 80022c2:	6093      	str	r3, [r2, #8]
 80022c4:	f381 8810 	msr	PRIMASK, r1
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80022c8:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d10a      	bne.n	80022e4 <HAL_UART_AbortReceive_IT+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022ce:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022d2:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80022d6:	2410      	movs	r4, #16
 80022d8:	6802      	ldr	r2, [r0, #0]
 80022da:	6813      	ldr	r3, [r2, #0]
 80022dc:	43a3      	bics	r3, r4
 80022de:	6013      	str	r3, [r2, #0]
 80022e0:	f381 8810 	msr	PRIMASK, r1
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022e4:	6801      	ldr	r1, [r0, #0]
 80022e6:	2240      	movs	r2, #64	@ 0x40
 80022e8:	688c      	ldr	r4, [r1, #8]
 80022ea:	0023      	movs	r3, r4
 80022ec:	4013      	ands	r3, r2
 80022ee:	4214      	tst	r4, r2
 80022f0:	d02d      	beq.n	800234e <HAL_UART_AbortReceive_IT+0xb6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022f2:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022f6:	2301      	movs	r3, #1
 80022f8:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80022fc:	0004      	movs	r4, r0
 80022fe:	cc02      	ldmia	r4!, {r1}
 8002300:	688b      	ldr	r3, [r1, #8]
 8002302:	4393      	bics	r3, r2
 8002304:	608b      	str	r3, [r1, #8]
 8002306:	f385 8810 	msr	PRIMASK, r5
    if (huart->hdmarx != NULL)
 800230a:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 800230c:	2b00      	cmp	r3, #0
 800230e:	d00b      	beq.n	8002328 <HAL_UART_AbortReceive_IT+0x90>
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8002310:	4a14      	ldr	r2, [pc, #80]	@ (8002364 <HAL_UART_AbortReceive_IT+0xcc>)
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002312:	0018      	movs	r0, r3
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8002314:	639a      	str	r2, [r3, #56]	@ 0x38
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002316:	f7fe fdcd 	bl	8000eb4 <HAL_DMA_Abort_IT>
 800231a:	2800      	cmp	r0, #0
 800231c:	d002      	beq.n	8002324 <HAL_UART_AbortReceive_IT+0x8c>
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800231e:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8002320:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8002322:	4798      	blx	r3
}
 8002324:	2000      	movs	r0, #0
 8002326:	bd70      	pop	{r4, r5, r6, pc}
      huart->RxXferCount = 0U;
 8002328:	0002      	movs	r2, r0
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800232a:	210f      	movs	r1, #15
      huart->RxXferCount = 0U;
 800232c:	325e      	adds	r2, #94	@ 0x5e
 800232e:	8013      	strh	r3, [r2, #0]
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8002330:	6802      	ldr	r2, [r0, #0]
      huart->pRxBuffPtr = NULL;
 8002332:	6583      	str	r3, [r0, #88]	@ 0x58
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8002334:	6211      	str	r1, [r2, #32]
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002336:	6994      	ldr	r4, [r2, #24]
 8002338:	3907      	subs	r1, #7
 800233a:	4321      	orrs	r1, r4
 800233c:	6191      	str	r1, [r2, #24]
    huart->RxState = HAL_UART_STATE_READY;
 800233e:	0002      	movs	r2, r0
 8002340:	2120      	movs	r1, #32
 8002342:	328c      	adds	r2, #140	@ 0x8c
 8002344:	6011      	str	r1, [r2, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002346:	66c3      	str	r3, [r0, #108]	@ 0x6c
    HAL_UART_AbortReceiveCpltCallback(huart);
 8002348:	f7ff ffa5 	bl	8002296 <HAL_UART_AbortReceiveCpltCallback>
 800234c:	e7ea      	b.n	8002324 <HAL_UART_AbortReceive_IT+0x8c>
    huart->RxXferCount = 0U;
 800234e:	0002      	movs	r2, r0
 8002350:	325e      	adds	r2, #94	@ 0x5e
 8002352:	8013      	strh	r3, [r2, #0]
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8002354:	220f      	movs	r2, #15
    huart->pRxBuffPtr = NULL;
 8002356:	6583      	str	r3, [r0, #88]	@ 0x58
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8002358:	620a      	str	r2, [r1, #32]
 800235a:	e7f0      	b.n	800233e <HAL_UART_AbortReceive_IT+0xa6>
 800235c:	fffffedf 	.word	0xfffffedf
 8002360:	effffffe 	.word	0xeffffffe
 8002364:	08002369 	.word	0x08002369

08002368 <UART_DMARxOnlyAbortCallback>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002368:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxXferCount = 0U;
 800236a:	2100      	movs	r1, #0
 800236c:	0003      	movs	r3, r0
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800236e:	220f      	movs	r2, #15
  huart->RxXferCount = 0U;
 8002370:	335e      	adds	r3, #94	@ 0x5e
{
 8002372:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8002374:	8019      	strh	r1, [r3, #0]
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8002376:	6803      	ldr	r3, [r0, #0]
 8002378:	621a      	str	r2, [r3, #32]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800237a:	699c      	ldr	r4, [r3, #24]
 800237c:	3a07      	subs	r2, #7
 800237e:	4322      	orrs	r2, r4
 8002380:	619a      	str	r2, [r3, #24]
  huart->RxState = HAL_UART_STATE_READY;
 8002382:	0003      	movs	r3, r0
 8002384:	2220      	movs	r2, #32
 8002386:	338c      	adds	r3, #140	@ 0x8c
 8002388:	601a      	str	r2, [r3, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800238a:	66c1      	str	r1, [r0, #108]	@ 0x6c
  HAL_UART_AbortReceiveCpltCallback(huart);
 800238c:	f7ff ff83 	bl	8002296 <HAL_UART_AbortReceiveCpltCallback>
}
 8002390:	bd10      	pop	{r4, pc}

08002392 <HAL_UARTEx_RxEventCallback>:
}
 8002392:	4770      	bx	lr

08002394 <HAL_UART_IRQHandler>:
{
 8002394:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002396:	6801      	ldr	r1, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002398:	4dc1      	ldr	r5, [pc, #772]	@ (80026a0 <HAL_UART_IRQHandler+0x30c>)
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800239a:	69cb      	ldr	r3, [r1, #28]
{
 800239c:	0004      	movs	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800239e:	680a      	ldr	r2, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80023a0:	6888      	ldr	r0, [r1, #8]
  if (errorflags == 0U)
 80023a2:	422b      	tst	r3, r5
 80023a4:	d110      	bne.n	80023c8 <HAL_UART_IRQHandler+0x34>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80023a6:	2520      	movs	r5, #32
 80023a8:	422b      	tst	r3, r5
 80023aa:	d100      	bne.n	80023ae <HAL_UART_IRQHandler+0x1a>
 80023ac:	e09b      	b.n	80024e6 <HAL_UART_IRQHandler+0x152>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80023ae:	2680      	movs	r6, #128	@ 0x80
 80023b0:	0576      	lsls	r6, r6, #21
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80023b2:	4015      	ands	r5, r2
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80023b4:	4006      	ands	r6, r0
 80023b6:	4335      	orrs	r5, r6
 80023b8:	d100      	bne.n	80023bc <HAL_UART_IRQHandler+0x28>
 80023ba:	e094      	b.n	80024e6 <HAL_UART_IRQHandler+0x152>
      if (huart->RxISR != NULL)
 80023bc:	6f63      	ldr	r3, [r4, #116]	@ 0x74
      huart->TxISR(huart);
 80023be:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d000      	beq.n	80023c6 <HAL_UART_IRQHandler+0x32>
 80023c4:	e085      	b.n	80024d2 <HAL_UART_IRQHandler+0x13e>
 80023c6:	e085      	b.n	80024d4 <HAL_UART_IRQHandler+0x140>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80023c8:	4db6      	ldr	r5, [pc, #728]	@ (80026a4 <HAL_UART_IRQHandler+0x310>)
 80023ca:	4005      	ands	r5, r0
 80023cc:	9500      	str	r5, [sp, #0]
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80023ce:	4db6      	ldr	r5, [pc, #728]	@ (80026a8 <HAL_UART_IRQHandler+0x314>)
 80023d0:	9e00      	ldr	r6, [sp, #0]
 80023d2:	4015      	ands	r5, r2
 80023d4:	4335      	orrs	r5, r6
 80023d6:	d100      	bne.n	80023da <HAL_UART_IRQHandler+0x46>
 80023d8:	e085      	b.n	80024e6 <HAL_UART_IRQHandler+0x152>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80023da:	0025      	movs	r5, r4
 80023dc:	2601      	movs	r6, #1
 80023de:	3590      	adds	r5, #144	@ 0x90
 80023e0:	4233      	tst	r3, r6
 80023e2:	d005      	beq.n	80023f0 <HAL_UART_IRQHandler+0x5c>
 80023e4:	05d7      	lsls	r7, r2, #23
 80023e6:	d503      	bpl.n	80023f0 <HAL_UART_IRQHandler+0x5c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80023e8:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80023ea:	682f      	ldr	r7, [r5, #0]
 80023ec:	433e      	orrs	r6, r7
 80023ee:	602e      	str	r6, [r5, #0]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80023f0:	2602      	movs	r6, #2
 80023f2:	4233      	tst	r3, r6
 80023f4:	d00c      	beq.n	8002410 <HAL_UART_IRQHandler+0x7c>
 80023f6:	07c7      	lsls	r7, r0, #31
 80023f8:	d50a      	bpl.n	8002410 <HAL_UART_IRQHandler+0x7c>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80023fa:	0027      	movs	r7, r4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80023fc:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80023fe:	3790      	adds	r7, #144	@ 0x90
 8002400:	683e      	ldr	r6, [r7, #0]
 8002402:	9701      	str	r7, [sp, #4]
 8002404:	46b4      	mov	ip, r6
 8002406:	2604      	movs	r6, #4
 8002408:	4667      	mov	r7, ip
 800240a:	433e      	orrs	r6, r7
 800240c:	9f01      	ldr	r7, [sp, #4]
 800240e:	603e      	str	r6, [r7, #0]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002410:	2604      	movs	r6, #4
 8002412:	4233      	tst	r3, r6
 8002414:	d00c      	beq.n	8002430 <HAL_UART_IRQHandler+0x9c>
 8002416:	07c7      	lsls	r7, r0, #31
 8002418:	d50a      	bpl.n	8002430 <HAL_UART_IRQHandler+0x9c>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800241a:	0027      	movs	r7, r4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800241c:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800241e:	3790      	adds	r7, #144	@ 0x90
 8002420:	683e      	ldr	r6, [r7, #0]
 8002422:	9701      	str	r7, [sp, #4]
 8002424:	46b4      	mov	ip, r6
 8002426:	2602      	movs	r6, #2
 8002428:	4667      	mov	r7, ip
 800242a:	433e      	orrs	r6, r7
 800242c:	9f01      	ldr	r7, [sp, #4]
 800242e:	603e      	str	r6, [r7, #0]
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002430:	2608      	movs	r6, #8
 8002432:	46b4      	mov	ip, r6
 8002434:	4233      	tst	r3, r6
 8002436:	d009      	beq.n	800244c <HAL_UART_IRQHandler+0xb8>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002438:	2720      	movs	r7, #32
 800243a:	9e00      	ldr	r6, [sp, #0]
 800243c:	4017      	ands	r7, r2
 800243e:	4337      	orrs	r7, r6
 8002440:	d004      	beq.n	800244c <HAL_UART_IRQHandler+0xb8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002442:	4666      	mov	r6, ip
 8002444:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002446:	682f      	ldr	r7, [r5, #0]
 8002448:	433e      	orrs	r6, r7
 800244a:	602e      	str	r6, [r5, #0]
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800244c:	2680      	movs	r6, #128	@ 0x80
 800244e:	0136      	lsls	r6, r6, #4
 8002450:	4233      	tst	r3, r6
 8002452:	d006      	beq.n	8002462 <HAL_UART_IRQHandler+0xce>
 8002454:	0157      	lsls	r7, r2, #5
 8002456:	d504      	bpl.n	8002462 <HAL_UART_IRQHandler+0xce>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002458:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800245a:	2120      	movs	r1, #32
 800245c:	682e      	ldr	r6, [r5, #0]
 800245e:	4331      	orrs	r1, r6
 8002460:	6029      	str	r1, [r5, #0]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002462:	6829      	ldr	r1, [r5, #0]
 8002464:	2900      	cmp	r1, #0
 8002466:	d035      	beq.n	80024d4 <HAL_UART_IRQHandler+0x140>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002468:	2120      	movs	r1, #32
 800246a:	420b      	tst	r3, r1
 800246c:	d00a      	beq.n	8002484 <HAL_UART_IRQHandler+0xf0>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800246e:	2380      	movs	r3, #128	@ 0x80
 8002470:	055b      	lsls	r3, r3, #21
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002472:	4011      	ands	r1, r2
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002474:	4003      	ands	r3, r0
 8002476:	4319      	orrs	r1, r3
 8002478:	d004      	beq.n	8002484 <HAL_UART_IRQHandler+0xf0>
        if (huart->RxISR != NULL)
 800247a:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <HAL_UART_IRQHandler+0xf0>
          huart->RxISR(huart);
 8002480:	0020      	movs	r0, r4
 8002482:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002484:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 8002486:	682b      	ldr	r3, [r5, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002488:	2740      	movs	r7, #64	@ 0x40
 800248a:	6896      	ldr	r6, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800248c:	2228      	movs	r2, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800248e:	403e      	ands	r6, r7
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002490:	4013      	ands	r3, r2
        UART_EndRxTransfer(huart);
 8002492:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002494:	431e      	orrs	r6, r3
 8002496:	d022      	beq.n	80024de <HAL_UART_IRQHandler+0x14a>
        UART_EndRxTransfer(huart);
 8002498:	f7ff fd2a 	bl	8001ef0 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800249c:	6823      	ldr	r3, [r4, #0]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	423b      	tst	r3, r7
 80024a2:	d018      	beq.n	80024d6 <HAL_UART_IRQHandler+0x142>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024a4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024a8:	2301      	movs	r3, #1
 80024aa:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024ae:	0025      	movs	r5, r4
 80024b0:	cd04      	ldmia	r5!, {r2}
 80024b2:	6893      	ldr	r3, [r2, #8]
 80024b4:	43bb      	bics	r3, r7
 80024b6:	6093      	str	r3, [r2, #8]
 80024b8:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 80024bc:	6fe8      	ldr	r0, [r5, #124]	@ 0x7c
 80024be:	2800      	cmp	r0, #0
 80024c0:	d009      	beq.n	80024d6 <HAL_UART_IRQHandler+0x142>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80024c2:	4b7a      	ldr	r3, [pc, #488]	@ (80026ac <HAL_UART_IRQHandler+0x318>)
 80024c4:	6383      	str	r3, [r0, #56]	@ 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80024c6:	f7fe fcf5 	bl	8000eb4 <HAL_DMA_Abort_IT>
 80024ca:	2800      	cmp	r0, #0
 80024cc:	d002      	beq.n	80024d4 <HAL_UART_IRQHandler+0x140>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80024ce:	6fe8      	ldr	r0, [r5, #124]	@ 0x7c
 80024d0:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80024d2:	4798      	blx	r3
}
 80024d4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 80024d6:	0020      	movs	r0, r4
 80024d8:	f7ff fe60 	bl	800219c <HAL_UART_ErrorCallback>
 80024dc:	e7fa      	b.n	80024d4 <HAL_UART_IRQHandler+0x140>
        HAL_UART_ErrorCallback(huart);
 80024de:	f7ff fe5d 	bl	800219c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024e2:	602e      	str	r6, [r5, #0]
 80024e4:	e7f6      	b.n	80024d4 <HAL_UART_IRQHandler+0x140>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024e6:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
 80024e8:	2d01      	cmp	r5, #1
 80024ea:	d000      	beq.n	80024ee <HAL_UART_IRQHandler+0x15a>
 80024ec:	e09f      	b.n	800262e <HAL_UART_IRQHandler+0x29a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80024ee:	2610      	movs	r6, #16
 80024f0:	4233      	tst	r3, r6
 80024f2:	d100      	bne.n	80024f6 <HAL_UART_IRQHandler+0x162>
 80024f4:	e09b      	b.n	800262e <HAL_UART_IRQHandler+0x29a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80024f6:	4232      	tst	r2, r6
 80024f8:	d100      	bne.n	80024fc <HAL_UART_IRQHandler+0x168>
 80024fa:	e098      	b.n	800262e <HAL_UART_IRQHandler+0x29a>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80024fc:	620e      	str	r6, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024fe:	6889      	ldr	r1, [r1, #8]
 8002500:	2340      	movs	r3, #64	@ 0x40
 8002502:	000a      	movs	r2, r1
 8002504:	401a      	ands	r2, r3
 8002506:	4219      	tst	r1, r3
 8002508:	d057      	beq.n	80025ba <HAL_UART_IRQHandler+0x226>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800250a:	1d21      	adds	r1, r4, #4
 800250c:	6fca      	ldr	r2, [r1, #124]	@ 0x7c
 800250e:	6810      	ldr	r0, [r2, #0]
 8002510:	6842      	ldr	r2, [r0, #4]
 8002512:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8002514:	2a00      	cmp	r2, #0
 8002516:	d0dd      	beq.n	80024d4 <HAL_UART_IRQHandler+0x140>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002518:	0027      	movs	r7, r4
 800251a:	375c      	adds	r7, #92	@ 0x5c
 800251c:	883f      	ldrh	r7, [r7, #0]
 800251e:	4297      	cmp	r7, r2
 8002520:	d9d8      	bls.n	80024d4 <HAL_UART_IRQHandler+0x140>
        huart->RxXferCount = nb_remaining_rx_data;
 8002522:	0027      	movs	r7, r4
 8002524:	375e      	adds	r7, #94	@ 0x5e
 8002526:	803a      	strh	r2, [r7, #0]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002528:	6802      	ldr	r2, [r0, #0]
 800252a:	2020      	movs	r0, #32
 800252c:	4684      	mov	ip, r0
 800252e:	4010      	ands	r0, r2
 8002530:	9000      	str	r0, [sp, #0]
 8002532:	4660      	mov	r0, ip
 8002534:	4202      	tst	r2, r0
 8002536:	d132      	bne.n	800259e <HAL_UART_IRQHandler+0x20a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002538:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800253c:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002540:	6820      	ldr	r0, [r4, #0]
 8002542:	4e5b      	ldr	r6, [pc, #364]	@ (80026b0 <HAL_UART_IRQHandler+0x31c>)
 8002544:	6802      	ldr	r2, [r0, #0]
 8002546:	4032      	ands	r2, r6
 8002548:	6002      	str	r2, [r0, #0]
 800254a:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800254e:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002552:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002556:	6820      	ldr	r0, [r4, #0]
 8002558:	6882      	ldr	r2, [r0, #8]
 800255a:	43aa      	bics	r2, r5
 800255c:	6082      	str	r2, [r0, #8]
 800255e:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002562:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002566:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800256a:	6820      	ldr	r0, [r4, #0]
 800256c:	6882      	ldr	r2, [r0, #8]
 800256e:	439a      	bics	r2, r3
 8002570:	6082      	str	r2, [r0, #8]
 8002572:	f387 8810 	msr	PRIMASK, r7
          huart->RxState = HAL_UART_STATE_READY;
 8002576:	0023      	movs	r3, r4
 8002578:	4662      	mov	r2, ip
 800257a:	338c      	adds	r3, #140	@ 0x8c
 800257c:	601a      	str	r2, [r3, #0]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800257e:	9b00      	ldr	r3, [sp, #0]
 8002580:	66e3      	str	r3, [r4, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002582:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002586:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800258a:	6822      	ldr	r2, [r4, #0]
 800258c:	350f      	adds	r5, #15
 800258e:	6813      	ldr	r3, [r2, #0]
 8002590:	43ab      	bics	r3, r5
 8002592:	6013      	str	r3, [r2, #0]
 8002594:	f380 8810 	msr	PRIMASK, r0
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002598:	6fc8      	ldr	r0, [r1, #124]	@ 0x7c
 800259a:	f7fe fc51 	bl	8000e40 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800259e:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80025a0:	0022      	movs	r2, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80025a2:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80025a4:	0023      	movs	r3, r4
 80025a6:	325c      	adds	r2, #92	@ 0x5c
 80025a8:	335e      	adds	r3, #94	@ 0x5e
 80025aa:	881b      	ldrh	r3, [r3, #0]
 80025ac:	8811      	ldrh	r1, [r2, #0]
 80025ae:	1ac9      	subs	r1, r1, r3
 80025b0:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80025b2:	0020      	movs	r0, r4
 80025b4:	f7ff feed 	bl	8002392 <HAL_UARTEx_RxEventCallback>
 80025b8:	e78c      	b.n	80024d4 <HAL_UART_IRQHandler+0x140>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80025ba:	0023      	movs	r3, r4
 80025bc:	0020      	movs	r0, r4
 80025be:	335c      	adds	r3, #92	@ 0x5c
 80025c0:	305e      	adds	r0, #94	@ 0x5e
 80025c2:	8819      	ldrh	r1, [r3, #0]
 80025c4:	8803      	ldrh	r3, [r0, #0]
      if ((huart->RxXferCount > 0U)
 80025c6:	8800      	ldrh	r0, [r0, #0]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80025c8:	b29b      	uxth	r3, r3
      if ((huart->RxXferCount > 0U)
 80025ca:	2800      	cmp	r0, #0
 80025cc:	d100      	bne.n	80025d0 <HAL_UART_IRQHandler+0x23c>
 80025ce:	e781      	b.n	80024d4 <HAL_UART_IRQHandler+0x140>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80025d0:	1ac9      	subs	r1, r1, r3
 80025d2:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 80025d4:	2900      	cmp	r1, #0
 80025d6:	d100      	bne.n	80025da <HAL_UART_IRQHandler+0x246>
 80025d8:	e77c      	b.n	80024d4 <HAL_UART_IRQHandler+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025da:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025de:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80025e2:	6820      	ldr	r0, [r4, #0]
 80025e4:	4e33      	ldr	r6, [pc, #204]	@ (80026b4 <HAL_UART_IRQHandler+0x320>)
 80025e6:	6803      	ldr	r3, [r0, #0]
 80025e8:	4033      	ands	r3, r6
 80025ea:	6003      	str	r3, [r0, #0]
 80025ec:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025f0:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025f4:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80025f8:	6820      	ldr	r0, [r4, #0]
 80025fa:	4e2f      	ldr	r6, [pc, #188]	@ (80026b8 <HAL_UART_IRQHandler+0x324>)
 80025fc:	6883      	ldr	r3, [r0, #8]
 80025fe:	4033      	ands	r3, r6
 8002600:	6083      	str	r3, [r0, #8]
 8002602:	f387 8810 	msr	PRIMASK, r7
        huart->RxState = HAL_UART_STATE_READY;
 8002606:	0023      	movs	r3, r4
 8002608:	2020      	movs	r0, #32
 800260a:	338c      	adds	r3, #140	@ 0x8c
 800260c:	6018      	str	r0, [r3, #0]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800260e:	66e2      	str	r2, [r4, #108]	@ 0x6c
        huart->RxISR = NULL;
 8002610:	6762      	str	r2, [r4, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002612:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002616:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800261a:	2510      	movs	r5, #16
 800261c:	6822      	ldr	r2, [r4, #0]
 800261e:	6813      	ldr	r3, [r2, #0]
 8002620:	43ab      	bics	r3, r5
 8002622:	6013      	str	r3, [r2, #0]
 8002624:	f380 8810 	msr	PRIMASK, r0
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002628:	2302      	movs	r3, #2
 800262a:	6723      	str	r3, [r4, #112]	@ 0x70
 800262c:	e7c1      	b.n	80025b2 <HAL_UART_IRQHandler+0x21e>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800262e:	2580      	movs	r5, #128	@ 0x80
 8002630:	036d      	lsls	r5, r5, #13
 8002632:	422b      	tst	r3, r5
 8002634:	d006      	beq.n	8002644 <HAL_UART_IRQHandler+0x2b0>
 8002636:	0246      	lsls	r6, r0, #9
 8002638:	d504      	bpl.n	8002644 <HAL_UART_IRQHandler+0x2b0>
    HAL_UARTEx_WakeupCallback(huart);
 800263a:	0020      	movs	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800263c:	620d      	str	r5, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800263e:	f000 fe6f 	bl	8003320 <HAL_UARTEx_WakeupCallback>
    return;
 8002642:	e747      	b.n	80024d4 <HAL_UART_IRQHandler+0x140>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002644:	2180      	movs	r1, #128	@ 0x80
 8002646:	420b      	tst	r3, r1
 8002648:	d007      	beq.n	800265a <HAL_UART_IRQHandler+0x2c6>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800264a:	2580      	movs	r5, #128	@ 0x80
 800264c:	042d      	lsls	r5, r5, #16
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800264e:	4011      	ands	r1, r2
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002650:	4028      	ands	r0, r5
 8002652:	4301      	orrs	r1, r0
 8002654:	d001      	beq.n	800265a <HAL_UART_IRQHandler+0x2c6>
    if (huart->TxISR != NULL)
 8002656:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8002658:	e6b1      	b.n	80023be <HAL_UART_IRQHandler+0x2a>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800265a:	2140      	movs	r1, #64	@ 0x40
 800265c:	420b      	tst	r3, r1
 800265e:	d016      	beq.n	800268e <HAL_UART_IRQHandler+0x2fa>
 8002660:	420a      	tst	r2, r1
 8002662:	d014      	beq.n	800268e <HAL_UART_IRQHandler+0x2fa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002664:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002668:	2301      	movs	r3, #1
 800266a:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800266e:	6822      	ldr	r2, [r4, #0]
 8002670:	6813      	ldr	r3, [r2, #0]
 8002672:	438b      	bics	r3, r1
 8002674:	6013      	str	r3, [r2, #0]
 8002676:	f380 8810 	msr	PRIMASK, r0

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800267a:	0023      	movs	r3, r4
 800267c:	2220      	movs	r2, #32
 800267e:	3388      	adds	r3, #136	@ 0x88
 8002680:	601a      	str	r2, [r3, #0]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002682:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002684:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 8002686:	67a3      	str	r3, [r4, #120]	@ 0x78
  HAL_UART_TxCpltCallback(huart);
 8002688:	f001 fc0a 	bl	8003ea0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800268c:	e722      	b.n	80024d4 <HAL_UART_IRQHandler+0x140>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800268e:	0219      	lsls	r1, r3, #8
 8002690:	d514      	bpl.n	80026bc <HAL_UART_IRQHandler+0x328>
 8002692:	0051      	lsls	r1, r2, #1
 8002694:	d512      	bpl.n	80026bc <HAL_UART_IRQHandler+0x328>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002696:	0020      	movs	r0, r4
 8002698:	f000 fe44 	bl	8003324 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 800269c:	e71a      	b.n	80024d4 <HAL_UART_IRQHandler+0x140>
 800269e:	46c0      	nop			@ (mov r8, r8)
 80026a0:	0000080f 	.word	0x0000080f
 80026a4:	10000001 	.word	0x10000001
 80026a8:	04000120 	.word	0x04000120
 80026ac:	0800219f 	.word	0x0800219f
 80026b0:	fffffeff 	.word	0xfffffeff
 80026b4:	fffffedf 	.word	0xfffffedf
 80026b8:	effffffe 	.word	0xeffffffe
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80026bc:	01db      	lsls	r3, r3, #7
 80026be:	d400      	bmi.n	80026c2 <HAL_UART_IRQHandler+0x32e>
 80026c0:	e708      	b.n	80024d4 <HAL_UART_IRQHandler+0x140>
 80026c2:	2a00      	cmp	r2, #0
 80026c4:	db00      	blt.n	80026c8 <HAL_UART_IRQHandler+0x334>
 80026c6:	e705      	b.n	80024d4 <HAL_UART_IRQHandler+0x140>
    HAL_UARTEx_RxFifoFullCallback(huart);
 80026c8:	0020      	movs	r0, r4
 80026ca:	f000 fe2a 	bl	8003322 <HAL_UARTEx_RxFifoFullCallback>
    return;
 80026ce:	e701      	b.n	80024d4 <HAL_UART_IRQHandler+0x140>

080026d0 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80026d0:	0001      	movs	r1, r0
{
 80026d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t uhMask = huart->Mask;
 80026d4:	0003      	movs	r3, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80026d6:	318c      	adds	r1, #140	@ 0x8c
 80026d8:	680c      	ldr	r4, [r1, #0]
  uint16_t uhMask = huart->Mask;
 80026da:	3360      	adds	r3, #96	@ 0x60
 80026dc:	881a      	ldrh	r2, [r3, #0]
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80026de:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80026e0:	2c22      	cmp	r4, #34	@ 0x22
 80026e2:	d15a      	bne.n	800279a <UART_RxISR_8BIT+0xca>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80026e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80026e6:	6d84      	ldr	r4, [r0, #88]	@ 0x58
 80026e8:	4013      	ands	r3, r2
    huart->pRxBuffPtr++;
    huart->RxXferCount--;
 80026ea:	0002      	movs	r2, r0
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80026ec:	7023      	strb	r3, [r4, #0]
    huart->pRxBuffPtr++;
 80026ee:	6d83      	ldr	r3, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 80026f0:	325e      	adds	r2, #94	@ 0x5e
    huart->pRxBuffPtr++;
 80026f2:	3301      	adds	r3, #1
 80026f4:	6583      	str	r3, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 80026f6:	8813      	ldrh	r3, [r2, #0]
 80026f8:	3b01      	subs	r3, #1
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	8013      	strh	r3, [r2, #0]

    if (huart->RxXferCount == 0U)
 80026fe:	8813      	ldrh	r3, [r2, #0]
 8002700:	b29c      	uxth	r4, r3
 8002702:	2b00      	cmp	r3, #0
 8002704:	d145      	bne.n	8002792 <UART_RxISR_8BIT+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002706:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800270a:	3301      	adds	r3, #1
 800270c:	f383 8810 	msr	PRIMASK, r3
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002710:	6805      	ldr	r5, [r0, #0]
 8002712:	4f24      	ldr	r7, [pc, #144]	@ (80027a4 <UART_RxISR_8BIT+0xd4>)
 8002714:	682a      	ldr	r2, [r5, #0]
 8002716:	403a      	ands	r2, r7
 8002718:	602a      	str	r2, [r5, #0]
 800271a:	f386 8810 	msr	PRIMASK, r6
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800271e:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002722:	f383 8810 	msr	PRIMASK, r3

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002726:	6805      	ldr	r5, [r0, #0]
 8002728:	68aa      	ldr	r2, [r5, #8]
 800272a:	439a      	bics	r2, r3
 800272c:	60aa      	str	r2, [r5, #8]
 800272e:	f386 8810 	msr	PRIMASK, r6

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002732:	2220      	movs	r2, #32
 8002734:	600a      	str	r2, [r1, #0]
      huart->RxISR = NULL;

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002736:	6802      	ldr	r2, [r0, #0]
 8002738:	491b      	ldr	r1, [pc, #108]	@ (80027a8 <UART_RxISR_8BIT+0xd8>)
      huart->RxISR = NULL;
 800273a:	6744      	str	r4, [r0, #116]	@ 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800273c:	6704      	str	r4, [r0, #112]	@ 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800273e:	428a      	cmp	r2, r1
 8002740:	d00d      	beq.n	800275e <UART_RxISR_8BIT+0x8e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002742:	6852      	ldr	r2, [r2, #4]
 8002744:	0212      	lsls	r2, r2, #8
 8002746:	d50a      	bpl.n	800275e <UART_RxISR_8BIT+0x8e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002748:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800274c:	f383 8810 	msr	PRIMASK, r3
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002750:	6802      	ldr	r2, [r0, #0]
 8002752:	4c16      	ldr	r4, [pc, #88]	@ (80027ac <UART_RxISR_8BIT+0xdc>)
 8002754:	6813      	ldr	r3, [r2, #0]
 8002756:	4023      	ands	r3, r4
 8002758:	6013      	str	r3, [r2, #0]
 800275a:	f381 8810 	msr	PRIMASK, r1
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800275e:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8002760:	2b01      	cmp	r3, #1
 8002762:	d117      	bne.n	8002794 <UART_RxISR_8BIT+0xc4>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002764:	2200      	movs	r2, #0
 8002766:	66c2      	str	r2, [r0, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002768:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800276c:	f383 8810 	msr	PRIMASK, r3

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002770:	6801      	ldr	r1, [r0, #0]
 8002772:	330f      	adds	r3, #15
 8002774:	680a      	ldr	r2, [r1, #0]
 8002776:	439a      	bics	r2, r3
 8002778:	600a      	str	r2, [r1, #0]
 800277a:	f384 8810 	msr	PRIMASK, r4

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800277e:	6802      	ldr	r2, [r0, #0]
 8002780:	69d1      	ldr	r1, [r2, #28]
 8002782:	4219      	tst	r1, r3
 8002784:	d000      	beq.n	8002788 <UART_RxISR_8BIT+0xb8>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002786:	6213      	str	r3, [r2, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002788:	0003      	movs	r3, r0
 800278a:	335c      	adds	r3, #92	@ 0x5c
 800278c:	8819      	ldrh	r1, [r3, #0]
 800278e:	f7ff fe00 	bl	8002392 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        HAL_UART_RxCpltCallback(huart);
 8002794:	f001 fb94 	bl	8003ec0 <HAL_UART_RxCpltCallback>
 8002798:	e7fb      	b.n	8002792 <UART_RxISR_8BIT+0xc2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800279a:	2208      	movs	r2, #8
 800279c:	6999      	ldr	r1, [r3, #24]
 800279e:	430a      	orrs	r2, r1
 80027a0:	619a      	str	r2, [r3, #24]
}
 80027a2:	e7f6      	b.n	8002792 <UART_RxISR_8BIT+0xc2>
 80027a4:	fffffedf 	.word	0xfffffedf
 80027a8:	40008000 	.word	0x40008000
 80027ac:	fbffffff 	.word	0xfbffffff

080027b0 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80027b0:	0002      	movs	r2, r0
{
 80027b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t uhMask = huart->Mask;
 80027b4:	0003      	movs	r3, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80027b6:	328c      	adds	r2, #140	@ 0x8c
 80027b8:	6811      	ldr	r1, [r2, #0]
  uint16_t uhMask = huart->Mask;
 80027ba:	3360      	adds	r3, #96	@ 0x60
 80027bc:	881c      	ldrh	r4, [r3, #0]
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80027be:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80027c0:	2922      	cmp	r1, #34	@ 0x22
 80027c2:	d159      	bne.n	8002878 <UART_RxISR_16BIT+0xc8>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80027c4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80027c6:	6d83      	ldr	r3, [r0, #88]	@ 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 80027c8:	4021      	ands	r1, r4
 80027ca:	8019      	strh	r1, [r3, #0]
    huart->pRxBuffPtr += 2U;
    huart->RxXferCount--;
 80027cc:	0001      	movs	r1, r0
    huart->pRxBuffPtr += 2U;
 80027ce:	3302      	adds	r3, #2
 80027d0:	6583      	str	r3, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 80027d2:	315e      	adds	r1, #94	@ 0x5e
 80027d4:	880b      	ldrh	r3, [r1, #0]
 80027d6:	3b01      	subs	r3, #1
 80027d8:	b29b      	uxth	r3, r3
 80027da:	800b      	strh	r3, [r1, #0]

    if (huart->RxXferCount == 0U)
 80027dc:	880b      	ldrh	r3, [r1, #0]
 80027de:	b29c      	uxth	r4, r3
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d145      	bne.n	8002870 <UART_RxISR_16BIT+0xc0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027e4:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027e8:	3301      	adds	r3, #1
 80027ea:	f383 8810 	msr	PRIMASK, r3
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80027ee:	6805      	ldr	r5, [r0, #0]
 80027f0:	4f24      	ldr	r7, [pc, #144]	@ (8002884 <UART_RxISR_16BIT+0xd4>)
 80027f2:	6829      	ldr	r1, [r5, #0]
 80027f4:	4039      	ands	r1, r7
 80027f6:	6029      	str	r1, [r5, #0]
 80027f8:	f386 8810 	msr	PRIMASK, r6
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027fc:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002800:	f383 8810 	msr	PRIMASK, r3

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002804:	6805      	ldr	r5, [r0, #0]
 8002806:	68a9      	ldr	r1, [r5, #8]
 8002808:	4399      	bics	r1, r3
 800280a:	60a9      	str	r1, [r5, #8]
 800280c:	f386 8810 	msr	PRIMASK, r6

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002810:	2120      	movs	r1, #32
 8002812:	6011      	str	r1, [r2, #0]
      huart->RxISR = NULL;

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002814:	6802      	ldr	r2, [r0, #0]
 8002816:	491c      	ldr	r1, [pc, #112]	@ (8002888 <UART_RxISR_16BIT+0xd8>)
      huart->RxISR = NULL;
 8002818:	6744      	str	r4, [r0, #116]	@ 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800281a:	6704      	str	r4, [r0, #112]	@ 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800281c:	428a      	cmp	r2, r1
 800281e:	d00d      	beq.n	800283c <UART_RxISR_16BIT+0x8c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002820:	6852      	ldr	r2, [r2, #4]
 8002822:	0212      	lsls	r2, r2, #8
 8002824:	d50a      	bpl.n	800283c <UART_RxISR_16BIT+0x8c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002826:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800282a:	f383 8810 	msr	PRIMASK, r3
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800282e:	6802      	ldr	r2, [r0, #0]
 8002830:	4c16      	ldr	r4, [pc, #88]	@ (800288c <UART_RxISR_16BIT+0xdc>)
 8002832:	6813      	ldr	r3, [r2, #0]
 8002834:	4023      	ands	r3, r4
 8002836:	6013      	str	r3, [r2, #0]
 8002838:	f381 8810 	msr	PRIMASK, r1
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800283c:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800283e:	2b01      	cmp	r3, #1
 8002840:	d117      	bne.n	8002872 <UART_RxISR_16BIT+0xc2>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002842:	2200      	movs	r2, #0
 8002844:	66c2      	str	r2, [r0, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002846:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800284a:	f383 8810 	msr	PRIMASK, r3

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800284e:	6801      	ldr	r1, [r0, #0]
 8002850:	330f      	adds	r3, #15
 8002852:	680a      	ldr	r2, [r1, #0]
 8002854:	439a      	bics	r2, r3
 8002856:	600a      	str	r2, [r1, #0]
 8002858:	f384 8810 	msr	PRIMASK, r4

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800285c:	6802      	ldr	r2, [r0, #0]
 800285e:	69d1      	ldr	r1, [r2, #28]
 8002860:	4219      	tst	r1, r3
 8002862:	d000      	beq.n	8002866 <UART_RxISR_16BIT+0xb6>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002864:	6213      	str	r3, [r2, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002866:	0003      	movs	r3, r0
 8002868:	335c      	adds	r3, #92	@ 0x5c
 800286a:	8819      	ldrh	r1, [r3, #0]
 800286c:	f7ff fd91 	bl	8002392 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        HAL_UART_RxCpltCallback(huart);
 8002872:	f001 fb25 	bl	8003ec0 <HAL_UART_RxCpltCallback>
 8002876:	e7fb      	b.n	8002870 <UART_RxISR_16BIT+0xc0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002878:	2208      	movs	r2, #8
 800287a:	6999      	ldr	r1, [r3, #24]
 800287c:	430a      	orrs	r2, r1
 800287e:	619a      	str	r2, [r3, #24]
}
 8002880:	e7f6      	b.n	8002870 <UART_RxISR_16BIT+0xc0>
 8002882:	46c0      	nop			@ (mov r8, r8)
 8002884:	fffffedf 	.word	0xfffffedf
 8002888:	40008000 	.word	0x40008000
 800288c:	fbffffff 	.word	0xfbffffff

08002890 <UART_RxISR_8BIT_FIFOEN>:
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
  uint16_t  uhMask = huart->Mask;
 8002890:	0003      	movs	r3, r0
{
 8002892:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t  uhMask = huart->Mask;
 8002894:	3360      	adds	r3, #96	@ 0x60
 8002896:	881b      	ldrh	r3, [r3, #0]
{
 8002898:	b085      	sub	sp, #20
  uint16_t  uhMask = huart->Mask;
 800289a:	9302      	str	r3, [sp, #8]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800289c:	6803      	ldr	r3, [r0, #0]
{
 800289e:	0004      	movs	r4, r0
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80028a0:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	9203      	str	r2, [sp, #12]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	9201      	str	r2, [sp, #4]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80028aa:	0002      	movs	r2, r0
 80028ac:	328c      	adds	r2, #140	@ 0x8c
 80028ae:	6812      	ldr	r2, [r2, #0]
 80028b0:	2a22      	cmp	r2, #34	@ 0x22
 80028b2:	d000      	beq.n	80028b6 <UART_RxISR_8BIT_FIFOEN+0x26>
 80028b4:	e0c5      	b.n	8002a42 <UART_RxISR_8BIT_FIFOEN+0x1b2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80028b6:	0003      	movs	r3, r0
 80028b8:	3368      	adds	r3, #104	@ 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80028ba:	881b      	ldrh	r3, [r3, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d002      	beq.n	80028c6 <UART_RxISR_8BIT_FIFOEN+0x36>
 80028c0:	2320      	movs	r3, #32
 80028c2:	421d      	tst	r5, r3
 80028c4:	d125      	bne.n	8002912 <UART_RxISR_8BIT_FIFOEN+0x82>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80028c6:	0023      	movs	r3, r4
 80028c8:	335e      	adds	r3, #94	@ 0x5e
 80028ca:	881b      	ldrh	r3, [r3, #0]
 80028cc:	b29a      	uxth	r2, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d01d      	beq.n	800290e <UART_RxISR_8BIT_FIFOEN+0x7e>
 80028d2:	0023      	movs	r3, r4
 80028d4:	3368      	adds	r3, #104	@ 0x68
 80028d6:	881b      	ldrh	r3, [r3, #0]
 80028d8:	4293      	cmp	r3, r2
 80028da:	d918      	bls.n	800290e <UART_RxISR_8BIT_FIFOEN+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028dc:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028e0:	2201      	movs	r2, #1
 80028e2:	f382 8810 	msr	PRIMASK, r2
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80028e6:	6821      	ldr	r1, [r4, #0]
 80028e8:	4d58      	ldr	r5, [pc, #352]	@ (8002a4c <UART_RxISR_8BIT_FIFOEN+0x1bc>)
 80028ea:	688b      	ldr	r3, [r1, #8]
 80028ec:	402b      	ands	r3, r5
 80028ee:	608b      	str	r3, [r1, #8]
 80028f0:	f380 8810 	msr	PRIMASK, r0

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80028f4:	4b56      	ldr	r3, [pc, #344]	@ (8002a50 <UART_RxISR_8BIT_FIFOEN+0x1c0>)
 80028f6:	6763      	str	r3, [r4, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028f8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028fc:	f382 8810 	msr	PRIMASK, r2

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8002900:	2320      	movs	r3, #32
 8002902:	6822      	ldr	r2, [r4, #0]
 8002904:	6810      	ldr	r0, [r2, #0]
 8002906:	4303      	orrs	r3, r0
 8002908:	6013      	str	r3, [r2, #0]
 800290a:	f381 8810 	msr	PRIMASK, r1
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800290e:	b005      	add	sp, #20
 8002910:	bdf0      	pop	{r4, r5, r6, r7, pc}
      huart->RxXferCount--;
 8002912:	0026      	movs	r6, r4
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002914:	6823      	ldr	r3, [r4, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002916:	9902      	ldr	r1, [sp, #8]
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800291a:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800291c:	400b      	ands	r3, r1
 800291e:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 8002920:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 8002922:	365e      	adds	r6, #94	@ 0x5e
      huart->pRxBuffPtr++;
 8002924:	3301      	adds	r3, #1
 8002926:	65a3      	str	r3, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 8002928:	8833      	ldrh	r3, [r6, #0]
      isrflags = READ_REG(huart->Instance->ISR);
 800292a:	6822      	ldr	r2, [r4, #0]
      huart->RxXferCount--;
 800292c:	3b01      	subs	r3, #1
 800292e:	b29b      	uxth	r3, r3
 8002930:	8033      	strh	r3, [r6, #0]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8002932:	2307      	movs	r3, #7
      isrflags = READ_REG(huart->Instance->ISR);
 8002934:	69d5      	ldr	r5, [r2, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8002936:	421d      	tst	r5, r3
 8002938:	d02f      	beq.n	800299a <UART_RxISR_8BIT_FIFOEN+0x10a>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800293a:	3b06      	subs	r3, #6
 800293c:	421d      	tst	r5, r3
 800293e:	d008      	beq.n	8002952 <UART_RxISR_8BIT_FIFOEN+0xc2>
 8002940:	9903      	ldr	r1, [sp, #12]
 8002942:	05c9      	lsls	r1, r1, #23
 8002944:	d505      	bpl.n	8002952 <UART_RxISR_8BIT_FIFOEN+0xc2>
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002946:	0021      	movs	r1, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002948:	6213      	str	r3, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800294a:	3190      	adds	r1, #144	@ 0x90
 800294c:	6808      	ldr	r0, [r1, #0]
 800294e:	4303      	orrs	r3, r0
 8002950:	600b      	str	r3, [r1, #0]
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002952:	2302      	movs	r3, #2
 8002954:	421d      	tst	r5, r3
 8002956:	d009      	beq.n	800296c <UART_RxISR_8BIT_FIFOEN+0xdc>
 8002958:	9901      	ldr	r1, [sp, #4]
 800295a:	07c9      	lsls	r1, r1, #31
 800295c:	d506      	bpl.n	800296c <UART_RxISR_8BIT_FIFOEN+0xdc>
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800295e:	0021      	movs	r1, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002960:	6213      	str	r3, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002962:	3190      	adds	r1, #144	@ 0x90
 8002964:	6808      	ldr	r0, [r1, #0]
 8002966:	18db      	adds	r3, r3, r3
 8002968:	4303      	orrs	r3, r0
 800296a:	600b      	str	r3, [r1, #0]
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800296c:	2304      	movs	r3, #4
 800296e:	421d      	tst	r5, r3
 8002970:	d009      	beq.n	8002986 <UART_RxISR_8BIT_FIFOEN+0xf6>
 8002972:	9901      	ldr	r1, [sp, #4]
 8002974:	07c9      	lsls	r1, r1, #31
 8002976:	d506      	bpl.n	8002986 <UART_RxISR_8BIT_FIFOEN+0xf6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002978:	6213      	str	r3, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800297a:	0022      	movs	r2, r4
 800297c:	3290      	adds	r2, #144	@ 0x90
 800297e:	6811      	ldr	r1, [r2, #0]
 8002980:	3b02      	subs	r3, #2
 8002982:	430b      	orrs	r3, r1
 8002984:	6013      	str	r3, [r2, #0]
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002986:	0027      	movs	r7, r4
 8002988:	3790      	adds	r7, #144	@ 0x90
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d004      	beq.n	800299a <UART_RxISR_8BIT_FIFOEN+0x10a>
          HAL_UART_ErrorCallback(huart);
 8002990:	0020      	movs	r0, r4
 8002992:	f7ff fc03 	bl	800219c <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002996:	2300      	movs	r3, #0
 8002998:	603b      	str	r3, [r7, #0]
      if (huart->RxXferCount == 0U)
 800299a:	8833      	ldrh	r3, [r6, #0]
 800299c:	b299      	uxth	r1, r3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d000      	beq.n	80029a4 <UART_RxISR_8BIT_FIFOEN+0x114>
 80029a2:	e78d      	b.n	80028c0 <UART_RxISR_8BIT_FIFOEN+0x30>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029a4:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029a8:	3301      	adds	r3, #1
 80029aa:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80029ae:	6820      	ldr	r0, [r4, #0]
 80029b0:	4f28      	ldr	r7, [pc, #160]	@ (8002a54 <UART_RxISR_8BIT_FIFOEN+0x1c4>)
 80029b2:	6802      	ldr	r2, [r0, #0]
 80029b4:	403a      	ands	r2, r7
 80029b6:	6002      	str	r2, [r0, #0]
 80029b8:	f386 8810 	msr	PRIMASK, r6
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029bc:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029c0:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80029c4:	6820      	ldr	r0, [r4, #0]
 80029c6:	4f24      	ldr	r7, [pc, #144]	@ (8002a58 <UART_RxISR_8BIT_FIFOEN+0x1c8>)
 80029c8:	6882      	ldr	r2, [r0, #8]
 80029ca:	403a      	ands	r2, r7
 80029cc:	6082      	str	r2, [r0, #8]
 80029ce:	f386 8810 	msr	PRIMASK, r6
        huart->RxState = HAL_UART_STATE_READY;
 80029d2:	0022      	movs	r2, r4
 80029d4:	2020      	movs	r0, #32
 80029d6:	328c      	adds	r2, #140	@ 0x8c
 80029d8:	6010      	str	r0, [r2, #0]
        huart->RxISR = NULL;
 80029da:	6761      	str	r1, [r4, #116]	@ 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80029dc:	6721      	str	r1, [r4, #112]	@ 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80029de:	6822      	ldr	r2, [r4, #0]
 80029e0:	491e      	ldr	r1, [pc, #120]	@ (8002a5c <UART_RxISR_8BIT_FIFOEN+0x1cc>)
 80029e2:	428a      	cmp	r2, r1
 80029e4:	d00d      	beq.n	8002a02 <UART_RxISR_8BIT_FIFOEN+0x172>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80029e6:	6852      	ldr	r2, [r2, #4]
 80029e8:	0212      	lsls	r2, r2, #8
 80029ea:	d50a      	bpl.n	8002a02 <UART_RxISR_8BIT_FIFOEN+0x172>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029ec:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029f0:	f383 8810 	msr	PRIMASK, r3
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80029f4:	6822      	ldr	r2, [r4, #0]
 80029f6:	481a      	ldr	r0, [pc, #104]	@ (8002a60 <UART_RxISR_8BIT_FIFOEN+0x1d0>)
 80029f8:	6813      	ldr	r3, [r2, #0]
 80029fa:	4003      	ands	r3, r0
 80029fc:	6013      	str	r3, [r2, #0]
 80029fe:	f381 8810 	msr	PRIMASK, r1
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a02:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d118      	bne.n	8002a3a <UART_RxISR_8BIT_FIFOEN+0x1aa>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a08:	2200      	movs	r2, #0
 8002a0a:	66e2      	str	r2, [r4, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a0c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a10:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a14:	6821      	ldr	r1, [r4, #0]
 8002a16:	330f      	adds	r3, #15
 8002a18:	680a      	ldr	r2, [r1, #0]
 8002a1a:	439a      	bics	r2, r3
 8002a1c:	600a      	str	r2, [r1, #0]
 8002a1e:	f380 8810 	msr	PRIMASK, r0
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002a22:	6822      	ldr	r2, [r4, #0]
 8002a24:	69d1      	ldr	r1, [r2, #28]
 8002a26:	4219      	tst	r1, r3
 8002a28:	d000      	beq.n	8002a2c <UART_RxISR_8BIT_FIFOEN+0x19c>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002a2a:	6213      	str	r3, [r2, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002a2c:	0023      	movs	r3, r4
 8002a2e:	335c      	adds	r3, #92	@ 0x5c
 8002a30:	0020      	movs	r0, r4
 8002a32:	8819      	ldrh	r1, [r3, #0]
 8002a34:	f7ff fcad 	bl	8002392 <HAL_UARTEx_RxEventCallback>
 8002a38:	e742      	b.n	80028c0 <UART_RxISR_8BIT_FIFOEN+0x30>
          HAL_UART_RxCpltCallback(huart);
 8002a3a:	0020      	movs	r0, r4
 8002a3c:	f001 fa40 	bl	8003ec0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8002a40:	e73e      	b.n	80028c0 <UART_RxISR_8BIT_FIFOEN+0x30>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002a42:	2208      	movs	r2, #8
 8002a44:	6999      	ldr	r1, [r3, #24]
 8002a46:	430a      	orrs	r2, r1
 8002a48:	619a      	str	r2, [r3, #24]
}
 8002a4a:	e760      	b.n	800290e <UART_RxISR_8BIT_FIFOEN+0x7e>
 8002a4c:	efffffff 	.word	0xefffffff
 8002a50:	080026d1 	.word	0x080026d1
 8002a54:	fffffeff 	.word	0xfffffeff
 8002a58:	effffffe 	.word	0xeffffffe
 8002a5c:	40008000 	.word	0x40008000
 8002a60:	fbffffff 	.word	0xfbffffff

08002a64 <UART_RxISR_16BIT_FIFOEN>:
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8002a64:	0003      	movs	r3, r0
{
 8002a66:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t  uhMask = huart->Mask;
 8002a68:	3360      	adds	r3, #96	@ 0x60
 8002a6a:	881b      	ldrh	r3, [r3, #0]
{
 8002a6c:	b085      	sub	sp, #20
  uint16_t  uhMask = huart->Mask;
 8002a6e:	9302      	str	r3, [sp, #8]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8002a70:	6803      	ldr	r3, [r0, #0]
{
 8002a72:	0004      	movs	r4, r0
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8002a74:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	9203      	str	r2, [sp, #12]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8002a7a:	689a      	ldr	r2, [r3, #8]
 8002a7c:	9201      	str	r2, [sp, #4]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a7e:	0002      	movs	r2, r0
 8002a80:	328c      	adds	r2, #140	@ 0x8c
 8002a82:	6812      	ldr	r2, [r2, #0]
 8002a84:	2a22      	cmp	r2, #34	@ 0x22
 8002a86:	d000      	beq.n	8002a8a <UART_RxISR_16BIT_FIFOEN+0x26>
 8002a88:	e0c3      	b.n	8002c12 <UART_RxISR_16BIT_FIFOEN+0x1ae>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8002a8a:	0003      	movs	r3, r0
 8002a8c:	3368      	adds	r3, #104	@ 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8002a8e:	881b      	ldrh	r3, [r3, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d002      	beq.n	8002a9a <UART_RxISR_16BIT_FIFOEN+0x36>
 8002a94:	2320      	movs	r3, #32
 8002a96:	421d      	tst	r5, r3
 8002a98:	d125      	bne.n	8002ae6 <UART_RxISR_16BIT_FIFOEN+0x82>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8002a9a:	0023      	movs	r3, r4
 8002a9c:	335e      	adds	r3, #94	@ 0x5e
 8002a9e:	881b      	ldrh	r3, [r3, #0]
 8002aa0:	b29a      	uxth	r2, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d01d      	beq.n	8002ae2 <UART_RxISR_16BIT_FIFOEN+0x7e>
 8002aa6:	0023      	movs	r3, r4
 8002aa8:	3368      	adds	r3, #104	@ 0x68
 8002aaa:	881b      	ldrh	r3, [r3, #0]
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d918      	bls.n	8002ae2 <UART_RxISR_16BIT_FIFOEN+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ab0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	f382 8810 	msr	PRIMASK, r2
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8002aba:	6821      	ldr	r1, [r4, #0]
 8002abc:	4d57      	ldr	r5, [pc, #348]	@ (8002c1c <UART_RxISR_16BIT_FIFOEN+0x1b8>)
 8002abe:	688b      	ldr	r3, [r1, #8]
 8002ac0:	402b      	ands	r3, r5
 8002ac2:	608b      	str	r3, [r1, #8]
 8002ac4:	f380 8810 	msr	PRIMASK, r0

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8002ac8:	4b55      	ldr	r3, [pc, #340]	@ (8002c20 <UART_RxISR_16BIT_FIFOEN+0x1bc>)
 8002aca:	6763      	str	r3, [r4, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002acc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ad0:	f382 8810 	msr	PRIMASK, r2

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8002ad4:	2320      	movs	r3, #32
 8002ad6:	6822      	ldr	r2, [r4, #0]
 8002ad8:	6810      	ldr	r0, [r2, #0]
 8002ada:	4303      	orrs	r3, r0
 8002adc:	6013      	str	r3, [r2, #0]
 8002ade:	f381 8810 	msr	PRIMASK, r1
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002ae2:	b005      	add	sp, #20
 8002ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      huart->RxXferCount--;
 8002ae6:	0026      	movs	r6, r4
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002ae8:	6823      	ldr	r3, [r4, #0]
      *tmp = (uint16_t)(uhdata & uhMask);
 8002aea:	9802      	ldr	r0, [sp, #8]
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002aec:	6a59      	ldr	r1, [r3, #36]	@ 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8002aee:	6da2      	ldr	r2, [r4, #88]	@ 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 8002af0:	4001      	ands	r1, r0
 8002af2:	8011      	strh	r1, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8002af4:	3202      	adds	r2, #2
 8002af6:	65a2      	str	r2, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 8002af8:	365e      	adds	r6, #94	@ 0x5e
 8002afa:	8832      	ldrh	r2, [r6, #0]
 8002afc:	3a01      	subs	r2, #1
 8002afe:	b292      	uxth	r2, r2
 8002b00:	8032      	strh	r2, [r6, #0]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8002b02:	2207      	movs	r2, #7
      isrflags = READ_REG(huart->Instance->ISR);
 8002b04:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8002b06:	4215      	tst	r5, r2
 8002b08:	d02f      	beq.n	8002b6a <UART_RxISR_16BIT_FIFOEN+0x106>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002b0a:	3a06      	subs	r2, #6
 8002b0c:	4215      	tst	r5, r2
 8002b0e:	d008      	beq.n	8002b22 <UART_RxISR_16BIT_FIFOEN+0xbe>
 8002b10:	9903      	ldr	r1, [sp, #12]
 8002b12:	05c9      	lsls	r1, r1, #23
 8002b14:	d505      	bpl.n	8002b22 <UART_RxISR_16BIT_FIFOEN+0xbe>
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b16:	0021      	movs	r1, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002b18:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b1a:	3190      	adds	r1, #144	@ 0x90
 8002b1c:	6808      	ldr	r0, [r1, #0]
 8002b1e:	4302      	orrs	r2, r0
 8002b20:	600a      	str	r2, [r1, #0]
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b22:	2202      	movs	r2, #2
 8002b24:	4215      	tst	r5, r2
 8002b26:	d009      	beq.n	8002b3c <UART_RxISR_16BIT_FIFOEN+0xd8>
 8002b28:	9901      	ldr	r1, [sp, #4]
 8002b2a:	07c9      	lsls	r1, r1, #31
 8002b2c:	d506      	bpl.n	8002b3c <UART_RxISR_16BIT_FIFOEN+0xd8>
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b2e:	0021      	movs	r1, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002b30:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b32:	3190      	adds	r1, #144	@ 0x90
 8002b34:	6808      	ldr	r0, [r1, #0]
 8002b36:	1892      	adds	r2, r2, r2
 8002b38:	4302      	orrs	r2, r0
 8002b3a:	600a      	str	r2, [r1, #0]
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b3c:	2204      	movs	r2, #4
 8002b3e:	4215      	tst	r5, r2
 8002b40:	d009      	beq.n	8002b56 <UART_RxISR_16BIT_FIFOEN+0xf2>
 8002b42:	9901      	ldr	r1, [sp, #4]
 8002b44:	07c9      	lsls	r1, r1, #31
 8002b46:	d506      	bpl.n	8002b56 <UART_RxISR_16BIT_FIFOEN+0xf2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002b48:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b4a:	0022      	movs	r2, r4
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	3290      	adds	r2, #144	@ 0x90
 8002b50:	6811      	ldr	r1, [r2, #0]
 8002b52:	430b      	orrs	r3, r1
 8002b54:	6013      	str	r3, [r2, #0]
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b56:	0027      	movs	r7, r4
 8002b58:	3790      	adds	r7, #144	@ 0x90
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d004      	beq.n	8002b6a <UART_RxISR_16BIT_FIFOEN+0x106>
          HAL_UART_ErrorCallback(huart);
 8002b60:	0020      	movs	r0, r4
 8002b62:	f7ff fb1b 	bl	800219c <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b66:	2300      	movs	r3, #0
 8002b68:	603b      	str	r3, [r7, #0]
      if (huart->RxXferCount == 0U)
 8002b6a:	8833      	ldrh	r3, [r6, #0]
 8002b6c:	b299      	uxth	r1, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d000      	beq.n	8002b74 <UART_RxISR_16BIT_FIFOEN+0x110>
 8002b72:	e78f      	b.n	8002a94 <UART_RxISR_16BIT_FIFOEN+0x30>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b74:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b78:	3301      	adds	r3, #1
 8002b7a:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b7e:	6820      	ldr	r0, [r4, #0]
 8002b80:	4f28      	ldr	r7, [pc, #160]	@ (8002c24 <UART_RxISR_16BIT_FIFOEN+0x1c0>)
 8002b82:	6802      	ldr	r2, [r0, #0]
 8002b84:	403a      	ands	r2, r7
 8002b86:	6002      	str	r2, [r0, #0]
 8002b88:	f386 8810 	msr	PRIMASK, r6
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b8c:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b90:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002b94:	6820      	ldr	r0, [r4, #0]
 8002b96:	4f24      	ldr	r7, [pc, #144]	@ (8002c28 <UART_RxISR_16BIT_FIFOEN+0x1c4>)
 8002b98:	6882      	ldr	r2, [r0, #8]
 8002b9a:	403a      	ands	r2, r7
 8002b9c:	6082      	str	r2, [r0, #8]
 8002b9e:	f386 8810 	msr	PRIMASK, r6
        huart->RxState = HAL_UART_STATE_READY;
 8002ba2:	0022      	movs	r2, r4
 8002ba4:	2020      	movs	r0, #32
 8002ba6:	328c      	adds	r2, #140	@ 0x8c
 8002ba8:	6010      	str	r0, [r2, #0]
        huart->RxISR = NULL;
 8002baa:	6761      	str	r1, [r4, #116]	@ 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002bac:	6721      	str	r1, [r4, #112]	@ 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002bae:	6822      	ldr	r2, [r4, #0]
 8002bb0:	491e      	ldr	r1, [pc, #120]	@ (8002c2c <UART_RxISR_16BIT_FIFOEN+0x1c8>)
 8002bb2:	428a      	cmp	r2, r1
 8002bb4:	d00d      	beq.n	8002bd2 <UART_RxISR_16BIT_FIFOEN+0x16e>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002bb6:	6852      	ldr	r2, [r2, #4]
 8002bb8:	0212      	lsls	r2, r2, #8
 8002bba:	d50a      	bpl.n	8002bd2 <UART_RxISR_16BIT_FIFOEN+0x16e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bbc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bc0:	f383 8810 	msr	PRIMASK, r3
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002bc4:	6822      	ldr	r2, [r4, #0]
 8002bc6:	481a      	ldr	r0, [pc, #104]	@ (8002c30 <UART_RxISR_16BIT_FIFOEN+0x1cc>)
 8002bc8:	6813      	ldr	r3, [r2, #0]
 8002bca:	4003      	ands	r3, r0
 8002bcc:	6013      	str	r3, [r2, #0]
 8002bce:	f381 8810 	msr	PRIMASK, r1
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bd2:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d118      	bne.n	8002c0a <UART_RxISR_16BIT_FIFOEN+0x1a6>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bd8:	2200      	movs	r2, #0
 8002bda:	66e2      	str	r2, [r4, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bdc:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002be0:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002be4:	6821      	ldr	r1, [r4, #0]
 8002be6:	330f      	adds	r3, #15
 8002be8:	680a      	ldr	r2, [r1, #0]
 8002bea:	439a      	bics	r2, r3
 8002bec:	600a      	str	r2, [r1, #0]
 8002bee:	f380 8810 	msr	PRIMASK, r0
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002bf2:	6822      	ldr	r2, [r4, #0]
 8002bf4:	69d1      	ldr	r1, [r2, #28]
 8002bf6:	4219      	tst	r1, r3
 8002bf8:	d000      	beq.n	8002bfc <UART_RxISR_16BIT_FIFOEN+0x198>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002bfa:	6213      	str	r3, [r2, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002bfc:	0023      	movs	r3, r4
 8002bfe:	335c      	adds	r3, #92	@ 0x5c
 8002c00:	0020      	movs	r0, r4
 8002c02:	8819      	ldrh	r1, [r3, #0]
 8002c04:	f7ff fbc5 	bl	8002392 <HAL_UARTEx_RxEventCallback>
 8002c08:	e744      	b.n	8002a94 <UART_RxISR_16BIT_FIFOEN+0x30>
          HAL_UART_RxCpltCallback(huart);
 8002c0a:	0020      	movs	r0, r4
 8002c0c:	f001 f958 	bl	8003ec0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8002c10:	e740      	b.n	8002a94 <UART_RxISR_16BIT_FIFOEN+0x30>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002c12:	2208      	movs	r2, #8
 8002c14:	6999      	ldr	r1, [r3, #24]
 8002c16:	430a      	orrs	r2, r1
 8002c18:	619a      	str	r2, [r3, #24]
}
 8002c1a:	e762      	b.n	8002ae2 <UART_RxISR_16BIT_FIFOEN+0x7e>
 8002c1c:	efffffff 	.word	0xefffffff
 8002c20:	080027b1 	.word	0x080027b1
 8002c24:	fffffeff 	.word	0xfffffeff
 8002c28:	effffffe 	.word	0xeffffffe
 8002c2c:	40008000 	.word	0x40008000
 8002c30:	fbffffff 	.word	0xfbffffff

08002c34 <UART_SetConfig>:
{
 8002c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c36:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c38:	6925      	ldr	r5, [r4, #16]
 8002c3a:	68a2      	ldr	r2, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 8002c3c:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c3e:	432a      	orrs	r2, r5
 8002c40:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c42:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c44:	69c0      	ldr	r0, [r0, #28]
 8002c46:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c48:	4d67      	ldr	r5, [pc, #412]	@ (8002de8 <UART_SetConfig+0x1b4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c4a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c4c:	4029      	ands	r1, r5
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c52:	685a      	ldr	r2, [r3, #4]
 8002c54:	4965      	ldr	r1, [pc, #404]	@ (8002dec <UART_SetConfig+0x1b8>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c56:	69a5      	ldr	r5, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c58:	400a      	ands	r2, r1
 8002c5a:	68e1      	ldr	r1, [r4, #12]
 8002c5c:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002c5e:	4964      	ldr	r1, [pc, #400]	@ (8002df0 <UART_SetConfig+0x1bc>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c60:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002c62:	428b      	cmp	r3, r1
 8002c64:	d001      	beq.n	8002c6a <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 8002c66:	6a22      	ldr	r2, [r4, #32]
 8002c68:	4315      	orrs	r5, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c6a:	689a      	ldr	r2, [r3, #8]
 8002c6c:	4e61      	ldr	r6, [pc, #388]	@ (8002df4 <UART_SetConfig+0x1c0>)
 8002c6e:	4032      	ands	r2, r6
 8002c70:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002c72:	250f      	movs	r5, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c74:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002c76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c78:	43aa      	bics	r2, r5
 8002c7a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8002c7c:	432a      	orrs	r2, r5
 8002c7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c80:	4a5d      	ldr	r2, [pc, #372]	@ (8002df8 <UART_SetConfig+0x1c4>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d113      	bne.n	8002cae <UART_SetConfig+0x7a>
 8002c86:	4b5d      	ldr	r3, [pc, #372]	@ (8002dfc <UART_SetConfig+0x1c8>)
 8002c88:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	401a      	ands	r2, r3
 8002c8e:	2380      	movs	r3, #128	@ 0x80
 8002c90:	021b      	lsls	r3, r3, #8
 8002c92:	2a02      	cmp	r2, #2
 8002c94:	d100      	bne.n	8002c98 <UART_SetConfig+0x64>
 8002c96:	e098      	b.n	8002dca <UART_SetConfig+0x196>
 8002c98:	2a03      	cmp	r2, #3
 8002c9a:	d100      	bne.n	8002c9e <UART_SetConfig+0x6a>
 8002c9c:	e0a0      	b.n	8002de0 <UART_SetConfig+0x1ac>
 8002c9e:	2a01      	cmp	r2, #1
 8002ca0:	d000      	beq.n	8002ca4 <UART_SetConfig+0x70>
 8002ca2:	e098      	b.n	8002dd6 <UART_SetConfig+0x1a2>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ca4:	4298      	cmp	r0, r3
 8002ca6:	d05a      	beq.n	8002d5e <UART_SetConfig+0x12a>
        pclk = HAL_RCC_GetSysClockFreq();
 8002ca8:	f7fe fcee 	bl	8001688 <HAL_RCC_GetSysClockFreq>
        break;
 8002cac:	e07b      	b.n	8002da6 <UART_SetConfig+0x172>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002cae:	4a54      	ldr	r2, [pc, #336]	@ (8002e00 <UART_SetConfig+0x1cc>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d100      	bne.n	8002cb6 <UART_SetConfig+0x82>
 8002cb4:	e08d      	b.n	8002dd2 <UART_SetConfig+0x19e>
 8002cb6:	428b      	cmp	r3, r1
 8002cb8:	d10f      	bne.n	8002cda <UART_SetConfig+0xa6>
 8002cba:	22c0      	movs	r2, #192	@ 0xc0
 8002cbc:	2180      	movs	r1, #128	@ 0x80
 8002cbe:	4b4f      	ldr	r3, [pc, #316]	@ (8002dfc <UART_SetConfig+0x1c8>)
 8002cc0:	0112      	lsls	r2, r2, #4
 8002cc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cc4:	0109      	lsls	r1, r1, #4
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	428b      	cmp	r3, r1
 8002cca:	d01b      	beq.n	8002d04 <UART_SetConfig+0xd0>
 8002ccc:	d807      	bhi.n	8002cde <UART_SetConfig+0xaa>
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d015      	beq.n	8002cfe <UART_SetConfig+0xca>
 8002cd2:	2280      	movs	r2, #128	@ 0x80
 8002cd4:	00d2      	lsls	r2, r2, #3
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d006      	beq.n	8002ce8 <UART_SetConfig+0xb4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cda:	2001      	movs	r0, #1
 8002cdc:	e009      	b.n	8002cf2 <UART_SetConfig+0xbe>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d1fb      	bne.n	8002cda <UART_SetConfig+0xa6>
 8002ce2:	2680      	movs	r6, #128	@ 0x80
 8002ce4:	0236      	lsls	r6, r6, #8
 8002ce6:	e00e      	b.n	8002d06 <UART_SetConfig+0xd2>
        pclk = HAL_RCC_GetSysClockFreq();
 8002ce8:	f7fe fcce 	bl	8001688 <HAL_RCC_GetSysClockFreq>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cec:	1e06      	subs	r6, r0, #0
    if (pclk != 0U)
 8002cee:	d10a      	bne.n	8002d06 <UART_SetConfig+0xd2>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cf0:	2000      	movs	r0, #0
  huart->NbRxDataToProcess = 1;
 8002cf2:	4b44      	ldr	r3, [pc, #272]	@ (8002e04 <UART_SetConfig+0x1d0>)
 8002cf4:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 8002cfa:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 8002cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cfe:	f7fe fdb5 	bl	800186c <HAL_RCC_GetPCLK1Freq>
 8002d02:	e7f3      	b.n	8002cec <UART_SetConfig+0xb8>
        pclk = (uint32_t) HSI_VALUE;
 8002d04:	4e40      	ldr	r6, [pc, #256]	@ (8002e08 <UART_SetConfig+0x1d4>)
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002d06:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002d08:	4b40      	ldr	r3, [pc, #256]	@ (8002e0c <UART_SetConfig+0x1d8>)
 8002d0a:	0052      	lsls	r2, r2, #1
 8002d0c:	5ad7      	ldrh	r7, [r2, r3]
 8002d0e:	0030      	movs	r0, r6
 8002d10:	0039      	movs	r1, r7
 8002d12:	f7fd fa0b 	bl	800012c <__udivsi3>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002d16:	2303      	movs	r3, #3
 8002d18:	6865      	ldr	r5, [r4, #4]
 8002d1a:	436b      	muls	r3, r5
 8002d1c:	4283      	cmp	r3, r0
 8002d1e:	d8dc      	bhi.n	8002cda <UART_SetConfig+0xa6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002d20:	032b      	lsls	r3, r5, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002d22:	4283      	cmp	r3, r0
 8002d24:	d3d9      	bcc.n	8002cda <UART_SetConfig+0xa6>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002d26:	2300      	movs	r3, #0
 8002d28:	003a      	movs	r2, r7
 8002d2a:	0030      	movs	r0, r6
 8002d2c:	0019      	movs	r1, r3
 8002d2e:	f7fd fb73 	bl	8000418 <__aeabi_uldivmod>
 8002d32:	2700      	movs	r7, #0
 8002d34:	0e06      	lsrs	r6, r0, #24
 8002d36:	020b      	lsls	r3, r1, #8
 8002d38:	4333      	orrs	r3, r6
 8002d3a:	0202      	lsls	r2, r0, #8
 8002d3c:	086e      	lsrs	r6, r5, #1
 8002d3e:	1992      	adds	r2, r2, r6
 8002d40:	417b      	adcs	r3, r7
 8002d42:	0010      	movs	r0, r2
 8002d44:	0019      	movs	r1, r3
 8002d46:	002a      	movs	r2, r5
 8002d48:	003b      	movs	r3, r7
 8002d4a:	f7fd fb65 	bl	8000418 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002d4e:	4b30      	ldr	r3, [pc, #192]	@ (8002e10 <UART_SetConfig+0x1dc>)
 8002d50:	18c2      	adds	r2, r0, r3
 8002d52:	4b30      	ldr	r3, [pc, #192]	@ (8002e14 <UART_SetConfig+0x1e0>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d8c0      	bhi.n	8002cda <UART_SetConfig+0xa6>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002d58:	6823      	ldr	r3, [r4, #0]
 8002d5a:	60d8      	str	r0, [r3, #12]
 8002d5c:	e7c8      	b.n	8002cf0 <UART_SetConfig+0xbc>
        pclk = HAL_RCC_GetSysClockFreq();
 8002d5e:	f7fe fc93 	bl	8001688 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8002d62:	2800      	cmp	r0, #0
 8002d64:	d0c4      	beq.n	8002cf0 <UART_SetConfig+0xbc>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002d66:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002d68:	4b28      	ldr	r3, [pc, #160]	@ (8002e0c <UART_SetConfig+0x1d8>)
 8002d6a:	0052      	lsls	r2, r2, #1
 8002d6c:	5ad1      	ldrh	r1, [r2, r3]
 8002d6e:	f7fd f9dd 	bl	800012c <__udivsi3>
 8002d72:	6865      	ldr	r5, [r4, #4]
 8002d74:	0040      	lsls	r0, r0, #1
 8002d76:	086b      	lsrs	r3, r5, #1
 8002d78:	18c0      	adds	r0, r0, r3
 8002d7a:	0029      	movs	r1, r5
 8002d7c:	f7fd f9d6 	bl	800012c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d80:	0002      	movs	r2, r0
 8002d82:	4b25      	ldr	r3, [pc, #148]	@ (8002e18 <UART_SetConfig+0x1e4>)
 8002d84:	3a10      	subs	r2, #16
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d8a7      	bhi.n	8002cda <UART_SetConfig+0xa6>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d8a:	230f      	movs	r3, #15
 8002d8c:	0002      	movs	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d8e:	0700      	lsls	r0, r0, #28
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d90:	439a      	bics	r2, r3
 8002d92:	b293      	uxth	r3, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d94:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 8002d96:	6822      	ldr	r2, [r4, #0]
 8002d98:	4303      	orrs	r3, r0
 8002d9a:	60d3      	str	r3, [r2, #12]
 8002d9c:	e7a8      	b.n	8002cf0 <UART_SetConfig+0xbc>
        pclk = (uint32_t) HSI_VALUE;
 8002d9e:	481a      	ldr	r0, [pc, #104]	@ (8002e08 <UART_SetConfig+0x1d4>)
 8002da0:	e7e1      	b.n	8002d66 <UART_SetConfig+0x132>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002da2:	f7fe fd63 	bl	800186c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002da6:	2800      	cmp	r0, #0
 8002da8:	d0a2      	beq.n	8002cf0 <UART_SetConfig+0xbc>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002daa:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002dac:	4b17      	ldr	r3, [pc, #92]	@ (8002e0c <UART_SetConfig+0x1d8>)
 8002dae:	0052      	lsls	r2, r2, #1
 8002db0:	5ad1      	ldrh	r1, [r2, r3]
 8002db2:	f7fd f9bb 	bl	800012c <__udivsi3>
 8002db6:	6865      	ldr	r5, [r4, #4]
 8002db8:	086b      	lsrs	r3, r5, #1
 8002dba:	18c0      	adds	r0, r0, r3
 8002dbc:	0029      	movs	r1, r5
 8002dbe:	f7fd f9b5 	bl	800012c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002dc2:	0002      	movs	r2, r0
 8002dc4:	4b14      	ldr	r3, [pc, #80]	@ (8002e18 <UART_SetConfig+0x1e4>)
 8002dc6:	3a10      	subs	r2, #16
 8002dc8:	e7c4      	b.n	8002d54 <UART_SetConfig+0x120>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002dca:	4298      	cmp	r0, r3
 8002dcc:	d0e7      	beq.n	8002d9e <UART_SetConfig+0x16a>
 8002dce:	480e      	ldr	r0, [pc, #56]	@ (8002e08 <UART_SetConfig+0x1d4>)
 8002dd0:	e7eb      	b.n	8002daa <UART_SetConfig+0x176>
 8002dd2:	2380      	movs	r3, #128	@ 0x80
 8002dd4:	021b      	lsls	r3, r3, #8
 8002dd6:	4298      	cmp	r0, r3
 8002dd8:	d1e3      	bne.n	8002da2 <UART_SetConfig+0x16e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002dda:	f7fe fd47 	bl	800186c <HAL_RCC_GetPCLK1Freq>
        break;
 8002dde:	e7c0      	b.n	8002d62 <UART_SetConfig+0x12e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002de0:	4298      	cmp	r0, r3
 8002de2:	d0c0      	beq.n	8002d66 <UART_SetConfig+0x132>
        pclk = (uint32_t) LSE_VALUE;
 8002de4:	0018      	movs	r0, r3
 8002de6:	e7e0      	b.n	8002daa <UART_SetConfig+0x176>
 8002de8:	cfff69f3 	.word	0xcfff69f3
 8002dec:	ffffcfff 	.word	0xffffcfff
 8002df0:	40008000 	.word	0x40008000
 8002df4:	11fff4ff 	.word	0x11fff4ff
 8002df8:	40013800 	.word	0x40013800
 8002dfc:	40021000 	.word	0x40021000
 8002e00:	40004400 	.word	0x40004400
 8002e04:	00010001 	.word	0x00010001
 8002e08:	00f42400 	.word	0x00f42400
 8002e0c:	080052a0 	.word	0x080052a0
 8002e10:	fffffd00 	.word	0xfffffd00
 8002e14:	000ffcff 	.word	0x000ffcff
 8002e18:	0000ffef 	.word	0x0000ffef

08002e1c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e1c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
{
 8002e1e:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e20:	071a      	lsls	r2, r3, #28
 8002e22:	d506      	bpl.n	8002e32 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e24:	6801      	ldr	r1, [r0, #0]
 8002e26:	4c28      	ldr	r4, [pc, #160]	@ (8002ec8 <UART_AdvFeatureConfig+0xac>)
 8002e28:	684a      	ldr	r2, [r1, #4]
 8002e2a:	4022      	ands	r2, r4
 8002e2c:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8002e2e:	4322      	orrs	r2, r4
 8002e30:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e32:	07da      	lsls	r2, r3, #31
 8002e34:	d506      	bpl.n	8002e44 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e36:	6801      	ldr	r1, [r0, #0]
 8002e38:	4c24      	ldr	r4, [pc, #144]	@ (8002ecc <UART_AdvFeatureConfig+0xb0>)
 8002e3a:	684a      	ldr	r2, [r1, #4]
 8002e3c:	4022      	ands	r2, r4
 8002e3e:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8002e40:	4322      	orrs	r2, r4
 8002e42:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e44:	079a      	lsls	r2, r3, #30
 8002e46:	d506      	bpl.n	8002e56 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e48:	6801      	ldr	r1, [r0, #0]
 8002e4a:	4c21      	ldr	r4, [pc, #132]	@ (8002ed0 <UART_AdvFeatureConfig+0xb4>)
 8002e4c:	684a      	ldr	r2, [r1, #4]
 8002e4e:	4022      	ands	r2, r4
 8002e50:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8002e52:	4322      	orrs	r2, r4
 8002e54:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e56:	075a      	lsls	r2, r3, #29
 8002e58:	d506      	bpl.n	8002e68 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e5a:	6801      	ldr	r1, [r0, #0]
 8002e5c:	4c1d      	ldr	r4, [pc, #116]	@ (8002ed4 <UART_AdvFeatureConfig+0xb8>)
 8002e5e:	684a      	ldr	r2, [r1, #4]
 8002e60:	4022      	ands	r2, r4
 8002e62:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8002e64:	4322      	orrs	r2, r4
 8002e66:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e68:	06da      	lsls	r2, r3, #27
 8002e6a:	d506      	bpl.n	8002e7a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e6c:	6801      	ldr	r1, [r0, #0]
 8002e6e:	4c1a      	ldr	r4, [pc, #104]	@ (8002ed8 <UART_AdvFeatureConfig+0xbc>)
 8002e70:	688a      	ldr	r2, [r1, #8]
 8002e72:	4022      	ands	r2, r4
 8002e74:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8002e76:	4322      	orrs	r2, r4
 8002e78:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e7a:	069a      	lsls	r2, r3, #26
 8002e7c:	d506      	bpl.n	8002e8c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e7e:	6801      	ldr	r1, [r0, #0]
 8002e80:	4c16      	ldr	r4, [pc, #88]	@ (8002edc <UART_AdvFeatureConfig+0xc0>)
 8002e82:	688a      	ldr	r2, [r1, #8]
 8002e84:	4022      	ands	r2, r4
 8002e86:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8002e88:	4322      	orrs	r2, r4
 8002e8a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e8c:	065a      	lsls	r2, r3, #25
 8002e8e:	d510      	bpl.n	8002eb2 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e90:	6801      	ldr	r1, [r0, #0]
 8002e92:	4d13      	ldr	r5, [pc, #76]	@ (8002ee0 <UART_AdvFeatureConfig+0xc4>)
 8002e94:	684a      	ldr	r2, [r1, #4]
 8002e96:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8002e98:	402a      	ands	r2, r5
 8002e9a:	4322      	orrs	r2, r4
 8002e9c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e9e:	2280      	movs	r2, #128	@ 0x80
 8002ea0:	0352      	lsls	r2, r2, #13
 8002ea2:	4294      	cmp	r4, r2
 8002ea4:	d105      	bne.n	8002eb2 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002ea6:	684a      	ldr	r2, [r1, #4]
 8002ea8:	4c0e      	ldr	r4, [pc, #56]	@ (8002ee4 <UART_AdvFeatureConfig+0xc8>)
 8002eaa:	4022      	ands	r2, r4
 8002eac:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8002eae:	4322      	orrs	r2, r4
 8002eb0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002eb2:	061b      	lsls	r3, r3, #24
 8002eb4:	d506      	bpl.n	8002ec4 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002eb6:	6802      	ldr	r2, [r0, #0]
 8002eb8:	490b      	ldr	r1, [pc, #44]	@ (8002ee8 <UART_AdvFeatureConfig+0xcc>)
 8002eba:	6853      	ldr	r3, [r2, #4]
 8002ebc:	400b      	ands	r3, r1
 8002ebe:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8002ec0:	430b      	orrs	r3, r1
 8002ec2:	6053      	str	r3, [r2, #4]
}
 8002ec4:	bd30      	pop	{r4, r5, pc}
 8002ec6:	46c0      	nop			@ (mov r8, r8)
 8002ec8:	ffff7fff 	.word	0xffff7fff
 8002ecc:	fffdffff 	.word	0xfffdffff
 8002ed0:	fffeffff 	.word	0xfffeffff
 8002ed4:	fffbffff 	.word	0xfffbffff
 8002ed8:	ffffefff 	.word	0xffffefff
 8002edc:	ffffdfff 	.word	0xffffdfff
 8002ee0:	ffefffff 	.word	0xffefffff
 8002ee4:	ff9fffff 	.word	0xff9fffff
 8002ee8:	fff7ffff 	.word	0xfff7ffff

08002eec <UART_WaitOnFlagUntilTimeout>:
{
 8002eec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002eee:	0004      	movs	r4, r0
 8002ef0:	000d      	movs	r5, r1
 8002ef2:	0017      	movs	r7, r2
 8002ef4:	9300      	str	r3, [sp, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ef6:	6822      	ldr	r2, [r4, #0]
 8002ef8:	69d3      	ldr	r3, [r2, #28]
 8002efa:	402b      	ands	r3, r5
 8002efc:	1b5b      	subs	r3, r3, r5
 8002efe:	4259      	negs	r1, r3
 8002f00:	414b      	adcs	r3, r1
 8002f02:	42bb      	cmp	r3, r7
 8002f04:	d001      	beq.n	8002f0a <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8002f06:	2000      	movs	r0, #0
 8002f08:	e026      	b.n	8002f58 <UART_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 8002f0a:	9b08      	ldr	r3, [sp, #32]
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	d0f3      	beq.n	8002ef8 <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f10:	f7fd ff40 	bl	8000d94 <HAL_GetTick>
 8002f14:	9b00      	ldr	r3, [sp, #0]
 8002f16:	1ac0      	subs	r0, r0, r3
 8002f18:	9b08      	ldr	r3, [sp, #32]
 8002f1a:	4298      	cmp	r0, r3
 8002f1c:	d82d      	bhi.n	8002f7a <UART_WaitOnFlagUntilTimeout+0x8e>
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d02b      	beq.n	8002f7a <UART_WaitOnFlagUntilTimeout+0x8e>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002f22:	6823      	ldr	r3, [r4, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	0752      	lsls	r2, r2, #29
 8002f28:	d5e5      	bpl.n	8002ef6 <UART_WaitOnFlagUntilTimeout+0xa>
 8002f2a:	002a      	movs	r2, r5
 8002f2c:	2140      	movs	r1, #64	@ 0x40
 8002f2e:	3a40      	subs	r2, #64	@ 0x40
 8002f30:	438a      	bics	r2, r1
 8002f32:	d0e0      	beq.n	8002ef6 <UART_WaitOnFlagUntilTimeout+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002f34:	69da      	ldr	r2, [r3, #28]
 8002f36:	2608      	movs	r6, #8
 8002f38:	0011      	movs	r1, r2
 8002f3a:	4031      	ands	r1, r6
 8002f3c:	9101      	str	r1, [sp, #4]
 8002f3e:	4232      	tst	r2, r6
 8002f40:	d00b      	beq.n	8002f5a <UART_WaitOnFlagUntilTimeout+0x6e>
          UART_EndRxTransfer(huart);
 8002f42:	0020      	movs	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f44:	621e      	str	r6, [r3, #32]
          UART_EndRxTransfer(huart);
 8002f46:	f7fe ffd3 	bl	8001ef0 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002f4a:	0023      	movs	r3, r4
 8002f4c:	3390      	adds	r3, #144	@ 0x90
 8002f4e:	601e      	str	r6, [r3, #0]
          __HAL_UNLOCK(huart);
 8002f50:	2300      	movs	r3, #0
          return HAL_ERROR;
 8002f52:	2001      	movs	r0, #1
          __HAL_UNLOCK(huart);
 8002f54:	3484      	adds	r4, #132	@ 0x84
 8002f56:	7023      	strb	r3, [r4, #0]
}
 8002f58:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f5a:	2280      	movs	r2, #128	@ 0x80
 8002f5c:	69d9      	ldr	r1, [r3, #28]
 8002f5e:	0112      	lsls	r2, r2, #4
 8002f60:	4211      	tst	r1, r2
 8002f62:	d0c8      	beq.n	8002ef6 <UART_WaitOnFlagUntilTimeout+0xa>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f64:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 8002f66:	0020      	movs	r0, r4
 8002f68:	f7fe ffc2 	bl	8001ef0 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002f6c:	0023      	movs	r3, r4
 8002f6e:	2220      	movs	r2, #32
 8002f70:	3390      	adds	r3, #144	@ 0x90
 8002f72:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(huart);
 8002f74:	9b01      	ldr	r3, [sp, #4]
 8002f76:	3484      	adds	r4, #132	@ 0x84
 8002f78:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 8002f7a:	2003      	movs	r0, #3
 8002f7c:	e7ec      	b.n	8002f58 <UART_WaitOnFlagUntilTimeout+0x6c>
	...

08002f80 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f80:	0003      	movs	r3, r0
{
 8002f82:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f84:	2600      	movs	r6, #0
{
 8002f86:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f88:	3390      	adds	r3, #144	@ 0x90
 8002f8a:	601e      	str	r6, [r3, #0]
  tickstart = HAL_GetTick();
 8002f8c:	f7fd ff02 	bl	8000d94 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f90:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8002f92:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	071b      	lsls	r3, r3, #28
 8002f98:	d51f      	bpl.n	8002fda <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f9a:	2180      	movs	r1, #128	@ 0x80
 8002f9c:	4b28      	ldr	r3, [pc, #160]	@ (8003040 <UART_CheckIdleState+0xc0>)
 8002f9e:	0032      	movs	r2, r6
 8002fa0:	9300      	str	r3, [sp, #0]
 8002fa2:	0389      	lsls	r1, r1, #14
 8002fa4:	0003      	movs	r3, r0
 8002fa6:	0020      	movs	r0, r4
 8002fa8:	f7ff ffa0 	bl	8002eec <UART_WaitOnFlagUntilTimeout>
 8002fac:	42b0      	cmp	r0, r6
 8002fae:	d014      	beq.n	8002fda <UART_CheckIdleState+0x5a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fb0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002fba:	2080      	movs	r0, #128	@ 0x80
 8002fbc:	6822      	ldr	r2, [r4, #0]
 8002fbe:	6813      	ldr	r3, [r2, #0]
 8002fc0:	4383      	bics	r3, r0
 8002fc2:	6013      	str	r3, [r2, #0]
 8002fc4:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8002fc8:	0023      	movs	r3, r4
 8002fca:	2220      	movs	r2, #32
 8002fcc:	3388      	adds	r3, #136	@ 0x88
 8002fce:	601a      	str	r2, [r3, #0]
      return HAL_TIMEOUT;
 8002fd0:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	3484      	adds	r4, #132	@ 0x84
 8002fd6:	7023      	strb	r3, [r4, #0]
}
 8002fd8:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002fda:	0026      	movs	r6, r4
 8002fdc:	6823      	ldr	r3, [r4, #0]
 8002fde:	368c      	adds	r6, #140	@ 0x8c
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	075b      	lsls	r3, r3, #29
 8002fe4:	d523      	bpl.n	800302e <UART_CheckIdleState+0xae>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fe6:	2180      	movs	r1, #128	@ 0x80
 8002fe8:	4b15      	ldr	r3, [pc, #84]	@ (8003040 <UART_CheckIdleState+0xc0>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	9300      	str	r3, [sp, #0]
 8002fee:	0020      	movs	r0, r4
 8002ff0:	002b      	movs	r3, r5
 8002ff2:	03c9      	lsls	r1, r1, #15
 8002ff4:	f7ff ff7a 	bl	8002eec <UART_WaitOnFlagUntilTimeout>
 8002ff8:	2800      	cmp	r0, #0
 8002ffa:	d018      	beq.n	800302e <UART_CheckIdleState+0xae>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ffc:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003000:	2201      	movs	r2, #1
 8003002:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003006:	6821      	ldr	r1, [r4, #0]
 8003008:	4d0e      	ldr	r5, [pc, #56]	@ (8003044 <UART_CheckIdleState+0xc4>)
 800300a:	680b      	ldr	r3, [r1, #0]
 800300c:	402b      	ands	r3, r5
 800300e:	600b      	str	r3, [r1, #0]
 8003010:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003014:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003018:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800301c:	6821      	ldr	r1, [r4, #0]
 800301e:	688b      	ldr	r3, [r1, #8]
 8003020:	4393      	bics	r3, r2
 8003022:	608b      	str	r3, [r1, #8]
 8003024:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8003028:	2320      	movs	r3, #32
 800302a:	6033      	str	r3, [r6, #0]
      return HAL_TIMEOUT;
 800302c:	e7d0      	b.n	8002fd0 <UART_CheckIdleState+0x50>
  huart->gState = HAL_UART_STATE_READY;
 800302e:	0023      	movs	r3, r4
 8003030:	2220      	movs	r2, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003032:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8003034:	3388      	adds	r3, #136	@ 0x88
 8003036:	601a      	str	r2, [r3, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8003038:	6032      	str	r2, [r6, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800303a:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800303c:	6720      	str	r0, [r4, #112]	@ 0x70
  return HAL_OK;
 800303e:	e7c8      	b.n	8002fd2 <UART_CheckIdleState+0x52>
 8003040:	01ffffff 	.word	0x01ffffff
 8003044:	fffffedf 	.word	0xfffffedf

08003048 <HAL_UART_Init>:
{
 8003048:	b570      	push	{r4, r5, r6, lr}
 800304a:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 800304c:	d101      	bne.n	8003052 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 800304e:	2001      	movs	r0, #1
}
 8003050:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8003052:	0005      	movs	r5, r0
 8003054:	3588      	adds	r5, #136	@ 0x88
 8003056:	682b      	ldr	r3, [r5, #0]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d104      	bne.n	8003066 <HAL_UART_Init+0x1e>
    huart->Lock = HAL_UNLOCKED;
 800305c:	0002      	movs	r2, r0
 800305e:	3284      	adds	r2, #132	@ 0x84
 8003060:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8003062:	f7fd fd4b 	bl	8000afc <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8003066:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 8003068:	2101      	movs	r1, #1
 800306a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800306c:	602b      	str	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 800306e:	6813      	ldr	r3, [r2, #0]
 8003070:	438b      	bics	r3, r1
 8003072:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003074:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003076:	2b00      	cmp	r3, #0
 8003078:	d002      	beq.n	8003080 <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 800307a:	0020      	movs	r0, r4
 800307c:	f7ff fece 	bl	8002e1c <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003080:	0020      	movs	r0, r4
 8003082:	f7ff fdd7 	bl	8002c34 <UART_SetConfig>
 8003086:	2801      	cmp	r0, #1
 8003088:	d0e1      	beq.n	800304e <HAL_UART_Init+0x6>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800308a:	6823      	ldr	r3, [r4, #0]
 800308c:	4907      	ldr	r1, [pc, #28]	@ (80030ac <HAL_UART_Init+0x64>)
 800308e:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8003090:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003092:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003094:	212a      	movs	r1, #42	@ 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003096:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003098:	689a      	ldr	r2, [r3, #8]
 800309a:	438a      	bics	r2, r1
 800309c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800309e:	2201      	movs	r2, #1
 80030a0:	6819      	ldr	r1, [r3, #0]
 80030a2:	430a      	orrs	r2, r1
 80030a4:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80030a6:	f7ff ff6b 	bl	8002f80 <UART_CheckIdleState>
 80030aa:	e7d1      	b.n	8003050 <HAL_UART_Init+0x8>
 80030ac:	ffffb7ff 	.word	0xffffb7ff

080030b0 <UART_Start_Receive_IT>:
  huart->RxXferSize  = Size;
 80030b0:	0003      	movs	r3, r0
 80030b2:	335c      	adds	r3, #92	@ 0x5c
{
 80030b4:	b570      	push	{r4, r5, r6, lr}
  huart->pRxBuffPtr  = pData;
 80030b6:	6581      	str	r1, [r0, #88]	@ 0x58
  UART_MASK_COMPUTATION(huart);
 80030b8:	2480      	movs	r4, #128	@ 0x80
  huart->RxXferSize  = Size;
 80030ba:	801a      	strh	r2, [r3, #0]
  huart->RxXferCount = Size;
 80030bc:	805a      	strh	r2, [r3, #2]
  huart->RxISR       = NULL;
 80030be:	2300      	movs	r3, #0
  UART_MASK_COMPUTATION(huart);
 80030c0:	6881      	ldr	r1, [r0, #8]
  huart->RxISR       = NULL;
 80030c2:	6743      	str	r3, [r0, #116]	@ 0x74
  UART_MASK_COMPUTATION(huart);
 80030c4:	0164      	lsls	r4, r4, #5
 80030c6:	42a1      	cmp	r1, r4
 80030c8:	d14e      	bne.n	8003168 <UART_Start_Receive_IT+0xb8>
 80030ca:	6903      	ldr	r3, [r0, #16]
 80030cc:	1e59      	subs	r1, r3, #1
 80030ce:	418b      	sbcs	r3, r1
 80030d0:	21ff      	movs	r1, #255	@ 0xff
 80030d2:	425b      	negs	r3, r3
 80030d4:	438b      	bics	r3, r1
 80030d6:	493c      	ldr	r1, [pc, #240]	@ (80031c8 <UART_Start_Receive_IT+0x118>)
 80030d8:	185b      	adds	r3, r3, r1
 80030da:	0001      	movs	r1, r0
 80030dc:	3160      	adds	r1, #96	@ 0x60
 80030de:	800b      	strh	r3, [r1, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030e0:	0003      	movs	r3, r0
 80030e2:	2100      	movs	r1, #0
 80030e4:	3390      	adds	r3, #144	@ 0x90
 80030e6:	6019      	str	r1, [r3, #0]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80030e8:	3122      	adds	r1, #34	@ 0x22
 80030ea:	3b04      	subs	r3, #4
 80030ec:	6019      	str	r1, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030ee:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030f2:	2301      	movs	r3, #1
 80030f4:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030f8:	6801      	ldr	r1, [r0, #0]
 80030fa:	688d      	ldr	r5, [r1, #8]
 80030fc:	432b      	orrs	r3, r5
 80030fe:	608b      	str	r3, [r1, #8]
 8003100:	f384 8810 	msr	PRIMASK, r4
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003104:	2580      	movs	r5, #128	@ 0x80
 8003106:	2180      	movs	r1, #128	@ 0x80
 8003108:	6e46      	ldr	r6, [r0, #100]	@ 0x64
 800310a:	6884      	ldr	r4, [r0, #8]
 800310c:	6903      	ldr	r3, [r0, #16]
 800310e:	05ad      	lsls	r5, r5, #22
 8003110:	0149      	lsls	r1, r1, #5
 8003112:	42ae      	cmp	r6, r5
 8003114:	d13a      	bne.n	800318c <UART_Start_Receive_IT+0xdc>
 8003116:	0005      	movs	r5, r0
 8003118:	3568      	adds	r5, #104	@ 0x68
 800311a:	882d      	ldrh	r5, [r5, #0]
 800311c:	4295      	cmp	r5, r2
 800311e:	d835      	bhi.n	800318c <UART_Start_Receive_IT+0xdc>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003120:	4a2a      	ldr	r2, [pc, #168]	@ (80031cc <UART_Start_Receive_IT+0x11c>)
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003122:	428c      	cmp	r4, r1
 8003124:	d102      	bne.n	800312c <UART_Start_Receive_IT+0x7c>
 8003126:	2b00      	cmp	r3, #0
 8003128:	d100      	bne.n	800312c <UART_Start_Receive_IT+0x7c>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800312a:	4a29      	ldr	r2, [pc, #164]	@ (80031d0 <UART_Start_Receive_IT+0x120>)
 800312c:	6742      	str	r2, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00b      	beq.n	800314a <UART_Start_Receive_IT+0x9a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003132:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003136:	2301      	movs	r3, #1
 8003138:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800313c:	6802      	ldr	r2, [r0, #0]
 800313e:	33ff      	adds	r3, #255	@ 0xff
 8003140:	6814      	ldr	r4, [r2, #0]
 8003142:	4323      	orrs	r3, r4
 8003144:	6013      	str	r3, [r2, #0]
 8003146:	f381 8810 	msr	PRIMASK, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800314a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800314e:	2301      	movs	r3, #1
 8003150:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003154:	2380      	movs	r3, #128	@ 0x80
 8003156:	6802      	ldr	r2, [r0, #0]
 8003158:	055b      	lsls	r3, r3, #21
 800315a:	6890      	ldr	r0, [r2, #8]
 800315c:	4303      	orrs	r3, r0
 800315e:	6093      	str	r3, [r2, #8]
 8003160:	f381 8810 	msr	PRIMASK, r1
}
 8003164:	2000      	movs	r0, #0
 8003166:	bd70      	pop	{r4, r5, r6, pc}
  UART_MASK_COMPUTATION(huart);
 8003168:	2900      	cmp	r1, #0
 800316a:	d105      	bne.n	8003178 <UART_Start_Receive_IT+0xc8>
 800316c:	6901      	ldr	r1, [r0, #16]
 800316e:	237f      	movs	r3, #127	@ 0x7f
 8003170:	2900      	cmp	r1, #0
 8003172:	d1b2      	bne.n	80030da <UART_Start_Receive_IT+0x2a>
 8003174:	3380      	adds	r3, #128	@ 0x80
 8003176:	e7b0      	b.n	80030da <UART_Start_Receive_IT+0x2a>
 8003178:	2480      	movs	r4, #128	@ 0x80
 800317a:	0564      	lsls	r4, r4, #21
 800317c:	42a1      	cmp	r1, r4
 800317e:	d1ac      	bne.n	80030da <UART_Start_Receive_IT+0x2a>
 8003180:	6901      	ldr	r1, [r0, #16]
 8003182:	233f      	movs	r3, #63	@ 0x3f
 8003184:	2900      	cmp	r1, #0
 8003186:	d1a8      	bne.n	80030da <UART_Start_Receive_IT+0x2a>
 8003188:	3340      	adds	r3, #64	@ 0x40
 800318a:	e7a6      	b.n	80030da <UART_Start_Receive_IT+0x2a>
      huart->RxISR = UART_RxISR_8BIT;
 800318c:	4a11      	ldr	r2, [pc, #68]	@ (80031d4 <UART_Start_Receive_IT+0x124>)
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800318e:	428c      	cmp	r4, r1
 8003190:	d102      	bne.n	8003198 <UART_Start_Receive_IT+0xe8>
 8003192:	2b00      	cmp	r3, #0
 8003194:	d100      	bne.n	8003198 <UART_Start_Receive_IT+0xe8>
      huart->RxISR = UART_RxISR_16BIT;
 8003196:	4a10      	ldr	r2, [pc, #64]	@ (80031d8 <UART_Start_Receive_IT+0x128>)
 8003198:	6742      	str	r2, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 800319a:	2201      	movs	r2, #1
 800319c:	2b00      	cmp	r3, #0
 800319e:	d00a      	beq.n	80031b6 <UART_Start_Receive_IT+0x106>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031a0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031a4:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80031a8:	2390      	movs	r3, #144	@ 0x90
 80031aa:	6802      	ldr	r2, [r0, #0]
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	6810      	ldr	r0, [r2, #0]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80031b0:	4303      	orrs	r3, r0
 80031b2:	6013      	str	r3, [r2, #0]
 80031b4:	e7d4      	b.n	8003160 <UART_Start_Receive_IT+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031b6:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031ba:	f382 8810 	msr	PRIMASK, r2
 80031be:	6802      	ldr	r2, [r0, #0]
 80031c0:	2320      	movs	r3, #32
 80031c2:	6810      	ldr	r0, [r2, #0]
 80031c4:	e7f4      	b.n	80031b0 <UART_Start_Receive_IT+0x100>
 80031c6:	46c0      	nop			@ (mov r8, r8)
 80031c8:	000001ff 	.word	0x000001ff
 80031cc:	08002891 	.word	0x08002891
 80031d0:	08002a65 	.word	0x08002a65
 80031d4:	080026d1 	.word	0x080026d1
 80031d8:	080027b1 	.word	0x080027b1

080031dc <HAL_UART_Receive_IT>:
{
 80031dc:	0003      	movs	r3, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 80031de:	308c      	adds	r0, #140	@ 0x8c
{
 80031e0:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 80031e2:	6804      	ldr	r4, [r0, #0]
    return HAL_BUSY;
 80031e4:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 80031e6:	2c20      	cmp	r4, #32
 80031e8:	d128      	bne.n	800323c <HAL_UART_Receive_IT+0x60>
      return HAL_ERROR;
 80031ea:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 80031ec:	2900      	cmp	r1, #0
 80031ee:	d025      	beq.n	800323c <HAL_UART_Receive_IT+0x60>
 80031f0:	2a00      	cmp	r2, #0
 80031f2:	d023      	beq.n	800323c <HAL_UART_Receive_IT+0x60>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031f4:	2080      	movs	r0, #128	@ 0x80
 80031f6:	689c      	ldr	r4, [r3, #8]
 80031f8:	0140      	lsls	r0, r0, #5
 80031fa:	4284      	cmp	r4, r0
 80031fc:	d105      	bne.n	800320a <HAL_UART_Receive_IT+0x2e>
 80031fe:	6918      	ldr	r0, [r3, #16]
 8003200:	2800      	cmp	r0, #0
 8003202:	d102      	bne.n	800320a <HAL_UART_Receive_IT+0x2e>
      return HAL_ERROR;
 8003204:	3001      	adds	r0, #1
      if ((((uint32_t)pData) & 1U) != 0U)
 8003206:	4201      	tst	r1, r0
 8003208:	d118      	bne.n	800323c <HAL_UART_Receive_IT+0x60>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800320a:	2000      	movs	r0, #0
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800320c:	4c0c      	ldr	r4, [pc, #48]	@ (8003240 <HAL_UART_Receive_IT+0x64>)
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800320e:	66d8      	str	r0, [r3, #108]	@ 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003210:	6818      	ldr	r0, [r3, #0]
 8003212:	42a0      	cmp	r0, r4
 8003214:	d00f      	beq.n	8003236 <HAL_UART_Receive_IT+0x5a>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003216:	6840      	ldr	r0, [r0, #4]
 8003218:	0200      	lsls	r0, r0, #8
 800321a:	d50c      	bpl.n	8003236 <HAL_UART_Receive_IT+0x5a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800321c:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003220:	2001      	movs	r0, #1
 8003222:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003226:	2080      	movs	r0, #128	@ 0x80
 8003228:	681c      	ldr	r4, [r3, #0]
 800322a:	04c0      	lsls	r0, r0, #19
 800322c:	6826      	ldr	r6, [r4, #0]
 800322e:	4330      	orrs	r0, r6
 8003230:	6020      	str	r0, [r4, #0]
 8003232:	f385 8810 	msr	PRIMASK, r5
    return (UART_Start_Receive_IT(huart, pData, Size));
 8003236:	0018      	movs	r0, r3
 8003238:	f7ff ff3a 	bl	80030b0 <UART_Start_Receive_IT>
}
 800323c:	bd70      	pop	{r4, r5, r6, pc}
 800323e:	46c0      	nop			@ (mov r8, r8)
 8003240:	40008000 	.word	0x40008000

08003244 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003244:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003246:	0007      	movs	r7, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003248:	6e43      	ldr	r3, [r0, #100]	@ 0x64
{
 800324a:	0004      	movs	r4, r0
 800324c:	376a      	adds	r7, #106	@ 0x6a
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800324e:	2b00      	cmp	r3, #0
 8003250:	d104      	bne.n	800325c <UARTEx_SetNbDataToProcess+0x18>
  {
    huart->NbTxDataToProcess = 1U;
 8003252:	2001      	movs	r0, #1
 8003254:	8038      	strh	r0, [r7, #0]
    huart->NbRxDataToProcess = 1U;
 8003256:	3468      	adds	r4, #104	@ 0x68
 8003258:	8020      	strh	r0, [r4, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800325a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800325c:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800325e:	4e0b      	ldr	r6, [pc, #44]	@ (800328c <UARTEx_SetNbDataToProcess+0x48>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003260:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003262:	689b      	ldr	r3, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 8003264:	4d0a      	ldr	r5, [pc, #40]	@ (8003290 <UARTEx_SetNbDataToProcess+0x4c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003266:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003268:	5cf0      	ldrb	r0, [r6, r3]
                               (uint16_t)denominator[tx_fifo_threshold];
 800326a:	5ce9      	ldrb	r1, [r5, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800326c:	00c0      	lsls	r0, r0, #3
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800326e:	9201      	str	r2, [sp, #4]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003270:	f7fc ffe6 	bl	8000240 <__divsi3>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003274:	9b01      	ldr	r3, [sp, #4]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003276:	8038      	strh	r0, [r7, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003278:	011b      	lsls	r3, r3, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800327a:	0f5b      	lsrs	r3, r3, #29
 800327c:	5cf0      	ldrb	r0, [r6, r3]
                               (uint16_t)denominator[rx_fifo_threshold];
 800327e:	5ce9      	ldrb	r1, [r5, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003280:	00c0      	lsls	r0, r0, #3
 8003282:	f7fc ffdd 	bl	8000240 <__divsi3>
 8003286:	b280      	uxth	r0, r0
}
 8003288:	e7e5      	b.n	8003256 <UARTEx_SetNbDataToProcess+0x12>
 800328a:	46c0      	nop			@ (mov r8, r8)
 800328c:	080052c0 	.word	0x080052c0
 8003290:	080052b8 	.word	0x080052b8

08003294 <HAL_RS485Ex_Init>:
{
 8003294:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003296:	0004      	movs	r4, r0
 8003298:	000e      	movs	r6, r1
 800329a:	001d      	movs	r5, r3
 800329c:	9201      	str	r2, [sp, #4]
  if (huart == NULL)
 800329e:	2800      	cmp	r0, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_RS485Ex_Init+0x12>
    return HAL_ERROR;
 80032a2:	2001      	movs	r0, #1
}
 80032a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 80032a6:	0007      	movs	r7, r0
 80032a8:	3788      	adds	r7, #136	@ 0x88
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d104      	bne.n	80032ba <HAL_RS485Ex_Init+0x26>
    huart->Lock = HAL_UNLOCKED;
 80032b0:	0002      	movs	r2, r0
 80032b2:	3284      	adds	r2, #132	@ 0x84
 80032b4:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 80032b6:	f7fd fc21 	bl	8000afc <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80032ba:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 80032bc:	2101      	movs	r1, #1
 80032be:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80032c0:	603b      	str	r3, [r7, #0]
  __HAL_UART_DISABLE(huart);
 80032c2:	6813      	ldr	r3, [r2, #0]
 80032c4:	438b      	bics	r3, r1
 80032c6:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80032c8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d002      	beq.n	80032d4 <HAL_RS485Ex_Init+0x40>
    UART_AdvFeatureConfig(huart);
 80032ce:	0020      	movs	r0, r4
 80032d0:	f7ff fda4 	bl	8002e1c <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032d4:	0020      	movs	r0, r4
 80032d6:	f7ff fcad 	bl	8002c34 <UART_SetConfig>
 80032da:	2801      	cmp	r0, #1
 80032dc:	d0e1      	beq.n	80032a2 <HAL_RS485Ex_Init+0xe>
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 80032de:	2280      	movs	r2, #128	@ 0x80
 80032e0:	6823      	ldr	r3, [r4, #0]
 80032e2:	01d2      	lsls	r2, r2, #7
 80032e4:	6899      	ldr	r1, [r3, #8]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 80032e6:	042d      	lsls	r5, r5, #16
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 80032e8:	430a      	orrs	r2, r1
 80032ea:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 80032ec:	689a      	ldr	r2, [r3, #8]
 80032ee:	490a      	ldr	r1, [pc, #40]	@ (8003318 <HAL_RS485Ex_Init+0x84>)
  return (UART_CheckIdleState(huart));
 80032f0:	0020      	movs	r0, r4
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 80032f2:	400a      	ands	r2, r1
 80032f4:	4332      	orrs	r2, r6
 80032f6:	609a      	str	r2, [r3, #8]
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 80032f8:	9a01      	ldr	r2, [sp, #4]
 80032fa:	0551      	lsls	r1, r2, #21
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 80032fc:	430d      	orrs	r5, r1
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	4906      	ldr	r1, [pc, #24]	@ (800331c <HAL_RS485Ex_Init+0x88>)
 8003302:	400a      	ands	r2, r1
 8003304:	4315      	orrs	r5, r2
  __HAL_UART_ENABLE(huart);
 8003306:	2201      	movs	r2, #1
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8003308:	601d      	str	r5, [r3, #0]
  __HAL_UART_ENABLE(huart);
 800330a:	6819      	ldr	r1, [r3, #0]
 800330c:	430a      	orrs	r2, r1
 800330e:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8003310:	f7ff fe36 	bl	8002f80 <UART_CheckIdleState>
 8003314:	e7c6      	b.n	80032a4 <HAL_RS485Ex_Init+0x10>
 8003316:	46c0      	nop			@ (mov r8, r8)
 8003318:	ffff7fff 	.word	0xffff7fff
 800331c:	fc00ffff 	.word	0xfc00ffff

08003320 <HAL_UARTEx_WakeupCallback>:
}
 8003320:	4770      	bx	lr

08003322 <HAL_UARTEx_RxFifoFullCallback>:
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
 8003322:	4770      	bx	lr

08003324 <HAL_UARTEx_TxFifoEmptyCallback>:
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
 8003324:	4770      	bx	lr
	...

08003328 <HAL_UARTEx_DisableFifoMode>:
{
 8003328:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 800332a:	0004      	movs	r4, r0
 800332c:	3484      	adds	r4, #132	@ 0x84
 800332e:	7822      	ldrb	r2, [r4, #0]
{
 8003330:	0003      	movs	r3, r0
  __HAL_LOCK(huart);
 8003332:	2002      	movs	r0, #2
 8003334:	2a01      	cmp	r2, #1
 8003336:	d011      	beq.n	800335c <HAL_UARTEx_DisableFifoMode+0x34>
  huart->gState = HAL_UART_STATE_BUSY;
 8003338:	001d      	movs	r5, r3
 800333a:	2224      	movs	r2, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 800333c:	2601      	movs	r6, #1
  huart->gState = HAL_UART_STATE_BUSY;
 800333e:	3588      	adds	r5, #136	@ 0x88
 8003340:	602a      	str	r2, [r5, #0]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8003346:	6810      	ldr	r0, [r2, #0]
 8003348:	43b0      	bics	r0, r6
 800334a:	6010      	str	r0, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800334c:	4804      	ldr	r0, [pc, #16]	@ (8003360 <HAL_UARTEx_DisableFifoMode+0x38>)
 800334e:	4001      	ands	r1, r0
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003350:	2000      	movs	r0, #0
 8003352:	6658      	str	r0, [r3, #100]	@ 0x64
  huart->gState = HAL_UART_STATE_READY;
 8003354:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003356:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003358:	602b      	str	r3, [r5, #0]
  __HAL_UNLOCK(huart);
 800335a:	7020      	strb	r0, [r4, #0]
}
 800335c:	bd70      	pop	{r4, r5, r6, pc}
 800335e:	46c0      	nop			@ (mov r8, r8)
 8003360:	dfffffff 	.word	0xdfffffff

08003364 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8003364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 8003366:	0005      	movs	r5, r0
 8003368:	3584      	adds	r5, #132	@ 0x84
{
 800336a:	000b      	movs	r3, r1
  __HAL_LOCK(huart);
 800336c:	7829      	ldrb	r1, [r5, #0]
 800336e:	2202      	movs	r2, #2
 8003370:	2901      	cmp	r1, #1
 8003372:	d015      	beq.n	80033a0 <HAL_UARTEx_SetTxFifoThreshold+0x3c>
  huart->gState = HAL_UART_STATE_BUSY;
 8003374:	0006      	movs	r6, r0
  __HAL_UART_DISABLE(huart);
 8003376:	2101      	movs	r1, #1
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003378:	6804      	ldr	r4, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800337a:	3688      	adds	r6, #136	@ 0x88
 800337c:	3222      	adds	r2, #34	@ 0x22
 800337e:	6032      	str	r2, [r6, #0]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003380:	6827      	ldr	r7, [r4, #0]
  __HAL_UART_DISABLE(huart);
 8003382:	6822      	ldr	r2, [r4, #0]
 8003384:	438a      	bics	r2, r1
 8003386:	6022      	str	r2, [r4, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003388:	68a1      	ldr	r1, [r4, #8]
 800338a:	00c9      	lsls	r1, r1, #3
 800338c:	08c9      	lsrs	r1, r1, #3
 800338e:	4319      	orrs	r1, r3
 8003390:	60a1      	str	r1, [r4, #8]
  UARTEx_SetNbDataToProcess(huart);
 8003392:	f7ff ff57 	bl	8003244 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8003396:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8003398:	2200      	movs	r2, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800339a:	6027      	str	r7, [r4, #0]
  huart->gState = HAL_UART_STATE_READY;
 800339c:	6033      	str	r3, [r6, #0]
  __HAL_UNLOCK(huart);
 800339e:	702a      	strb	r2, [r5, #0]
}
 80033a0:	0010      	movs	r0, r2
 80033a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080033a4 <HAL_UARTEx_SetRxFifoThreshold>:
{
 80033a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 80033a6:	0005      	movs	r5, r0
 80033a8:	3584      	adds	r5, #132	@ 0x84
{
 80033aa:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 80033ac:	7829      	ldrb	r1, [r5, #0]
 80033ae:	2302      	movs	r3, #2
 80033b0:	2901      	cmp	r1, #1
 80033b2:	d015      	beq.n	80033e0 <HAL_UARTEx_SetRxFifoThreshold+0x3c>
  huart->gState = HAL_UART_STATE_BUSY;
 80033b4:	0006      	movs	r6, r0
  __HAL_UART_DISABLE(huart);
 80033b6:	2101      	movs	r1, #1
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80033b8:	6804      	ldr	r4, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80033ba:	3688      	adds	r6, #136	@ 0x88
 80033bc:	3322      	adds	r3, #34	@ 0x22
 80033be:	6033      	str	r3, [r6, #0]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80033c0:	6827      	ldr	r7, [r4, #0]
  __HAL_UART_DISABLE(huart);
 80033c2:	6823      	ldr	r3, [r4, #0]
 80033c4:	438b      	bics	r3, r1
 80033c6:	6023      	str	r3, [r4, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80033c8:	68a1      	ldr	r1, [r4, #8]
 80033ca:	4b06      	ldr	r3, [pc, #24]	@ (80033e4 <HAL_UARTEx_SetRxFifoThreshold+0x40>)
 80033cc:	4019      	ands	r1, r3
 80033ce:	4311      	orrs	r1, r2
 80033d0:	60a1      	str	r1, [r4, #8]
  UARTEx_SetNbDataToProcess(huart);
 80033d2:	f7ff ff37 	bl	8003244 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 80033d6:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80033d8:	6027      	str	r7, [r4, #0]
  huart->gState = HAL_UART_STATE_READY;
 80033da:	6033      	str	r3, [r6, #0]
  __HAL_UNLOCK(huart);
 80033dc:	2300      	movs	r3, #0
 80033de:	702b      	strb	r3, [r5, #0]
}
 80033e0:	0018      	movs	r0, r3
 80033e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033e4:	f1ffffff 	.word	0xf1ffffff

080033e8 <prvucMBBIN2CHAR>:
    }
}

static          UCHAR
prvucMBBIN2CHAR( UCHAR ucByte )
{
 80033e8:	0003      	movs	r3, r0
    {
        return ( UCHAR )( '0' + ucByte );
    }
    else if( ( ucByte >= 0x0A ) && ( ucByte <= 0x0F ) )
    {
        return ( UCHAR )( ucByte - 0x0A + 'A' );
 80033ea:	3037      	adds	r0, #55	@ 0x37
 80033ec:	b2c0      	uxtb	r0, r0
    if( ucByte <= 0x09 )
 80033ee:	2b09      	cmp	r3, #9
 80033f0:	d801      	bhi.n	80033f6 <prvucMBBIN2CHAR+0xe>
        return ( UCHAR )( '0' + ucByte );
 80033f2:	3330      	adds	r3, #48	@ 0x30
 80033f4:	b2d8      	uxtb	r0, r3
    {
        /* Programming error. */
        assert( 0 );
    }
    return '0';
}
 80033f6:	4770      	bx	lr

080033f8 <eMBASCIIInit>:
{
 80033f8:	b570      	push	{r4, r5, r6, lr}
 80033fa:	000c      	movs	r4, r1
 80033fc:	0015      	movs	r5, r2
 80033fe:	001e      	movs	r6, r3
    ENTER_CRITICAL_SECTION(  );
 8003400:	f000 fcca 	bl	8003d98 <EnterCriticalSection>
    ucMBLFCharacter = MB_ASCII_DEFAULT_LF;
 8003404:	220a      	movs	r2, #10
 8003406:	4b0b      	ldr	r3, [pc, #44]	@ (8003434 <eMBASCIIInit+0x3c>)
    if( xMBPortSerialInit( ucPort, ulBaudRate, 7, eParity ) != TRUE )
 8003408:	0029      	movs	r1, r5
    ucMBLFCharacter = MB_ASCII_DEFAULT_LF;
 800340a:	701a      	strb	r2, [r3, #0]
    if( xMBPortSerialInit( ucPort, ulBaudRate, 7, eParity ) != TRUE )
 800340c:	0020      	movs	r0, r4
 800340e:	0033      	movs	r3, r6
 8003410:	3a03      	subs	r2, #3
 8003412:	f000 fd25 	bl	8003e60 <xMBPortSerialInit>
 8003416:	2801      	cmp	r0, #1
 8003418:	d004      	beq.n	8003424 <eMBASCIIInit+0x2c>
        eStatus = MB_EPORTERR;
 800341a:	2403      	movs	r4, #3
    EXIT_CRITICAL_SECTION(  );
 800341c:	f000 fcc4 	bl	8003da8 <ExitCriticalSection>
}
 8003420:	0020      	movs	r0, r4
 8003422:	bd70      	pop	{r4, r5, r6, pc}
    else if( xMBPortTimersInit( MB_ASCII_TIMEOUT_SEC * 20000UL ) != TRUE )
 8003424:	4804      	ldr	r0, [pc, #16]	@ (8003438 <eMBASCIIInit+0x40>)
 8003426:	f000 fd5b 	bl	8003ee0 <xMBPortTimersInit>
 800342a:	2801      	cmp	r0, #1
 800342c:	d1f5      	bne.n	800341a <eMBASCIIInit+0x22>
    eMBErrorCode    eStatus = MB_ENOERR;
 800342e:	2400      	movs	r4, #0
 8003430:	e7f4      	b.n	800341c <eMBASCIIInit+0x24>
 8003432:	46c0      	nop			@ (mov r8, r8)
 8003434:	20000334 	.word	0x20000334
 8003438:	00004e20 	.word	0x00004e20

0800343c <eMBASCIIStart>:
{
 800343c:	b510      	push	{r4, lr}
    eRcvState = STATE_RX_IDLE;
 800343e:	2400      	movs	r4, #0
    ENTER_CRITICAL_SECTION(  );
 8003440:	f000 fcaa 	bl	8003d98 <EnterCriticalSection>
    vMBPortSerialEnable( TRUE, FALSE );
 8003444:	2100      	movs	r1, #0
 8003446:	2001      	movs	r0, #1
 8003448:	f000 fce8 	bl	8003e1c <vMBPortSerialEnable>
    eRcvState = STATE_RX_IDLE;
 800344c:	4b03      	ldr	r3, [pc, #12]	@ (800345c <eMBASCIIStart+0x20>)
 800344e:	701c      	strb	r4, [r3, #0]
    EXIT_CRITICAL_SECTION(  );
 8003450:	f000 fcaa 	bl	8003da8 <ExitCriticalSection>
    ( void )xMBPortEventPost( EV_READY );
 8003454:	0020      	movs	r0, r4
 8003456:	f000 fcc5 	bl	8003de4 <xMBPortEventPost>
}
 800345a:	bd10      	pop	{r4, pc}
 800345c:	20000340 	.word	0x20000340

08003460 <eMBASCIIStop>:
{
 8003460:	b510      	push	{r4, lr}
    ENTER_CRITICAL_SECTION(  );
 8003462:	f000 fc99 	bl	8003d98 <EnterCriticalSection>
    vMBPortSerialEnable( FALSE, FALSE );
 8003466:	2100      	movs	r1, #0
 8003468:	0008      	movs	r0, r1
 800346a:	f000 fcd7 	bl	8003e1c <vMBPortSerialEnable>
    vMBPortTimersDisable(  );
 800346e:	f000 fd4b 	bl	8003f08 <vMBPortTimersDisable>
    EXIT_CRITICAL_SECTION(  );
 8003472:	f000 fc99 	bl	8003da8 <ExitCriticalSection>
}
 8003476:	bd10      	pop	{r4, pc}

08003478 <eMBASCIIReceive>:
{
 8003478:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800347a:	0006      	movs	r6, r0
 800347c:	9201      	str	r2, [sp, #4]
 800347e:	000d      	movs	r5, r1
    ENTER_CRITICAL_SECTION(  );
 8003480:	f000 fc8a 	bl	8003d98 <EnterCriticalSection>
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );
 8003484:	4a17      	ldr	r2, [pc, #92]	@ (80034e4 <eMBASCIIReceive+0x6c>)
 8003486:	8813      	ldrh	r3, [r2, #0]
 8003488:	2bff      	cmp	r3, #255	@ 0xff
 800348a:	d905      	bls.n	8003498 <eMBASCIIReceive+0x20>
 800348c:	219c      	movs	r1, #156	@ 0x9c
 800348e:	4b16      	ldr	r3, [pc, #88]	@ (80034e8 <eMBASCIIReceive+0x70>)
 8003490:	4a16      	ldr	r2, [pc, #88]	@ (80034ec <eMBASCIIReceive+0x74>)
 8003492:	4817      	ldr	r0, [pc, #92]	@ (80034f0 <eMBASCIIReceive+0x78>)
 8003494:	f000 feee 	bl	8004274 <__assert_func>
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
 8003498:	8813      	ldrh	r3, [r2, #0]
        eStatus = MB_EIO;
 800349a:	2405      	movs	r4, #5
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
 800349c:	2b02      	cmp	r3, #2
 800349e:	d916      	bls.n	80034ce <eMBASCIIReceive+0x56>
 80034a0:	4914      	ldr	r1, [pc, #80]	@ (80034f4 <eMBASCIIReceive+0x7c>)
static          UCHAR
prvucMBLRC( UCHAR * pucFrame, USHORT usLen )
{
    UCHAR           ucLRC = 0;  /* LRC char initialized */

    while( usLen-- )
 80034a2:	4815      	ldr	r0, [pc, #84]	@ (80034f8 <eMBASCIIReceive+0x80>)
    UCHAR           ucLRC = 0;  /* LRC char initialized */
 80034a4:	2400      	movs	r4, #0
 80034a6:	000f      	movs	r7, r1
    while( usLen-- )
 80034a8:	4684      	mov	ip, r0
        && ( prvucMBLRC( ( UCHAR * ) ucASCIIBuf, usRcvBufferPos ) == 0 ) )
 80034aa:	8813      	ldrh	r3, [r2, #0]
 80034ac:	b29b      	uxth	r3, r3
    while( usLen-- )
 80034ae:	3b01      	subs	r3, #1
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	4563      	cmp	r3, ip
 80034b4:	d10f      	bne.n	80034d6 <eMBASCIIReceive+0x5e>
    {
        ucLRC += *pucFrame++;   /* Add buffer byte without carry */
    }

    /* Return twos complement */
    ucLRC = ( UCHAR ) ( -( ( CHAR ) ucLRC ) );
 80034b6:	4264      	negs	r4, r4
 80034b8:	b2e4      	uxtb	r4, r4
        && ( prvucMBLRC( ( UCHAR * ) ucASCIIBuf, usRcvBufferPos ) == 0 ) )
 80034ba:	2c00      	cmp	r4, #0
 80034bc:	d110      	bne.n	80034e0 <eMBASCIIReceive+0x68>
        *pucRcvAddress = ucASCIIBuf[MB_SER_PDU_ADDR_OFF];
 80034be:	783b      	ldrb	r3, [r7, #0]
 80034c0:	7033      	strb	r3, [r6, #0]
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_LRC );
 80034c2:	8813      	ldrh	r3, [r2, #0]
 80034c4:	9a01      	ldr	r2, [sp, #4]
 80034c6:	3b02      	subs	r3, #2
 80034c8:	8013      	strh	r3, [r2, #0]
        *pucFrame = ( UCHAR * ) & ucASCIIBuf[MB_SER_PDU_PDU_OFF];
 80034ca:	4b0c      	ldr	r3, [pc, #48]	@ (80034fc <eMBASCIIReceive+0x84>)
 80034cc:	602b      	str	r3, [r5, #0]
    EXIT_CRITICAL_SECTION(  );
 80034ce:	f000 fc6b 	bl	8003da8 <ExitCriticalSection>
}
 80034d2:	0020      	movs	r0, r4
 80034d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ucLRC += *pucFrame++;   /* Add buffer byte without carry */
 80034d6:	7808      	ldrb	r0, [r1, #0]
 80034d8:	3101      	adds	r1, #1
 80034da:	1824      	adds	r4, r4, r0
 80034dc:	b2e4      	uxtb	r4, r4
 80034de:	e7e6      	b.n	80034ae <eMBASCIIReceive+0x36>
        eStatus = MB_EIO;
 80034e0:	2405      	movs	r4, #5
 80034e2:	e7f4      	b.n	80034ce <eMBASCIIReceive+0x56>
 80034e4:	2000033e 	.word	0x2000033e
 80034e8:	080052c8 	.word	0x080052c8
 80034ec:	080053c8 	.word	0x080053c8
 80034f0:	080052ed 	.word	0x080052ed
 80034f4:	200003b0 	.word	0x200003b0
 80034f8:	0000ffff 	.word	0x0000ffff
 80034fc:	200003b1 	.word	0x200003b1

08003500 <eMBASCIISend>:
{
 8003500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003502:	0007      	movs	r7, r0
 8003504:	000d      	movs	r5, r1
 8003506:	0016      	movs	r6, r2
    ENTER_CRITICAL_SECTION(  );
 8003508:	f000 fc46 	bl	8003d98 <EnterCriticalSection>
    if( eRcvState == STATE_RX_IDLE )
 800350c:	4b18      	ldr	r3, [pc, #96]	@ (8003570 <eMBASCIISend+0x70>)
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	b2dc      	uxtb	r4, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d12a      	bne.n	800356c <eMBASCIISend+0x6c>
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
 8003516:	4b17      	ldr	r3, [pc, #92]	@ (8003574 <eMBASCIISend+0x74>)
 8003518:	1e69      	subs	r1, r5, #1
 800351a:	6019      	str	r1, [r3, #0]
        usSndBufferCount = 1;
 800351c:	2301      	movs	r3, #1
 800351e:	4d16      	ldr	r5, [pc, #88]	@ (8003578 <eMBASCIISend+0x78>)
    while( usLen-- )
 8003520:	4816      	ldr	r0, [pc, #88]	@ (800357c <eMBASCIISend+0x7c>)
        usSndBufferCount = 1;
 8003522:	802b      	strh	r3, [r5, #0]
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 8003524:	700f      	strb	r7, [r1, #0]
        usSndBufferCount += usLength;
 8003526:	882b      	ldrh	r3, [r5, #0]
 8003528:	199b      	adds	r3, r3, r6
 800352a:	b29b      	uxth	r3, r3
 800352c:	802b      	strh	r3, [r5, #0]
    UCHAR           ucLRC = 0;  /* LRC char initialized */
 800352e:	0023      	movs	r3, r4
        usLRC = prvucMBLRC( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
 8003530:	882a      	ldrh	r2, [r5, #0]
 8003532:	b292      	uxth	r2, r2
    while( usLen-- )
 8003534:	3a01      	subs	r2, #1
 8003536:	b292      	uxth	r2, r2
 8003538:	4282      	cmp	r2, r0
 800353a:	d112      	bne.n	8003562 <eMBASCIISend+0x62>
        ucASCIIBuf[usSndBufferCount++] = usLRC;
 800353c:	8829      	ldrh	r1, [r5, #0]
    ucLRC = ( UCHAR ) ( -( ( CHAR ) ucLRC ) );
 800353e:	425b      	negs	r3, r3
        ucASCIIBuf[usSndBufferCount++] = usLRC;
 8003540:	1c4a      	adds	r2, r1, #1
 8003542:	b292      	uxth	r2, r2
 8003544:	802a      	strh	r2, [r5, #0]
 8003546:	4a0e      	ldr	r2, [pc, #56]	@ (8003580 <eMBASCIISend+0x80>)
    ucLRC = ( UCHAR ) ( -( ( CHAR ) ucLRC ) );
 8003548:	b2db      	uxtb	r3, r3
        ucASCIIBuf[usSndBufferCount++] = usLRC;
 800354a:	1852      	adds	r2, r2, r1
        eSndState = STATE_TX_START;
 800354c:	2101      	movs	r1, #1
        ucASCIIBuf[usSndBufferCount++] = usLRC;
 800354e:	7013      	strb	r3, [r2, #0]
        eSndState = STATE_TX_START;
 8003550:	4b0c      	ldr	r3, [pc, #48]	@ (8003584 <eMBASCIISend+0x84>)
        vMBPortSerialEnable( FALSE, TRUE );
 8003552:	2000      	movs	r0, #0
        eSndState = STATE_TX_START;
 8003554:	7019      	strb	r1, [r3, #0]
        vMBPortSerialEnable( FALSE, TRUE );
 8003556:	f000 fc61 	bl	8003e1c <vMBPortSerialEnable>
    EXIT_CRITICAL_SECTION(  );
 800355a:	f000 fc25 	bl	8003da8 <ExitCriticalSection>
}
 800355e:	0020      	movs	r0, r4
 8003560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ucLRC += *pucFrame++;   /* Add buffer byte without carry */
 8003562:	780e      	ldrb	r6, [r1, #0]
 8003564:	3101      	adds	r1, #1
 8003566:	199b      	adds	r3, r3, r6
 8003568:	b2db      	uxtb	r3, r3
 800356a:	e7e3      	b.n	8003534 <eMBASCIISend+0x34>
        eStatus = MB_EIO;
 800356c:	2405      	movs	r4, #5
 800356e:	e7f4      	b.n	800355a <eMBASCIISend+0x5a>
 8003570:	20000340 	.word	0x20000340
 8003574:	20000338 	.word	0x20000338
 8003578:	20000336 	.word	0x20000336
 800357c:	0000ffff 	.word	0x0000ffff
 8003580:	200003b0 	.word	0x200003b0
 8003584:	20000341 	.word	0x20000341

08003588 <xMBASCIIReceiveFSM>:
{
 8003588:	b573      	push	{r0, r1, r4, r5, r6, lr}
    assert( eSndState == STATE_TX_IDLE );
 800358a:	4b3f      	ldr	r3, [pc, #252]	@ (8003688 <xMBASCIIReceiveFSM+0x100>)
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	b2dc      	uxtb	r4, r3
 8003590:	2b00      	cmp	r3, #0
 8003592:	d005      	beq.n	80035a0 <xMBASCIIReceiveFSM+0x18>
 8003594:	21e3      	movs	r1, #227	@ 0xe3
 8003596:	4b3d      	ldr	r3, [pc, #244]	@ (800368c <xMBASCIIReceiveFSM+0x104>)
 8003598:	4a3d      	ldr	r2, [pc, #244]	@ (8003690 <xMBASCIIReceiveFSM+0x108>)
 800359a:	483e      	ldr	r0, [pc, #248]	@ (8003694 <xMBASCIIReceiveFSM+0x10c>)
 800359c:	f000 fe6a 	bl	8004274 <__assert_func>
    ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
 80035a0:	466b      	mov	r3, sp
 80035a2:	1dde      	adds	r6, r3, #7
 80035a4:	0030      	movs	r0, r6
 80035a6:	f000 fc6b 	bl	8003e80 <xMBPortSerialGetByte>
    switch ( eRcvState )
 80035aa:	4d3b      	ldr	r5, [pc, #236]	@ (8003698 <xMBASCIIReceiveFSM+0x110>)
 80035ac:	782a      	ldrb	r2, [r5, #0]
 80035ae:	b2d3      	uxtb	r3, r2
 80035b0:	2a01      	cmp	r2, #1
 80035b2:	d00f      	beq.n	80035d4 <xMBASCIIReceiveFSM+0x4c>
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d04c      	beq.n	8003652 <xMBASCIIReceiveFSM+0xca>
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d114      	bne.n	80035e6 <xMBASCIIReceiveFSM+0x5e>
        if( ucByte == ':' )
 80035bc:	7833      	ldrb	r3, [r6, #0]
 80035be:	2b3a      	cmp	r3, #58	@ 0x3a
 80035c0:	d111      	bne.n	80035e6 <xMBASCIIReceiveFSM+0x5e>
            vMBPortTimersEnable(  );
 80035c2:	f000 fc93 	bl	8003eec <vMBPortTimersEnable>
            usRcvBufferPos = 0;;
 80035c6:	4b35      	ldr	r3, [pc, #212]	@ (800369c <xMBASCIIReceiveFSM+0x114>)
 80035c8:	801c      	strh	r4, [r3, #0]
            eBytePos = BYTE_HIGH_NIBBLE;
 80035ca:	4b35      	ldr	r3, [pc, #212]	@ (80036a0 <xMBASCIIReceiveFSM+0x118>)
 80035cc:	701c      	strb	r4, [r3, #0]
            eRcvState = STATE_RX_RCV;
 80035ce:	2301      	movs	r3, #1
 80035d0:	702b      	strb	r3, [r5, #0]
 80035d2:	e008      	b.n	80035e6 <xMBASCIIReceiveFSM+0x5e>
        vMBPortTimersEnable(  );
 80035d4:	f000 fc8a 	bl	8003eec <vMBPortTimersEnable>
        if( ucByte == ':' )
 80035d8:	7832      	ldrb	r2, [r6, #0]
 80035da:	2a3a      	cmp	r2, #58	@ 0x3a
 80035dc:	d105      	bne.n	80035ea <xMBASCIIReceiveFSM+0x62>
            eBytePos = BYTE_HIGH_NIBBLE;
 80035de:	4b30      	ldr	r3, [pc, #192]	@ (80036a0 <xMBASCIIReceiveFSM+0x118>)
 80035e0:	701c      	strb	r4, [r3, #0]
            usRcvBufferPos = 0;
 80035e2:	4b2e      	ldr	r3, [pc, #184]	@ (800369c <xMBASCIIReceiveFSM+0x114>)
 80035e4:	801c      	strh	r4, [r3, #0]
}
 80035e6:	0020      	movs	r0, r4
 80035e8:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
            eRcvState = STATE_RX_WAIT_EOF;
 80035ea:	2302      	movs	r3, #2
        else if( ucByte == MB_ASCII_DEFAULT_CR )
 80035ec:	2a0d      	cmp	r2, #13
 80035ee:	d0ef      	beq.n	80035d0 <xMBASCIIReceiveFSM+0x48>
    if( ( ucCharacter >= '0' ) && ( ucCharacter <= '9' ) )
 80035f0:	0013      	movs	r3, r2
 80035f2:	3b30      	subs	r3, #48	@ 0x30
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b09      	cmp	r3, #9
 80035f8:	d906      	bls.n	8003608 <xMBASCIIReceiveFSM+0x80>
    else if( ( ucCharacter >= 'A' ) && ( ucCharacter <= 'F' ) )
 80035fa:	0011      	movs	r1, r2
 80035fc:	3941      	subs	r1, #65	@ 0x41
        return 0xFF;
 80035fe:	23ff      	movs	r3, #255	@ 0xff
    else if( ( ucCharacter >= 'A' ) && ( ucCharacter <= 'F' ) )
 8003600:	2905      	cmp	r1, #5
 8003602:	d801      	bhi.n	8003608 <xMBASCIIReceiveFSM+0x80>
        return ( UCHAR )( ucCharacter - 'A' + 0x0A );
 8003604:	3a37      	subs	r2, #55	@ 0x37
 8003606:	b2d3      	uxtb	r3, r2
            switch ( eBytePos )
 8003608:	4925      	ldr	r1, [pc, #148]	@ (80036a0 <xMBASCIIReceiveFSM+0x118>)
 800360a:	7808      	ldrb	r0, [r1, #0]
 800360c:	b2c2      	uxtb	r2, r0
 800360e:	2800      	cmp	r0, #0
 8003610:	d00e      	beq.n	8003630 <xMBASCIIReceiveFSM+0xa8>
 8003612:	2a01      	cmp	r2, #1
 8003614:	d1e7      	bne.n	80035e6 <xMBASCIIReceiveFSM+0x5e>
                ucASCIIBuf[usRcvBufferPos] |= ucResult;
 8003616:	4821      	ldr	r0, [pc, #132]	@ (800369c <xMBASCIIReceiveFSM+0x114>)
 8003618:	4a22      	ldr	r2, [pc, #136]	@ (80036a4 <xMBASCIIReceiveFSM+0x11c>)
 800361a:	8805      	ldrh	r5, [r0, #0]
 800361c:	1952      	adds	r2, r2, r5
 800361e:	7815      	ldrb	r5, [r2, #0]
 8003620:	432b      	orrs	r3, r5
 8003622:	7013      	strb	r3, [r2, #0]
                usRcvBufferPos++;
 8003624:	8803      	ldrh	r3, [r0, #0]
 8003626:	3301      	adds	r3, #1
 8003628:	b29b      	uxth	r3, r3
 800362a:	8003      	strh	r3, [r0, #0]
                eBytePos = BYTE_HIGH_NIBBLE;
 800362c:	2300      	movs	r3, #0
 800362e:	e00a      	b.n	8003646 <xMBASCIIReceiveFSM+0xbe>
                if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 8003630:	481a      	ldr	r0, [pc, #104]	@ (800369c <xMBASCIIReceiveFSM+0x114>)
 8003632:	8806      	ldrh	r6, [r0, #0]
 8003634:	2eff      	cmp	r6, #255	@ 0xff
 8003636:	d808      	bhi.n	800364a <xMBASCIIReceiveFSM+0xc2>
                    ucASCIIBuf[usRcvBufferPos] = ( UCHAR )( ucResult << 4 );
 8003638:	8800      	ldrh	r0, [r0, #0]
 800363a:	4a1a      	ldr	r2, [pc, #104]	@ (80036a4 <xMBASCIIReceiveFSM+0x11c>)
 800363c:	011b      	lsls	r3, r3, #4
 800363e:	b2db      	uxtb	r3, r3
 8003640:	1812      	adds	r2, r2, r0
 8003642:	7013      	strb	r3, [r2, #0]
                    eBytePos = BYTE_LOW_NIBBLE;
 8003644:	2301      	movs	r3, #1
                eBytePos = BYTE_HIGH_NIBBLE;
 8003646:	700b      	strb	r3, [r1, #0]
                break;
 8003648:	e7cd      	b.n	80035e6 <xMBASCIIReceiveFSM+0x5e>
                    eRcvState = STATE_RX_IDLE;
 800364a:	702a      	strb	r2, [r5, #0]
                    vMBPortTimersDisable(  );
 800364c:	f000 fc5c 	bl	8003f08 <vMBPortTimersDisable>
                break;
 8003650:	e7c9      	b.n	80035e6 <xMBASCIIReceiveFSM+0x5e>
        if( ucByte == ucMBLFCharacter )
 8003652:	4a15      	ldr	r2, [pc, #84]	@ (80036a8 <xMBASCIIReceiveFSM+0x120>)
 8003654:	7833      	ldrb	r3, [r6, #0]
 8003656:	7812      	ldrb	r2, [r2, #0]
 8003658:	4293      	cmp	r3, r2
 800365a:	d107      	bne.n	800366c <xMBASCIIReceiveFSM+0xe4>
            vMBPortTimersDisable(  );
 800365c:	f000 fc54 	bl	8003f08 <vMBPortTimersDisable>
            xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
 8003660:	2001      	movs	r0, #1
            eRcvState = STATE_RX_IDLE;
 8003662:	702c      	strb	r4, [r5, #0]
            xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
 8003664:	f000 fbbe 	bl	8003de4 <xMBPortEventPost>
 8003668:	0004      	movs	r4, r0
 800366a:	e7bc      	b.n	80035e6 <xMBASCIIReceiveFSM+0x5e>
        else if( ucByte == ':' )
 800366c:	2b3a      	cmp	r3, #58	@ 0x3a
 800366e:	d108      	bne.n	8003682 <xMBASCIIReceiveFSM+0xfa>
            eBytePos = BYTE_HIGH_NIBBLE;
 8003670:	4b0b      	ldr	r3, [pc, #44]	@ (80036a0 <xMBASCIIReceiveFSM+0x118>)
 8003672:	701c      	strb	r4, [r3, #0]
            usRcvBufferPos = 0;
 8003674:	4b09      	ldr	r3, [pc, #36]	@ (800369c <xMBASCIIReceiveFSM+0x114>)
 8003676:	801c      	strh	r4, [r3, #0]
            eRcvState = STATE_RX_RCV;
 8003678:	2301      	movs	r3, #1
 800367a:	702b      	strb	r3, [r5, #0]
            vMBPortTimersEnable(  );
 800367c:	f000 fc36 	bl	8003eec <vMBPortTimersEnable>
 8003680:	e7b1      	b.n	80035e6 <xMBASCIIReceiveFSM+0x5e>
            eRcvState = STATE_RX_IDLE;
 8003682:	702c      	strb	r4, [r5, #0]
 8003684:	e7af      	b.n	80035e6 <xMBASCIIReceiveFSM+0x5e>
 8003686:	46c0      	nop			@ (mov r8, r8)
 8003688:	20000341 	.word	0x20000341
 800368c:	0800530f 	.word	0x0800530f
 8003690:	080053b5 	.word	0x080053b5
 8003694:	080052ed 	.word	0x080052ed
 8003698:	20000340 	.word	0x20000340
 800369c:	2000033e 	.word	0x2000033e
 80036a0:	2000033c 	.word	0x2000033c
 80036a4:	200003b0 	.word	0x200003b0
 80036a8:	20000334 	.word	0x20000334

080036ac <xMBASCIITransmitFSM>:
{
 80036ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    assert( eRcvState == STATE_RX_IDLE );
 80036ae:	4b33      	ldr	r3, [pc, #204]	@ (800377c <xMBASCIITransmitFSM+0xd0>)
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	b2dd      	uxtb	r5, r3
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d006      	beq.n	80036c6 <xMBASCIITransmitFSM+0x1a>
 80036b8:	2150      	movs	r1, #80	@ 0x50
 80036ba:	4b31      	ldr	r3, [pc, #196]	@ (8003780 <xMBASCIITransmitFSM+0xd4>)
 80036bc:	4a31      	ldr	r2, [pc, #196]	@ (8003784 <xMBASCIITransmitFSM+0xd8>)
 80036be:	4832      	ldr	r0, [pc, #200]	@ (8003788 <xMBASCIITransmitFSM+0xdc>)
 80036c0:	31ff      	adds	r1, #255	@ 0xff
 80036c2:	f000 fdd7 	bl	8004274 <__assert_func>
    switch ( eSndState )
 80036c6:	4c31      	ldr	r4, [pc, #196]	@ (800378c <xMBASCIITransmitFSM+0xe0>)
 80036c8:	7823      	ldrb	r3, [r4, #0]
 80036ca:	b2d8      	uxtb	r0, r3
 80036cc:	2b04      	cmp	r3, #4
 80036ce:	d80c      	bhi.n	80036ea <xMBASCIITransmitFSM+0x3e>
 80036d0:	f7fc fd18 	bl	8000104 <__gnu_thumb1_case_uqi>
 80036d4:	3b0d034e 	.word	0x3b0d034e
 80036d8:	42          	.byte	0x42
 80036d9:	00          	.byte	0x00
        xMBPortSerialPutByte( ( CHAR )ucByte );
 80036da:	203a      	movs	r0, #58	@ 0x3a
 80036dc:	f000 fbc2 	bl	8003e64 <xMBPortSerialPutByte>
        eSndState = STATE_TX_DATA;
 80036e0:	2302      	movs	r3, #2
        eBytePos = BYTE_HIGH_NIBBLE;
 80036e2:	2200      	movs	r2, #0
        eSndState = STATE_TX_DATA;
 80036e4:	7023      	strb	r3, [r4, #0]
        eBytePos = BYTE_HIGH_NIBBLE;
 80036e6:	4b2a      	ldr	r3, [pc, #168]	@ (8003790 <xMBASCIITransmitFSM+0xe4>)
 80036e8:	701a      	strb	r2, [r3, #0]
}
 80036ea:	0028      	movs	r0, r5
 80036ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if( usSndBufferCount > 0 )
 80036ee:	4e29      	ldr	r6, [pc, #164]	@ (8003794 <xMBASCIITransmitFSM+0xe8>)
 80036f0:	8833      	ldrh	r3, [r6, #0]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d024      	beq.n	8003740 <xMBASCIITransmitFSM+0x94>
            switch ( eBytePos )
 80036f6:	4c26      	ldr	r4, [pc, #152]	@ (8003790 <xMBASCIITransmitFSM+0xe4>)
 80036f8:	7823      	ldrb	r3, [r4, #0]
 80036fa:	b2da      	uxtb	r2, r3
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d014      	beq.n	800372a <xMBASCIITransmitFSM+0x7e>
 8003700:	2a01      	cmp	r2, #1
 8003702:	d1f2      	bne.n	80036ea <xMBASCIITransmitFSM+0x3e>
                ucByte = prvucMBBIN2CHAR( ( UCHAR )( *pucSndBufferCur & 0x0F ) );
 8003704:	4f24      	ldr	r7, [pc, #144]	@ (8003798 <xMBASCIITransmitFSM+0xec>)
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	7818      	ldrb	r0, [r3, #0]
 800370a:	230f      	movs	r3, #15
 800370c:	4018      	ands	r0, r3
 800370e:	f7ff fe6b 	bl	80033e8 <prvucMBBIN2CHAR>
                xMBPortSerialPutByte( ( CHAR )ucByte );
 8003712:	f000 fba7 	bl	8003e64 <xMBPortSerialPutByte>
                pucSndBufferCur++;
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	3301      	adds	r3, #1
 800371a:	603b      	str	r3, [r7, #0]
                eBytePos = BYTE_HIGH_NIBBLE;
 800371c:	2300      	movs	r3, #0
 800371e:	7023      	strb	r3, [r4, #0]
                usSndBufferCount--;
 8003720:	8833      	ldrh	r3, [r6, #0]
 8003722:	3b01      	subs	r3, #1
 8003724:	b29b      	uxth	r3, r3
 8003726:	8033      	strh	r3, [r6, #0]
                break;
 8003728:	e7df      	b.n	80036ea <xMBASCIITransmitFSM+0x3e>
                ucByte = prvucMBBIN2CHAR( ( UCHAR )( *pucSndBufferCur >> 4 ) );
 800372a:	4b1b      	ldr	r3, [pc, #108]	@ (8003798 <xMBASCIITransmitFSM+0xec>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	7818      	ldrb	r0, [r3, #0]
 8003730:	0900      	lsrs	r0, r0, #4
 8003732:	f7ff fe59 	bl	80033e8 <prvucMBBIN2CHAR>
                xMBPortSerialPutByte( ( CHAR ) ucByte );
 8003736:	f000 fb95 	bl	8003e64 <xMBPortSerialPutByte>
                eBytePos = BYTE_LOW_NIBBLE;
 800373a:	2301      	movs	r3, #1
        eSndState = STATE_TX_NOTIFY;
 800373c:	7023      	strb	r3, [r4, #0]
        break;
 800373e:	e7d4      	b.n	80036ea <xMBASCIITransmitFSM+0x3e>
            xMBPortSerialPutByte( MB_ASCII_DEFAULT_CR );
 8003740:	200d      	movs	r0, #13
 8003742:	f000 fb8f 	bl	8003e64 <xMBPortSerialPutByte>
            eSndState = STATE_TX_END;
 8003746:	2303      	movs	r3, #3
 8003748:	e7f8      	b.n	800373c <xMBASCIITransmitFSM+0x90>
        xMBPortSerialPutByte( ( CHAR )ucMBLFCharacter );
 800374a:	4b14      	ldr	r3, [pc, #80]	@ (800379c <xMBASCIITransmitFSM+0xf0>)
 800374c:	7818      	ldrb	r0, [r3, #0]
 800374e:	b2c0      	uxtb	r0, r0
 8003750:	f000 fb88 	bl	8003e64 <xMBPortSerialPutByte>
        eSndState = STATE_TX_NOTIFY;
 8003754:	2304      	movs	r3, #4
 8003756:	e7f1      	b.n	800373c <xMBASCIITransmitFSM+0x90>
        eSndState = STATE_TX_IDLE;
 8003758:	2600      	movs	r6, #0
        xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
 800375a:	2003      	movs	r0, #3
        eSndState = STATE_TX_IDLE;
 800375c:	7026      	strb	r6, [r4, #0]
        xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
 800375e:	f000 fb41 	bl	8003de4 <xMBPortEventPost>
        vMBPortSerialEnable( TRUE, FALSE );
 8003762:	0031      	movs	r1, r6
        xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
 8003764:	0005      	movs	r5, r0
        vMBPortSerialEnable( TRUE, FALSE );
 8003766:	2001      	movs	r0, #1
 8003768:	f000 fb58 	bl	8003e1c <vMBPortSerialEnable>
        eSndState = STATE_TX_IDLE;
 800376c:	7026      	strb	r6, [r4, #0]
        break;
 800376e:	e7bc      	b.n	80036ea <xMBASCIITransmitFSM+0x3e>
        vMBPortSerialEnable( TRUE, FALSE );
 8003770:	2100      	movs	r1, #0
 8003772:	2001      	movs	r0, #1
 8003774:	f000 fb52 	bl	8003e1c <vMBPortSerialEnable>
        break;
 8003778:	e7b7      	b.n	80036ea <xMBASCIITransmitFSM+0x3e>
 800377a:	46c0      	nop			@ (mov r8, r8)
 800377c:	20000340 	.word	0x20000340
 8003780:	0800532a 	.word	0x0800532a
 8003784:	080053a1 	.word	0x080053a1
 8003788:	080052ed 	.word	0x080052ed
 800378c:	20000341 	.word	0x20000341
 8003790:	2000033c 	.word	0x2000033c
 8003794:	20000336 	.word	0x20000336
 8003798:	20000338 	.word	0x20000338
 800379c:	20000334 	.word	0x20000334

080037a0 <xMBASCIITimerT1SExpired>:
{
 80037a0:	b510      	push	{r4, lr}
    switch ( eRcvState )
 80037a2:	4b0c      	ldr	r3, [pc, #48]	@ (80037d4 <xMBASCIITimerT1SExpired+0x34>)
 80037a4:	781a      	ldrb	r2, [r3, #0]
 80037a6:	3a01      	subs	r2, #1
 80037a8:	2a01      	cmp	r2, #1
 80037aa:	d805      	bhi.n	80037b8 <xMBASCIITimerT1SExpired+0x18>
        eRcvState = STATE_RX_IDLE;
 80037ac:	2200      	movs	r2, #0
 80037ae:	701a      	strb	r2, [r3, #0]
    vMBPortTimersDisable(  );
 80037b0:	f000 fbaa 	bl	8003f08 <vMBPortTimersDisable>
}
 80037b4:	2000      	movs	r0, #0
 80037b6:	bd10      	pop	{r4, pc}
        assert( ( eRcvState == STATE_RX_RCV ) || ( eRcvState == STATE_RX_WAIT_EOF ) );
 80037b8:	781a      	ldrb	r2, [r3, #0]
 80037ba:	2a01      	cmp	r2, #1
 80037bc:	d0f8      	beq.n	80037b0 <xMBASCIITimerT1SExpired+0x10>
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d0f5      	beq.n	80037b0 <xMBASCIITimerT1SExpired+0x10>
 80037c4:	21a8      	movs	r1, #168	@ 0xa8
 80037c6:	4b04      	ldr	r3, [pc, #16]	@ (80037d8 <xMBASCIITimerT1SExpired+0x38>)
 80037c8:	4a04      	ldr	r2, [pc, #16]	@ (80037dc <xMBASCIITimerT1SExpired+0x3c>)
 80037ca:	4805      	ldr	r0, [pc, #20]	@ (80037e0 <xMBASCIITimerT1SExpired+0x40>)
 80037cc:	31ff      	adds	r1, #255	@ 0xff
 80037ce:	f000 fd51 	bl	8004274 <__assert_func>
 80037d2:	46c0      	nop			@ (mov r8, r8)
 80037d4:	20000340 	.word	0x20000340
 80037d8:	08005345 	.word	0x08005345
 80037dc:	08005389 	.word	0x08005389
 80037e0:	080052ed 	.word	0x080052ed

080037e4 <eMBFuncReadCoils>:
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 80037e4:	880a      	ldrh	r2, [r1, #0]
{
 80037e6:	0003      	movs	r3, r0
 80037e8:	b570      	push	{r4, r5, r6, lr}
                *usLen += ucNBytes;;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80037ea:	2003      	movs	r0, #3
{
 80037ec:	000c      	movs	r4, r1
    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 80037ee:	2a05      	cmp	r2, #5
 80037f0:	d12a      	bne.n	8003848 <eMBFuncReadCoils+0x64>
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
 80037f2:	791a      	ldrb	r2, [r3, #4]
 80037f4:	78d9      	ldrb	r1, [r3, #3]
 80037f6:	0212      	lsls	r2, r2, #8
 80037f8:	430a      	orrs	r2, r1
 80037fa:	ba52      	rev16	r2, r2
 80037fc:	b292      	uxth	r2, r2
        if( ( usCoilCount >= 1 ) &&
 80037fe:	1e51      	subs	r1, r2, #1
 8003800:	4d14      	ldr	r5, [pc, #80]	@ (8003854 <eMBFuncReadCoils+0x70>)
 8003802:	b289      	uxth	r1, r1
 8003804:	42a9      	cmp	r1, r5
 8003806:	d81f      	bhi.n	8003848 <eMBFuncReadCoils+0x64>
 8003808:	7899      	ldrb	r1, [r3, #2]
 800380a:	7858      	ldrb	r0, [r3, #1]
 800380c:	0209      	lsls	r1, r1, #8
 800380e:	4301      	orrs	r1, r0
            *usLen = MB_PDU_FUNC_OFF;
 8003810:	2000      	movs	r0, #0
 8003812:	8020      	strh	r0, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_COILS;
 8003814:	3001      	adds	r0, #1
 8003816:	7018      	strb	r0, [r3, #0]
            *usLen += 1;
 8003818:	8820      	ldrh	r0, [r4, #0]
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
 800381a:	08d5      	lsrs	r5, r2, #3
            *usLen += 1;
 800381c:	3001      	adds	r0, #1
 800381e:	8020      	strh	r0, [r4, #0]
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
 8003820:	b2ed      	uxtb	r5, r5
            if( ( usCoilCount & 0x0007 ) != 0 )
 8003822:	0750      	lsls	r0, r2, #29
 8003824:	d001      	beq.n	800382a <eMBFuncReadCoils+0x46>
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
 8003826:	3501      	adds	r5, #1
 8003828:	b2ed      	uxtb	r5, r5
            *pucFrameCur++ = ucNBytes;
 800382a:	705d      	strb	r5, [r3, #1]
            *usLen += 1;
 800382c:	8820      	ldrh	r0, [r4, #0]
 800382e:	ba49      	rev16	r1, r1
 8003830:	3001      	adds	r0, #1
        usRegAddress++;
 8003832:	3101      	adds	r1, #1
            *usLen += 1;
 8003834:	8020      	strh	r0, [r4, #0]
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
 8003836:	b289      	uxth	r1, r1
            *pucFrameCur++ = ucNBytes;
 8003838:	1c98      	adds	r0, r3, #2
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
 800383a:	2300      	movs	r3, #0
 800383c:	f7fd f8b4 	bl	80009a8 <eMBRegCoilsCB>
            if( eRegStatus != MB_ENOERR )
 8003840:	2800      	cmp	r0, #0
 8003842:	d002      	beq.n	800384a <eMBFuncReadCoils+0x66>
                eStatus = prveMBError2Exception( eRegStatus );
 8003844:	f000 f98e 	bl	8003b64 <prveMBError2Exception>
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8003848:	bd70      	pop	{r4, r5, r6, pc}
                *usLen += ucNBytes;;
 800384a:	8823      	ldrh	r3, [r4, #0]
 800384c:	18ed      	adds	r5, r5, r3
 800384e:	8025      	strh	r5, [r4, #0]
 8003850:	e7fa      	b.n	8003848 <eMBFuncReadCoils+0x64>
 8003852:	46c0      	nop			@ (mov r8, r8)
 8003854:	000007ce 	.word	0x000007ce

08003858 <eMBFuncWriteCoil>:
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8003858:	880b      	ldrh	r3, [r1, #0]
{
 800385a:	0002      	movs	r2, r0
 800385c:	b513      	push	{r0, r1, r4, lr}
                eStatus = prveMBError2Exception( eRegStatus );
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800385e:	2003      	movs	r0, #3
    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8003860:	2b05      	cmp	r3, #5
 8003862:	d11e      	bne.n	80038a2 <eMBFuncWriteCoil+0x4a>
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8003864:	7914      	ldrb	r4, [r2, #4]
 8003866:	2c00      	cmp	r4, #0
 8003868:	d11b      	bne.n	80038a2 <eMBFuncWriteCoil+0x4a>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 800386a:	78d3      	ldrb	r3, [r2, #3]
 800386c:	1e59      	subs	r1, r3, #1
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 800386e:	b2c9      	uxtb	r1, r1
 8003870:	29fd      	cmp	r1, #253	@ 0xfd
 8003872:	d916      	bls.n	80038a2 <eMBFuncWriteCoil+0x4a>
 8003874:	7850      	ldrb	r0, [r2, #1]
 8003876:	7891      	ldrb	r1, [r2, #2]
            ucBuf[1] = 0;
 8003878:	466a      	mov	r2, sp
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 800387a:	3bff      	subs	r3, #255	@ 0xff
            ucBuf[1] = 0;
 800387c:	7154      	strb	r4, [r2, #5]
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 800387e:	425a      	negs	r2, r3
 8003880:	4153      	adcs	r3, r2
 8003882:	466a      	mov	r2, sp
 8003884:	7113      	strb	r3, [r2, #4]
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );
 8003886:	2301      	movs	r3, #1
 8003888:	0209      	lsls	r1, r1, #8
 800388a:	4301      	orrs	r1, r0
            eRegStatus =
 800388c:	ba49      	rev16	r1, r1
        usRegAddress++;
 800388e:	3101      	adds	r1, #1
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );
 8003890:	001a      	movs	r2, r3
 8003892:	b289      	uxth	r1, r1
 8003894:	a801      	add	r0, sp, #4
 8003896:	f7fd f887 	bl	80009a8 <eMBRegCoilsCB>
            if( eRegStatus != MB_ENOERR )
 800389a:	2800      	cmp	r0, #0
 800389c:	d001      	beq.n	80038a2 <eMBFuncWriteCoil+0x4a>
                eStatus = prveMBError2Exception( eRegStatus );
 800389e:	f000 f961 	bl	8003b64 <prveMBError2Exception>
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 80038a2:	bd16      	pop	{r1, r2, r4, pc}

080038a4 <eMBFuncWriteMultipleCoils>:
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 80038a4:	880a      	ldrh	r2, [r1, #0]
{
 80038a6:	0003      	movs	r3, r0
 80038a8:	b570      	push	{r4, r5, r6, lr}
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80038aa:	2003      	movs	r0, #3
{
 80038ac:	000c      	movs	r4, r1
    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 80038ae:	2a05      	cmp	r2, #5
 80038b0:	d924      	bls.n	80038fc <eMBFuncWriteMultipleCoils+0x58>
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 80038b2:	791a      	ldrb	r2, [r3, #4]
 80038b4:	78d9      	ldrb	r1, [r3, #3]
 80038b6:	0212      	lsls	r2, r2, #8
 80038b8:	430a      	orrs	r2, r1
 80038ba:	ba52      	rev16	r2, r2
 80038bc:	b292      	uxth	r2, r2
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 80038be:	08d5      	lsrs	r5, r2, #3
 80038c0:	b2ed      	uxtb	r5, r5
        if( ( usCoilCnt & 0x0007 ) != 0 )
 80038c2:	0751      	lsls	r1, r2, #29
 80038c4:	d001      	beq.n	80038ca <eMBFuncWriteMultipleCoils+0x26>
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 80038c6:	3501      	adds	r5, #1
 80038c8:	b2ed      	uxtb	r5, r5
        if( ( usCoilCnt >= 1 ) &&
 80038ca:	26f6      	movs	r6, #246	@ 0xf6
 80038cc:	1e51      	subs	r1, r2, #1
 80038ce:	b289      	uxth	r1, r1
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80038d0:	2003      	movs	r0, #3
        if( ( usCoilCnt >= 1 ) &&
 80038d2:	00f6      	lsls	r6, r6, #3
 80038d4:	42b1      	cmp	r1, r6
 80038d6:	d211      	bcs.n	80038fc <eMBFuncWriteMultipleCoils+0x58>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
 80038d8:	7959      	ldrb	r1, [r3, #5]
 80038da:	42a9      	cmp	r1, r5
 80038dc:	d10e      	bne.n	80038fc <eMBFuncWriteMultipleCoils+0x58>
            eRegStatus =
 80038de:	7899      	ldrb	r1, [r3, #2]
 80038e0:	7858      	ldrb	r0, [r3, #1]
 80038e2:	0209      	lsls	r1, r1, #8
 80038e4:	4301      	orrs	r1, r0
 80038e6:	ba49      	rev16	r1, r1
        usRegAddress++;
 80038e8:	3101      	adds	r1, #1
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 80038ea:	1d98      	adds	r0, r3, #6
 80038ec:	b289      	uxth	r1, r1
 80038ee:	2301      	movs	r3, #1
 80038f0:	f7fd f85a 	bl	80009a8 <eMBRegCoilsCB>
            if( eRegStatus != MB_ENOERR )
 80038f4:	2800      	cmp	r0, #0
 80038f6:	d002      	beq.n	80038fe <eMBFuncWriteMultipleCoils+0x5a>
                eStatus = prveMBError2Exception( eRegStatus );
 80038f8:	f000 f934 	bl	8003b64 <prveMBError2Exception>
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 80038fc:	bd70      	pop	{r4, r5, r6, pc}
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 80038fe:	2305      	movs	r3, #5
 8003900:	8023      	strh	r3, [r4, #0]
 8003902:	e7fb      	b.n	80038fc <eMBFuncWriteMultipleCoils+0x58>

08003904 <eMBFuncReadDiscreteInputs>:
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8003904:	880a      	ldrh	r2, [r1, #0]
{
 8003906:	0003      	movs	r3, r0
 8003908:	b570      	push	{r4, r5, r6, lr}
                *usLen += ucNBytes;;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800390a:	2003      	movs	r0, #3
{
 800390c:	000c      	movs	r4, r1
    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 800390e:	2a05      	cmp	r2, #5
 8003910:	d129      	bne.n	8003966 <eMBFuncReadDiscreteInputs+0x62>
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
 8003912:	791a      	ldrb	r2, [r3, #4]
 8003914:	78d9      	ldrb	r1, [r3, #3]
 8003916:	0212      	lsls	r2, r2, #8
 8003918:	430a      	orrs	r2, r1
 800391a:	ba52      	rev16	r2, r2
 800391c:	b292      	uxth	r2, r2
        if( ( usDiscreteCnt >= 1 ) &&
 800391e:	1e51      	subs	r1, r2, #1
 8003920:	4d13      	ldr	r5, [pc, #76]	@ (8003970 <eMBFuncReadDiscreteInputs+0x6c>)
 8003922:	b289      	uxth	r1, r1
 8003924:	42a9      	cmp	r1, r5
 8003926:	d81e      	bhi.n	8003966 <eMBFuncReadDiscreteInputs+0x62>
 8003928:	7899      	ldrb	r1, [r3, #2]
 800392a:	7858      	ldrb	r0, [r3, #1]
 800392c:	0209      	lsls	r1, r1, #8
 800392e:	4301      	orrs	r1, r0
            *usLen = MB_PDU_FUNC_OFF;
 8003930:	2000      	movs	r0, #0
 8003932:	8020      	strh	r0, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
 8003934:	3002      	adds	r0, #2
 8003936:	7018      	strb	r0, [r3, #0]
            *usLen += 1;
 8003938:	8820      	ldrh	r0, [r4, #0]
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
 800393a:	08d5      	lsrs	r5, r2, #3
            *usLen += 1;
 800393c:	3001      	adds	r0, #1
 800393e:	8020      	strh	r0, [r4, #0]
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
 8003940:	b2ed      	uxtb	r5, r5
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
 8003942:	0750      	lsls	r0, r2, #29
 8003944:	d001      	beq.n	800394a <eMBFuncReadDiscreteInputs+0x46>
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
 8003946:	3501      	adds	r5, #1
 8003948:	b2ed      	uxtb	r5, r5
            *pucFrameCur++ = ucNBytes;
 800394a:	705d      	strb	r5, [r3, #1]
            *usLen += 1;
 800394c:	8820      	ldrh	r0, [r4, #0]
 800394e:	ba49      	rev16	r1, r1
 8003950:	3001      	adds	r0, #1
        usRegAddress++;
 8003952:	3101      	adds	r1, #1
            *usLen += 1;
 8003954:	8020      	strh	r0, [r4, #0]
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );
 8003956:	b289      	uxth	r1, r1
            *pucFrameCur++ = ucNBytes;
 8003958:	1c98      	adds	r0, r3, #2
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );
 800395a:	f7fd f827 	bl	80009ac <eMBRegDiscreteCB>
            if( eRegStatus != MB_ENOERR )
 800395e:	2800      	cmp	r0, #0
 8003960:	d002      	beq.n	8003968 <eMBFuncReadDiscreteInputs+0x64>
                eStatus = prveMBError2Exception( eRegStatus );
 8003962:	f000 f8ff 	bl	8003b64 <prveMBError2Exception>
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8003966:	bd70      	pop	{r4, r5, r6, pc}
                *usLen += ucNBytes;;
 8003968:	8823      	ldrh	r3, [r4, #0]
 800396a:	18ed      	adds	r5, r5, r3
 800396c:	8025      	strh	r5, [r4, #0]
 800396e:	e7fa      	b.n	8003966 <eMBFuncReadDiscreteInputs+0x62>
 8003970:	000007ce 	.word	0x000007ce

08003974 <eMBFuncWriteHoldingRegister>:
{
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8003974:	880a      	ldrh	r2, [r1, #0]
{
 8003976:	0003      	movs	r3, r0
 8003978:	b510      	push	{r4, lr}
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800397a:	2003      	movs	r0, #3
    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 800397c:	2a05      	cmp	r2, #5
 800397e:	d10f      	bne.n	80039a0 <eMBFuncWriteHoldingRegister+0x2c>
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8003980:	785a      	ldrb	r2, [r3, #1]
 8003982:	7899      	ldrb	r1, [r3, #2]
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 8003984:	1818      	adds	r0, r3, r0
 8003986:	2301      	movs	r3, #1
 8003988:	0209      	lsls	r1, r1, #8
 800398a:	4311      	orrs	r1, r2
 800398c:	ba49      	rev16	r1, r1
        usRegAddress++;
 800398e:	3101      	adds	r1, #1
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 8003990:	001a      	movs	r2, r3
 8003992:	b289      	uxth	r1, r1
 8003994:	f7fc ffe0 	bl	8000958 <eMBRegHoldingCB>
        if( eRegStatus != MB_ENOERR )
 8003998:	2800      	cmp	r0, #0
 800399a:	d001      	beq.n	80039a0 <eMBFuncWriteHoldingRegister+0x2c>
            eStatus = prveMBError2Exception( eRegStatus );
 800399c:	f000 f8e2 	bl	8003b64 <prveMBError2Exception>
    }
    return eStatus;
}
 80039a0:	bd10      	pop	{r4, pc}

080039a2 <eMBFuncWriteMultipleHoldingRegister>:
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 80039a2:	880a      	ldrh	r2, [r1, #0]
{
 80039a4:	0003      	movs	r3, r0
 80039a6:	b570      	push	{r4, r5, r6, lr}
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80039a8:	2003      	movs	r0, #3
{
 80039aa:	000c      	movs	r4, r1
    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 80039ac:	2a05      	cmp	r2, #5
 80039ae:	d91c      	bls.n	80039ea <eMBFuncWriteMultipleHoldingRegister+0x48>
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 80039b0:	791a      	ldrb	r2, [r3, #4]
 80039b2:	78d9      	ldrb	r1, [r3, #3]
 80039b4:	0212      	lsls	r2, r2, #8
 80039b6:	430a      	orrs	r2, r1
 80039b8:	ba52      	rev16	r2, r2
 80039ba:	b292      	uxth	r2, r2
        if( ( usRegCount >= 1 ) &&
 80039bc:	1e51      	subs	r1, r2, #1
 80039be:	2977      	cmp	r1, #119	@ 0x77
 80039c0:	d813      	bhi.n	80039ea <eMBFuncWriteMultipleHoldingRegister+0x48>
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
 80039c2:	0051      	lsls	r1, r2, #1
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 80039c4:	795d      	ldrb	r5, [r3, #5]
 80039c6:	b2c9      	uxtb	r1, r1
 80039c8:	428d      	cmp	r5, r1
 80039ca:	d10e      	bne.n	80039ea <eMBFuncWriteMultipleHoldingRegister+0x48>
            eRegStatus =
 80039cc:	7899      	ldrb	r1, [r3, #2]
 80039ce:	7858      	ldrb	r0, [r3, #1]
 80039d0:	0209      	lsls	r1, r1, #8
 80039d2:	4301      	orrs	r1, r0
 80039d4:	ba49      	rev16	r1, r1
        usRegAddress++;
 80039d6:	3101      	adds	r1, #1
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 80039d8:	1d98      	adds	r0, r3, #6
 80039da:	b289      	uxth	r1, r1
 80039dc:	2301      	movs	r3, #1
 80039de:	f7fc ffbb 	bl	8000958 <eMBRegHoldingCB>
            if( eRegStatus != MB_ENOERR )
 80039e2:	2800      	cmp	r0, #0
 80039e4:	d002      	beq.n	80039ec <eMBFuncWriteMultipleHoldingRegister+0x4a>
                eStatus = prveMBError2Exception( eRegStatus );
 80039e6:	f000 f8bd 	bl	8003b64 <prveMBError2Exception>
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 80039ea:	bd70      	pop	{r4, r5, r6, pc}
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 80039ec:	2305      	movs	r3, #5
 80039ee:	8023      	strh	r3, [r4, #0]
 80039f0:	e7fb      	b.n	80039ea <eMBFuncWriteMultipleHoldingRegister+0x48>

080039f2 <eMBFuncReadHoldingRegister>:
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 80039f2:	880b      	ldrh	r3, [r1, #0]
{
 80039f4:	b570      	push	{r4, r5, r6, lr}
 80039f6:	0006      	movs	r6, r0
 80039f8:	000c      	movs	r4, r1
                *usLen += usRegCount * 2;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80039fa:	2003      	movs	r0, #3
    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 80039fc:	2b05      	cmp	r3, #5
 80039fe:	d11c      	bne.n	8003a3a <eMBFuncReadHoldingRegister+0x48>
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 8003a00:	7932      	ldrb	r2, [r6, #4]
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 8003a02:	1e53      	subs	r3, r2, #1
 8003a04:	2b7c      	cmp	r3, #124	@ 0x7c
 8003a06:	d818      	bhi.n	8003a3a <eMBFuncReadHoldingRegister+0x48>
 8003a08:	78b1      	ldrb	r1, [r6, #2]
 8003a0a:	7873      	ldrb	r3, [r6, #1]
 8003a0c:	0209      	lsls	r1, r1, #8
 8003a0e:	4319      	orrs	r1, r3
            *usLen = MB_PDU_FUNC_OFF;
 8003a10:	2300      	movs	r3, #0
 8003a12:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 8003a14:	7030      	strb	r0, [r6, #0]
            *usLen += 1;
 8003a16:	8820      	ldrh	r0, [r4, #0]
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 8003a18:	0055      	lsls	r5, r2, #1
            *usLen += 1;
 8003a1a:	3001      	adds	r0, #1
 8003a1c:	8020      	strh	r0, [r4, #0]
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 8003a1e:	7075      	strb	r5, [r6, #1]
            *usLen += 1;
 8003a20:	8820      	ldrh	r0, [r4, #0]
 8003a22:	ba49      	rev16	r1, r1
 8003a24:	3001      	adds	r0, #1
        usRegAddress++;
 8003a26:	3101      	adds	r1, #1
            *usLen += 1;
 8003a28:	8020      	strh	r0, [r4, #0]
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 8003a2a:	b289      	uxth	r1, r1
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 8003a2c:	1cb0      	adds	r0, r6, #2
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 8003a2e:	f7fc ff93 	bl	8000958 <eMBRegHoldingCB>
            if( eRegStatus != MB_ENOERR )
 8003a32:	2800      	cmp	r0, #0
 8003a34:	d002      	beq.n	8003a3c <eMBFuncReadHoldingRegister+0x4a>
                eStatus = prveMBError2Exception( eRegStatus );
 8003a36:	f000 f895 	bl	8003b64 <prveMBError2Exception>
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8003a3a:	bd70      	pop	{r4, r5, r6, pc}
                *usLen += usRegCount * 2;
 8003a3c:	8823      	ldrh	r3, [r4, #0]
 8003a3e:	195b      	adds	r3, r3, r5
 8003a40:	8023      	strh	r3, [r4, #0]
 8003a42:	e7fa      	b.n	8003a3a <eMBFuncReadHoldingRegister+0x48>

08003a44 <eMBFuncReadWriteMultipleHoldingRegister>:
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8003a44:	880b      	ldrh	r3, [r1, #0]
{
 8003a46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a48:	0004      	movs	r4, r0
 8003a4a:	000d      	movs	r5, r1
    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8003a4c:	2b09      	cmp	r3, #9
 8003a4e:	d942      	bls.n	8003ad6 <eMBFuncReadWriteMultipleHoldingRegister+0x92>
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
        usRegReadAddress++;

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 8003a50:	7906      	ldrb	r6, [r0, #4]
 8003a52:	78c3      	ldrb	r3, [r0, #3]
 8003a54:	0236      	lsls	r6, r6, #8
 8003a56:	431e      	orrs	r6, r3
 8003a58:	ba76      	rev16	r6, r6
 8003a5a:	b2b7      	uxth	r7, r6
        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 8003a5c:	1e7b      	subs	r3, r7, #1
                eStatus = prveMBError2Exception( eRegStatus );
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003a5e:	2003      	movs	r0, #3
        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 8003a60:	2b7c      	cmp	r3, #124	@ 0x7c
 8003a62:	d839      	bhi.n	8003ad8 <eMBFuncReadWriteMultipleHoldingRegister+0x94>
 8003a64:	7a22      	ldrb	r2, [r4, #8]
 8003a66:	79e3      	ldrb	r3, [r4, #7]
 8003a68:	0212      	lsls	r2, r2, #8
 8003a6a:	431a      	orrs	r2, r3
 8003a6c:	ba52      	rev16	r2, r2
 8003a6e:	b292      	uxth	r2, r2
 8003a70:	1e53      	subs	r3, r2, #1
 8003a72:	2b78      	cmp	r3, #120	@ 0x78
 8003a74:	d830      	bhi.n	8003ad8 <eMBFuncReadWriteMultipleHoldingRegister+0x94>
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
 8003a76:	7a61      	ldrb	r1, [r4, #9]
 8003a78:	0053      	lsls	r3, r2, #1
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 8003a7a:	428b      	cmp	r3, r1
 8003a7c:	d12c      	bne.n	8003ad8 <eMBFuncReadWriteMultipleHoldingRegister+0x94>
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
 8003a7e:	0020      	movs	r0, r4
 8003a80:	78a3      	ldrb	r3, [r4, #2]
 8003a82:	7861      	ldrb	r1, [r4, #1]
 8003a84:	021b      	lsls	r3, r3, #8
 8003a86:	430b      	orrs	r3, r1
 8003a88:	79a1      	ldrb	r1, [r4, #6]
 8003a8a:	9301      	str	r3, [sp, #4]
 8003a8c:	7963      	ldrb	r3, [r4, #5]
 8003a8e:	0209      	lsls	r1, r1, #8
 8003a90:	4319      	orrs	r1, r3
 8003a92:	ba49      	rev16	r1, r1
        usRegWriteAddress++;
 8003a94:	3101      	adds	r1, #1
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
 8003a96:	2301      	movs	r3, #1
 8003a98:	b289      	uxth	r1, r1
 8003a9a:	300a      	adds	r0, #10
 8003a9c:	f7fc ff5c 	bl	8000958 <eMBRegHoldingCB>
 8003aa0:	1e03      	subs	r3, r0, #0
            if( eRegStatus == MB_ENOERR )
 8003aa2:	d11a      	bne.n	8003ada <eMBFuncReadWriteMultipleHoldingRegister+0x96>
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 8003aa4:	2217      	movs	r2, #23
                *usLen = MB_PDU_FUNC_OFF;
 8003aa6:	8028      	strh	r0, [r5, #0]
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 8003aa8:	7022      	strb	r2, [r4, #0]
                *usLen += 1;
 8003aaa:	882a      	ldrh	r2, [r5, #0]
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 8003aac:	1ca0      	adds	r0, r4, #2
                *usLen += 1;
 8003aae:	3201      	adds	r2, #1
 8003ab0:	802a      	strh	r2, [r5, #0]
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 8003ab2:	007a      	lsls	r2, r7, #1
 8003ab4:	7062      	strb	r2, [r4, #1]
                *usLen += 1;
 8003ab6:	882a      	ldrh	r2, [r5, #0]
 8003ab8:	3201      	adds	r2, #1
 8003aba:	802a      	strh	r2, [r5, #0]
                eRegStatus =
 8003abc:	9a01      	ldr	r2, [sp, #4]
 8003abe:	ba51      	rev16	r1, r2
        usRegReadAddress++;
 8003ac0:	3101      	adds	r1, #1
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
 8003ac2:	003a      	movs	r2, r7
 8003ac4:	b289      	uxth	r1, r1
 8003ac6:	f7fc ff47 	bl	8000958 <eMBRegHoldingCB>
                if( eRegStatus == MB_ENOERR )
 8003aca:	2800      	cmp	r0, #0
 8003acc:	d105      	bne.n	8003ada <eMBFuncReadWriteMultipleHoldingRegister+0x96>
                    *usLen += 2 * usRegReadCount;
 8003ace:	882b      	ldrh	r3, [r5, #0]
 8003ad0:	0076      	lsls	r6, r6, #1
 8003ad2:	199b      	adds	r3, r3, r6
 8003ad4:	802b      	strh	r3, [r5, #0]
    eMBException    eStatus = MB_EX_NONE;
 8003ad6:	2000      	movs	r0, #0
        }
    }
    return eStatus;
}
 8003ad8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
                eStatus = prveMBError2Exception( eRegStatus );
 8003ada:	f000 f843 	bl	8003b64 <prveMBError2Exception>
 8003ade:	e7fb      	b.n	8003ad8 <eMBFuncReadWriteMultipleHoldingRegister+0x94>

08003ae0 <eMBFuncReadInputRegister>:
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8003ae0:	880a      	ldrh	r2, [r1, #0]
{
 8003ae2:	0003      	movs	r3, r0
 8003ae4:	b570      	push	{r4, r5, r6, lr}
                *usLen += usRegCount * 2;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003ae6:	2003      	movs	r0, #3
{
 8003ae8:	000c      	movs	r4, r1
    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8003aea:	2a05      	cmp	r2, #5
 8003aec:	d122      	bne.n	8003b34 <eMBFuncReadInputRegister+0x54>
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 8003aee:	791d      	ldrb	r5, [r3, #4]
 8003af0:	78da      	ldrb	r2, [r3, #3]
 8003af2:	022d      	lsls	r5, r5, #8
 8003af4:	4315      	orrs	r5, r2
 8003af6:	ba6d      	rev16	r5, r5
 8003af8:	b2aa      	uxth	r2, r5
        if( ( usRegCount >= 1 )
 8003afa:	1e51      	subs	r1, r2, #1
 8003afc:	297b      	cmp	r1, #123	@ 0x7b
 8003afe:	d819      	bhi.n	8003b34 <eMBFuncReadInputRegister+0x54>
 8003b00:	7899      	ldrb	r1, [r3, #2]
 8003b02:	7858      	ldrb	r0, [r3, #1]
 8003b04:	0209      	lsls	r1, r1, #8
 8003b06:	4301      	orrs	r1, r0
            *usLen = MB_PDU_FUNC_OFF;
 8003b08:	2000      	movs	r0, #0
 8003b0a:	8020      	strh	r0, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
 8003b0c:	3004      	adds	r0, #4
 8003b0e:	7018      	strb	r0, [r3, #0]
            *usLen += 1;
 8003b10:	8820      	ldrh	r0, [r4, #0]
 8003b12:	ba49      	rev16	r1, r1
 8003b14:	3001      	adds	r0, #1
 8003b16:	8020      	strh	r0, [r4, #0]
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 8003b18:	0050      	lsls	r0, r2, #1
 8003b1a:	7058      	strb	r0, [r3, #1]
            *usLen += 1;
 8003b1c:	8820      	ldrh	r0, [r4, #0]
        usRegAddress++;
 8003b1e:	3101      	adds	r1, #1
            *usLen += 1;
 8003b20:	3001      	adds	r0, #1
 8003b22:	8020      	strh	r0, [r4, #0]
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );
 8003b24:	b289      	uxth	r1, r1
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 8003b26:	1c98      	adds	r0, r3, #2
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );
 8003b28:	f7fc ff14 	bl	8000954 <eMBRegInputCB>
            if( eRegStatus != MB_ENOERR )
 8003b2c:	2800      	cmp	r0, #0
 8003b2e:	d002      	beq.n	8003b36 <eMBFuncReadInputRegister+0x56>
                eStatus = prveMBError2Exception( eRegStatus );
 8003b30:	f000 f818 	bl	8003b64 <prveMBError2Exception>
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8003b34:	bd70      	pop	{r4, r5, r6, pc}
                *usLen += usRegCount * 2;
 8003b36:	8823      	ldrh	r3, [r4, #0]
 8003b38:	006d      	lsls	r5, r5, #1
 8003b3a:	195b      	adds	r3, r3, r5
 8003b3c:	8023      	strh	r3, [r4, #0]
 8003b3e:	e7f9      	b.n	8003b34 <eMBFuncReadInputRegister+0x54>

08003b40 <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 8003b40:	b570      	push	{r4, r5, r6, lr}
 8003b42:	000d      	movs	r5, r1
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 8003b44:	4b05      	ldr	r3, [pc, #20]	@ (8003b5c <eMBFuncReportSlaveID+0x1c>)
 8003b46:	4906      	ldr	r1, [pc, #24]	@ (8003b60 <eMBFuncReportSlaveID+0x20>)
 8003b48:	881c      	ldrh	r4, [r3, #0]
 8003b4a:	3001      	adds	r0, #1
 8003b4c:	0022      	movs	r2, r4
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 8003b4e:	3401      	adds	r4, #1
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 8003b50:	f000 fd51 	bl	80045f6 <memcpy>
    return MB_EX_NONE;
}
 8003b54:	2000      	movs	r0, #0
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 8003b56:	802c      	strh	r4, [r5, #0]
}
 8003b58:	bd70      	pop	{r4, r5, r6, pc}
 8003b5a:	46c0      	nop			@ (mov r8, r8)
 8003b5c:	20000342 	.word	0x20000342
 8003b60:	20000344 	.word	0x20000344

08003b64 <prveMBError2Exception>:
    return ( UCHAR ) usWordBuf;
}

eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
 8003b64:	0003      	movs	r3, r0
 8003b66:	2004      	movs	r0, #4
 8003b68:	2b07      	cmp	r3, #7
 8003b6a:	d801      	bhi.n	8003b70 <prveMBError2Exception+0xc>
 8003b6c:	4a01      	ldr	r2, [pc, #4]	@ (8003b74 <prveMBError2Exception+0x10>)
 8003b6e:	5cd0      	ldrb	r0, [r2, r3]
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
            break;
    }

    return eStatus;
}
 8003b70:	4770      	bx	lr
 8003b72:	46c0      	nop			@ (mov r8, r8)
 8003b74:	080053d8 	.word	0x080053d8

08003b78 <eMBInit>:
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 8003b78:	b570      	push	{r4, r5, r6, lr}
 8003b7a:	0004      	movs	r4, r0
 8003b7c:	0008      	movs	r0, r1
    eMBErrorCode    eStatus = MB_ENOERR;

    /* check preconditions */
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
        ( ucSlaveAddress < MB_ADDRESS_MIN ) || ( ucSlaveAddress > MB_ADDRESS_MAX ) )
 8003b7e:	1e45      	subs	r5, r0, #1
{
 8003b80:	0011      	movs	r1, r2
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
 8003b82:	b2ed      	uxtb	r5, r5
{
 8003b84:	001a      	movs	r2, r3
 8003b86:	ab04      	add	r3, sp, #16
 8003b88:	781b      	ldrb	r3, [r3, #0]
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
 8003b8a:	2df6      	cmp	r5, #246	@ 0xf6
 8003b8c:	d805      	bhi.n	8003b9a <eMBInit+0x22>
    {
        eStatus = MB_EINVAL;
    }
    else
    {
        ucMBAddress = ucSlaveAddress;
 8003b8e:	4d24      	ldr	r5, [pc, #144]	@ (8003c20 <eMBInit+0xa8>)
 8003b90:	7028      	strb	r0, [r5, #0]

        switch ( eMode )
 8003b92:	2c00      	cmp	r4, #0
 8003b94:	d004      	beq.n	8003ba0 <eMBInit+0x28>
 8003b96:	2c01      	cmp	r4, #1
 8003b98:	d025      	beq.n	8003be6 <eMBInit+0x6e>
{
 8003b9a:	2402      	movs	r4, #2
                eMBState = STATE_DISABLED;
            }
        }
    }
    return eStatus;
}
 8003b9c:	0020      	movs	r0, r4
 8003b9e:	bd70      	pop	{r4, r5, r6, pc}
            pvMBFrameStartCur = eMBRTUStart;
 8003ba0:	4d20      	ldr	r5, [pc, #128]	@ (8003c24 <eMBInit+0xac>)
 8003ba2:	4e21      	ldr	r6, [pc, #132]	@ (8003c28 <eMBInit+0xb0>)
 8003ba4:	602e      	str	r6, [r5, #0]
            pvMBFrameStopCur = eMBRTUStop;
 8003ba6:	4d21      	ldr	r5, [pc, #132]	@ (8003c2c <eMBInit+0xb4>)
 8003ba8:	4e21      	ldr	r6, [pc, #132]	@ (8003c30 <eMBInit+0xb8>)
 8003baa:	602e      	str	r6, [r5, #0]
            peMBFrameSendCur = eMBRTUSend;
 8003bac:	4d21      	ldr	r5, [pc, #132]	@ (8003c34 <eMBInit+0xbc>)
 8003bae:	4e22      	ldr	r6, [pc, #136]	@ (8003c38 <eMBInit+0xc0>)
 8003bb0:	602e      	str	r6, [r5, #0]
            peMBFrameReceiveCur = eMBRTUReceive;
 8003bb2:	4d22      	ldr	r5, [pc, #136]	@ (8003c3c <eMBInit+0xc4>)
 8003bb4:	4e22      	ldr	r6, [pc, #136]	@ (8003c40 <eMBInit+0xc8>)
 8003bb6:	602e      	str	r6, [r5, #0]
            pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
 8003bb8:	4d22      	ldr	r5, [pc, #136]	@ (8003c44 <eMBInit+0xcc>)
 8003bba:	602c      	str	r4, [r5, #0]
            pxMBFrameCBByteReceived = xMBRTUReceiveFSM;
 8003bbc:	4c22      	ldr	r4, [pc, #136]	@ (8003c48 <eMBInit+0xd0>)
 8003bbe:	4d23      	ldr	r5, [pc, #140]	@ (8003c4c <eMBInit+0xd4>)
 8003bc0:	6025      	str	r5, [r4, #0]
            pxMBFrameCBTransmitterEmpty = xMBRTUTransmitFSM;
 8003bc2:	4c23      	ldr	r4, [pc, #140]	@ (8003c50 <eMBInit+0xd8>)
 8003bc4:	4d23      	ldr	r5, [pc, #140]	@ (8003c54 <eMBInit+0xdc>)
 8003bc6:	6025      	str	r5, [r4, #0]
            pxMBPortCBTimerExpired = xMBRTUTimerT35Expired;
 8003bc8:	4c23      	ldr	r4, [pc, #140]	@ (8003c58 <eMBInit+0xe0>)
 8003bca:	4d24      	ldr	r5, [pc, #144]	@ (8003c5c <eMBInit+0xe4>)
 8003bcc:	6025      	str	r5, [r4, #0]
            eStatus = eMBRTUInit( ucMBAddress, ucPort, ulBaudRate, eParity );
 8003bce:	f000 f9d9 	bl	8003f84 <eMBRTUInit>
            eStatus = eMBASCIIInit( ucMBAddress, ucPort, ulBaudRate, eParity );
 8003bd2:	1e04      	subs	r4, r0, #0
        if( eStatus == MB_ENOERR )
 8003bd4:	d1e2      	bne.n	8003b9c <eMBInit+0x24>
            if( !xMBPortEventInit(  ) )
 8003bd6:	f000 f8fd 	bl	8003dd4 <xMBPortEventInit>
 8003bda:	2800      	cmp	r0, #0
 8003bdc:	d01e      	beq.n	8003c1c <eMBInit+0xa4>
                eMBState = STATE_DISABLED;
 8003bde:	2201      	movs	r2, #1
 8003be0:	4b1f      	ldr	r3, [pc, #124]	@ (8003c60 <eMBInit+0xe8>)
 8003be2:	701a      	strb	r2, [r3, #0]
 8003be4:	e7da      	b.n	8003b9c <eMBInit+0x24>
            pvMBFrameStartCur = eMBASCIIStart;
 8003be6:	4c0f      	ldr	r4, [pc, #60]	@ (8003c24 <eMBInit+0xac>)
 8003be8:	4d1e      	ldr	r5, [pc, #120]	@ (8003c64 <eMBInit+0xec>)
 8003bea:	6025      	str	r5, [r4, #0]
            pvMBFrameStopCur = eMBASCIIStop;
 8003bec:	4c0f      	ldr	r4, [pc, #60]	@ (8003c2c <eMBInit+0xb4>)
 8003bee:	4d1e      	ldr	r5, [pc, #120]	@ (8003c68 <eMBInit+0xf0>)
 8003bf0:	6025      	str	r5, [r4, #0]
            peMBFrameSendCur = eMBASCIISend;
 8003bf2:	4c10      	ldr	r4, [pc, #64]	@ (8003c34 <eMBInit+0xbc>)
 8003bf4:	4d1d      	ldr	r5, [pc, #116]	@ (8003c6c <eMBInit+0xf4>)
 8003bf6:	6025      	str	r5, [r4, #0]
            peMBFrameReceiveCur = eMBASCIIReceive;
 8003bf8:	4c10      	ldr	r4, [pc, #64]	@ (8003c3c <eMBInit+0xc4>)
 8003bfa:	4d1d      	ldr	r5, [pc, #116]	@ (8003c70 <eMBInit+0xf8>)
 8003bfc:	6025      	str	r5, [r4, #0]
            pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
 8003bfe:	2500      	movs	r5, #0
 8003c00:	4c10      	ldr	r4, [pc, #64]	@ (8003c44 <eMBInit+0xcc>)
 8003c02:	6025      	str	r5, [r4, #0]
            pxMBFrameCBByteReceived = xMBASCIIReceiveFSM;
 8003c04:	4c10      	ldr	r4, [pc, #64]	@ (8003c48 <eMBInit+0xd0>)
 8003c06:	4d1b      	ldr	r5, [pc, #108]	@ (8003c74 <eMBInit+0xfc>)
 8003c08:	6025      	str	r5, [r4, #0]
            pxMBFrameCBTransmitterEmpty = xMBASCIITransmitFSM;
 8003c0a:	4c11      	ldr	r4, [pc, #68]	@ (8003c50 <eMBInit+0xd8>)
 8003c0c:	4d1a      	ldr	r5, [pc, #104]	@ (8003c78 <eMBInit+0x100>)
 8003c0e:	6025      	str	r5, [r4, #0]
            pxMBPortCBTimerExpired = xMBASCIITimerT1SExpired;
 8003c10:	4c11      	ldr	r4, [pc, #68]	@ (8003c58 <eMBInit+0xe0>)
 8003c12:	4d1a      	ldr	r5, [pc, #104]	@ (8003c7c <eMBInit+0x104>)
 8003c14:	6025      	str	r5, [r4, #0]
            eStatus = eMBASCIIInit( ucMBAddress, ucPort, ulBaudRate, eParity );
 8003c16:	f7ff fbef 	bl	80033f8 <eMBASCIIInit>
 8003c1a:	e7da      	b.n	8003bd2 <eMBInit+0x5a>
                eStatus = MB_EPORTERR;
 8003c1c:	2403      	movs	r4, #3
 8003c1e:	e7bd      	b.n	8003b9c <eMBInit+0x24>
 8003c20:	20000390 	.word	0x20000390
 8003c24:	20000388 	.word	0x20000388
 8003c28:	08003fd1 	.word	0x08003fd1
 8003c2c:	20000384 	.word	0x20000384
 8003c30:	08003ff1 	.word	0x08003ff1
 8003c34:	2000038c 	.word	0x2000038c
 8003c38:	08004075 	.word	0x08004075
 8003c3c:	20000380 	.word	0x20000380
 8003c40:	08004009 	.word	0x08004009
 8003c44:	2000037c 	.word	0x2000037c
 8003c48:	20000378 	.word	0x20000378
 8003c4c:	080040f5 	.word	0x080040f5
 8003c50:	20000374 	.word	0x20000374
 8003c54:	08004185 	.word	0x08004185
 8003c58:	20000370 	.word	0x20000370
 8003c5c:	08004211 	.word	0x08004211
 8003c60:	2000008c 	.word	0x2000008c
 8003c64:	0800343d 	.word	0x0800343d
 8003c68:	08003461 	.word	0x08003461
 8003c6c:	08003501 	.word	0x08003501
 8003c70:	08003479 	.word	0x08003479
 8003c74:	08003589 	.word	0x08003589
 8003c78:	080036ad 	.word	0x080036ad
 8003c7c:	080037a1 	.word	0x080037a1

08003c80 <eMBEnable>:
    return eStatus;
}

eMBErrorCode
eMBEnable( void )
{
 8003c80:	b510      	push	{r4, lr}
    eMBErrorCode    eStatus = MB_ENOERR;

    if( eMBState == STATE_DISABLED )
 8003c82:	4c05      	ldr	r4, [pc, #20]	@ (8003c98 <eMBEnable+0x18>)
        pvMBFrameStartCur(  );
        eMBState = STATE_ENABLED;
    }
    else
    {
        eStatus = MB_EILLSTATE;
 8003c84:	2006      	movs	r0, #6
    if( eMBState == STATE_DISABLED )
 8003c86:	7823      	ldrb	r3, [r4, #0]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d104      	bne.n	8003c96 <eMBEnable+0x16>
        pvMBFrameStartCur(  );
 8003c8c:	4b03      	ldr	r3, [pc, #12]	@ (8003c9c <eMBEnable+0x1c>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 8003c92:	2000      	movs	r0, #0
 8003c94:	7020      	strb	r0, [r4, #0]
    }
    return eStatus;
}
 8003c96:	bd10      	pop	{r4, pc}
 8003c98:	2000008c 	.word	0x2000008c
 8003c9c:	20000388 	.word	0x20000388

08003ca0 <eMBPoll>:
    return eStatus;
}

eMBErrorCode
eMBPoll( void )
{
 8003ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 8003ca2:	4b33      	ldr	r3, [pc, #204]	@ (8003d70 <eMBPoll+0xd0>)
{
 8003ca4:	b085      	sub	sp, #20
    if( eMBState != STATE_ENABLED )
 8003ca6:	781c      	ldrb	r4, [r3, #0]
 8003ca8:	2c00      	cmp	r4, #0
 8003caa:	d15e      	bne.n	8003d6a <eMBPoll+0xca>
        return MB_EILLSTATE;
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
 8003cac:	ab02      	add	r3, sp, #8
 8003cae:	1ddd      	adds	r5, r3, #7
 8003cb0:	0028      	movs	r0, r5
 8003cb2:	f000 f8a3 	bl	8003dfc <xMBPortEventGet>
 8003cb6:	0003      	movs	r3, r0
 8003cb8:	2801      	cmp	r0, #1
 8003cba:	d104      	bne.n	8003cc6 <eMBPoll+0x26>
    {
        switch ( eEvent )
 8003cbc:	782a      	ldrb	r2, [r5, #0]
 8003cbe:	2a01      	cmp	r2, #1
 8003cc0:	d004      	beq.n	8003ccc <eMBPoll+0x2c>
 8003cc2:	2a02      	cmp	r2, #2
 8003cc4:	d016      	beq.n	8003cf4 <eMBPoll+0x54>
        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
}
 8003cc6:	0020      	movs	r0, r4
 8003cc8:	b005      	add	sp, #20
 8003cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 8003ccc:	4d29      	ldr	r5, [pc, #164]	@ (8003d74 <eMBPoll+0xd4>)
 8003cce:	4b2a      	ldr	r3, [pc, #168]	@ (8003d78 <eMBPoll+0xd8>)
 8003cd0:	0028      	movs	r0, r5
 8003cd2:	4a2a      	ldr	r2, [pc, #168]	@ (8003d7c <eMBPoll+0xdc>)
 8003cd4:	492a      	ldr	r1, [pc, #168]	@ (8003d80 <eMBPoll+0xe0>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4798      	blx	r3
            if( eStatus == MB_ENOERR )
 8003cda:	2800      	cmp	r0, #0
 8003cdc:	d1f3      	bne.n	8003cc6 <eMBPoll+0x26>
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 8003cde:	4a29      	ldr	r2, [pc, #164]	@ (8003d84 <eMBPoll+0xe4>)
 8003ce0:	782b      	ldrb	r3, [r5, #0]
 8003ce2:	7812      	ldrb	r2, [r2, #0]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d001      	beq.n	8003cec <eMBPoll+0x4c>
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d1ec      	bne.n	8003cc6 <eMBPoll+0x26>
                    ( void )xMBPortEventPost( EV_EXECUTE );
 8003cec:	2002      	movs	r0, #2
 8003cee:	f000 f879 	bl	8003de4 <xMBPortEventPost>
 8003cf2:	e7e8      	b.n	8003cc6 <eMBPoll+0x26>
            eException = MB_EX_ILLEGAL_FUNCTION;
 8003cf4:	4e24      	ldr	r6, [pc, #144]	@ (8003d88 <eMBPoll+0xe8>)
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 8003cf6:	4d22      	ldr	r5, [pc, #136]	@ (8003d80 <eMBPoll+0xe0>)
            eException = MB_EX_ILLEGAL_FUNCTION;
 8003cf8:	7033      	strb	r3, [r6, #0]
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 8003cfa:	0023      	movs	r3, r4
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 8003cfc:	6828      	ldr	r0, [r5, #0]
 8003cfe:	4923      	ldr	r1, [pc, #140]	@ (8003d8c <eMBPoll+0xec>)
 8003d00:	7802      	ldrb	r2, [r0, #0]
 8003d02:	9101      	str	r1, [sp, #4]
 8003d04:	700a      	strb	r2, [r1, #0]
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 8003d06:	4922      	ldr	r1, [pc, #136]	@ (8003d90 <eMBPoll+0xf0>)
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 8003d08:	9200      	str	r2, [sp, #0]
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 8003d0a:	00df      	lsls	r7, r3, #3
 8003d0c:	187a      	adds	r2, r7, r1
 8003d0e:	5dcf      	ldrb	r7, [r1, r7]
 8003d10:	4694      	mov	ip, r2
 8003d12:	2f00      	cmp	r7, #0
 8003d14:	d007      	beq.n	8003d26 <eMBPoll+0x86>
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 8003d16:	9a00      	ldr	r2, [sp, #0]
 8003d18:	42ba      	cmp	r2, r7
 8003d1a:	d122      	bne.n	8003d62 <eMBPoll+0xc2>
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 8003d1c:	4663      	mov	r3, ip
 8003d1e:	4917      	ldr	r1, [pc, #92]	@ (8003d7c <eMBPoll+0xdc>)
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	4798      	blx	r3
 8003d24:	7030      	strb	r0, [r6, #0]
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 8003d26:	4b13      	ldr	r3, [pc, #76]	@ (8003d74 <eMBPoll+0xd4>)
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d0cb      	beq.n	8003cc6 <eMBPoll+0x26>
                if( eException != MB_EX_NONE )
 8003d2e:	7831      	ldrb	r1, [r6, #0]
 8003d30:	2900      	cmp	r1, #0
 8003d32:	d00d      	beq.n	8003d50 <eMBPoll+0xb0>
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 8003d34:	2201      	movs	r2, #1
 8003d36:	9b01      	ldr	r3, [sp, #4]
 8003d38:	6828      	ldr	r0, [r5, #0]
 8003d3a:	781e      	ldrb	r6, [r3, #0]
 8003d3c:	4b0f      	ldr	r3, [pc, #60]	@ (8003d7c <eMBPoll+0xdc>)
 8003d3e:	801a      	strh	r2, [r3, #0]
 8003d40:	3a81      	subs	r2, #129	@ 0x81
 8003d42:	4332      	orrs	r2, r6
 8003d44:	7002      	strb	r2, [r0, #0]
                    ucMBFrame[usLength++] = eException;
 8003d46:	881a      	ldrh	r2, [r3, #0]
 8003d48:	6828      	ldr	r0, [r5, #0]
 8003d4a:	1c56      	adds	r6, r2, #1
 8003d4c:	801e      	strh	r6, [r3, #0]
 8003d4e:	5481      	strb	r1, [r0, r2]
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
 8003d50:	4b0a      	ldr	r3, [pc, #40]	@ (8003d7c <eMBPoll+0xdc>)
 8003d52:	6829      	ldr	r1, [r5, #0]
 8003d54:	881a      	ldrh	r2, [r3, #0]
 8003d56:	4b0b      	ldr	r3, [pc, #44]	@ (8003d84 <eMBPoll+0xe4>)
 8003d58:	7818      	ldrb	r0, [r3, #0]
 8003d5a:	4b0e      	ldr	r3, [pc, #56]	@ (8003d94 <eMBPoll+0xf4>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4798      	blx	r3
 8003d60:	e7b1      	b.n	8003cc6 <eMBPoll+0x26>
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 8003d62:	3301      	adds	r3, #1
 8003d64:	2b10      	cmp	r3, #16
 8003d66:	d1d0      	bne.n	8003d0a <eMBPoll+0x6a>
 8003d68:	e7dd      	b.n	8003d26 <eMBPoll+0x86>
        return MB_EILLSTATE;
 8003d6a:	2406      	movs	r4, #6
 8003d6c:	e7ab      	b.n	8003cc6 <eMBPoll+0x26>
 8003d6e:	46c0      	nop			@ (mov r8, r8)
 8003d70:	2000008c 	.word	0x2000008c
 8003d74:	2000036c 	.word	0x2000036c
 8003d78:	20000380 	.word	0x20000380
 8003d7c:	20000366 	.word	0x20000366
 8003d80:	20000368 	.word	0x20000368
 8003d84:	20000390 	.word	0x20000390
 8003d88:	20000364 	.word	0x20000364
 8003d8c:	20000365 	.word	0x20000365
 8003d90:	2000000c 	.word	0x2000000c
 8003d94:	2000038c 	.word	0x2000038c

08003d98 <EnterCriticalSection>:
  __ASM volatile ("cpsid i" : : : "memory");
 8003d98:	b672      	cpsid	i

/*----------------------------------------------------------------------------*/
void EnterCriticalSection()
{
  __disable_irq();
  lockCounter++;
 8003d9a:	4a02      	ldr	r2, [pc, #8]	@ (8003da4 <EnterCriticalSection+0xc>)
 8003d9c:	6813      	ldr	r3, [r2, #0]
 8003d9e:	3301      	adds	r3, #1
 8003da0:	6013      	str	r3, [r2, #0]
}
 8003da2:	4770      	bx	lr
 8003da4:	2000039c 	.word	0x2000039c

08003da8 <ExitCriticalSection>:


/*----------------------------------------------------------------------------*/
void ExitCriticalSection()
{
  lockCounter--;
 8003da8:	4a03      	ldr	r2, [pc, #12]	@ (8003db8 <ExitCriticalSection+0x10>)
 8003daa:	6813      	ldr	r3, [r2, #0]
 8003dac:	3b01      	subs	r3, #1
 8003dae:	6013      	str	r3, [r2, #0]

  if (lockCounter == 0)
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d100      	bne.n	8003db6 <ExitCriticalSection+0xe>
  __ASM volatile ("cpsie i" : : : "memory");
 8003db4:	b662      	cpsie	i
  {
    __enable_irq();
  }
}
 8003db6:	4770      	bx	lr
 8003db8:	2000039c 	.word	0x2000039c

08003dbc <MT_PORT_SetTimerModule>:


/*----------------------------------------------------------------------------*/\
void MT_PORT_SetTimerModule(TIM_HandleTypeDef* timer)
{
  modbusTimer = timer;
 8003dbc:	4b01      	ldr	r3, [pc, #4]	@ (8003dc4 <MT_PORT_SetTimerModule+0x8>)
 8003dbe:	6018      	str	r0, [r3, #0]
}
 8003dc0:	4770      	bx	lr
 8003dc2:	46c0      	nop			@ (mov r8, r8)
 8003dc4:	20000394 	.word	0x20000394

08003dc8 <MT_PORT_SetUartModule>:


/*----------------------------------------------------------------------------*/\
void MT_PORT_SetUartModule(UART_HandleTypeDef* uart)
{
  modbusUart = uart;
 8003dc8:	4b01      	ldr	r3, [pc, #4]	@ (8003dd0 <MT_PORT_SetUartModule+0x8>)
 8003dca:	6018      	str	r0, [r3, #0]
}
 8003dcc:	4770      	bx	lr
 8003dce:	46c0      	nop			@ (mov r8, r8)
 8003dd0:	20000398 	.word	0x20000398

08003dd4 <xMBPortEventInit>:
/* ----------------------- Start implementation -----------------------------*/

/*----------------------------------------------------------------------------*/
BOOL xMBPortEventInit(void)
{
  xEventInQueue = FALSE;
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	4b02      	ldr	r3, [pc, #8]	@ (8003de0 <xMBPortEventInit+0xc>)
  return TRUE;
}
 8003dd8:	2001      	movs	r0, #1
  xEventInQueue = FALSE;
 8003dda:	701a      	strb	r2, [r3, #0]
}
 8003ddc:	4770      	bx	lr
 8003dde:	46c0      	nop			@ (mov r8, r8)
 8003de0:	200003a0 	.word	0x200003a0

08003de4 <xMBPortEventPost>:


/*----------------------------------------------------------------------------*/
BOOL xMBPortEventPost(eMBEventType eEvent)
{
  xEventInQueue = TRUE;
 8003de4:	2201      	movs	r2, #1
 8003de6:	4b03      	ldr	r3, [pc, #12]	@ (8003df4 <xMBPortEventPost+0x10>)
 8003de8:	701a      	strb	r2, [r3, #0]
  eQueuedEvent = eEvent;
 8003dea:	4b03      	ldr	r3, [pc, #12]	@ (8003df8 <xMBPortEventPost+0x14>)
 8003dec:	7018      	strb	r0, [r3, #0]
  return TRUE;
}
 8003dee:	0010      	movs	r0, r2
 8003df0:	4770      	bx	lr
 8003df2:	46c0      	nop			@ (mov r8, r8)
 8003df4:	200003a0 	.word	0x200003a0
 8003df8:	200003a1 	.word	0x200003a1

08003dfc <xMBPortEventGet>:
/*----------------------------------------------------------------------------*/
BOOL xMBPortEventGet(eMBEventType * eEvent)
{
  BOOL xEventHappened = FALSE;

  if( xEventInQueue )
 8003dfc:	4a05      	ldr	r2, [pc, #20]	@ (8003e14 <xMBPortEventGet+0x18>)
{
 8003dfe:	0003      	movs	r3, r0
  if( xEventInQueue )
 8003e00:	7810      	ldrb	r0, [r2, #0]
 8003e02:	2800      	cmp	r0, #0
 8003e04:	d005      	beq.n	8003e12 <xMBPortEventGet+0x16>
  {
    *eEvent = eQueuedEvent;
 8003e06:	4904      	ldr	r1, [pc, #16]	@ (8003e18 <xMBPortEventGet+0x1c>)
    xEventInQueue = FALSE;
    xEventHappened = TRUE;
 8003e08:	2001      	movs	r0, #1
    *eEvent = eQueuedEvent;
 8003e0a:	7809      	ldrb	r1, [r1, #0]
 8003e0c:	7019      	strb	r1, [r3, #0]
    xEventInQueue = FALSE;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	7013      	strb	r3, [r2, #0]
  }

  return xEventHappened;
}
 8003e12:	4770      	bx	lr
 8003e14:	200003a0 	.word	0x200003a0
 8003e18:	200003a1 	.word	0x200003a1

08003e1c <vMBPortSerialEnable>:

/* ----------------------- Start implementation -----------------------------*/

/*----------------------------------------------------------------------------*/
void vMBPortSerialEnable(BOOL xRxEnable, BOOL xTxEnable)
{
 8003e1c:	b570      	push	{r4, r5, r6, lr}
  if (xRxEnable == FALSE)
  {
    HAL_UART_AbortReceive_IT(modbusUart);
 8003e1e:	4d0d      	ldr	r5, [pc, #52]	@ (8003e54 <vMBPortSerialEnable+0x38>)
{
 8003e20:	0003      	movs	r3, r0
 8003e22:	000c      	movs	r4, r1
    HAL_UART_AbortReceive_IT(modbusUart);
 8003e24:	6828      	ldr	r0, [r5, #0]
  if (xRxEnable == FALSE)
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d107      	bne.n	8003e3a <vMBPortSerialEnable+0x1e>
    HAL_UART_AbortReceive_IT(modbusUart);
 8003e2a:	f7fe fa35 	bl	8002298 <HAL_UART_AbortReceive_IT>
    HAL_UART_Receive_IT(modbusUart, &rxByte, 1);
  }

  if (xTxEnable == FALSE)
  {
    HAL_UART_AbortTransmit_IT(modbusUart);
 8003e2e:	6828      	ldr	r0, [r5, #0]
  if (xTxEnable == FALSE)
 8003e30:	2c00      	cmp	r4, #0
 8003e32:	d107      	bne.n	8003e44 <vMBPortSerialEnable+0x28>
    HAL_UART_AbortTransmit_IT(modbusUart);
 8003e34:	f7fe f9c0 	bl	80021b8 <HAL_UART_AbortTransmit_IT>
    if (modbusUart->gState == HAL_UART_STATE_READY)
    {
      prvvUARTTxReadyISR();
    }
  }
}
 8003e38:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UART_Receive_IT(modbusUart, &rxByte, 1);
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	4906      	ldr	r1, [pc, #24]	@ (8003e58 <vMBPortSerialEnable+0x3c>)
 8003e3e:	f7ff f9cd 	bl	80031dc <HAL_UART_Receive_IT>
 8003e42:	e7f4      	b.n	8003e2e <vMBPortSerialEnable+0x12>
    if (modbusUart->gState == HAL_UART_STATE_READY)
 8003e44:	3088      	adds	r0, #136	@ 0x88
 8003e46:	6803      	ldr	r3, [r0, #0]
 8003e48:	2b20      	cmp	r3, #32
 8003e4a:	d1f5      	bne.n	8003e38 <vMBPortSerialEnable+0x1c>


/* --------------------------------------------------------------------------*/
static void prvvUARTTxReadyISR(void)
{
  pxMBFrameCBTransmitterEmpty();
 8003e4c:	4b03      	ldr	r3, [pc, #12]	@ (8003e5c <vMBPortSerialEnable+0x40>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4798      	blx	r3
}
 8003e52:	e7f1      	b.n	8003e38 <vMBPortSerialEnable+0x1c>
 8003e54:	20000398 	.word	0x20000398
 8003e58:	200003a2 	.word	0x200003a2
 8003e5c:	20000374 	.word	0x20000374

08003e60 <xMBPortSerialInit>:
}
 8003e60:	2001      	movs	r0, #1
 8003e62:	4770      	bx	lr

08003e64 <xMBPortSerialPutByte>:
{
 8003e64:	b510      	push	{r4, lr}
  txByte = ucByte;
 8003e66:	4904      	ldr	r1, [pc, #16]	@ (8003e78 <xMBPortSerialPutByte+0x14>)
  HAL_UART_Transmit_IT(modbusUart, &txByte, 1);
 8003e68:	4b04      	ldr	r3, [pc, #16]	@ (8003e7c <xMBPortSerialPutByte+0x18>)
  txByte = ucByte;
 8003e6a:	7008      	strb	r0, [r1, #0]
  HAL_UART_Transmit_IT(modbusUart, &txByte, 1);
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	6818      	ldr	r0, [r3, #0]
 8003e70:	f7fe f938 	bl	80020e4 <HAL_UART_Transmit_IT>
}
 8003e74:	2001      	movs	r0, #1
 8003e76:	bd10      	pop	{r4, pc}
 8003e78:	200003a3 	.word	0x200003a3
 8003e7c:	20000398 	.word	0x20000398

08003e80 <xMBPortSerialGetByte>:
{
 8003e80:	b510      	push	{r4, lr}
  *pucByte = rxByte;
 8003e82:	4905      	ldr	r1, [pc, #20]	@ (8003e98 <xMBPortSerialGetByte+0x18>)
  HAL_UART_Receive_IT(modbusUart, &rxByte, 1);
 8003e84:	2201      	movs	r2, #1
  *pucByte = rxByte;
 8003e86:	780b      	ldrb	r3, [r1, #0]
 8003e88:	7003      	strb	r3, [r0, #0]
  HAL_UART_Receive_IT(modbusUart, &rxByte, 1);
 8003e8a:	4b04      	ldr	r3, [pc, #16]	@ (8003e9c <xMBPortSerialGetByte+0x1c>)
 8003e8c:	6818      	ldr	r0, [r3, #0]
 8003e8e:	f7ff f9a5 	bl	80031dc <HAL_UART_Receive_IT>
}
 8003e92:	2001      	movs	r0, #1
 8003e94:	bd10      	pop	{r4, pc}
 8003e96:	46c0      	nop			@ (mov r8, r8)
 8003e98:	200003a2 	.word	0x200003a2
 8003e9c:	20000398 	.word	0x20000398

08003ea0 <HAL_UART_TxCpltCallback>:


/* --------------------------------------------------------------------------*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
  if (huart->Instance == modbusUart->Instance)
 8003ea0:	4b05      	ldr	r3, [pc, #20]	@ (8003eb8 <HAL_UART_TxCpltCallback+0x18>)
 8003ea2:	6802      	ldr	r2, [r0, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
{
 8003ea6:	b510      	push	{r4, lr}
  if (huart->Instance == modbusUart->Instance)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d102      	bne.n	8003eb4 <HAL_UART_TxCpltCallback+0x14>
  pxMBFrameCBTransmitterEmpty();
 8003eae:	4b03      	ldr	r3, [pc, #12]	@ (8003ebc <HAL_UART_TxCpltCallback+0x1c>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4798      	blx	r3
  {
    prvvUARTTxReadyISR();
  }
}
 8003eb4:	bd10      	pop	{r4, pc}
 8003eb6:	46c0      	nop			@ (mov r8, r8)
 8003eb8:	20000398 	.word	0x20000398
 8003ebc:	20000374 	.word	0x20000374

08003ec0 <HAL_UART_RxCpltCallback>:


/* --------------------------------------------------------------------------*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  if (huart->Instance == modbusUart->Instance)
 8003ec0:	4b05      	ldr	r3, [pc, #20]	@ (8003ed8 <HAL_UART_RxCpltCallback+0x18>)
 8003ec2:	6802      	ldr	r2, [r0, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
{
 8003ec6:	b510      	push	{r4, lr}
  if (huart->Instance == modbusUart->Instance)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d102      	bne.n	8003ed4 <HAL_UART_RxCpltCallback+0x14>
  pxMBFrameCBByteReceived();
 8003ece:	4b03      	ldr	r3, [pc, #12]	@ (8003edc <HAL_UART_RxCpltCallback+0x1c>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4798      	blx	r3
  {
    prvvUARTRxISR();
  }
}
 8003ed4:	bd10      	pop	{r4, pc}
 8003ed6:	46c0      	nop			@ (mov r8, r8)
 8003ed8:	20000398 	.word	0x20000398
 8003edc:	20000378 	.word	0x20000378

08003ee0 <xMBPortTimersInit>:
/* ----------------------- Start implementation -----------------------------*/

/*----------------------------------------------------------------------------*/
BOOL xMBPortTimersInit(USHORT usTim1Timerout50us)
{
  timerPeriod = usTim1Timerout50us;
 8003ee0:	4b01      	ldr	r3, [pc, #4]	@ (8003ee8 <xMBPortTimersInit+0x8>)
 8003ee2:	8018      	strh	r0, [r3, #0]
  return TRUE;
}
 8003ee4:	2001      	movs	r0, #1
 8003ee6:	4770      	bx	lr
 8003ee8:	200003a6 	.word	0x200003a6

08003eec <vMBPortTimersEnable>:


/* --------------------------------------------------------------------------*/
inline void vMBPortTimersEnable()
{
  timerCounter = 0;
 8003eec:	2200      	movs	r2, #0
{
 8003eee:	b510      	push	{r4, lr}
  timerCounter = 0;
 8003ef0:	4b03      	ldr	r3, [pc, #12]	@ (8003f00 <vMBPortTimersEnable+0x14>)
 8003ef2:	801a      	strh	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(modbusTimer);
 8003ef4:	4b03      	ldr	r3, [pc, #12]	@ (8003f04 <vMBPortTimersEnable+0x18>)
 8003ef6:	6818      	ldr	r0, [r3, #0]
 8003ef8:	f7fd fdac 	bl	8001a54 <HAL_TIM_Base_Start_IT>
}
 8003efc:	bd10      	pop	{r4, pc}
 8003efe:	46c0      	nop			@ (mov r8, r8)
 8003f00:	200003a4 	.word	0x200003a4
 8003f04:	20000394 	.word	0x20000394

08003f08 <vMBPortTimersDisable>:



/* --------------------------------------------------------------------------*/
inline void vMBPortTimersDisable()
{
 8003f08:	b510      	push	{r4, lr}
  HAL_TIM_Base_Stop_IT(modbusTimer);
 8003f0a:	4b02      	ldr	r3, [pc, #8]	@ (8003f14 <vMBPortTimersDisable+0xc>)
 8003f0c:	6818      	ldr	r0, [r3, #0]
 8003f0e:	f7fd fdd1 	bl	8001ab4 <HAL_TIM_Base_Stop_IT>
}
 8003f12:	bd10      	pop	{r4, pc}
 8003f14:	20000394 	.word	0x20000394

08003f18 <HAL_TIM_PeriodElapsedCallback>:


/* --------------------------------------------------------------------------*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  if (htim->Instance == modbusTimer->Instance)
 8003f18:	4b09      	ldr	r3, [pc, #36]	@ (8003f40 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8003f1a:	6802      	ldr	r2, [r0, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
{
 8003f1e:	b510      	push	{r4, lr}
  if (htim->Instance == modbusTimer->Instance)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d10b      	bne.n	8003f3e <HAL_TIM_PeriodElapsedCallback+0x26>
  {
    timerCounter++;
 8003f26:	4a07      	ldr	r2, [pc, #28]	@ (8003f44 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8003f28:	8813      	ldrh	r3, [r2, #0]
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	8013      	strh	r3, [r2, #0]

    if (timerCounter == timerPeriod)
 8003f30:	4a05      	ldr	r2, [pc, #20]	@ (8003f48 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8003f32:	8812      	ldrh	r2, [r2, #0]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d102      	bne.n	8003f3e <HAL_TIM_PeriodElapsedCallback+0x26>
    (void)pxMBPortCBTimerExpired();
 8003f38:	4b04      	ldr	r3, [pc, #16]	@ (8003f4c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4798      	blx	r3
    {
      prvvTIMERExpiredISR();
    }
  }
}
 8003f3e:	bd10      	pop	{r4, pc}
 8003f40:	20000394 	.word	0x20000394
 8003f44:	200003a4 	.word	0x200003a4
 8003f48:	200003a6 	.word	0x200003a6
 8003f4c:	20000370 	.word	0x20000370

08003f50 <usMBCRC16>:

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
    UCHAR           ucCRCHi = 0xFF;
    UCHAR           ucCRCLo = 0xFF;
 8003f50:	22ff      	movs	r2, #255	@ 0xff
    UCHAR           ucCRCHi = 0xFF;
 8003f52:	0013      	movs	r3, r2
{
 8003f54:	b5f0      	push	{r4, r5, r6, r7, lr}
    int             iIndex;

    while( usLen-- )
 8003f56:	4d08      	ldr	r5, [pc, #32]	@ (8003f78 <usMBCRC16+0x28>)
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 8003f58:	4e08      	ldr	r6, [pc, #32]	@ (8003f7c <usMBCRC16+0x2c>)
        ucCRCHi = aucCRCLo[iIndex];
 8003f5a:	4f09      	ldr	r7, [pc, #36]	@ (8003f80 <usMBCRC16+0x30>)
    while( usLen-- )
 8003f5c:	3901      	subs	r1, #1
 8003f5e:	b289      	uxth	r1, r1
 8003f60:	42a9      	cmp	r1, r5
 8003f62:	d102      	bne.n	8003f6a <usMBCRC16+0x1a>
    }
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
 8003f64:	0218      	lsls	r0, r3, #8
 8003f66:	4310      	orrs	r0, r2
}
 8003f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
        iIndex = ucCRCLo ^ *( pucFrame++ );
 8003f6a:	7804      	ldrb	r4, [r0, #0]
 8003f6c:	3001      	adds	r0, #1
 8003f6e:	4054      	eors	r4, r2
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 8003f70:	5d32      	ldrb	r2, [r6, r4]
 8003f72:	405a      	eors	r2, r3
        ucCRCHi = aucCRCLo[iIndex];
 8003f74:	5d3b      	ldrb	r3, [r7, r4]
 8003f76:	e7f1      	b.n	8003f5c <usMBCRC16+0xc>
 8003f78:	0000ffff 	.word	0x0000ffff
 8003f7c:	080054e0 	.word	0x080054e0
 8003f80:	080053e0 	.word	0x080053e0

08003f84 <eMBRTUInit>:
static volatile USHORT usRcvBufferPos;

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBRTUInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 8003f84:	b570      	push	{r4, r5, r6, lr}
 8003f86:	000d      	movs	r5, r1
 8003f88:	0014      	movs	r4, r2
 8003f8a:	001e      	movs	r6, r3
    eMBErrorCode    eStatus = MB_ENOERR;
    ULONG           usTimerT35_50us;

    ( void )ucSlaveAddress;
    ENTER_CRITICAL_SECTION(  );
 8003f8c:	f7ff ff04 	bl	8003d98 <EnterCriticalSection>

    /* Modbus RTU uses 8 Databits. */
    if( xMBPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
 8003f90:	0033      	movs	r3, r6
 8003f92:	2208      	movs	r2, #8
 8003f94:	0021      	movs	r1, r4
 8003f96:	0028      	movs	r0, r5
 8003f98:	f7ff ff62 	bl	8003e60 <xMBPortSerialInit>
 8003f9c:	2801      	cmp	r0, #1
 8003f9e:	d004      	beq.n	8003faa <eMBRTUInit+0x26>
    {
        eStatus = MB_EPORTERR;
 8003fa0:	2403      	movs	r4, #3
        if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
        {
            eStatus = MB_EPORTERR;
        }
    }
    EXIT_CRITICAL_SECTION(  );
 8003fa2:	f7ff ff01 	bl	8003da8 <ExitCriticalSection>

    return eStatus;
}
 8003fa6:	0020      	movs	r0, r4
 8003fa8:	bd70      	pop	{r4, r5, r6, pc}
        if( ulBaudRate > 19200 )
 8003faa:	2396      	movs	r3, #150	@ 0x96
            usTimerT35_50us = 35;       /* 1800us. */
 8003fac:	2023      	movs	r0, #35	@ 0x23
        if( ulBaudRate > 19200 )
 8003fae:	01db      	lsls	r3, r3, #7
 8003fb0:	429c      	cmp	r4, r3
 8003fb2:	d803      	bhi.n	8003fbc <eMBRTUInit+0x38>
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
 8003fb4:	4805      	ldr	r0, [pc, #20]	@ (8003fcc <eMBRTUInit+0x48>)
 8003fb6:	0061      	lsls	r1, r4, #1
 8003fb8:	f7fc f8b8 	bl	800012c <__udivsi3>
        if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
 8003fbc:	b280      	uxth	r0, r0
 8003fbe:	f7ff ff8f 	bl	8003ee0 <xMBPortTimersInit>
 8003fc2:	2801      	cmp	r0, #1
 8003fc4:	d1ec      	bne.n	8003fa0 <eMBRTUInit+0x1c>
    eMBErrorCode    eStatus = MB_ENOERR;
 8003fc6:	2400      	movs	r4, #0
 8003fc8:	e7eb      	b.n	8003fa2 <eMBRTUInit+0x1e>
 8003fca:	46c0      	nop			@ (mov r8, r8)
 8003fcc:	00177fa0 	.word	0x00177fa0

08003fd0 <eMBRTUStart>:

void
eMBRTUStart( void )
{
 8003fd0:	b510      	push	{r4, lr}
    ENTER_CRITICAL_SECTION(  );
 8003fd2:	f7ff fee1 	bl	8003d98 <EnterCriticalSection>
    /* Initially the receiver is in the state STATE_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_RX_INIT;
 8003fd6:	2100      	movs	r1, #0
 8003fd8:	4b04      	ldr	r3, [pc, #16]	@ (8003fec <eMBRTUStart+0x1c>)
    vMBPortSerialEnable( TRUE, FALSE );
 8003fda:	2001      	movs	r0, #1
    eRcvState = STATE_RX_INIT;
 8003fdc:	7019      	strb	r1, [r3, #0]
    vMBPortSerialEnable( TRUE, FALSE );
 8003fde:	f7ff ff1d 	bl	8003e1c <vMBPortSerialEnable>
    vMBPortTimersEnable(  );
 8003fe2:	f7ff ff83 	bl	8003eec <vMBPortTimersEnable>

    EXIT_CRITICAL_SECTION(  );
 8003fe6:	f7ff fedf 	bl	8003da8 <ExitCriticalSection>
}
 8003fea:	bd10      	pop	{r4, pc}
 8003fec:	200004b0 	.word	0x200004b0

08003ff0 <eMBRTUStop>:

void
eMBRTUStop( void )
{
 8003ff0:	b510      	push	{r4, lr}
    ENTER_CRITICAL_SECTION(  );
 8003ff2:	f7ff fed1 	bl	8003d98 <EnterCriticalSection>
    vMBPortSerialEnable( FALSE, FALSE );
 8003ff6:	2100      	movs	r1, #0
 8003ff8:	0008      	movs	r0, r1
 8003ffa:	f7ff ff0f 	bl	8003e1c <vMBPortSerialEnable>
    vMBPortTimersDisable(  );
 8003ffe:	f7ff ff83 	bl	8003f08 <vMBPortTimersDisable>
    EXIT_CRITICAL_SECTION(  );
 8004002:	f7ff fed1 	bl	8003da8 <ExitCriticalSection>
}
 8004006:	bd10      	pop	{r4, pc}

08004008 <eMBRTUReceive>:

eMBErrorCode
eMBRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
 8004008:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800400a:	0006      	movs	r6, r0
 800400c:	000d      	movs	r5, r1
 800400e:	9201      	str	r2, [sp, #4]
    BOOL            xFrameReceived = FALSE;
    eMBErrorCode    eStatus = MB_ENOERR;

    ENTER_CRITICAL_SECTION(  );
 8004010:	f7ff fec2 	bl	8003d98 <EnterCriticalSection>
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );
 8004014:	4c11      	ldr	r4, [pc, #68]	@ (800405c <eMBRTUReceive+0x54>)
 8004016:	8823      	ldrh	r3, [r4, #0]
 8004018:	2bff      	cmp	r3, #255	@ 0xff
 800401a:	d905      	bls.n	8004028 <eMBRTUReceive+0x20>
 800401c:	219c      	movs	r1, #156	@ 0x9c
 800401e:	4b10      	ldr	r3, [pc, #64]	@ (8004060 <eMBRTUReceive+0x58>)
 8004020:	4a10      	ldr	r2, [pc, #64]	@ (8004064 <eMBRTUReceive+0x5c>)
 8004022:	4811      	ldr	r0, [pc, #68]	@ (8004068 <eMBRTUReceive+0x60>)
 8004024:	f000 f926 	bl	8004274 <__assert_func>

    /* Length and CRC check */
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
 8004028:	8823      	ldrh	r3, [r4, #0]
 800402a:	2b03      	cmp	r3, #3
 800402c:	d804      	bhi.n	8004038 <eMBRTUReceive+0x30>
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
        xFrameReceived = TRUE;
    }
    else
    {
        eStatus = MB_EIO;
 800402e:	2405      	movs	r4, #5
    }

    EXIT_CRITICAL_SECTION(  );
 8004030:	f7ff feba 	bl	8003da8 <ExitCriticalSection>
    return eStatus;
}
 8004034:	0020      	movs	r0, r4
 8004036:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        && ( usMBCRC16( ( UCHAR * ) ucRTUBuf, usRcvBufferPos ) == 0 ) )
 8004038:	8821      	ldrh	r1, [r4, #0]
 800403a:	4f0c      	ldr	r7, [pc, #48]	@ (800406c <eMBRTUReceive+0x64>)
 800403c:	b289      	uxth	r1, r1
 800403e:	0038      	movs	r0, r7
 8004040:	f7ff ff86 	bl	8003f50 <usMBCRC16>
 8004044:	2800      	cmp	r0, #0
 8004046:	d1f2      	bne.n	800402e <eMBRTUReceive+0x26>
        *pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
 8004048:	783b      	ldrb	r3, [r7, #0]
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 800404a:	9a01      	ldr	r2, [sp, #4]
        *pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
 800404c:	7033      	strb	r3, [r6, #0]
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 800404e:	8823      	ldrh	r3, [r4, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 8004050:	0004      	movs	r4, r0
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 8004052:	3b03      	subs	r3, #3
 8004054:	8013      	strh	r3, [r2, #0]
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
 8004056:	4b06      	ldr	r3, [pc, #24]	@ (8004070 <eMBRTUReceive+0x68>)
 8004058:	602b      	str	r3, [r5, #0]
        xFrameReceived = TRUE;
 800405a:	e7e9      	b.n	8004030 <eMBRTUReceive+0x28>
 800405c:	200003a8 	.word	0x200003a8
 8004060:	080052c8 	.word	0x080052c8
 8004064:	0800569a 	.word	0x0800569a
 8004068:	080055e0 	.word	0x080055e0
 800406c:	200003b0 	.word	0x200003b0
 8004070:	200003b1 	.word	0x200003b1

08004074 <eMBRTUSend>:

eMBErrorCode
eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
 8004074:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004076:	0006      	movs	r6, r0
 8004078:	000c      	movs	r4, r1
 800407a:	9201      	str	r2, [sp, #4]
    eMBErrorCode    eStatus = MB_ENOERR;
    USHORT          usCRC16;

    ENTER_CRITICAL_SECTION(  );
 800407c:	f7ff fe8c 	bl	8003d98 <EnterCriticalSection>

    /* Check if the receiver is still in idle state. If not we where to
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_RX_IDLE )
 8004080:	4b17      	ldr	r3, [pc, #92]	@ (80040e0 <eMBRTUSend+0x6c>)
        eSndState = STATE_TX_XMIT;
        vMBPortSerialEnable( FALSE, TRUE );
    }
    else
    {
        eStatus = MB_EIO;
 8004082:	2705      	movs	r7, #5
    if( eRcvState == STATE_RX_IDLE )
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	b2dd      	uxtb	r5, r3
 8004088:	2b01      	cmp	r3, #1
 800408a:	d125      	bne.n	80040d8 <eMBRTUSend+0x64>
        usSndBufferCount = 1;
 800408c:	4f15      	ldr	r7, [pc, #84]	@ (80040e4 <eMBRTUSend+0x70>)
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
 800408e:	4b16      	ldr	r3, [pc, #88]	@ (80040e8 <eMBRTUSend+0x74>)
 8004090:	1e60      	subs	r0, r4, #1
        usSndBufferCount = 1;
 8004092:	803d      	strh	r5, [r7, #0]
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 8004094:	7006      	strb	r6, [r0, #0]
        usSndBufferCount += usLength;
 8004096:	9a01      	ldr	r2, [sp, #4]
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
 8004098:	6018      	str	r0, [r3, #0]
        usSndBufferCount += usLength;
 800409a:	883b      	ldrh	r3, [r7, #0]
 800409c:	189b      	adds	r3, r3, r2
 800409e:	b29b      	uxth	r3, r3
 80040a0:	803b      	strh	r3, [r7, #0]
        usCRC16 = usMBCRC16( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
 80040a2:	8839      	ldrh	r1, [r7, #0]
 80040a4:	b289      	uxth	r1, r1
 80040a6:	f7ff ff53 	bl	8003f50 <usMBCRC16>
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 80040aa:	883b      	ldrh	r3, [r7, #0]
 80040ac:	4a0f      	ldr	r2, [pc, #60]	@ (80040ec <eMBRTUSend+0x78>)
 80040ae:	b299      	uxth	r1, r3
 80040b0:	3301      	adds	r3, #1
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	803b      	strh	r3, [r7, #0]
 80040b6:	b2c3      	uxtb	r3, r0
 80040b8:	5453      	strb	r3, [r2, r1]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 80040ba:	883b      	ldrh	r3, [r7, #0]
 80040bc:	0a00      	lsrs	r0, r0, #8
 80040be:	b299      	uxth	r1, r3
 80040c0:	3301      	adds	r3, #1
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	803b      	strh	r3, [r7, #0]
 80040c6:	b2c0      	uxtb	r0, r0
        eSndState = STATE_TX_XMIT;
 80040c8:	4b09      	ldr	r3, [pc, #36]	@ (80040f0 <eMBRTUSend+0x7c>)
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 80040ca:	5450      	strb	r0, [r2, r1]
        vMBPortSerialEnable( FALSE, TRUE );
 80040cc:	0029      	movs	r1, r5
 80040ce:	2000      	movs	r0, #0
        eSndState = STATE_TX_XMIT;
 80040d0:	701d      	strb	r5, [r3, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 80040d2:	2700      	movs	r7, #0
        vMBPortSerialEnable( FALSE, TRUE );
 80040d4:	f7ff fea2 	bl	8003e1c <vMBPortSerialEnable>
    }
    EXIT_CRITICAL_SECTION(  );
 80040d8:	f7ff fe66 	bl	8003da8 <ExitCriticalSection>
    return eStatus;
}
 80040dc:	0038      	movs	r0, r7
 80040de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80040e0:	200004b0 	.word	0x200004b0
 80040e4:	200003aa 	.word	0x200003aa
 80040e8:	200003ac 	.word	0x200003ac
 80040ec:	200003b0 	.word	0x200003b0
 80040f0:	200004b1 	.word	0x200004b1

080040f4 <xMBRTUReceiveFSM>:

BOOL
xMBRTUReceiveFSM( void )
{
 80040f4:	b507      	push	{r0, r1, r2, lr}
    BOOL            xTaskNeedSwitch = FALSE;
    UCHAR           ucByte;

    assert( eSndState == STATE_TX_IDLE );
 80040f6:	4b1c      	ldr	r3, [pc, #112]	@ (8004168 <xMBRTUReceiveFSM+0x74>)
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d005      	beq.n	800410a <xMBRTUReceiveFSM+0x16>
 80040fe:	21e6      	movs	r1, #230	@ 0xe6
 8004100:	4b1a      	ldr	r3, [pc, #104]	@ (800416c <xMBRTUReceiveFSM+0x78>)
 8004102:	4a1b      	ldr	r2, [pc, #108]	@ (8004170 <xMBRTUReceiveFSM+0x7c>)
 8004104:	481b      	ldr	r0, [pc, #108]	@ (8004174 <xMBRTUReceiveFSM+0x80>)
 8004106:	f000 f8b5 	bl	8004274 <__assert_func>

    /* Always read the character. */
    ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
 800410a:	466b      	mov	r3, sp
 800410c:	1dd8      	adds	r0, r3, #7
 800410e:	f7ff feb7 	bl	8003e80 <xMBPortSerialGetByte>

    switch ( eRcvState )
 8004112:	4919      	ldr	r1, [pc, #100]	@ (8004178 <xMBRTUReceiveFSM+0x84>)
 8004114:	780b      	ldrb	r3, [r1, #0]
 8004116:	b2d8      	uxtb	r0, r3
 8004118:	2b03      	cmp	r3, #3
 800411a:	d821      	bhi.n	8004160 <xMBRTUReceiveFSM+0x6c>
 800411c:	f7fb fff2 	bl	8000104 <__gnu_thumb1_case_uqi>
 8004120:	1e11021e 	.word	0x1e11021e
        /* In the idle state we wait for a new character. If a character
         * is received the t1.5 and t3.5 timers are started and the
         * receiver is in the state STATE_RX_RECEIVCE.
         */
    case STATE_RX_IDLE:
        usRcvBufferPos = 0;
 8004124:	2300      	movs	r3, #0
 8004126:	4a15      	ldr	r2, [pc, #84]	@ (800417c <xMBRTUReceiveFSM+0x88>)
 8004128:	8013      	strh	r3, [r2, #0]
        ucRTUBuf[usRcvBufferPos++] = ucByte;
 800412a:	8813      	ldrh	r3, [r2, #0]
 800412c:	b298      	uxth	r0, r3
 800412e:	3301      	adds	r3, #1
 8004130:	b29b      	uxth	r3, r3
 8004132:	8013      	strh	r3, [r2, #0]
 8004134:	466b      	mov	r3, sp
 8004136:	79da      	ldrb	r2, [r3, #7]
 8004138:	4b11      	ldr	r3, [pc, #68]	@ (8004180 <xMBRTUReceiveFSM+0x8c>)
 800413a:	541a      	strb	r2, [r3, r0]
        eRcvState = STATE_RX_RCV;
 800413c:	2302      	movs	r3, #2
        {
            ucRTUBuf[usRcvBufferPos++] = ucByte;
        }
        else
        {
            eRcvState = STATE_RX_ERROR;
 800413e:	700b      	strb	r3, [r1, #0]
 8004140:	e00c      	b.n	800415c <xMBRTUReceiveFSM+0x68>
        if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 8004142:	4a0e      	ldr	r2, [pc, #56]	@ (800417c <xMBRTUReceiveFSM+0x88>)
 8004144:	8813      	ldrh	r3, [r2, #0]
 8004146:	2bff      	cmp	r3, #255	@ 0xff
 8004148:	d80c      	bhi.n	8004164 <xMBRTUReceiveFSM+0x70>
            ucRTUBuf[usRcvBufferPos++] = ucByte;
 800414a:	8813      	ldrh	r3, [r2, #0]
 800414c:	b299      	uxth	r1, r3
 800414e:	3301      	adds	r3, #1
 8004150:	b29b      	uxth	r3, r3
 8004152:	8013      	strh	r3, [r2, #0]
 8004154:	466b      	mov	r3, sp
 8004156:	79da      	ldrb	r2, [r3, #7]
 8004158:	4b09      	ldr	r3, [pc, #36]	@ (8004180 <xMBRTUReceiveFSM+0x8c>)
 800415a:	545a      	strb	r2, [r3, r1]
        }
        vMBPortTimersEnable(  );
 800415c:	f7ff fec6 	bl	8003eec <vMBPortTimersEnable>
        break;
    }
    return xTaskNeedSwitch;
}
 8004160:	2000      	movs	r0, #0
 8004162:	bd0e      	pop	{r1, r2, r3, pc}
            eRcvState = STATE_RX_ERROR;
 8004164:	2303      	movs	r3, #3
 8004166:	e7ea      	b.n	800413e <xMBRTUReceiveFSM+0x4a>
 8004168:	200004b1 	.word	0x200004b1
 800416c:	0800530f 	.word	0x0800530f
 8004170:	08005689 	.word	0x08005689
 8004174:	080055e0 	.word	0x080055e0
 8004178:	200004b0 	.word	0x200004b0
 800417c:	200003a8 	.word	0x200003a8
 8004180:	200003b0 	.word	0x200003b0

08004184 <xMBRTUTransmitFSM>:

BOOL
xMBRTUTransmitFSM( void )
{
 8004184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    BOOL            xNeedPoll = FALSE;

    assert( eRcvState == STATE_RX_IDLE );
 8004186:	4b1b      	ldr	r3, [pc, #108]	@ (80041f4 <xMBRTUTransmitFSM+0x70>)
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	b2d8      	uxtb	r0, r3
 800418c:	2b01      	cmp	r3, #1
 800418e:	d006      	beq.n	800419e <xMBRTUTransmitFSM+0x1a>
 8004190:	2122      	movs	r1, #34	@ 0x22
 8004192:	4b19      	ldr	r3, [pc, #100]	@ (80041f8 <xMBRTUTransmitFSM+0x74>)
 8004194:	4a19      	ldr	r2, [pc, #100]	@ (80041fc <xMBRTUTransmitFSM+0x78>)
 8004196:	481a      	ldr	r0, [pc, #104]	@ (8004200 <xMBRTUTransmitFSM+0x7c>)
 8004198:	31ff      	adds	r1, #255	@ 0xff
 800419a:	f000 f86b 	bl	8004274 <__assert_func>

    switch ( eSndState )
 800419e:	4e19      	ldr	r6, [pc, #100]	@ (8004204 <xMBRTUTransmitFSM+0x80>)
 80041a0:	7833      	ldrb	r3, [r6, #0]
 80041a2:	b2dd      	uxtb	r5, r3
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d004      	beq.n	80041b2 <xMBRTUTransmitFSM+0x2e>
 80041a8:	2d01      	cmp	r5, #1
 80041aa:	d006      	beq.n	80041ba <xMBRTUTransmitFSM+0x36>
    BOOL            xNeedPoll = FALSE;
 80041ac:	2400      	movs	r4, #0
        }
        break;
    }

    return xNeedPoll;
}
 80041ae:	0020      	movs	r0, r4
 80041b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        vMBPortSerialEnable( TRUE, FALSE );
 80041b2:	0029      	movs	r1, r5
 80041b4:	f7ff fe32 	bl	8003e1c <vMBPortSerialEnable>
        break;
 80041b8:	e7f8      	b.n	80041ac <xMBRTUTransmitFSM+0x28>
        if( usSndBufferCount != 0 )
 80041ba:	4c13      	ldr	r4, [pc, #76]	@ (8004208 <xMBRTUTransmitFSM+0x84>)
 80041bc:	8823      	ldrh	r3, [r4, #0]
 80041be:	b29f      	uxth	r7, r3
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00d      	beq.n	80041e0 <xMBRTUTransmitFSM+0x5c>
            xMBPortSerialPutByte( ( CHAR )*pucSndBufferCur );
 80041c4:	4d11      	ldr	r5, [pc, #68]	@ (800420c <xMBRTUTransmitFSM+0x88>)
 80041c6:	682b      	ldr	r3, [r5, #0]
 80041c8:	7818      	ldrb	r0, [r3, #0]
 80041ca:	b2c0      	uxtb	r0, r0
 80041cc:	f7ff fe4a 	bl	8003e64 <xMBPortSerialPutByte>
            pucSndBufferCur++;  /* next byte in sendbuffer. */
 80041d0:	682b      	ldr	r3, [r5, #0]
 80041d2:	3301      	adds	r3, #1
 80041d4:	602b      	str	r3, [r5, #0]
            usSndBufferCount--;
 80041d6:	8823      	ldrh	r3, [r4, #0]
 80041d8:	3b01      	subs	r3, #1
 80041da:	b29b      	uxth	r3, r3
 80041dc:	8023      	strh	r3, [r4, #0]
 80041de:	e7e5      	b.n	80041ac <xMBRTUTransmitFSM+0x28>
            xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
 80041e0:	2003      	movs	r0, #3
 80041e2:	f7ff fdff 	bl	8003de4 <xMBPortEventPost>
            vMBPortSerialEnable( TRUE, FALSE );
 80041e6:	0039      	movs	r1, r7
            xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
 80041e8:	0004      	movs	r4, r0
            vMBPortSerialEnable( TRUE, FALSE );
 80041ea:	0028      	movs	r0, r5
 80041ec:	f7ff fe16 	bl	8003e1c <vMBPortSerialEnable>
            eSndState = STATE_TX_IDLE;
 80041f0:	7037      	strb	r7, [r6, #0]
 80041f2:	e7dc      	b.n	80041ae <xMBRTUTransmitFSM+0x2a>
 80041f4:	200004b0 	.word	0x200004b0
 80041f8:	0800532a 	.word	0x0800532a
 80041fc:	08005677 	.word	0x08005677
 8004200:	080055e0 	.word	0x080055e0
 8004204:	200004b1 	.word	0x200004b1
 8004208:	200003aa 	.word	0x200003aa
 800420c:	200003ac 	.word	0x200003ac

08004210 <xMBRTUTimerT35Expired>:

BOOL
xMBRTUTimerT35Expired( void )
{
 8004210:	b570      	push	{r4, r5, r6, lr}
    BOOL            xNeedPoll = FALSE;

    switch ( eRcvState )
 8004212:	4d14      	ldr	r5, [pc, #80]	@ (8004264 <xMBRTUTimerT35Expired+0x54>)
 8004214:	782b      	ldrb	r3, [r5, #0]
 8004216:	b2d8      	uxtb	r0, r3
 8004218:	2b02      	cmp	r3, #2
 800421a:	d00c      	beq.n	8004236 <xMBRTUTimerT35Expired+0x26>
 800421c:	2803      	cmp	r0, #3
 800421e:	d01e      	beq.n	800425e <xMBRTUTimerT35Expired+0x4e>
 8004220:	2800      	cmp	r0, #0
 8004222:	d10a      	bne.n	800423a <xMBRTUTimerT35Expired+0x2a>
        break;

        /* A frame was received and t35 expired. Notify the listener that
         * a new frame was received. */
    case STATE_RX_RCV:
        xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
 8004224:	f7ff fdde 	bl	8003de4 <xMBPortEventPost>
 8004228:	0004      	movs	r4, r0
    default:
        assert( ( eRcvState == STATE_RX_INIT ) ||
                ( eRcvState == STATE_RX_RCV ) || ( eRcvState == STATE_RX_ERROR ) );
    }

    vMBPortTimersDisable(  );
 800422a:	f7ff fe6d 	bl	8003f08 <vMBPortTimersDisable>
    eRcvState = STATE_RX_IDLE;
 800422e:	2301      	movs	r3, #1

    return xNeedPoll;
}
 8004230:	0020      	movs	r0, r4
    eRcvState = STATE_RX_IDLE;
 8004232:	702b      	strb	r3, [r5, #0]
}
 8004234:	bd70      	pop	{r4, r5, r6, pc}
        xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
 8004236:	2001      	movs	r0, #1
 8004238:	e7f4      	b.n	8004224 <xMBRTUTimerT35Expired+0x14>
        assert( ( eRcvState == STATE_RX_INIT ) ||
 800423a:	782b      	ldrb	r3, [r5, #0]
 800423c:	b2dc      	uxtb	r4, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d0f3      	beq.n	800422a <xMBRTUTimerT35Expired+0x1a>
 8004242:	782b      	ldrb	r3, [r5, #0]
 8004244:	2b02      	cmp	r3, #2
 8004246:	d00a      	beq.n	800425e <xMBRTUTimerT35Expired+0x4e>
 8004248:	782b      	ldrb	r3, [r5, #0]
    BOOL            xNeedPoll = FALSE;
 800424a:	2400      	movs	r4, #0
        assert( ( eRcvState == STATE_RX_INIT ) ||
 800424c:	2b03      	cmp	r3, #3
 800424e:	d0ec      	beq.n	800422a <xMBRTUTimerT35Expired+0x1a>
 8004250:	21ad      	movs	r1, #173	@ 0xad
 8004252:	4b05      	ldr	r3, [pc, #20]	@ (8004268 <xMBRTUTimerT35Expired+0x58>)
 8004254:	4a05      	ldr	r2, [pc, #20]	@ (800426c <xMBRTUTimerT35Expired+0x5c>)
 8004256:	4806      	ldr	r0, [pc, #24]	@ (8004270 <xMBRTUTimerT35Expired+0x60>)
 8004258:	0049      	lsls	r1, r1, #1
 800425a:	f000 f80b 	bl	8004274 <__assert_func>
    BOOL            xNeedPoll = FALSE;
 800425e:	2400      	movs	r4, #0
 8004260:	e7e3      	b.n	800422a <xMBRTUTimerT35Expired+0x1a>
 8004262:	46c0      	nop			@ (mov r8, r8)
 8004264:	200004b0 	.word	0x200004b0
 8004268:	080055fe 	.word	0x080055fe
 800426c:	08005661 	.word	0x08005661
 8004270:	080055e0 	.word	0x080055e0

08004274 <__assert_func>:
 8004274:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8004276:	0014      	movs	r4, r2
 8004278:	001a      	movs	r2, r3
 800427a:	4b09      	ldr	r3, [pc, #36]	@ (80042a0 <__assert_func+0x2c>)
 800427c:	0005      	movs	r5, r0
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	000e      	movs	r6, r1
 8004282:	68d8      	ldr	r0, [r3, #12]
 8004284:	4b07      	ldr	r3, [pc, #28]	@ (80042a4 <__assert_func+0x30>)
 8004286:	2c00      	cmp	r4, #0
 8004288:	d101      	bne.n	800428e <__assert_func+0x1a>
 800428a:	4b07      	ldr	r3, [pc, #28]	@ (80042a8 <__assert_func+0x34>)
 800428c:	001c      	movs	r4, r3
 800428e:	4907      	ldr	r1, [pc, #28]	@ (80042ac <__assert_func+0x38>)
 8004290:	9301      	str	r3, [sp, #4]
 8004292:	9402      	str	r4, [sp, #8]
 8004294:	002b      	movs	r3, r5
 8004296:	9600      	str	r6, [sp, #0]
 8004298:	f000 f8b2 	bl	8004400 <fiprintf>
 800429c:	f000 f9b4 	bl	8004608 <abort>
 80042a0:	2000009c 	.word	0x2000009c
 80042a4:	080056a8 	.word	0x080056a8
 80042a8:	080056e3 	.word	0x080056e3
 80042ac:	080056b5 	.word	0x080056b5

080042b0 <std>:
 80042b0:	2300      	movs	r3, #0
 80042b2:	b510      	push	{r4, lr}
 80042b4:	0004      	movs	r4, r0
 80042b6:	6003      	str	r3, [r0, #0]
 80042b8:	6043      	str	r3, [r0, #4]
 80042ba:	6083      	str	r3, [r0, #8]
 80042bc:	8181      	strh	r1, [r0, #12]
 80042be:	6643      	str	r3, [r0, #100]	@ 0x64
 80042c0:	81c2      	strh	r2, [r0, #14]
 80042c2:	6103      	str	r3, [r0, #16]
 80042c4:	6143      	str	r3, [r0, #20]
 80042c6:	6183      	str	r3, [r0, #24]
 80042c8:	0019      	movs	r1, r3
 80042ca:	2208      	movs	r2, #8
 80042cc:	305c      	adds	r0, #92	@ 0x5c
 80042ce:	f000 f90f 	bl	80044f0 <memset>
 80042d2:	4b0b      	ldr	r3, [pc, #44]	@ (8004300 <std+0x50>)
 80042d4:	6224      	str	r4, [r4, #32]
 80042d6:	6263      	str	r3, [r4, #36]	@ 0x24
 80042d8:	4b0a      	ldr	r3, [pc, #40]	@ (8004304 <std+0x54>)
 80042da:	62a3      	str	r3, [r4, #40]	@ 0x28
 80042dc:	4b0a      	ldr	r3, [pc, #40]	@ (8004308 <std+0x58>)
 80042de:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80042e0:	4b0a      	ldr	r3, [pc, #40]	@ (800430c <std+0x5c>)
 80042e2:	6323      	str	r3, [r4, #48]	@ 0x30
 80042e4:	4b0a      	ldr	r3, [pc, #40]	@ (8004310 <std+0x60>)
 80042e6:	429c      	cmp	r4, r3
 80042e8:	d005      	beq.n	80042f6 <std+0x46>
 80042ea:	4b0a      	ldr	r3, [pc, #40]	@ (8004314 <std+0x64>)
 80042ec:	429c      	cmp	r4, r3
 80042ee:	d002      	beq.n	80042f6 <std+0x46>
 80042f0:	4b09      	ldr	r3, [pc, #36]	@ (8004318 <std+0x68>)
 80042f2:	429c      	cmp	r4, r3
 80042f4:	d103      	bne.n	80042fe <std+0x4e>
 80042f6:	0020      	movs	r0, r4
 80042f8:	3058      	adds	r0, #88	@ 0x58
 80042fa:	f000 f979 	bl	80045f0 <__retarget_lock_init_recursive>
 80042fe:	bd10      	pop	{r4, pc}
 8004300:	08004459 	.word	0x08004459
 8004304:	08004481 	.word	0x08004481
 8004308:	080044b9 	.word	0x080044b9
 800430c:	080044e5 	.word	0x080044e5
 8004310:	200004b4 	.word	0x200004b4
 8004314:	2000051c 	.word	0x2000051c
 8004318:	20000584 	.word	0x20000584

0800431c <stdio_exit_handler>:
 800431c:	b510      	push	{r4, lr}
 800431e:	4a03      	ldr	r2, [pc, #12]	@ (800432c <stdio_exit_handler+0x10>)
 8004320:	4903      	ldr	r1, [pc, #12]	@ (8004330 <stdio_exit_handler+0x14>)
 8004322:	4804      	ldr	r0, [pc, #16]	@ (8004334 <stdio_exit_handler+0x18>)
 8004324:	f000 f87c 	bl	8004420 <_fwalk_sglue>
 8004328:	bd10      	pop	{r4, pc}
 800432a:	46c0      	nop			@ (mov r8, r8)
 800432c:	20000090 	.word	0x20000090
 8004330:	08004ea1 	.word	0x08004ea1
 8004334:	200000a0 	.word	0x200000a0

08004338 <cleanup_stdio>:
 8004338:	6841      	ldr	r1, [r0, #4]
 800433a:	4b0b      	ldr	r3, [pc, #44]	@ (8004368 <cleanup_stdio+0x30>)
 800433c:	b510      	push	{r4, lr}
 800433e:	0004      	movs	r4, r0
 8004340:	4299      	cmp	r1, r3
 8004342:	d001      	beq.n	8004348 <cleanup_stdio+0x10>
 8004344:	f000 fdac 	bl	8004ea0 <_fflush_r>
 8004348:	68a1      	ldr	r1, [r4, #8]
 800434a:	4b08      	ldr	r3, [pc, #32]	@ (800436c <cleanup_stdio+0x34>)
 800434c:	4299      	cmp	r1, r3
 800434e:	d002      	beq.n	8004356 <cleanup_stdio+0x1e>
 8004350:	0020      	movs	r0, r4
 8004352:	f000 fda5 	bl	8004ea0 <_fflush_r>
 8004356:	68e1      	ldr	r1, [r4, #12]
 8004358:	4b05      	ldr	r3, [pc, #20]	@ (8004370 <cleanup_stdio+0x38>)
 800435a:	4299      	cmp	r1, r3
 800435c:	d002      	beq.n	8004364 <cleanup_stdio+0x2c>
 800435e:	0020      	movs	r0, r4
 8004360:	f000 fd9e 	bl	8004ea0 <_fflush_r>
 8004364:	bd10      	pop	{r4, pc}
 8004366:	46c0      	nop			@ (mov r8, r8)
 8004368:	200004b4 	.word	0x200004b4
 800436c:	2000051c 	.word	0x2000051c
 8004370:	20000584 	.word	0x20000584

08004374 <global_stdio_init.part.0>:
 8004374:	b510      	push	{r4, lr}
 8004376:	4b09      	ldr	r3, [pc, #36]	@ (800439c <global_stdio_init.part.0+0x28>)
 8004378:	4a09      	ldr	r2, [pc, #36]	@ (80043a0 <global_stdio_init.part.0+0x2c>)
 800437a:	2104      	movs	r1, #4
 800437c:	601a      	str	r2, [r3, #0]
 800437e:	4809      	ldr	r0, [pc, #36]	@ (80043a4 <global_stdio_init.part.0+0x30>)
 8004380:	2200      	movs	r2, #0
 8004382:	f7ff ff95 	bl	80042b0 <std>
 8004386:	2201      	movs	r2, #1
 8004388:	2109      	movs	r1, #9
 800438a:	4807      	ldr	r0, [pc, #28]	@ (80043a8 <global_stdio_init.part.0+0x34>)
 800438c:	f7ff ff90 	bl	80042b0 <std>
 8004390:	2202      	movs	r2, #2
 8004392:	2112      	movs	r1, #18
 8004394:	4805      	ldr	r0, [pc, #20]	@ (80043ac <global_stdio_init.part.0+0x38>)
 8004396:	f7ff ff8b 	bl	80042b0 <std>
 800439a:	bd10      	pop	{r4, pc}
 800439c:	200005ec 	.word	0x200005ec
 80043a0:	0800431d 	.word	0x0800431d
 80043a4:	200004b4 	.word	0x200004b4
 80043a8:	2000051c 	.word	0x2000051c
 80043ac:	20000584 	.word	0x20000584

080043b0 <__sfp_lock_acquire>:
 80043b0:	b510      	push	{r4, lr}
 80043b2:	4802      	ldr	r0, [pc, #8]	@ (80043bc <__sfp_lock_acquire+0xc>)
 80043b4:	f000 f91d 	bl	80045f2 <__retarget_lock_acquire_recursive>
 80043b8:	bd10      	pop	{r4, pc}
 80043ba:	46c0      	nop			@ (mov r8, r8)
 80043bc:	200005f5 	.word	0x200005f5

080043c0 <__sfp_lock_release>:
 80043c0:	b510      	push	{r4, lr}
 80043c2:	4802      	ldr	r0, [pc, #8]	@ (80043cc <__sfp_lock_release+0xc>)
 80043c4:	f000 f916 	bl	80045f4 <__retarget_lock_release_recursive>
 80043c8:	bd10      	pop	{r4, pc}
 80043ca:	46c0      	nop			@ (mov r8, r8)
 80043cc:	200005f5 	.word	0x200005f5

080043d0 <__sinit>:
 80043d0:	b510      	push	{r4, lr}
 80043d2:	0004      	movs	r4, r0
 80043d4:	f7ff ffec 	bl	80043b0 <__sfp_lock_acquire>
 80043d8:	6a23      	ldr	r3, [r4, #32]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d002      	beq.n	80043e4 <__sinit+0x14>
 80043de:	f7ff ffef 	bl	80043c0 <__sfp_lock_release>
 80043e2:	bd10      	pop	{r4, pc}
 80043e4:	4b04      	ldr	r3, [pc, #16]	@ (80043f8 <__sinit+0x28>)
 80043e6:	6223      	str	r3, [r4, #32]
 80043e8:	4b04      	ldr	r3, [pc, #16]	@ (80043fc <__sinit+0x2c>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d1f6      	bne.n	80043de <__sinit+0xe>
 80043f0:	f7ff ffc0 	bl	8004374 <global_stdio_init.part.0>
 80043f4:	e7f3      	b.n	80043de <__sinit+0xe>
 80043f6:	46c0      	nop			@ (mov r8, r8)
 80043f8:	08004339 	.word	0x08004339
 80043fc:	200005ec 	.word	0x200005ec

08004400 <fiprintf>:
 8004400:	b40e      	push	{r1, r2, r3}
 8004402:	b517      	push	{r0, r1, r2, r4, lr}
 8004404:	4c05      	ldr	r4, [pc, #20]	@ (800441c <fiprintf+0x1c>)
 8004406:	ab05      	add	r3, sp, #20
 8004408:	cb04      	ldmia	r3!, {r2}
 800440a:	0001      	movs	r1, r0
 800440c:	6820      	ldr	r0, [r4, #0]
 800440e:	9301      	str	r3, [sp, #4]
 8004410:	f000 fa26 	bl	8004860 <_vfiprintf_r>
 8004414:	bc1e      	pop	{r1, r2, r3, r4}
 8004416:	bc08      	pop	{r3}
 8004418:	b003      	add	sp, #12
 800441a:	4718      	bx	r3
 800441c:	2000009c 	.word	0x2000009c

08004420 <_fwalk_sglue>:
 8004420:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004422:	0014      	movs	r4, r2
 8004424:	2600      	movs	r6, #0
 8004426:	9000      	str	r0, [sp, #0]
 8004428:	9101      	str	r1, [sp, #4]
 800442a:	68a5      	ldr	r5, [r4, #8]
 800442c:	6867      	ldr	r7, [r4, #4]
 800442e:	3f01      	subs	r7, #1
 8004430:	d504      	bpl.n	800443c <_fwalk_sglue+0x1c>
 8004432:	6824      	ldr	r4, [r4, #0]
 8004434:	2c00      	cmp	r4, #0
 8004436:	d1f8      	bne.n	800442a <_fwalk_sglue+0xa>
 8004438:	0030      	movs	r0, r6
 800443a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800443c:	89ab      	ldrh	r3, [r5, #12]
 800443e:	2b01      	cmp	r3, #1
 8004440:	d908      	bls.n	8004454 <_fwalk_sglue+0x34>
 8004442:	220e      	movs	r2, #14
 8004444:	5eab      	ldrsh	r3, [r5, r2]
 8004446:	3301      	adds	r3, #1
 8004448:	d004      	beq.n	8004454 <_fwalk_sglue+0x34>
 800444a:	0029      	movs	r1, r5
 800444c:	9800      	ldr	r0, [sp, #0]
 800444e:	9b01      	ldr	r3, [sp, #4]
 8004450:	4798      	blx	r3
 8004452:	4306      	orrs	r6, r0
 8004454:	3568      	adds	r5, #104	@ 0x68
 8004456:	e7ea      	b.n	800442e <_fwalk_sglue+0xe>

08004458 <__sread>:
 8004458:	b570      	push	{r4, r5, r6, lr}
 800445a:	000c      	movs	r4, r1
 800445c:	250e      	movs	r5, #14
 800445e:	5f49      	ldrsh	r1, [r1, r5]
 8004460:	f000 f874 	bl	800454c <_read_r>
 8004464:	2800      	cmp	r0, #0
 8004466:	db03      	blt.n	8004470 <__sread+0x18>
 8004468:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800446a:	181b      	adds	r3, r3, r0
 800446c:	6563      	str	r3, [r4, #84]	@ 0x54
 800446e:	bd70      	pop	{r4, r5, r6, pc}
 8004470:	89a3      	ldrh	r3, [r4, #12]
 8004472:	4a02      	ldr	r2, [pc, #8]	@ (800447c <__sread+0x24>)
 8004474:	4013      	ands	r3, r2
 8004476:	81a3      	strh	r3, [r4, #12]
 8004478:	e7f9      	b.n	800446e <__sread+0x16>
 800447a:	46c0      	nop			@ (mov r8, r8)
 800447c:	ffffefff 	.word	0xffffefff

08004480 <__swrite>:
 8004480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004482:	001f      	movs	r7, r3
 8004484:	898b      	ldrh	r3, [r1, #12]
 8004486:	0005      	movs	r5, r0
 8004488:	000c      	movs	r4, r1
 800448a:	0016      	movs	r6, r2
 800448c:	05db      	lsls	r3, r3, #23
 800448e:	d505      	bpl.n	800449c <__swrite+0x1c>
 8004490:	230e      	movs	r3, #14
 8004492:	5ec9      	ldrsh	r1, [r1, r3]
 8004494:	2200      	movs	r2, #0
 8004496:	2302      	movs	r3, #2
 8004498:	f000 f844 	bl	8004524 <_lseek_r>
 800449c:	89a3      	ldrh	r3, [r4, #12]
 800449e:	4a05      	ldr	r2, [pc, #20]	@ (80044b4 <__swrite+0x34>)
 80044a0:	0028      	movs	r0, r5
 80044a2:	4013      	ands	r3, r2
 80044a4:	81a3      	strh	r3, [r4, #12]
 80044a6:	0032      	movs	r2, r6
 80044a8:	230e      	movs	r3, #14
 80044aa:	5ee1      	ldrsh	r1, [r4, r3]
 80044ac:	003b      	movs	r3, r7
 80044ae:	f000 f861 	bl	8004574 <_write_r>
 80044b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044b4:	ffffefff 	.word	0xffffefff

080044b8 <__sseek>:
 80044b8:	b570      	push	{r4, r5, r6, lr}
 80044ba:	000c      	movs	r4, r1
 80044bc:	250e      	movs	r5, #14
 80044be:	5f49      	ldrsh	r1, [r1, r5]
 80044c0:	f000 f830 	bl	8004524 <_lseek_r>
 80044c4:	89a3      	ldrh	r3, [r4, #12]
 80044c6:	1c42      	adds	r2, r0, #1
 80044c8:	d103      	bne.n	80044d2 <__sseek+0x1a>
 80044ca:	4a05      	ldr	r2, [pc, #20]	@ (80044e0 <__sseek+0x28>)
 80044cc:	4013      	ands	r3, r2
 80044ce:	81a3      	strh	r3, [r4, #12]
 80044d0:	bd70      	pop	{r4, r5, r6, pc}
 80044d2:	2280      	movs	r2, #128	@ 0x80
 80044d4:	0152      	lsls	r2, r2, #5
 80044d6:	4313      	orrs	r3, r2
 80044d8:	81a3      	strh	r3, [r4, #12]
 80044da:	6560      	str	r0, [r4, #84]	@ 0x54
 80044dc:	e7f8      	b.n	80044d0 <__sseek+0x18>
 80044de:	46c0      	nop			@ (mov r8, r8)
 80044e0:	ffffefff 	.word	0xffffefff

080044e4 <__sclose>:
 80044e4:	b510      	push	{r4, lr}
 80044e6:	230e      	movs	r3, #14
 80044e8:	5ec9      	ldrsh	r1, [r1, r3]
 80044ea:	f000 f809 	bl	8004500 <_close_r>
 80044ee:	bd10      	pop	{r4, pc}

080044f0 <memset>:
 80044f0:	0003      	movs	r3, r0
 80044f2:	1882      	adds	r2, r0, r2
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d100      	bne.n	80044fa <memset+0xa>
 80044f8:	4770      	bx	lr
 80044fa:	7019      	strb	r1, [r3, #0]
 80044fc:	3301      	adds	r3, #1
 80044fe:	e7f9      	b.n	80044f4 <memset+0x4>

08004500 <_close_r>:
 8004500:	2300      	movs	r3, #0
 8004502:	b570      	push	{r4, r5, r6, lr}
 8004504:	4d06      	ldr	r5, [pc, #24]	@ (8004520 <_close_r+0x20>)
 8004506:	0004      	movs	r4, r0
 8004508:	0008      	movs	r0, r1
 800450a:	602b      	str	r3, [r5, #0]
 800450c:	f7fc fba2 	bl	8000c54 <_close>
 8004510:	1c43      	adds	r3, r0, #1
 8004512:	d103      	bne.n	800451c <_close_r+0x1c>
 8004514:	682b      	ldr	r3, [r5, #0]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d000      	beq.n	800451c <_close_r+0x1c>
 800451a:	6023      	str	r3, [r4, #0]
 800451c:	bd70      	pop	{r4, r5, r6, pc}
 800451e:	46c0      	nop			@ (mov r8, r8)
 8004520:	200005f0 	.word	0x200005f0

08004524 <_lseek_r>:
 8004524:	b570      	push	{r4, r5, r6, lr}
 8004526:	0004      	movs	r4, r0
 8004528:	0008      	movs	r0, r1
 800452a:	0011      	movs	r1, r2
 800452c:	001a      	movs	r2, r3
 800452e:	2300      	movs	r3, #0
 8004530:	4d05      	ldr	r5, [pc, #20]	@ (8004548 <_lseek_r+0x24>)
 8004532:	602b      	str	r3, [r5, #0]
 8004534:	f7fc fb98 	bl	8000c68 <_lseek>
 8004538:	1c43      	adds	r3, r0, #1
 800453a:	d103      	bne.n	8004544 <_lseek_r+0x20>
 800453c:	682b      	ldr	r3, [r5, #0]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d000      	beq.n	8004544 <_lseek_r+0x20>
 8004542:	6023      	str	r3, [r4, #0]
 8004544:	bd70      	pop	{r4, r5, r6, pc}
 8004546:	46c0      	nop			@ (mov r8, r8)
 8004548:	200005f0 	.word	0x200005f0

0800454c <_read_r>:
 800454c:	b570      	push	{r4, r5, r6, lr}
 800454e:	0004      	movs	r4, r0
 8004550:	0008      	movs	r0, r1
 8004552:	0011      	movs	r1, r2
 8004554:	001a      	movs	r2, r3
 8004556:	2300      	movs	r3, #0
 8004558:	4d05      	ldr	r5, [pc, #20]	@ (8004570 <_read_r+0x24>)
 800455a:	602b      	str	r3, [r5, #0]
 800455c:	f7fc fb60 	bl	8000c20 <_read>
 8004560:	1c43      	adds	r3, r0, #1
 8004562:	d103      	bne.n	800456c <_read_r+0x20>
 8004564:	682b      	ldr	r3, [r5, #0]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d000      	beq.n	800456c <_read_r+0x20>
 800456a:	6023      	str	r3, [r4, #0]
 800456c:	bd70      	pop	{r4, r5, r6, pc}
 800456e:	46c0      	nop			@ (mov r8, r8)
 8004570:	200005f0 	.word	0x200005f0

08004574 <_write_r>:
 8004574:	b570      	push	{r4, r5, r6, lr}
 8004576:	0004      	movs	r4, r0
 8004578:	0008      	movs	r0, r1
 800457a:	0011      	movs	r1, r2
 800457c:	001a      	movs	r2, r3
 800457e:	2300      	movs	r3, #0
 8004580:	4d05      	ldr	r5, [pc, #20]	@ (8004598 <_write_r+0x24>)
 8004582:	602b      	str	r3, [r5, #0]
 8004584:	f7fc fb59 	bl	8000c3a <_write>
 8004588:	1c43      	adds	r3, r0, #1
 800458a:	d103      	bne.n	8004594 <_write_r+0x20>
 800458c:	682b      	ldr	r3, [r5, #0]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d000      	beq.n	8004594 <_write_r+0x20>
 8004592:	6023      	str	r3, [r4, #0]
 8004594:	bd70      	pop	{r4, r5, r6, pc}
 8004596:	46c0      	nop			@ (mov r8, r8)
 8004598:	200005f0 	.word	0x200005f0

0800459c <__errno>:
 800459c:	4b01      	ldr	r3, [pc, #4]	@ (80045a4 <__errno+0x8>)
 800459e:	6818      	ldr	r0, [r3, #0]
 80045a0:	4770      	bx	lr
 80045a2:	46c0      	nop			@ (mov r8, r8)
 80045a4:	2000009c 	.word	0x2000009c

080045a8 <__libc_init_array>:
 80045a8:	b570      	push	{r4, r5, r6, lr}
 80045aa:	2600      	movs	r6, #0
 80045ac:	4c0c      	ldr	r4, [pc, #48]	@ (80045e0 <__libc_init_array+0x38>)
 80045ae:	4d0d      	ldr	r5, [pc, #52]	@ (80045e4 <__libc_init_array+0x3c>)
 80045b0:	1b64      	subs	r4, r4, r5
 80045b2:	10a4      	asrs	r4, r4, #2
 80045b4:	42a6      	cmp	r6, r4
 80045b6:	d109      	bne.n	80045cc <__libc_init_array+0x24>
 80045b8:	2600      	movs	r6, #0
 80045ba:	f000 fe35 	bl	8005228 <_init>
 80045be:	4c0a      	ldr	r4, [pc, #40]	@ (80045e8 <__libc_init_array+0x40>)
 80045c0:	4d0a      	ldr	r5, [pc, #40]	@ (80045ec <__libc_init_array+0x44>)
 80045c2:	1b64      	subs	r4, r4, r5
 80045c4:	10a4      	asrs	r4, r4, #2
 80045c6:	42a6      	cmp	r6, r4
 80045c8:	d105      	bne.n	80045d6 <__libc_init_array+0x2e>
 80045ca:	bd70      	pop	{r4, r5, r6, pc}
 80045cc:	00b3      	lsls	r3, r6, #2
 80045ce:	58eb      	ldr	r3, [r5, r3]
 80045d0:	4798      	blx	r3
 80045d2:	3601      	adds	r6, #1
 80045d4:	e7ee      	b.n	80045b4 <__libc_init_array+0xc>
 80045d6:	00b3      	lsls	r3, r6, #2
 80045d8:	58eb      	ldr	r3, [r5, r3]
 80045da:	4798      	blx	r3
 80045dc:	3601      	adds	r6, #1
 80045de:	e7f2      	b.n	80045c6 <__libc_init_array+0x1e>
 80045e0:	08005720 	.word	0x08005720
 80045e4:	08005720 	.word	0x08005720
 80045e8:	08005724 	.word	0x08005724
 80045ec:	08005720 	.word	0x08005720

080045f0 <__retarget_lock_init_recursive>:
 80045f0:	4770      	bx	lr

080045f2 <__retarget_lock_acquire_recursive>:
 80045f2:	4770      	bx	lr

080045f4 <__retarget_lock_release_recursive>:
 80045f4:	4770      	bx	lr

080045f6 <memcpy>:
 80045f6:	2300      	movs	r3, #0
 80045f8:	b510      	push	{r4, lr}
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d100      	bne.n	8004600 <memcpy+0xa>
 80045fe:	bd10      	pop	{r4, pc}
 8004600:	5ccc      	ldrb	r4, [r1, r3]
 8004602:	54c4      	strb	r4, [r0, r3]
 8004604:	3301      	adds	r3, #1
 8004606:	e7f8      	b.n	80045fa <memcpy+0x4>

08004608 <abort>:
 8004608:	2006      	movs	r0, #6
 800460a:	b510      	push	{r4, lr}
 800460c:	f000 fd3e 	bl	800508c <raise>
 8004610:	2001      	movs	r0, #1
 8004612:	f7fc faff 	bl	8000c14 <_exit>
	...

08004618 <_free_r>:
 8004618:	b570      	push	{r4, r5, r6, lr}
 800461a:	0005      	movs	r5, r0
 800461c:	1e0c      	subs	r4, r1, #0
 800461e:	d010      	beq.n	8004642 <_free_r+0x2a>
 8004620:	3c04      	subs	r4, #4
 8004622:	6823      	ldr	r3, [r4, #0]
 8004624:	2b00      	cmp	r3, #0
 8004626:	da00      	bge.n	800462a <_free_r+0x12>
 8004628:	18e4      	adds	r4, r4, r3
 800462a:	0028      	movs	r0, r5
 800462c:	f000 f8e0 	bl	80047f0 <__malloc_lock>
 8004630:	4a1d      	ldr	r2, [pc, #116]	@ (80046a8 <_free_r+0x90>)
 8004632:	6813      	ldr	r3, [r2, #0]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d105      	bne.n	8004644 <_free_r+0x2c>
 8004638:	6063      	str	r3, [r4, #4]
 800463a:	6014      	str	r4, [r2, #0]
 800463c:	0028      	movs	r0, r5
 800463e:	f000 f8df 	bl	8004800 <__malloc_unlock>
 8004642:	bd70      	pop	{r4, r5, r6, pc}
 8004644:	42a3      	cmp	r3, r4
 8004646:	d908      	bls.n	800465a <_free_r+0x42>
 8004648:	6820      	ldr	r0, [r4, #0]
 800464a:	1821      	adds	r1, r4, r0
 800464c:	428b      	cmp	r3, r1
 800464e:	d1f3      	bne.n	8004638 <_free_r+0x20>
 8004650:	6819      	ldr	r1, [r3, #0]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	1809      	adds	r1, r1, r0
 8004656:	6021      	str	r1, [r4, #0]
 8004658:	e7ee      	b.n	8004638 <_free_r+0x20>
 800465a:	001a      	movs	r2, r3
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d001      	beq.n	8004666 <_free_r+0x4e>
 8004662:	42a3      	cmp	r3, r4
 8004664:	d9f9      	bls.n	800465a <_free_r+0x42>
 8004666:	6811      	ldr	r1, [r2, #0]
 8004668:	1850      	adds	r0, r2, r1
 800466a:	42a0      	cmp	r0, r4
 800466c:	d10b      	bne.n	8004686 <_free_r+0x6e>
 800466e:	6820      	ldr	r0, [r4, #0]
 8004670:	1809      	adds	r1, r1, r0
 8004672:	1850      	adds	r0, r2, r1
 8004674:	6011      	str	r1, [r2, #0]
 8004676:	4283      	cmp	r3, r0
 8004678:	d1e0      	bne.n	800463c <_free_r+0x24>
 800467a:	6818      	ldr	r0, [r3, #0]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	1841      	adds	r1, r0, r1
 8004680:	6011      	str	r1, [r2, #0]
 8004682:	6053      	str	r3, [r2, #4]
 8004684:	e7da      	b.n	800463c <_free_r+0x24>
 8004686:	42a0      	cmp	r0, r4
 8004688:	d902      	bls.n	8004690 <_free_r+0x78>
 800468a:	230c      	movs	r3, #12
 800468c:	602b      	str	r3, [r5, #0]
 800468e:	e7d5      	b.n	800463c <_free_r+0x24>
 8004690:	6820      	ldr	r0, [r4, #0]
 8004692:	1821      	adds	r1, r4, r0
 8004694:	428b      	cmp	r3, r1
 8004696:	d103      	bne.n	80046a0 <_free_r+0x88>
 8004698:	6819      	ldr	r1, [r3, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	1809      	adds	r1, r1, r0
 800469e:	6021      	str	r1, [r4, #0]
 80046a0:	6063      	str	r3, [r4, #4]
 80046a2:	6054      	str	r4, [r2, #4]
 80046a4:	e7ca      	b.n	800463c <_free_r+0x24>
 80046a6:	46c0      	nop			@ (mov r8, r8)
 80046a8:	200005fc 	.word	0x200005fc

080046ac <sbrk_aligned>:
 80046ac:	b570      	push	{r4, r5, r6, lr}
 80046ae:	4e0f      	ldr	r6, [pc, #60]	@ (80046ec <sbrk_aligned+0x40>)
 80046b0:	000d      	movs	r5, r1
 80046b2:	6831      	ldr	r1, [r6, #0]
 80046b4:	0004      	movs	r4, r0
 80046b6:	2900      	cmp	r1, #0
 80046b8:	d102      	bne.n	80046c0 <sbrk_aligned+0x14>
 80046ba:	f000 fd07 	bl	80050cc <_sbrk_r>
 80046be:	6030      	str	r0, [r6, #0]
 80046c0:	0029      	movs	r1, r5
 80046c2:	0020      	movs	r0, r4
 80046c4:	f000 fd02 	bl	80050cc <_sbrk_r>
 80046c8:	1c43      	adds	r3, r0, #1
 80046ca:	d103      	bne.n	80046d4 <sbrk_aligned+0x28>
 80046cc:	2501      	movs	r5, #1
 80046ce:	426d      	negs	r5, r5
 80046d0:	0028      	movs	r0, r5
 80046d2:	bd70      	pop	{r4, r5, r6, pc}
 80046d4:	2303      	movs	r3, #3
 80046d6:	1cc5      	adds	r5, r0, #3
 80046d8:	439d      	bics	r5, r3
 80046da:	42a8      	cmp	r0, r5
 80046dc:	d0f8      	beq.n	80046d0 <sbrk_aligned+0x24>
 80046de:	1a29      	subs	r1, r5, r0
 80046e0:	0020      	movs	r0, r4
 80046e2:	f000 fcf3 	bl	80050cc <_sbrk_r>
 80046e6:	3001      	adds	r0, #1
 80046e8:	d1f2      	bne.n	80046d0 <sbrk_aligned+0x24>
 80046ea:	e7ef      	b.n	80046cc <sbrk_aligned+0x20>
 80046ec:	200005f8 	.word	0x200005f8

080046f0 <_malloc_r>:
 80046f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046f2:	2203      	movs	r2, #3
 80046f4:	1ccb      	adds	r3, r1, #3
 80046f6:	4393      	bics	r3, r2
 80046f8:	3308      	adds	r3, #8
 80046fa:	0005      	movs	r5, r0
 80046fc:	001f      	movs	r7, r3
 80046fe:	2b0c      	cmp	r3, #12
 8004700:	d234      	bcs.n	800476c <_malloc_r+0x7c>
 8004702:	270c      	movs	r7, #12
 8004704:	42b9      	cmp	r1, r7
 8004706:	d833      	bhi.n	8004770 <_malloc_r+0x80>
 8004708:	0028      	movs	r0, r5
 800470a:	f000 f871 	bl	80047f0 <__malloc_lock>
 800470e:	4e37      	ldr	r6, [pc, #220]	@ (80047ec <_malloc_r+0xfc>)
 8004710:	6833      	ldr	r3, [r6, #0]
 8004712:	001c      	movs	r4, r3
 8004714:	2c00      	cmp	r4, #0
 8004716:	d12f      	bne.n	8004778 <_malloc_r+0x88>
 8004718:	0039      	movs	r1, r7
 800471a:	0028      	movs	r0, r5
 800471c:	f7ff ffc6 	bl	80046ac <sbrk_aligned>
 8004720:	0004      	movs	r4, r0
 8004722:	1c43      	adds	r3, r0, #1
 8004724:	d15f      	bne.n	80047e6 <_malloc_r+0xf6>
 8004726:	6834      	ldr	r4, [r6, #0]
 8004728:	9400      	str	r4, [sp, #0]
 800472a:	9b00      	ldr	r3, [sp, #0]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d14a      	bne.n	80047c6 <_malloc_r+0xd6>
 8004730:	2c00      	cmp	r4, #0
 8004732:	d052      	beq.n	80047da <_malloc_r+0xea>
 8004734:	6823      	ldr	r3, [r4, #0]
 8004736:	0028      	movs	r0, r5
 8004738:	18e3      	adds	r3, r4, r3
 800473a:	9900      	ldr	r1, [sp, #0]
 800473c:	9301      	str	r3, [sp, #4]
 800473e:	f000 fcc5 	bl	80050cc <_sbrk_r>
 8004742:	9b01      	ldr	r3, [sp, #4]
 8004744:	4283      	cmp	r3, r0
 8004746:	d148      	bne.n	80047da <_malloc_r+0xea>
 8004748:	6823      	ldr	r3, [r4, #0]
 800474a:	0028      	movs	r0, r5
 800474c:	1aff      	subs	r7, r7, r3
 800474e:	0039      	movs	r1, r7
 8004750:	f7ff ffac 	bl	80046ac <sbrk_aligned>
 8004754:	3001      	adds	r0, #1
 8004756:	d040      	beq.n	80047da <_malloc_r+0xea>
 8004758:	6823      	ldr	r3, [r4, #0]
 800475a:	19db      	adds	r3, r3, r7
 800475c:	6023      	str	r3, [r4, #0]
 800475e:	6833      	ldr	r3, [r6, #0]
 8004760:	685a      	ldr	r2, [r3, #4]
 8004762:	2a00      	cmp	r2, #0
 8004764:	d133      	bne.n	80047ce <_malloc_r+0xde>
 8004766:	9b00      	ldr	r3, [sp, #0]
 8004768:	6033      	str	r3, [r6, #0]
 800476a:	e019      	b.n	80047a0 <_malloc_r+0xb0>
 800476c:	2b00      	cmp	r3, #0
 800476e:	dac9      	bge.n	8004704 <_malloc_r+0x14>
 8004770:	230c      	movs	r3, #12
 8004772:	602b      	str	r3, [r5, #0]
 8004774:	2000      	movs	r0, #0
 8004776:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004778:	6821      	ldr	r1, [r4, #0]
 800477a:	1bc9      	subs	r1, r1, r7
 800477c:	d420      	bmi.n	80047c0 <_malloc_r+0xd0>
 800477e:	290b      	cmp	r1, #11
 8004780:	d90a      	bls.n	8004798 <_malloc_r+0xa8>
 8004782:	19e2      	adds	r2, r4, r7
 8004784:	6027      	str	r7, [r4, #0]
 8004786:	42a3      	cmp	r3, r4
 8004788:	d104      	bne.n	8004794 <_malloc_r+0xa4>
 800478a:	6032      	str	r2, [r6, #0]
 800478c:	6863      	ldr	r3, [r4, #4]
 800478e:	6011      	str	r1, [r2, #0]
 8004790:	6053      	str	r3, [r2, #4]
 8004792:	e005      	b.n	80047a0 <_malloc_r+0xb0>
 8004794:	605a      	str	r2, [r3, #4]
 8004796:	e7f9      	b.n	800478c <_malloc_r+0x9c>
 8004798:	6862      	ldr	r2, [r4, #4]
 800479a:	42a3      	cmp	r3, r4
 800479c:	d10e      	bne.n	80047bc <_malloc_r+0xcc>
 800479e:	6032      	str	r2, [r6, #0]
 80047a0:	0028      	movs	r0, r5
 80047a2:	f000 f82d 	bl	8004800 <__malloc_unlock>
 80047a6:	0020      	movs	r0, r4
 80047a8:	2207      	movs	r2, #7
 80047aa:	300b      	adds	r0, #11
 80047ac:	1d23      	adds	r3, r4, #4
 80047ae:	4390      	bics	r0, r2
 80047b0:	1ac2      	subs	r2, r0, r3
 80047b2:	4298      	cmp	r0, r3
 80047b4:	d0df      	beq.n	8004776 <_malloc_r+0x86>
 80047b6:	1a1b      	subs	r3, r3, r0
 80047b8:	50a3      	str	r3, [r4, r2]
 80047ba:	e7dc      	b.n	8004776 <_malloc_r+0x86>
 80047bc:	605a      	str	r2, [r3, #4]
 80047be:	e7ef      	b.n	80047a0 <_malloc_r+0xb0>
 80047c0:	0023      	movs	r3, r4
 80047c2:	6864      	ldr	r4, [r4, #4]
 80047c4:	e7a6      	b.n	8004714 <_malloc_r+0x24>
 80047c6:	9c00      	ldr	r4, [sp, #0]
 80047c8:	6863      	ldr	r3, [r4, #4]
 80047ca:	9300      	str	r3, [sp, #0]
 80047cc:	e7ad      	b.n	800472a <_malloc_r+0x3a>
 80047ce:	001a      	movs	r2, r3
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	42a3      	cmp	r3, r4
 80047d4:	d1fb      	bne.n	80047ce <_malloc_r+0xde>
 80047d6:	2300      	movs	r3, #0
 80047d8:	e7da      	b.n	8004790 <_malloc_r+0xa0>
 80047da:	230c      	movs	r3, #12
 80047dc:	0028      	movs	r0, r5
 80047de:	602b      	str	r3, [r5, #0]
 80047e0:	f000 f80e 	bl	8004800 <__malloc_unlock>
 80047e4:	e7c6      	b.n	8004774 <_malloc_r+0x84>
 80047e6:	6007      	str	r7, [r0, #0]
 80047e8:	e7da      	b.n	80047a0 <_malloc_r+0xb0>
 80047ea:	46c0      	nop			@ (mov r8, r8)
 80047ec:	200005fc 	.word	0x200005fc

080047f0 <__malloc_lock>:
 80047f0:	b510      	push	{r4, lr}
 80047f2:	4802      	ldr	r0, [pc, #8]	@ (80047fc <__malloc_lock+0xc>)
 80047f4:	f7ff fefd 	bl	80045f2 <__retarget_lock_acquire_recursive>
 80047f8:	bd10      	pop	{r4, pc}
 80047fa:	46c0      	nop			@ (mov r8, r8)
 80047fc:	200005f4 	.word	0x200005f4

08004800 <__malloc_unlock>:
 8004800:	b510      	push	{r4, lr}
 8004802:	4802      	ldr	r0, [pc, #8]	@ (800480c <__malloc_unlock+0xc>)
 8004804:	f7ff fef6 	bl	80045f4 <__retarget_lock_release_recursive>
 8004808:	bd10      	pop	{r4, pc}
 800480a:	46c0      	nop			@ (mov r8, r8)
 800480c:	200005f4 	.word	0x200005f4

08004810 <__sfputc_r>:
 8004810:	6893      	ldr	r3, [r2, #8]
 8004812:	b510      	push	{r4, lr}
 8004814:	3b01      	subs	r3, #1
 8004816:	6093      	str	r3, [r2, #8]
 8004818:	2b00      	cmp	r3, #0
 800481a:	da04      	bge.n	8004826 <__sfputc_r+0x16>
 800481c:	6994      	ldr	r4, [r2, #24]
 800481e:	42a3      	cmp	r3, r4
 8004820:	db07      	blt.n	8004832 <__sfputc_r+0x22>
 8004822:	290a      	cmp	r1, #10
 8004824:	d005      	beq.n	8004832 <__sfputc_r+0x22>
 8004826:	6813      	ldr	r3, [r2, #0]
 8004828:	1c58      	adds	r0, r3, #1
 800482a:	6010      	str	r0, [r2, #0]
 800482c:	7019      	strb	r1, [r3, #0]
 800482e:	0008      	movs	r0, r1
 8004830:	bd10      	pop	{r4, pc}
 8004832:	f000 fb60 	bl	8004ef6 <__swbuf_r>
 8004836:	0001      	movs	r1, r0
 8004838:	e7f9      	b.n	800482e <__sfputc_r+0x1e>

0800483a <__sfputs_r>:
 800483a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800483c:	0006      	movs	r6, r0
 800483e:	000f      	movs	r7, r1
 8004840:	0014      	movs	r4, r2
 8004842:	18d5      	adds	r5, r2, r3
 8004844:	42ac      	cmp	r4, r5
 8004846:	d101      	bne.n	800484c <__sfputs_r+0x12>
 8004848:	2000      	movs	r0, #0
 800484a:	e007      	b.n	800485c <__sfputs_r+0x22>
 800484c:	7821      	ldrb	r1, [r4, #0]
 800484e:	003a      	movs	r2, r7
 8004850:	0030      	movs	r0, r6
 8004852:	f7ff ffdd 	bl	8004810 <__sfputc_r>
 8004856:	3401      	adds	r4, #1
 8004858:	1c43      	adds	r3, r0, #1
 800485a:	d1f3      	bne.n	8004844 <__sfputs_r+0xa>
 800485c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004860 <_vfiprintf_r>:
 8004860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004862:	b0a1      	sub	sp, #132	@ 0x84
 8004864:	000f      	movs	r7, r1
 8004866:	0015      	movs	r5, r2
 8004868:	001e      	movs	r6, r3
 800486a:	9003      	str	r0, [sp, #12]
 800486c:	2800      	cmp	r0, #0
 800486e:	d004      	beq.n	800487a <_vfiprintf_r+0x1a>
 8004870:	6a03      	ldr	r3, [r0, #32]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d101      	bne.n	800487a <_vfiprintf_r+0x1a>
 8004876:	f7ff fdab 	bl	80043d0 <__sinit>
 800487a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800487c:	07db      	lsls	r3, r3, #31
 800487e:	d405      	bmi.n	800488c <_vfiprintf_r+0x2c>
 8004880:	89bb      	ldrh	r3, [r7, #12]
 8004882:	059b      	lsls	r3, r3, #22
 8004884:	d402      	bmi.n	800488c <_vfiprintf_r+0x2c>
 8004886:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004888:	f7ff feb3 	bl	80045f2 <__retarget_lock_acquire_recursive>
 800488c:	89bb      	ldrh	r3, [r7, #12]
 800488e:	071b      	lsls	r3, r3, #28
 8004890:	d502      	bpl.n	8004898 <_vfiprintf_r+0x38>
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d113      	bne.n	80048c0 <_vfiprintf_r+0x60>
 8004898:	0039      	movs	r1, r7
 800489a:	9803      	ldr	r0, [sp, #12]
 800489c:	f000 fb6e 	bl	8004f7c <__swsetup_r>
 80048a0:	2800      	cmp	r0, #0
 80048a2:	d00d      	beq.n	80048c0 <_vfiprintf_r+0x60>
 80048a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80048a6:	07db      	lsls	r3, r3, #31
 80048a8:	d503      	bpl.n	80048b2 <_vfiprintf_r+0x52>
 80048aa:	2001      	movs	r0, #1
 80048ac:	4240      	negs	r0, r0
 80048ae:	b021      	add	sp, #132	@ 0x84
 80048b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048b2:	89bb      	ldrh	r3, [r7, #12]
 80048b4:	059b      	lsls	r3, r3, #22
 80048b6:	d4f8      	bmi.n	80048aa <_vfiprintf_r+0x4a>
 80048b8:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80048ba:	f7ff fe9b 	bl	80045f4 <__retarget_lock_release_recursive>
 80048be:	e7f4      	b.n	80048aa <_vfiprintf_r+0x4a>
 80048c0:	2300      	movs	r3, #0
 80048c2:	ac08      	add	r4, sp, #32
 80048c4:	6163      	str	r3, [r4, #20]
 80048c6:	3320      	adds	r3, #32
 80048c8:	7663      	strb	r3, [r4, #25]
 80048ca:	3310      	adds	r3, #16
 80048cc:	76a3      	strb	r3, [r4, #26]
 80048ce:	9607      	str	r6, [sp, #28]
 80048d0:	002e      	movs	r6, r5
 80048d2:	7833      	ldrb	r3, [r6, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d001      	beq.n	80048dc <_vfiprintf_r+0x7c>
 80048d8:	2b25      	cmp	r3, #37	@ 0x25
 80048da:	d148      	bne.n	800496e <_vfiprintf_r+0x10e>
 80048dc:	1b73      	subs	r3, r6, r5
 80048de:	9305      	str	r3, [sp, #20]
 80048e0:	42ae      	cmp	r6, r5
 80048e2:	d00b      	beq.n	80048fc <_vfiprintf_r+0x9c>
 80048e4:	002a      	movs	r2, r5
 80048e6:	0039      	movs	r1, r7
 80048e8:	9803      	ldr	r0, [sp, #12]
 80048ea:	f7ff ffa6 	bl	800483a <__sfputs_r>
 80048ee:	3001      	adds	r0, #1
 80048f0:	d100      	bne.n	80048f4 <_vfiprintf_r+0x94>
 80048f2:	e0ae      	b.n	8004a52 <_vfiprintf_r+0x1f2>
 80048f4:	6963      	ldr	r3, [r4, #20]
 80048f6:	9a05      	ldr	r2, [sp, #20]
 80048f8:	189b      	adds	r3, r3, r2
 80048fa:	6163      	str	r3, [r4, #20]
 80048fc:	7833      	ldrb	r3, [r6, #0]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d100      	bne.n	8004904 <_vfiprintf_r+0xa4>
 8004902:	e0a6      	b.n	8004a52 <_vfiprintf_r+0x1f2>
 8004904:	2201      	movs	r2, #1
 8004906:	2300      	movs	r3, #0
 8004908:	4252      	negs	r2, r2
 800490a:	6062      	str	r2, [r4, #4]
 800490c:	a904      	add	r1, sp, #16
 800490e:	3254      	adds	r2, #84	@ 0x54
 8004910:	1852      	adds	r2, r2, r1
 8004912:	1c75      	adds	r5, r6, #1
 8004914:	6023      	str	r3, [r4, #0]
 8004916:	60e3      	str	r3, [r4, #12]
 8004918:	60a3      	str	r3, [r4, #8]
 800491a:	7013      	strb	r3, [r2, #0]
 800491c:	65a3      	str	r3, [r4, #88]	@ 0x58
 800491e:	4b59      	ldr	r3, [pc, #356]	@ (8004a84 <_vfiprintf_r+0x224>)
 8004920:	2205      	movs	r2, #5
 8004922:	0018      	movs	r0, r3
 8004924:	7829      	ldrb	r1, [r5, #0]
 8004926:	9305      	str	r3, [sp, #20]
 8004928:	f000 fbe2 	bl	80050f0 <memchr>
 800492c:	1c6e      	adds	r6, r5, #1
 800492e:	2800      	cmp	r0, #0
 8004930:	d11f      	bne.n	8004972 <_vfiprintf_r+0x112>
 8004932:	6822      	ldr	r2, [r4, #0]
 8004934:	06d3      	lsls	r3, r2, #27
 8004936:	d504      	bpl.n	8004942 <_vfiprintf_r+0xe2>
 8004938:	2353      	movs	r3, #83	@ 0x53
 800493a:	a904      	add	r1, sp, #16
 800493c:	185b      	adds	r3, r3, r1
 800493e:	2120      	movs	r1, #32
 8004940:	7019      	strb	r1, [r3, #0]
 8004942:	0713      	lsls	r3, r2, #28
 8004944:	d504      	bpl.n	8004950 <_vfiprintf_r+0xf0>
 8004946:	2353      	movs	r3, #83	@ 0x53
 8004948:	a904      	add	r1, sp, #16
 800494a:	185b      	adds	r3, r3, r1
 800494c:	212b      	movs	r1, #43	@ 0x2b
 800494e:	7019      	strb	r1, [r3, #0]
 8004950:	782b      	ldrb	r3, [r5, #0]
 8004952:	2b2a      	cmp	r3, #42	@ 0x2a
 8004954:	d016      	beq.n	8004984 <_vfiprintf_r+0x124>
 8004956:	002e      	movs	r6, r5
 8004958:	2100      	movs	r1, #0
 800495a:	200a      	movs	r0, #10
 800495c:	68e3      	ldr	r3, [r4, #12]
 800495e:	7832      	ldrb	r2, [r6, #0]
 8004960:	1c75      	adds	r5, r6, #1
 8004962:	3a30      	subs	r2, #48	@ 0x30
 8004964:	2a09      	cmp	r2, #9
 8004966:	d950      	bls.n	8004a0a <_vfiprintf_r+0x1aa>
 8004968:	2900      	cmp	r1, #0
 800496a:	d111      	bne.n	8004990 <_vfiprintf_r+0x130>
 800496c:	e017      	b.n	800499e <_vfiprintf_r+0x13e>
 800496e:	3601      	adds	r6, #1
 8004970:	e7af      	b.n	80048d2 <_vfiprintf_r+0x72>
 8004972:	9b05      	ldr	r3, [sp, #20]
 8004974:	6822      	ldr	r2, [r4, #0]
 8004976:	1ac0      	subs	r0, r0, r3
 8004978:	2301      	movs	r3, #1
 800497a:	4083      	lsls	r3, r0
 800497c:	4313      	orrs	r3, r2
 800497e:	0035      	movs	r5, r6
 8004980:	6023      	str	r3, [r4, #0]
 8004982:	e7cc      	b.n	800491e <_vfiprintf_r+0xbe>
 8004984:	9b07      	ldr	r3, [sp, #28]
 8004986:	1d19      	adds	r1, r3, #4
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	9107      	str	r1, [sp, #28]
 800498c:	2b00      	cmp	r3, #0
 800498e:	db01      	blt.n	8004994 <_vfiprintf_r+0x134>
 8004990:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004992:	e004      	b.n	800499e <_vfiprintf_r+0x13e>
 8004994:	425b      	negs	r3, r3
 8004996:	60e3      	str	r3, [r4, #12]
 8004998:	2302      	movs	r3, #2
 800499a:	4313      	orrs	r3, r2
 800499c:	6023      	str	r3, [r4, #0]
 800499e:	7833      	ldrb	r3, [r6, #0]
 80049a0:	2b2e      	cmp	r3, #46	@ 0x2e
 80049a2:	d10c      	bne.n	80049be <_vfiprintf_r+0x15e>
 80049a4:	7873      	ldrb	r3, [r6, #1]
 80049a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80049a8:	d134      	bne.n	8004a14 <_vfiprintf_r+0x1b4>
 80049aa:	9b07      	ldr	r3, [sp, #28]
 80049ac:	3602      	adds	r6, #2
 80049ae:	1d1a      	adds	r2, r3, #4
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	9207      	str	r2, [sp, #28]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	da01      	bge.n	80049bc <_vfiprintf_r+0x15c>
 80049b8:	2301      	movs	r3, #1
 80049ba:	425b      	negs	r3, r3
 80049bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80049be:	4d32      	ldr	r5, [pc, #200]	@ (8004a88 <_vfiprintf_r+0x228>)
 80049c0:	2203      	movs	r2, #3
 80049c2:	0028      	movs	r0, r5
 80049c4:	7831      	ldrb	r1, [r6, #0]
 80049c6:	f000 fb93 	bl	80050f0 <memchr>
 80049ca:	2800      	cmp	r0, #0
 80049cc:	d006      	beq.n	80049dc <_vfiprintf_r+0x17c>
 80049ce:	2340      	movs	r3, #64	@ 0x40
 80049d0:	1b40      	subs	r0, r0, r5
 80049d2:	4083      	lsls	r3, r0
 80049d4:	6822      	ldr	r2, [r4, #0]
 80049d6:	3601      	adds	r6, #1
 80049d8:	4313      	orrs	r3, r2
 80049da:	6023      	str	r3, [r4, #0]
 80049dc:	7831      	ldrb	r1, [r6, #0]
 80049de:	2206      	movs	r2, #6
 80049e0:	482a      	ldr	r0, [pc, #168]	@ (8004a8c <_vfiprintf_r+0x22c>)
 80049e2:	1c75      	adds	r5, r6, #1
 80049e4:	7621      	strb	r1, [r4, #24]
 80049e6:	f000 fb83 	bl	80050f0 <memchr>
 80049ea:	2800      	cmp	r0, #0
 80049ec:	d040      	beq.n	8004a70 <_vfiprintf_r+0x210>
 80049ee:	4b28      	ldr	r3, [pc, #160]	@ (8004a90 <_vfiprintf_r+0x230>)
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d122      	bne.n	8004a3a <_vfiprintf_r+0x1da>
 80049f4:	2207      	movs	r2, #7
 80049f6:	9b07      	ldr	r3, [sp, #28]
 80049f8:	3307      	adds	r3, #7
 80049fa:	4393      	bics	r3, r2
 80049fc:	3308      	adds	r3, #8
 80049fe:	9307      	str	r3, [sp, #28]
 8004a00:	6963      	ldr	r3, [r4, #20]
 8004a02:	9a04      	ldr	r2, [sp, #16]
 8004a04:	189b      	adds	r3, r3, r2
 8004a06:	6163      	str	r3, [r4, #20]
 8004a08:	e762      	b.n	80048d0 <_vfiprintf_r+0x70>
 8004a0a:	4343      	muls	r3, r0
 8004a0c:	002e      	movs	r6, r5
 8004a0e:	2101      	movs	r1, #1
 8004a10:	189b      	adds	r3, r3, r2
 8004a12:	e7a4      	b.n	800495e <_vfiprintf_r+0xfe>
 8004a14:	2300      	movs	r3, #0
 8004a16:	200a      	movs	r0, #10
 8004a18:	0019      	movs	r1, r3
 8004a1a:	3601      	adds	r6, #1
 8004a1c:	6063      	str	r3, [r4, #4]
 8004a1e:	7832      	ldrb	r2, [r6, #0]
 8004a20:	1c75      	adds	r5, r6, #1
 8004a22:	3a30      	subs	r2, #48	@ 0x30
 8004a24:	2a09      	cmp	r2, #9
 8004a26:	d903      	bls.n	8004a30 <_vfiprintf_r+0x1d0>
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d0c8      	beq.n	80049be <_vfiprintf_r+0x15e>
 8004a2c:	9109      	str	r1, [sp, #36]	@ 0x24
 8004a2e:	e7c6      	b.n	80049be <_vfiprintf_r+0x15e>
 8004a30:	4341      	muls	r1, r0
 8004a32:	002e      	movs	r6, r5
 8004a34:	2301      	movs	r3, #1
 8004a36:	1889      	adds	r1, r1, r2
 8004a38:	e7f1      	b.n	8004a1e <_vfiprintf_r+0x1be>
 8004a3a:	aa07      	add	r2, sp, #28
 8004a3c:	9200      	str	r2, [sp, #0]
 8004a3e:	0021      	movs	r1, r4
 8004a40:	003a      	movs	r2, r7
 8004a42:	4b14      	ldr	r3, [pc, #80]	@ (8004a94 <_vfiprintf_r+0x234>)
 8004a44:	9803      	ldr	r0, [sp, #12]
 8004a46:	e000      	b.n	8004a4a <_vfiprintf_r+0x1ea>
 8004a48:	bf00      	nop
 8004a4a:	9004      	str	r0, [sp, #16]
 8004a4c:	9b04      	ldr	r3, [sp, #16]
 8004a4e:	3301      	adds	r3, #1
 8004a50:	d1d6      	bne.n	8004a00 <_vfiprintf_r+0x1a0>
 8004a52:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a54:	07db      	lsls	r3, r3, #31
 8004a56:	d405      	bmi.n	8004a64 <_vfiprintf_r+0x204>
 8004a58:	89bb      	ldrh	r3, [r7, #12]
 8004a5a:	059b      	lsls	r3, r3, #22
 8004a5c:	d402      	bmi.n	8004a64 <_vfiprintf_r+0x204>
 8004a5e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004a60:	f7ff fdc8 	bl	80045f4 <__retarget_lock_release_recursive>
 8004a64:	89bb      	ldrh	r3, [r7, #12]
 8004a66:	065b      	lsls	r3, r3, #25
 8004a68:	d500      	bpl.n	8004a6c <_vfiprintf_r+0x20c>
 8004a6a:	e71e      	b.n	80048aa <_vfiprintf_r+0x4a>
 8004a6c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004a6e:	e71e      	b.n	80048ae <_vfiprintf_r+0x4e>
 8004a70:	aa07      	add	r2, sp, #28
 8004a72:	9200      	str	r2, [sp, #0]
 8004a74:	0021      	movs	r1, r4
 8004a76:	003a      	movs	r2, r7
 8004a78:	4b06      	ldr	r3, [pc, #24]	@ (8004a94 <_vfiprintf_r+0x234>)
 8004a7a:	9803      	ldr	r0, [sp, #12]
 8004a7c:	f000 f87c 	bl	8004b78 <_printf_i>
 8004a80:	e7e3      	b.n	8004a4a <_vfiprintf_r+0x1ea>
 8004a82:	46c0      	nop			@ (mov r8, r8)
 8004a84:	080056e4 	.word	0x080056e4
 8004a88:	080056ea 	.word	0x080056ea
 8004a8c:	080056ee 	.word	0x080056ee
 8004a90:	00000000 	.word	0x00000000
 8004a94:	0800483b 	.word	0x0800483b

08004a98 <_printf_common>:
 8004a98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a9a:	0016      	movs	r6, r2
 8004a9c:	9301      	str	r3, [sp, #4]
 8004a9e:	688a      	ldr	r2, [r1, #8]
 8004aa0:	690b      	ldr	r3, [r1, #16]
 8004aa2:	000c      	movs	r4, r1
 8004aa4:	9000      	str	r0, [sp, #0]
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	da00      	bge.n	8004aac <_printf_common+0x14>
 8004aaa:	0013      	movs	r3, r2
 8004aac:	0022      	movs	r2, r4
 8004aae:	6033      	str	r3, [r6, #0]
 8004ab0:	3243      	adds	r2, #67	@ 0x43
 8004ab2:	7812      	ldrb	r2, [r2, #0]
 8004ab4:	2a00      	cmp	r2, #0
 8004ab6:	d001      	beq.n	8004abc <_printf_common+0x24>
 8004ab8:	3301      	adds	r3, #1
 8004aba:	6033      	str	r3, [r6, #0]
 8004abc:	6823      	ldr	r3, [r4, #0]
 8004abe:	069b      	lsls	r3, r3, #26
 8004ac0:	d502      	bpl.n	8004ac8 <_printf_common+0x30>
 8004ac2:	6833      	ldr	r3, [r6, #0]
 8004ac4:	3302      	adds	r3, #2
 8004ac6:	6033      	str	r3, [r6, #0]
 8004ac8:	6822      	ldr	r2, [r4, #0]
 8004aca:	2306      	movs	r3, #6
 8004acc:	0015      	movs	r5, r2
 8004ace:	401d      	ands	r5, r3
 8004ad0:	421a      	tst	r2, r3
 8004ad2:	d027      	beq.n	8004b24 <_printf_common+0x8c>
 8004ad4:	0023      	movs	r3, r4
 8004ad6:	3343      	adds	r3, #67	@ 0x43
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	1e5a      	subs	r2, r3, #1
 8004adc:	4193      	sbcs	r3, r2
 8004ade:	6822      	ldr	r2, [r4, #0]
 8004ae0:	0692      	lsls	r2, r2, #26
 8004ae2:	d430      	bmi.n	8004b46 <_printf_common+0xae>
 8004ae4:	0022      	movs	r2, r4
 8004ae6:	9901      	ldr	r1, [sp, #4]
 8004ae8:	9800      	ldr	r0, [sp, #0]
 8004aea:	9d08      	ldr	r5, [sp, #32]
 8004aec:	3243      	adds	r2, #67	@ 0x43
 8004aee:	47a8      	blx	r5
 8004af0:	3001      	adds	r0, #1
 8004af2:	d025      	beq.n	8004b40 <_printf_common+0xa8>
 8004af4:	2206      	movs	r2, #6
 8004af6:	6823      	ldr	r3, [r4, #0]
 8004af8:	2500      	movs	r5, #0
 8004afa:	4013      	ands	r3, r2
 8004afc:	2b04      	cmp	r3, #4
 8004afe:	d105      	bne.n	8004b0c <_printf_common+0x74>
 8004b00:	6833      	ldr	r3, [r6, #0]
 8004b02:	68e5      	ldr	r5, [r4, #12]
 8004b04:	1aed      	subs	r5, r5, r3
 8004b06:	43eb      	mvns	r3, r5
 8004b08:	17db      	asrs	r3, r3, #31
 8004b0a:	401d      	ands	r5, r3
 8004b0c:	68a3      	ldr	r3, [r4, #8]
 8004b0e:	6922      	ldr	r2, [r4, #16]
 8004b10:	4293      	cmp	r3, r2
 8004b12:	dd01      	ble.n	8004b18 <_printf_common+0x80>
 8004b14:	1a9b      	subs	r3, r3, r2
 8004b16:	18ed      	adds	r5, r5, r3
 8004b18:	2600      	movs	r6, #0
 8004b1a:	42b5      	cmp	r5, r6
 8004b1c:	d120      	bne.n	8004b60 <_printf_common+0xc8>
 8004b1e:	2000      	movs	r0, #0
 8004b20:	e010      	b.n	8004b44 <_printf_common+0xac>
 8004b22:	3501      	adds	r5, #1
 8004b24:	68e3      	ldr	r3, [r4, #12]
 8004b26:	6832      	ldr	r2, [r6, #0]
 8004b28:	1a9b      	subs	r3, r3, r2
 8004b2a:	42ab      	cmp	r3, r5
 8004b2c:	ddd2      	ble.n	8004ad4 <_printf_common+0x3c>
 8004b2e:	0022      	movs	r2, r4
 8004b30:	2301      	movs	r3, #1
 8004b32:	9901      	ldr	r1, [sp, #4]
 8004b34:	9800      	ldr	r0, [sp, #0]
 8004b36:	9f08      	ldr	r7, [sp, #32]
 8004b38:	3219      	adds	r2, #25
 8004b3a:	47b8      	blx	r7
 8004b3c:	3001      	adds	r0, #1
 8004b3e:	d1f0      	bne.n	8004b22 <_printf_common+0x8a>
 8004b40:	2001      	movs	r0, #1
 8004b42:	4240      	negs	r0, r0
 8004b44:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004b46:	2030      	movs	r0, #48	@ 0x30
 8004b48:	18e1      	adds	r1, r4, r3
 8004b4a:	3143      	adds	r1, #67	@ 0x43
 8004b4c:	7008      	strb	r0, [r1, #0]
 8004b4e:	0021      	movs	r1, r4
 8004b50:	1c5a      	adds	r2, r3, #1
 8004b52:	3145      	adds	r1, #69	@ 0x45
 8004b54:	7809      	ldrb	r1, [r1, #0]
 8004b56:	18a2      	adds	r2, r4, r2
 8004b58:	3243      	adds	r2, #67	@ 0x43
 8004b5a:	3302      	adds	r3, #2
 8004b5c:	7011      	strb	r1, [r2, #0]
 8004b5e:	e7c1      	b.n	8004ae4 <_printf_common+0x4c>
 8004b60:	0022      	movs	r2, r4
 8004b62:	2301      	movs	r3, #1
 8004b64:	9901      	ldr	r1, [sp, #4]
 8004b66:	9800      	ldr	r0, [sp, #0]
 8004b68:	9f08      	ldr	r7, [sp, #32]
 8004b6a:	321a      	adds	r2, #26
 8004b6c:	47b8      	blx	r7
 8004b6e:	3001      	adds	r0, #1
 8004b70:	d0e6      	beq.n	8004b40 <_printf_common+0xa8>
 8004b72:	3601      	adds	r6, #1
 8004b74:	e7d1      	b.n	8004b1a <_printf_common+0x82>
	...

08004b78 <_printf_i>:
 8004b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b7a:	b08b      	sub	sp, #44	@ 0x2c
 8004b7c:	9206      	str	r2, [sp, #24]
 8004b7e:	000a      	movs	r2, r1
 8004b80:	3243      	adds	r2, #67	@ 0x43
 8004b82:	9307      	str	r3, [sp, #28]
 8004b84:	9005      	str	r0, [sp, #20]
 8004b86:	9203      	str	r2, [sp, #12]
 8004b88:	7e0a      	ldrb	r2, [r1, #24]
 8004b8a:	000c      	movs	r4, r1
 8004b8c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004b8e:	2a78      	cmp	r2, #120	@ 0x78
 8004b90:	d809      	bhi.n	8004ba6 <_printf_i+0x2e>
 8004b92:	2a62      	cmp	r2, #98	@ 0x62
 8004b94:	d80b      	bhi.n	8004bae <_printf_i+0x36>
 8004b96:	2a00      	cmp	r2, #0
 8004b98:	d100      	bne.n	8004b9c <_printf_i+0x24>
 8004b9a:	e0bc      	b.n	8004d16 <_printf_i+0x19e>
 8004b9c:	497b      	ldr	r1, [pc, #492]	@ (8004d8c <_printf_i+0x214>)
 8004b9e:	9104      	str	r1, [sp, #16]
 8004ba0:	2a58      	cmp	r2, #88	@ 0x58
 8004ba2:	d100      	bne.n	8004ba6 <_printf_i+0x2e>
 8004ba4:	e090      	b.n	8004cc8 <_printf_i+0x150>
 8004ba6:	0025      	movs	r5, r4
 8004ba8:	3542      	adds	r5, #66	@ 0x42
 8004baa:	702a      	strb	r2, [r5, #0]
 8004bac:	e022      	b.n	8004bf4 <_printf_i+0x7c>
 8004bae:	0010      	movs	r0, r2
 8004bb0:	3863      	subs	r0, #99	@ 0x63
 8004bb2:	2815      	cmp	r0, #21
 8004bb4:	d8f7      	bhi.n	8004ba6 <_printf_i+0x2e>
 8004bb6:	f7fb faaf 	bl	8000118 <__gnu_thumb1_case_shi>
 8004bba:	0016      	.short	0x0016
 8004bbc:	fff6001f 	.word	0xfff6001f
 8004bc0:	fff6fff6 	.word	0xfff6fff6
 8004bc4:	001ffff6 	.word	0x001ffff6
 8004bc8:	fff6fff6 	.word	0xfff6fff6
 8004bcc:	fff6fff6 	.word	0xfff6fff6
 8004bd0:	003600a1 	.word	0x003600a1
 8004bd4:	fff60080 	.word	0xfff60080
 8004bd8:	00b2fff6 	.word	0x00b2fff6
 8004bdc:	0036fff6 	.word	0x0036fff6
 8004be0:	fff6fff6 	.word	0xfff6fff6
 8004be4:	0084      	.short	0x0084
 8004be6:	0025      	movs	r5, r4
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	3542      	adds	r5, #66	@ 0x42
 8004bec:	1d11      	adds	r1, r2, #4
 8004bee:	6019      	str	r1, [r3, #0]
 8004bf0:	6813      	ldr	r3, [r2, #0]
 8004bf2:	702b      	strb	r3, [r5, #0]
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e0a0      	b.n	8004d3a <_printf_i+0x1c2>
 8004bf8:	6818      	ldr	r0, [r3, #0]
 8004bfa:	6809      	ldr	r1, [r1, #0]
 8004bfc:	1d02      	adds	r2, r0, #4
 8004bfe:	060d      	lsls	r5, r1, #24
 8004c00:	d50b      	bpl.n	8004c1a <_printf_i+0xa2>
 8004c02:	6806      	ldr	r6, [r0, #0]
 8004c04:	601a      	str	r2, [r3, #0]
 8004c06:	2e00      	cmp	r6, #0
 8004c08:	da03      	bge.n	8004c12 <_printf_i+0x9a>
 8004c0a:	232d      	movs	r3, #45	@ 0x2d
 8004c0c:	9a03      	ldr	r2, [sp, #12]
 8004c0e:	4276      	negs	r6, r6
 8004c10:	7013      	strb	r3, [r2, #0]
 8004c12:	4b5e      	ldr	r3, [pc, #376]	@ (8004d8c <_printf_i+0x214>)
 8004c14:	270a      	movs	r7, #10
 8004c16:	9304      	str	r3, [sp, #16]
 8004c18:	e018      	b.n	8004c4c <_printf_i+0xd4>
 8004c1a:	6806      	ldr	r6, [r0, #0]
 8004c1c:	601a      	str	r2, [r3, #0]
 8004c1e:	0649      	lsls	r1, r1, #25
 8004c20:	d5f1      	bpl.n	8004c06 <_printf_i+0x8e>
 8004c22:	b236      	sxth	r6, r6
 8004c24:	e7ef      	b.n	8004c06 <_printf_i+0x8e>
 8004c26:	6808      	ldr	r0, [r1, #0]
 8004c28:	6819      	ldr	r1, [r3, #0]
 8004c2a:	c940      	ldmia	r1!, {r6}
 8004c2c:	0605      	lsls	r5, r0, #24
 8004c2e:	d402      	bmi.n	8004c36 <_printf_i+0xbe>
 8004c30:	0640      	lsls	r0, r0, #25
 8004c32:	d500      	bpl.n	8004c36 <_printf_i+0xbe>
 8004c34:	b2b6      	uxth	r6, r6
 8004c36:	6019      	str	r1, [r3, #0]
 8004c38:	4b54      	ldr	r3, [pc, #336]	@ (8004d8c <_printf_i+0x214>)
 8004c3a:	270a      	movs	r7, #10
 8004c3c:	9304      	str	r3, [sp, #16]
 8004c3e:	2a6f      	cmp	r2, #111	@ 0x6f
 8004c40:	d100      	bne.n	8004c44 <_printf_i+0xcc>
 8004c42:	3f02      	subs	r7, #2
 8004c44:	0023      	movs	r3, r4
 8004c46:	2200      	movs	r2, #0
 8004c48:	3343      	adds	r3, #67	@ 0x43
 8004c4a:	701a      	strb	r2, [r3, #0]
 8004c4c:	6863      	ldr	r3, [r4, #4]
 8004c4e:	60a3      	str	r3, [r4, #8]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	db03      	blt.n	8004c5c <_printf_i+0xe4>
 8004c54:	2104      	movs	r1, #4
 8004c56:	6822      	ldr	r2, [r4, #0]
 8004c58:	438a      	bics	r2, r1
 8004c5a:	6022      	str	r2, [r4, #0]
 8004c5c:	2e00      	cmp	r6, #0
 8004c5e:	d102      	bne.n	8004c66 <_printf_i+0xee>
 8004c60:	9d03      	ldr	r5, [sp, #12]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00c      	beq.n	8004c80 <_printf_i+0x108>
 8004c66:	9d03      	ldr	r5, [sp, #12]
 8004c68:	0030      	movs	r0, r6
 8004c6a:	0039      	movs	r1, r7
 8004c6c:	f7fb fae4 	bl	8000238 <__aeabi_uidivmod>
 8004c70:	9b04      	ldr	r3, [sp, #16]
 8004c72:	3d01      	subs	r5, #1
 8004c74:	5c5b      	ldrb	r3, [r3, r1]
 8004c76:	702b      	strb	r3, [r5, #0]
 8004c78:	0033      	movs	r3, r6
 8004c7a:	0006      	movs	r6, r0
 8004c7c:	429f      	cmp	r7, r3
 8004c7e:	d9f3      	bls.n	8004c68 <_printf_i+0xf0>
 8004c80:	2f08      	cmp	r7, #8
 8004c82:	d109      	bne.n	8004c98 <_printf_i+0x120>
 8004c84:	6823      	ldr	r3, [r4, #0]
 8004c86:	07db      	lsls	r3, r3, #31
 8004c88:	d506      	bpl.n	8004c98 <_printf_i+0x120>
 8004c8a:	6862      	ldr	r2, [r4, #4]
 8004c8c:	6923      	ldr	r3, [r4, #16]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	dc02      	bgt.n	8004c98 <_printf_i+0x120>
 8004c92:	2330      	movs	r3, #48	@ 0x30
 8004c94:	3d01      	subs	r5, #1
 8004c96:	702b      	strb	r3, [r5, #0]
 8004c98:	9b03      	ldr	r3, [sp, #12]
 8004c9a:	1b5b      	subs	r3, r3, r5
 8004c9c:	6123      	str	r3, [r4, #16]
 8004c9e:	9b07      	ldr	r3, [sp, #28]
 8004ca0:	0021      	movs	r1, r4
 8004ca2:	9300      	str	r3, [sp, #0]
 8004ca4:	9805      	ldr	r0, [sp, #20]
 8004ca6:	9b06      	ldr	r3, [sp, #24]
 8004ca8:	aa09      	add	r2, sp, #36	@ 0x24
 8004caa:	f7ff fef5 	bl	8004a98 <_printf_common>
 8004cae:	3001      	adds	r0, #1
 8004cb0:	d148      	bne.n	8004d44 <_printf_i+0x1cc>
 8004cb2:	2001      	movs	r0, #1
 8004cb4:	4240      	negs	r0, r0
 8004cb6:	b00b      	add	sp, #44	@ 0x2c
 8004cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cba:	2220      	movs	r2, #32
 8004cbc:	6809      	ldr	r1, [r1, #0]
 8004cbe:	430a      	orrs	r2, r1
 8004cc0:	6022      	str	r2, [r4, #0]
 8004cc2:	2278      	movs	r2, #120	@ 0x78
 8004cc4:	4932      	ldr	r1, [pc, #200]	@ (8004d90 <_printf_i+0x218>)
 8004cc6:	9104      	str	r1, [sp, #16]
 8004cc8:	0021      	movs	r1, r4
 8004cca:	3145      	adds	r1, #69	@ 0x45
 8004ccc:	700a      	strb	r2, [r1, #0]
 8004cce:	6819      	ldr	r1, [r3, #0]
 8004cd0:	6822      	ldr	r2, [r4, #0]
 8004cd2:	c940      	ldmia	r1!, {r6}
 8004cd4:	0610      	lsls	r0, r2, #24
 8004cd6:	d402      	bmi.n	8004cde <_printf_i+0x166>
 8004cd8:	0650      	lsls	r0, r2, #25
 8004cda:	d500      	bpl.n	8004cde <_printf_i+0x166>
 8004cdc:	b2b6      	uxth	r6, r6
 8004cde:	6019      	str	r1, [r3, #0]
 8004ce0:	07d3      	lsls	r3, r2, #31
 8004ce2:	d502      	bpl.n	8004cea <_printf_i+0x172>
 8004ce4:	2320      	movs	r3, #32
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	6023      	str	r3, [r4, #0]
 8004cea:	2e00      	cmp	r6, #0
 8004cec:	d001      	beq.n	8004cf2 <_printf_i+0x17a>
 8004cee:	2710      	movs	r7, #16
 8004cf0:	e7a8      	b.n	8004c44 <_printf_i+0xcc>
 8004cf2:	2220      	movs	r2, #32
 8004cf4:	6823      	ldr	r3, [r4, #0]
 8004cf6:	4393      	bics	r3, r2
 8004cf8:	6023      	str	r3, [r4, #0]
 8004cfa:	e7f8      	b.n	8004cee <_printf_i+0x176>
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	680d      	ldr	r5, [r1, #0]
 8004d00:	1d10      	adds	r0, r2, #4
 8004d02:	6949      	ldr	r1, [r1, #20]
 8004d04:	6018      	str	r0, [r3, #0]
 8004d06:	6813      	ldr	r3, [r2, #0]
 8004d08:	062e      	lsls	r6, r5, #24
 8004d0a:	d501      	bpl.n	8004d10 <_printf_i+0x198>
 8004d0c:	6019      	str	r1, [r3, #0]
 8004d0e:	e002      	b.n	8004d16 <_printf_i+0x19e>
 8004d10:	066d      	lsls	r5, r5, #25
 8004d12:	d5fb      	bpl.n	8004d0c <_printf_i+0x194>
 8004d14:	8019      	strh	r1, [r3, #0]
 8004d16:	2300      	movs	r3, #0
 8004d18:	9d03      	ldr	r5, [sp, #12]
 8004d1a:	6123      	str	r3, [r4, #16]
 8004d1c:	e7bf      	b.n	8004c9e <_printf_i+0x126>
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	1d11      	adds	r1, r2, #4
 8004d22:	6019      	str	r1, [r3, #0]
 8004d24:	6815      	ldr	r5, [r2, #0]
 8004d26:	2100      	movs	r1, #0
 8004d28:	0028      	movs	r0, r5
 8004d2a:	6862      	ldr	r2, [r4, #4]
 8004d2c:	f000 f9e0 	bl	80050f0 <memchr>
 8004d30:	2800      	cmp	r0, #0
 8004d32:	d001      	beq.n	8004d38 <_printf_i+0x1c0>
 8004d34:	1b40      	subs	r0, r0, r5
 8004d36:	6060      	str	r0, [r4, #4]
 8004d38:	6863      	ldr	r3, [r4, #4]
 8004d3a:	6123      	str	r3, [r4, #16]
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	9a03      	ldr	r2, [sp, #12]
 8004d40:	7013      	strb	r3, [r2, #0]
 8004d42:	e7ac      	b.n	8004c9e <_printf_i+0x126>
 8004d44:	002a      	movs	r2, r5
 8004d46:	6923      	ldr	r3, [r4, #16]
 8004d48:	9906      	ldr	r1, [sp, #24]
 8004d4a:	9805      	ldr	r0, [sp, #20]
 8004d4c:	9d07      	ldr	r5, [sp, #28]
 8004d4e:	47a8      	blx	r5
 8004d50:	3001      	adds	r0, #1
 8004d52:	d0ae      	beq.n	8004cb2 <_printf_i+0x13a>
 8004d54:	6823      	ldr	r3, [r4, #0]
 8004d56:	079b      	lsls	r3, r3, #30
 8004d58:	d415      	bmi.n	8004d86 <_printf_i+0x20e>
 8004d5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d5c:	68e0      	ldr	r0, [r4, #12]
 8004d5e:	4298      	cmp	r0, r3
 8004d60:	daa9      	bge.n	8004cb6 <_printf_i+0x13e>
 8004d62:	0018      	movs	r0, r3
 8004d64:	e7a7      	b.n	8004cb6 <_printf_i+0x13e>
 8004d66:	0022      	movs	r2, r4
 8004d68:	2301      	movs	r3, #1
 8004d6a:	9906      	ldr	r1, [sp, #24]
 8004d6c:	9805      	ldr	r0, [sp, #20]
 8004d6e:	9e07      	ldr	r6, [sp, #28]
 8004d70:	3219      	adds	r2, #25
 8004d72:	47b0      	blx	r6
 8004d74:	3001      	adds	r0, #1
 8004d76:	d09c      	beq.n	8004cb2 <_printf_i+0x13a>
 8004d78:	3501      	adds	r5, #1
 8004d7a:	68e3      	ldr	r3, [r4, #12]
 8004d7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d7e:	1a9b      	subs	r3, r3, r2
 8004d80:	42ab      	cmp	r3, r5
 8004d82:	dcf0      	bgt.n	8004d66 <_printf_i+0x1ee>
 8004d84:	e7e9      	b.n	8004d5a <_printf_i+0x1e2>
 8004d86:	2500      	movs	r5, #0
 8004d88:	e7f7      	b.n	8004d7a <_printf_i+0x202>
 8004d8a:	46c0      	nop			@ (mov r8, r8)
 8004d8c:	080056f5 	.word	0x080056f5
 8004d90:	08005706 	.word	0x08005706

08004d94 <__sflush_r>:
 8004d94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d96:	220c      	movs	r2, #12
 8004d98:	5e8b      	ldrsh	r3, [r1, r2]
 8004d9a:	0005      	movs	r5, r0
 8004d9c:	000c      	movs	r4, r1
 8004d9e:	071a      	lsls	r2, r3, #28
 8004da0:	d456      	bmi.n	8004e50 <__sflush_r+0xbc>
 8004da2:	684a      	ldr	r2, [r1, #4]
 8004da4:	2a00      	cmp	r2, #0
 8004da6:	dc02      	bgt.n	8004dae <__sflush_r+0x1a>
 8004da8:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8004daa:	2a00      	cmp	r2, #0
 8004dac:	dd4e      	ble.n	8004e4c <__sflush_r+0xb8>
 8004dae:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8004db0:	2f00      	cmp	r7, #0
 8004db2:	d04b      	beq.n	8004e4c <__sflush_r+0xb8>
 8004db4:	2200      	movs	r2, #0
 8004db6:	2080      	movs	r0, #128	@ 0x80
 8004db8:	682e      	ldr	r6, [r5, #0]
 8004dba:	602a      	str	r2, [r5, #0]
 8004dbc:	001a      	movs	r2, r3
 8004dbe:	0140      	lsls	r0, r0, #5
 8004dc0:	6a21      	ldr	r1, [r4, #32]
 8004dc2:	4002      	ands	r2, r0
 8004dc4:	4203      	tst	r3, r0
 8004dc6:	d033      	beq.n	8004e30 <__sflush_r+0x9c>
 8004dc8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004dca:	89a3      	ldrh	r3, [r4, #12]
 8004dcc:	075b      	lsls	r3, r3, #29
 8004dce:	d506      	bpl.n	8004dde <__sflush_r+0x4a>
 8004dd0:	6863      	ldr	r3, [r4, #4]
 8004dd2:	1ad2      	subs	r2, r2, r3
 8004dd4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d001      	beq.n	8004dde <__sflush_r+0x4a>
 8004dda:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004ddc:	1ad2      	subs	r2, r2, r3
 8004dde:	2300      	movs	r3, #0
 8004de0:	0028      	movs	r0, r5
 8004de2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8004de4:	6a21      	ldr	r1, [r4, #32]
 8004de6:	47b8      	blx	r7
 8004de8:	89a2      	ldrh	r2, [r4, #12]
 8004dea:	1c43      	adds	r3, r0, #1
 8004dec:	d106      	bne.n	8004dfc <__sflush_r+0x68>
 8004dee:	6829      	ldr	r1, [r5, #0]
 8004df0:	291d      	cmp	r1, #29
 8004df2:	d846      	bhi.n	8004e82 <__sflush_r+0xee>
 8004df4:	4b29      	ldr	r3, [pc, #164]	@ (8004e9c <__sflush_r+0x108>)
 8004df6:	410b      	asrs	r3, r1
 8004df8:	07db      	lsls	r3, r3, #31
 8004dfa:	d442      	bmi.n	8004e82 <__sflush_r+0xee>
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	6063      	str	r3, [r4, #4]
 8004e00:	6923      	ldr	r3, [r4, #16]
 8004e02:	6023      	str	r3, [r4, #0]
 8004e04:	04d2      	lsls	r2, r2, #19
 8004e06:	d505      	bpl.n	8004e14 <__sflush_r+0x80>
 8004e08:	1c43      	adds	r3, r0, #1
 8004e0a:	d102      	bne.n	8004e12 <__sflush_r+0x7e>
 8004e0c:	682b      	ldr	r3, [r5, #0]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d100      	bne.n	8004e14 <__sflush_r+0x80>
 8004e12:	6560      	str	r0, [r4, #84]	@ 0x54
 8004e14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004e16:	602e      	str	r6, [r5, #0]
 8004e18:	2900      	cmp	r1, #0
 8004e1a:	d017      	beq.n	8004e4c <__sflush_r+0xb8>
 8004e1c:	0023      	movs	r3, r4
 8004e1e:	3344      	adds	r3, #68	@ 0x44
 8004e20:	4299      	cmp	r1, r3
 8004e22:	d002      	beq.n	8004e2a <__sflush_r+0x96>
 8004e24:	0028      	movs	r0, r5
 8004e26:	f7ff fbf7 	bl	8004618 <_free_r>
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	6363      	str	r3, [r4, #52]	@ 0x34
 8004e2e:	e00d      	b.n	8004e4c <__sflush_r+0xb8>
 8004e30:	2301      	movs	r3, #1
 8004e32:	0028      	movs	r0, r5
 8004e34:	47b8      	blx	r7
 8004e36:	0002      	movs	r2, r0
 8004e38:	1c43      	adds	r3, r0, #1
 8004e3a:	d1c6      	bne.n	8004dca <__sflush_r+0x36>
 8004e3c:	682b      	ldr	r3, [r5, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d0c3      	beq.n	8004dca <__sflush_r+0x36>
 8004e42:	2b1d      	cmp	r3, #29
 8004e44:	d001      	beq.n	8004e4a <__sflush_r+0xb6>
 8004e46:	2b16      	cmp	r3, #22
 8004e48:	d11a      	bne.n	8004e80 <__sflush_r+0xec>
 8004e4a:	602e      	str	r6, [r5, #0]
 8004e4c:	2000      	movs	r0, #0
 8004e4e:	e01e      	b.n	8004e8e <__sflush_r+0xfa>
 8004e50:	690e      	ldr	r6, [r1, #16]
 8004e52:	2e00      	cmp	r6, #0
 8004e54:	d0fa      	beq.n	8004e4c <__sflush_r+0xb8>
 8004e56:	680f      	ldr	r7, [r1, #0]
 8004e58:	600e      	str	r6, [r1, #0]
 8004e5a:	1bba      	subs	r2, r7, r6
 8004e5c:	9201      	str	r2, [sp, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	079b      	lsls	r3, r3, #30
 8004e62:	d100      	bne.n	8004e66 <__sflush_r+0xd2>
 8004e64:	694a      	ldr	r2, [r1, #20]
 8004e66:	60a2      	str	r2, [r4, #8]
 8004e68:	9b01      	ldr	r3, [sp, #4]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	ddee      	ble.n	8004e4c <__sflush_r+0xb8>
 8004e6e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004e70:	0032      	movs	r2, r6
 8004e72:	001f      	movs	r7, r3
 8004e74:	0028      	movs	r0, r5
 8004e76:	9b01      	ldr	r3, [sp, #4]
 8004e78:	6a21      	ldr	r1, [r4, #32]
 8004e7a:	47b8      	blx	r7
 8004e7c:	2800      	cmp	r0, #0
 8004e7e:	dc07      	bgt.n	8004e90 <__sflush_r+0xfc>
 8004e80:	89a2      	ldrh	r2, [r4, #12]
 8004e82:	2340      	movs	r3, #64	@ 0x40
 8004e84:	2001      	movs	r0, #1
 8004e86:	4313      	orrs	r3, r2
 8004e88:	b21b      	sxth	r3, r3
 8004e8a:	81a3      	strh	r3, [r4, #12]
 8004e8c:	4240      	negs	r0, r0
 8004e8e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004e90:	9b01      	ldr	r3, [sp, #4]
 8004e92:	1836      	adds	r6, r6, r0
 8004e94:	1a1b      	subs	r3, r3, r0
 8004e96:	9301      	str	r3, [sp, #4]
 8004e98:	e7e6      	b.n	8004e68 <__sflush_r+0xd4>
 8004e9a:	46c0      	nop			@ (mov r8, r8)
 8004e9c:	dfbffffe 	.word	0xdfbffffe

08004ea0 <_fflush_r>:
 8004ea0:	690b      	ldr	r3, [r1, #16]
 8004ea2:	b570      	push	{r4, r5, r6, lr}
 8004ea4:	0005      	movs	r5, r0
 8004ea6:	000c      	movs	r4, r1
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d102      	bne.n	8004eb2 <_fflush_r+0x12>
 8004eac:	2500      	movs	r5, #0
 8004eae:	0028      	movs	r0, r5
 8004eb0:	bd70      	pop	{r4, r5, r6, pc}
 8004eb2:	2800      	cmp	r0, #0
 8004eb4:	d004      	beq.n	8004ec0 <_fflush_r+0x20>
 8004eb6:	6a03      	ldr	r3, [r0, #32]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d101      	bne.n	8004ec0 <_fflush_r+0x20>
 8004ebc:	f7ff fa88 	bl	80043d0 <__sinit>
 8004ec0:	220c      	movs	r2, #12
 8004ec2:	5ea3      	ldrsh	r3, [r4, r2]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d0f1      	beq.n	8004eac <_fflush_r+0xc>
 8004ec8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004eca:	07d2      	lsls	r2, r2, #31
 8004ecc:	d404      	bmi.n	8004ed8 <_fflush_r+0x38>
 8004ece:	059b      	lsls	r3, r3, #22
 8004ed0:	d402      	bmi.n	8004ed8 <_fflush_r+0x38>
 8004ed2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004ed4:	f7ff fb8d 	bl	80045f2 <__retarget_lock_acquire_recursive>
 8004ed8:	0028      	movs	r0, r5
 8004eda:	0021      	movs	r1, r4
 8004edc:	f7ff ff5a 	bl	8004d94 <__sflush_r>
 8004ee0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004ee2:	0005      	movs	r5, r0
 8004ee4:	07db      	lsls	r3, r3, #31
 8004ee6:	d4e2      	bmi.n	8004eae <_fflush_r+0xe>
 8004ee8:	89a3      	ldrh	r3, [r4, #12]
 8004eea:	059b      	lsls	r3, r3, #22
 8004eec:	d4df      	bmi.n	8004eae <_fflush_r+0xe>
 8004eee:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004ef0:	f7ff fb80 	bl	80045f4 <__retarget_lock_release_recursive>
 8004ef4:	e7db      	b.n	8004eae <_fflush_r+0xe>

08004ef6 <__swbuf_r>:
 8004ef6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ef8:	0006      	movs	r6, r0
 8004efa:	000d      	movs	r5, r1
 8004efc:	0014      	movs	r4, r2
 8004efe:	2800      	cmp	r0, #0
 8004f00:	d004      	beq.n	8004f0c <__swbuf_r+0x16>
 8004f02:	6a03      	ldr	r3, [r0, #32]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d101      	bne.n	8004f0c <__swbuf_r+0x16>
 8004f08:	f7ff fa62 	bl	80043d0 <__sinit>
 8004f0c:	69a3      	ldr	r3, [r4, #24]
 8004f0e:	60a3      	str	r3, [r4, #8]
 8004f10:	89a3      	ldrh	r3, [r4, #12]
 8004f12:	071b      	lsls	r3, r3, #28
 8004f14:	d502      	bpl.n	8004f1c <__swbuf_r+0x26>
 8004f16:	6923      	ldr	r3, [r4, #16]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d109      	bne.n	8004f30 <__swbuf_r+0x3a>
 8004f1c:	0021      	movs	r1, r4
 8004f1e:	0030      	movs	r0, r6
 8004f20:	f000 f82c 	bl	8004f7c <__swsetup_r>
 8004f24:	2800      	cmp	r0, #0
 8004f26:	d003      	beq.n	8004f30 <__swbuf_r+0x3a>
 8004f28:	2501      	movs	r5, #1
 8004f2a:	426d      	negs	r5, r5
 8004f2c:	0028      	movs	r0, r5
 8004f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f30:	6923      	ldr	r3, [r4, #16]
 8004f32:	6820      	ldr	r0, [r4, #0]
 8004f34:	b2ef      	uxtb	r7, r5
 8004f36:	1ac0      	subs	r0, r0, r3
 8004f38:	6963      	ldr	r3, [r4, #20]
 8004f3a:	b2ed      	uxtb	r5, r5
 8004f3c:	4283      	cmp	r3, r0
 8004f3e:	dc05      	bgt.n	8004f4c <__swbuf_r+0x56>
 8004f40:	0021      	movs	r1, r4
 8004f42:	0030      	movs	r0, r6
 8004f44:	f7ff ffac 	bl	8004ea0 <_fflush_r>
 8004f48:	2800      	cmp	r0, #0
 8004f4a:	d1ed      	bne.n	8004f28 <__swbuf_r+0x32>
 8004f4c:	68a3      	ldr	r3, [r4, #8]
 8004f4e:	3001      	adds	r0, #1
 8004f50:	3b01      	subs	r3, #1
 8004f52:	60a3      	str	r3, [r4, #8]
 8004f54:	6823      	ldr	r3, [r4, #0]
 8004f56:	1c5a      	adds	r2, r3, #1
 8004f58:	6022      	str	r2, [r4, #0]
 8004f5a:	701f      	strb	r7, [r3, #0]
 8004f5c:	6963      	ldr	r3, [r4, #20]
 8004f5e:	4283      	cmp	r3, r0
 8004f60:	d004      	beq.n	8004f6c <__swbuf_r+0x76>
 8004f62:	89a3      	ldrh	r3, [r4, #12]
 8004f64:	07db      	lsls	r3, r3, #31
 8004f66:	d5e1      	bpl.n	8004f2c <__swbuf_r+0x36>
 8004f68:	2d0a      	cmp	r5, #10
 8004f6a:	d1df      	bne.n	8004f2c <__swbuf_r+0x36>
 8004f6c:	0021      	movs	r1, r4
 8004f6e:	0030      	movs	r0, r6
 8004f70:	f7ff ff96 	bl	8004ea0 <_fflush_r>
 8004f74:	2800      	cmp	r0, #0
 8004f76:	d0d9      	beq.n	8004f2c <__swbuf_r+0x36>
 8004f78:	e7d6      	b.n	8004f28 <__swbuf_r+0x32>
	...

08004f7c <__swsetup_r>:
 8004f7c:	4b2d      	ldr	r3, [pc, #180]	@ (8005034 <__swsetup_r+0xb8>)
 8004f7e:	b570      	push	{r4, r5, r6, lr}
 8004f80:	0005      	movs	r5, r0
 8004f82:	6818      	ldr	r0, [r3, #0]
 8004f84:	000c      	movs	r4, r1
 8004f86:	2800      	cmp	r0, #0
 8004f88:	d004      	beq.n	8004f94 <__swsetup_r+0x18>
 8004f8a:	6a03      	ldr	r3, [r0, #32]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d101      	bne.n	8004f94 <__swsetup_r+0x18>
 8004f90:	f7ff fa1e 	bl	80043d0 <__sinit>
 8004f94:	230c      	movs	r3, #12
 8004f96:	5ee2      	ldrsh	r2, [r4, r3]
 8004f98:	0713      	lsls	r3, r2, #28
 8004f9a:	d423      	bmi.n	8004fe4 <__swsetup_r+0x68>
 8004f9c:	06d3      	lsls	r3, r2, #27
 8004f9e:	d407      	bmi.n	8004fb0 <__swsetup_r+0x34>
 8004fa0:	2309      	movs	r3, #9
 8004fa2:	602b      	str	r3, [r5, #0]
 8004fa4:	2340      	movs	r3, #64	@ 0x40
 8004fa6:	2001      	movs	r0, #1
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	81a3      	strh	r3, [r4, #12]
 8004fac:	4240      	negs	r0, r0
 8004fae:	e03a      	b.n	8005026 <__swsetup_r+0xaa>
 8004fb0:	0752      	lsls	r2, r2, #29
 8004fb2:	d513      	bpl.n	8004fdc <__swsetup_r+0x60>
 8004fb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004fb6:	2900      	cmp	r1, #0
 8004fb8:	d008      	beq.n	8004fcc <__swsetup_r+0x50>
 8004fba:	0023      	movs	r3, r4
 8004fbc:	3344      	adds	r3, #68	@ 0x44
 8004fbe:	4299      	cmp	r1, r3
 8004fc0:	d002      	beq.n	8004fc8 <__swsetup_r+0x4c>
 8004fc2:	0028      	movs	r0, r5
 8004fc4:	f7ff fb28 	bl	8004618 <_free_r>
 8004fc8:	2300      	movs	r3, #0
 8004fca:	6363      	str	r3, [r4, #52]	@ 0x34
 8004fcc:	2224      	movs	r2, #36	@ 0x24
 8004fce:	89a3      	ldrh	r3, [r4, #12]
 8004fd0:	4393      	bics	r3, r2
 8004fd2:	81a3      	strh	r3, [r4, #12]
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	6063      	str	r3, [r4, #4]
 8004fd8:	6923      	ldr	r3, [r4, #16]
 8004fda:	6023      	str	r3, [r4, #0]
 8004fdc:	2308      	movs	r3, #8
 8004fde:	89a2      	ldrh	r2, [r4, #12]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	81a3      	strh	r3, [r4, #12]
 8004fe4:	6923      	ldr	r3, [r4, #16]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d10b      	bne.n	8005002 <__swsetup_r+0x86>
 8004fea:	21a0      	movs	r1, #160	@ 0xa0
 8004fec:	2280      	movs	r2, #128	@ 0x80
 8004fee:	89a3      	ldrh	r3, [r4, #12]
 8004ff0:	0089      	lsls	r1, r1, #2
 8004ff2:	0092      	lsls	r2, r2, #2
 8004ff4:	400b      	ands	r3, r1
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d003      	beq.n	8005002 <__swsetup_r+0x86>
 8004ffa:	0021      	movs	r1, r4
 8004ffc:	0028      	movs	r0, r5
 8004ffe:	f000 f8ad 	bl	800515c <__smakebuf_r>
 8005002:	230c      	movs	r3, #12
 8005004:	5ee2      	ldrsh	r2, [r4, r3]
 8005006:	2101      	movs	r1, #1
 8005008:	0013      	movs	r3, r2
 800500a:	400b      	ands	r3, r1
 800500c:	420a      	tst	r2, r1
 800500e:	d00b      	beq.n	8005028 <__swsetup_r+0xac>
 8005010:	2300      	movs	r3, #0
 8005012:	60a3      	str	r3, [r4, #8]
 8005014:	6963      	ldr	r3, [r4, #20]
 8005016:	425b      	negs	r3, r3
 8005018:	61a3      	str	r3, [r4, #24]
 800501a:	2000      	movs	r0, #0
 800501c:	6923      	ldr	r3, [r4, #16]
 800501e:	4283      	cmp	r3, r0
 8005020:	d101      	bne.n	8005026 <__swsetup_r+0xaa>
 8005022:	0613      	lsls	r3, r2, #24
 8005024:	d4be      	bmi.n	8004fa4 <__swsetup_r+0x28>
 8005026:	bd70      	pop	{r4, r5, r6, pc}
 8005028:	0791      	lsls	r1, r2, #30
 800502a:	d400      	bmi.n	800502e <__swsetup_r+0xb2>
 800502c:	6963      	ldr	r3, [r4, #20]
 800502e:	60a3      	str	r3, [r4, #8]
 8005030:	e7f3      	b.n	800501a <__swsetup_r+0x9e>
 8005032:	46c0      	nop			@ (mov r8, r8)
 8005034:	2000009c 	.word	0x2000009c

08005038 <_raise_r>:
 8005038:	b570      	push	{r4, r5, r6, lr}
 800503a:	0004      	movs	r4, r0
 800503c:	000d      	movs	r5, r1
 800503e:	291f      	cmp	r1, #31
 8005040:	d904      	bls.n	800504c <_raise_r+0x14>
 8005042:	2316      	movs	r3, #22
 8005044:	6003      	str	r3, [r0, #0]
 8005046:	2001      	movs	r0, #1
 8005048:	4240      	negs	r0, r0
 800504a:	bd70      	pop	{r4, r5, r6, pc}
 800504c:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800504e:	2b00      	cmp	r3, #0
 8005050:	d004      	beq.n	800505c <_raise_r+0x24>
 8005052:	008a      	lsls	r2, r1, #2
 8005054:	189b      	adds	r3, r3, r2
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	2a00      	cmp	r2, #0
 800505a:	d108      	bne.n	800506e <_raise_r+0x36>
 800505c:	0020      	movs	r0, r4
 800505e:	f000 f831 	bl	80050c4 <_getpid_r>
 8005062:	002a      	movs	r2, r5
 8005064:	0001      	movs	r1, r0
 8005066:	0020      	movs	r0, r4
 8005068:	f000 f81a 	bl	80050a0 <_kill_r>
 800506c:	e7ed      	b.n	800504a <_raise_r+0x12>
 800506e:	2a01      	cmp	r2, #1
 8005070:	d009      	beq.n	8005086 <_raise_r+0x4e>
 8005072:	1c51      	adds	r1, r2, #1
 8005074:	d103      	bne.n	800507e <_raise_r+0x46>
 8005076:	2316      	movs	r3, #22
 8005078:	6003      	str	r3, [r0, #0]
 800507a:	2001      	movs	r0, #1
 800507c:	e7e5      	b.n	800504a <_raise_r+0x12>
 800507e:	2100      	movs	r1, #0
 8005080:	0028      	movs	r0, r5
 8005082:	6019      	str	r1, [r3, #0]
 8005084:	4790      	blx	r2
 8005086:	2000      	movs	r0, #0
 8005088:	e7df      	b.n	800504a <_raise_r+0x12>
	...

0800508c <raise>:
 800508c:	b510      	push	{r4, lr}
 800508e:	4b03      	ldr	r3, [pc, #12]	@ (800509c <raise+0x10>)
 8005090:	0001      	movs	r1, r0
 8005092:	6818      	ldr	r0, [r3, #0]
 8005094:	f7ff ffd0 	bl	8005038 <_raise_r>
 8005098:	bd10      	pop	{r4, pc}
 800509a:	46c0      	nop			@ (mov r8, r8)
 800509c:	2000009c 	.word	0x2000009c

080050a0 <_kill_r>:
 80050a0:	2300      	movs	r3, #0
 80050a2:	b570      	push	{r4, r5, r6, lr}
 80050a4:	4d06      	ldr	r5, [pc, #24]	@ (80050c0 <_kill_r+0x20>)
 80050a6:	0004      	movs	r4, r0
 80050a8:	0008      	movs	r0, r1
 80050aa:	0011      	movs	r1, r2
 80050ac:	602b      	str	r3, [r5, #0]
 80050ae:	f7fb fda9 	bl	8000c04 <_kill>
 80050b2:	1c43      	adds	r3, r0, #1
 80050b4:	d103      	bne.n	80050be <_kill_r+0x1e>
 80050b6:	682b      	ldr	r3, [r5, #0]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d000      	beq.n	80050be <_kill_r+0x1e>
 80050bc:	6023      	str	r3, [r4, #0]
 80050be:	bd70      	pop	{r4, r5, r6, pc}
 80050c0:	200005f0 	.word	0x200005f0

080050c4 <_getpid_r>:
 80050c4:	b510      	push	{r4, lr}
 80050c6:	f7fb fd9b 	bl	8000c00 <_getpid>
 80050ca:	bd10      	pop	{r4, pc}

080050cc <_sbrk_r>:
 80050cc:	2300      	movs	r3, #0
 80050ce:	b570      	push	{r4, r5, r6, lr}
 80050d0:	4d06      	ldr	r5, [pc, #24]	@ (80050ec <_sbrk_r+0x20>)
 80050d2:	0004      	movs	r4, r0
 80050d4:	0008      	movs	r0, r1
 80050d6:	602b      	str	r3, [r5, #0]
 80050d8:	f7fb fdc8 	bl	8000c6c <_sbrk>
 80050dc:	1c43      	adds	r3, r0, #1
 80050de:	d103      	bne.n	80050e8 <_sbrk_r+0x1c>
 80050e0:	682b      	ldr	r3, [r5, #0]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d000      	beq.n	80050e8 <_sbrk_r+0x1c>
 80050e6:	6023      	str	r3, [r4, #0]
 80050e8:	bd70      	pop	{r4, r5, r6, pc}
 80050ea:	46c0      	nop			@ (mov r8, r8)
 80050ec:	200005f0 	.word	0x200005f0

080050f0 <memchr>:
 80050f0:	b2c9      	uxtb	r1, r1
 80050f2:	1882      	adds	r2, r0, r2
 80050f4:	4290      	cmp	r0, r2
 80050f6:	d101      	bne.n	80050fc <memchr+0xc>
 80050f8:	2000      	movs	r0, #0
 80050fa:	4770      	bx	lr
 80050fc:	7803      	ldrb	r3, [r0, #0]
 80050fe:	428b      	cmp	r3, r1
 8005100:	d0fb      	beq.n	80050fa <memchr+0xa>
 8005102:	3001      	adds	r0, #1
 8005104:	e7f6      	b.n	80050f4 <memchr+0x4>
	...

08005108 <__swhatbuf_r>:
 8005108:	b570      	push	{r4, r5, r6, lr}
 800510a:	000e      	movs	r6, r1
 800510c:	001d      	movs	r5, r3
 800510e:	230e      	movs	r3, #14
 8005110:	5ec9      	ldrsh	r1, [r1, r3]
 8005112:	0014      	movs	r4, r2
 8005114:	b096      	sub	sp, #88	@ 0x58
 8005116:	2900      	cmp	r1, #0
 8005118:	da0c      	bge.n	8005134 <__swhatbuf_r+0x2c>
 800511a:	89b2      	ldrh	r2, [r6, #12]
 800511c:	2380      	movs	r3, #128	@ 0x80
 800511e:	0011      	movs	r1, r2
 8005120:	4019      	ands	r1, r3
 8005122:	421a      	tst	r2, r3
 8005124:	d114      	bne.n	8005150 <__swhatbuf_r+0x48>
 8005126:	2380      	movs	r3, #128	@ 0x80
 8005128:	00db      	lsls	r3, r3, #3
 800512a:	2000      	movs	r0, #0
 800512c:	6029      	str	r1, [r5, #0]
 800512e:	6023      	str	r3, [r4, #0]
 8005130:	b016      	add	sp, #88	@ 0x58
 8005132:	bd70      	pop	{r4, r5, r6, pc}
 8005134:	466a      	mov	r2, sp
 8005136:	f000 f853 	bl	80051e0 <_fstat_r>
 800513a:	2800      	cmp	r0, #0
 800513c:	dbed      	blt.n	800511a <__swhatbuf_r+0x12>
 800513e:	23f0      	movs	r3, #240	@ 0xf0
 8005140:	9901      	ldr	r1, [sp, #4]
 8005142:	021b      	lsls	r3, r3, #8
 8005144:	4019      	ands	r1, r3
 8005146:	4b04      	ldr	r3, [pc, #16]	@ (8005158 <__swhatbuf_r+0x50>)
 8005148:	18c9      	adds	r1, r1, r3
 800514a:	424b      	negs	r3, r1
 800514c:	4159      	adcs	r1, r3
 800514e:	e7ea      	b.n	8005126 <__swhatbuf_r+0x1e>
 8005150:	2100      	movs	r1, #0
 8005152:	2340      	movs	r3, #64	@ 0x40
 8005154:	e7e9      	b.n	800512a <__swhatbuf_r+0x22>
 8005156:	46c0      	nop			@ (mov r8, r8)
 8005158:	ffffe000 	.word	0xffffe000

0800515c <__smakebuf_r>:
 800515c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800515e:	2602      	movs	r6, #2
 8005160:	898b      	ldrh	r3, [r1, #12]
 8005162:	0005      	movs	r5, r0
 8005164:	000c      	movs	r4, r1
 8005166:	b085      	sub	sp, #20
 8005168:	4233      	tst	r3, r6
 800516a:	d007      	beq.n	800517c <__smakebuf_r+0x20>
 800516c:	0023      	movs	r3, r4
 800516e:	3347      	adds	r3, #71	@ 0x47
 8005170:	6023      	str	r3, [r4, #0]
 8005172:	6123      	str	r3, [r4, #16]
 8005174:	2301      	movs	r3, #1
 8005176:	6163      	str	r3, [r4, #20]
 8005178:	b005      	add	sp, #20
 800517a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800517c:	ab03      	add	r3, sp, #12
 800517e:	aa02      	add	r2, sp, #8
 8005180:	f7ff ffc2 	bl	8005108 <__swhatbuf_r>
 8005184:	9f02      	ldr	r7, [sp, #8]
 8005186:	9001      	str	r0, [sp, #4]
 8005188:	0039      	movs	r1, r7
 800518a:	0028      	movs	r0, r5
 800518c:	f7ff fab0 	bl	80046f0 <_malloc_r>
 8005190:	2800      	cmp	r0, #0
 8005192:	d108      	bne.n	80051a6 <__smakebuf_r+0x4a>
 8005194:	220c      	movs	r2, #12
 8005196:	5ea3      	ldrsh	r3, [r4, r2]
 8005198:	059a      	lsls	r2, r3, #22
 800519a:	d4ed      	bmi.n	8005178 <__smakebuf_r+0x1c>
 800519c:	2203      	movs	r2, #3
 800519e:	4393      	bics	r3, r2
 80051a0:	431e      	orrs	r6, r3
 80051a2:	81a6      	strh	r6, [r4, #12]
 80051a4:	e7e2      	b.n	800516c <__smakebuf_r+0x10>
 80051a6:	2380      	movs	r3, #128	@ 0x80
 80051a8:	89a2      	ldrh	r2, [r4, #12]
 80051aa:	6020      	str	r0, [r4, #0]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	81a3      	strh	r3, [r4, #12]
 80051b0:	9b03      	ldr	r3, [sp, #12]
 80051b2:	6120      	str	r0, [r4, #16]
 80051b4:	6167      	str	r7, [r4, #20]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00c      	beq.n	80051d4 <__smakebuf_r+0x78>
 80051ba:	0028      	movs	r0, r5
 80051bc:	230e      	movs	r3, #14
 80051be:	5ee1      	ldrsh	r1, [r4, r3]
 80051c0:	f000 f820 	bl	8005204 <_isatty_r>
 80051c4:	2800      	cmp	r0, #0
 80051c6:	d005      	beq.n	80051d4 <__smakebuf_r+0x78>
 80051c8:	2303      	movs	r3, #3
 80051ca:	89a2      	ldrh	r2, [r4, #12]
 80051cc:	439a      	bics	r2, r3
 80051ce:	3b02      	subs	r3, #2
 80051d0:	4313      	orrs	r3, r2
 80051d2:	81a3      	strh	r3, [r4, #12]
 80051d4:	89a3      	ldrh	r3, [r4, #12]
 80051d6:	9a01      	ldr	r2, [sp, #4]
 80051d8:	4313      	orrs	r3, r2
 80051da:	81a3      	strh	r3, [r4, #12]
 80051dc:	e7cc      	b.n	8005178 <__smakebuf_r+0x1c>
	...

080051e0 <_fstat_r>:
 80051e0:	2300      	movs	r3, #0
 80051e2:	b570      	push	{r4, r5, r6, lr}
 80051e4:	4d06      	ldr	r5, [pc, #24]	@ (8005200 <_fstat_r+0x20>)
 80051e6:	0004      	movs	r4, r0
 80051e8:	0008      	movs	r0, r1
 80051ea:	0011      	movs	r1, r2
 80051ec:	602b      	str	r3, [r5, #0]
 80051ee:	f7fb fd34 	bl	8000c5a <_fstat>
 80051f2:	1c43      	adds	r3, r0, #1
 80051f4:	d103      	bne.n	80051fe <_fstat_r+0x1e>
 80051f6:	682b      	ldr	r3, [r5, #0]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d000      	beq.n	80051fe <_fstat_r+0x1e>
 80051fc:	6023      	str	r3, [r4, #0]
 80051fe:	bd70      	pop	{r4, r5, r6, pc}
 8005200:	200005f0 	.word	0x200005f0

08005204 <_isatty_r>:
 8005204:	2300      	movs	r3, #0
 8005206:	b570      	push	{r4, r5, r6, lr}
 8005208:	4d06      	ldr	r5, [pc, #24]	@ (8005224 <_isatty_r+0x20>)
 800520a:	0004      	movs	r4, r0
 800520c:	0008      	movs	r0, r1
 800520e:	602b      	str	r3, [r5, #0]
 8005210:	f7fb fd28 	bl	8000c64 <_isatty>
 8005214:	1c43      	adds	r3, r0, #1
 8005216:	d103      	bne.n	8005220 <_isatty_r+0x1c>
 8005218:	682b      	ldr	r3, [r5, #0]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d000      	beq.n	8005220 <_isatty_r+0x1c>
 800521e:	6023      	str	r3, [r4, #0]
 8005220:	bd70      	pop	{r4, r5, r6, pc}
 8005222:	46c0      	nop			@ (mov r8, r8)
 8005224:	200005f0 	.word	0x200005f0

08005228 <_init>:
 8005228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800522a:	46c0      	nop			@ (mov r8, r8)
 800522c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800522e:	bc08      	pop	{r3}
 8005230:	469e      	mov	lr, r3
 8005232:	4770      	bx	lr

08005234 <_fini>:
 8005234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005236:	46c0      	nop			@ (mov r8, r8)
 8005238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800523a:	bc08      	pop	{r3}
 800523c:	469e      	mov	lr, r3
 800523e:	4770      	bx	lr
