
Ant-controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068d0  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c0  0800698c  0800698c  0000798c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e4c  08006e4c  000080f4  2**0
                  CONTENTS
  4 .ARM          00000008  08006e4c  08006e4c  00007e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e54  08006e54  000080f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e54  08006e54  00007e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006e58  08006e58  00007e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000f4  20000000  08006e5c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000538  200000f4  08006f50  000080f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000062c  08006f50  0000862c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000080f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020e4f  00000000  00000000  0000811c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c16  00000000  00000000  00028f6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000d76b  00000000  00000000  0002db81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001550  00000000  00000000  0003b2f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000143e  00000000  00000000  0003c840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b571  00000000  00000000  0003dc7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002689e  00000000  00000000  000591ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009b992  00000000  00000000  0007fa8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011b41f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000044c4  00000000  00000000  0011b464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  0011f928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200000f4 	.word	0x200000f4
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08006974 	.word	0x08006974

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200000f8 	.word	0x200000f8
 8000100:	08006974 	.word	0x08006974

08000104 <__gnu_thumb1_case_uqi>:
 8000104:	b402      	push	{r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0049      	lsls	r1, r1, #1
 800010c:	5c09      	ldrb	r1, [r1, r0]
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	448e      	add	lr, r1
 8000112:	bc02      	pop	{r1}
 8000114:	4770      	bx	lr
 8000116:	46c0      	nop			@ (mov r8, r8)

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	@ 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	@ 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <__aeabi_cfrcmple>:
 8000418:	4684      	mov	ip, r0
 800041a:	0008      	movs	r0, r1
 800041c:	4661      	mov	r1, ip
 800041e:	e7ff      	b.n	8000420 <__aeabi_cfcmpeq>

08000420 <__aeabi_cfcmpeq>:
 8000420:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000422:	f000 fc41 	bl	8000ca8 <__lesf2>
 8000426:	2800      	cmp	r0, #0
 8000428:	d401      	bmi.n	800042e <__aeabi_cfcmpeq+0xe>
 800042a:	2100      	movs	r1, #0
 800042c:	42c8      	cmn	r0, r1
 800042e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000430 <__aeabi_fcmpeq>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f000 fbc1 	bl	8000bb8 <__eqsf2>
 8000436:	4240      	negs	r0, r0
 8000438:	3001      	adds	r0, #1
 800043a:	bd10      	pop	{r4, pc}

0800043c <__aeabi_fcmplt>:
 800043c:	b510      	push	{r4, lr}
 800043e:	f000 fc33 	bl	8000ca8 <__lesf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	db01      	blt.n	800044a <__aeabi_fcmplt+0xe>
 8000446:	2000      	movs	r0, #0
 8000448:	bd10      	pop	{r4, pc}
 800044a:	2001      	movs	r0, #1
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			@ (mov r8, r8)

08000450 <__aeabi_fcmple>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f000 fc29 	bl	8000ca8 <__lesf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	dd01      	ble.n	800045e <__aeabi_fcmple+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)

08000464 <__aeabi_fcmpgt>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f000 fbcf 	bl	8000c08 <__gesf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	dc01      	bgt.n	8000472 <__aeabi_fcmpgt+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			@ (mov r8, r8)

08000478 <__aeabi_fcmpge>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f000 fbc5 	bl	8000c08 <__gesf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	da01      	bge.n	8000486 <__aeabi_fcmpge+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			@ (mov r8, r8)

0800048c <__aeabi_uldivmod>:
 800048c:	2b00      	cmp	r3, #0
 800048e:	d111      	bne.n	80004b4 <__aeabi_uldivmod+0x28>
 8000490:	2a00      	cmp	r2, #0
 8000492:	d10f      	bne.n	80004b4 <__aeabi_uldivmod+0x28>
 8000494:	2900      	cmp	r1, #0
 8000496:	d100      	bne.n	800049a <__aeabi_uldivmod+0xe>
 8000498:	2800      	cmp	r0, #0
 800049a:	d002      	beq.n	80004a2 <__aeabi_uldivmod+0x16>
 800049c:	2100      	movs	r1, #0
 800049e:	43c9      	mvns	r1, r1
 80004a0:	0008      	movs	r0, r1
 80004a2:	b407      	push	{r0, r1, r2}
 80004a4:	4802      	ldr	r0, [pc, #8]	@ (80004b0 <__aeabi_uldivmod+0x24>)
 80004a6:	a102      	add	r1, pc, #8	@ (adr r1, 80004b0 <__aeabi_uldivmod+0x24>)
 80004a8:	1840      	adds	r0, r0, r1
 80004aa:	9002      	str	r0, [sp, #8]
 80004ac:	bd03      	pop	{r0, r1, pc}
 80004ae:	46c0      	nop			@ (mov r8, r8)
 80004b0:	ffffff65 	.word	0xffffff65
 80004b4:	b403      	push	{r0, r1}
 80004b6:	4668      	mov	r0, sp
 80004b8:	b501      	push	{r0, lr}
 80004ba:	9802      	ldr	r0, [sp, #8]
 80004bc:	f000 f806 	bl	80004cc <__udivmoddi4>
 80004c0:	9b01      	ldr	r3, [sp, #4]
 80004c2:	469e      	mov	lr, r3
 80004c4:	b002      	add	sp, #8
 80004c6:	bc0c      	pop	{r2, r3}
 80004c8:	4770      	bx	lr
 80004ca:	46c0      	nop			@ (mov r8, r8)

080004cc <__udivmoddi4>:
 80004cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ce:	4657      	mov	r7, sl
 80004d0:	464e      	mov	r6, r9
 80004d2:	4645      	mov	r5, r8
 80004d4:	46de      	mov	lr, fp
 80004d6:	b5e0      	push	{r5, r6, r7, lr}
 80004d8:	0004      	movs	r4, r0
 80004da:	000d      	movs	r5, r1
 80004dc:	4692      	mov	sl, r2
 80004de:	4699      	mov	r9, r3
 80004e0:	b083      	sub	sp, #12
 80004e2:	428b      	cmp	r3, r1
 80004e4:	d830      	bhi.n	8000548 <__udivmoddi4+0x7c>
 80004e6:	d02d      	beq.n	8000544 <__udivmoddi4+0x78>
 80004e8:	4649      	mov	r1, r9
 80004ea:	4650      	mov	r0, sl
 80004ec:	f000 ffac 	bl	8001448 <__clzdi2>
 80004f0:	0029      	movs	r1, r5
 80004f2:	0006      	movs	r6, r0
 80004f4:	0020      	movs	r0, r4
 80004f6:	f000 ffa7 	bl	8001448 <__clzdi2>
 80004fa:	1a33      	subs	r3, r6, r0
 80004fc:	4698      	mov	r8, r3
 80004fe:	3b20      	subs	r3, #32
 8000500:	d434      	bmi.n	800056c <__udivmoddi4+0xa0>
 8000502:	469b      	mov	fp, r3
 8000504:	4653      	mov	r3, sl
 8000506:	465a      	mov	r2, fp
 8000508:	4093      	lsls	r3, r2
 800050a:	4642      	mov	r2, r8
 800050c:	001f      	movs	r7, r3
 800050e:	4653      	mov	r3, sl
 8000510:	4093      	lsls	r3, r2
 8000512:	001e      	movs	r6, r3
 8000514:	42af      	cmp	r7, r5
 8000516:	d83b      	bhi.n	8000590 <__udivmoddi4+0xc4>
 8000518:	42af      	cmp	r7, r5
 800051a:	d100      	bne.n	800051e <__udivmoddi4+0x52>
 800051c:	e079      	b.n	8000612 <__udivmoddi4+0x146>
 800051e:	465b      	mov	r3, fp
 8000520:	1ba4      	subs	r4, r4, r6
 8000522:	41bd      	sbcs	r5, r7
 8000524:	2b00      	cmp	r3, #0
 8000526:	da00      	bge.n	800052a <__udivmoddi4+0x5e>
 8000528:	e076      	b.n	8000618 <__udivmoddi4+0x14c>
 800052a:	2200      	movs	r2, #0
 800052c:	2300      	movs	r3, #0
 800052e:	9200      	str	r2, [sp, #0]
 8000530:	9301      	str	r3, [sp, #4]
 8000532:	2301      	movs	r3, #1
 8000534:	465a      	mov	r2, fp
 8000536:	4093      	lsls	r3, r2
 8000538:	9301      	str	r3, [sp, #4]
 800053a:	2301      	movs	r3, #1
 800053c:	4642      	mov	r2, r8
 800053e:	4093      	lsls	r3, r2
 8000540:	9300      	str	r3, [sp, #0]
 8000542:	e029      	b.n	8000598 <__udivmoddi4+0xcc>
 8000544:	4282      	cmp	r2, r0
 8000546:	d9cf      	bls.n	80004e8 <__udivmoddi4+0x1c>
 8000548:	2200      	movs	r2, #0
 800054a:	2300      	movs	r3, #0
 800054c:	9200      	str	r2, [sp, #0]
 800054e:	9301      	str	r3, [sp, #4]
 8000550:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <__udivmoddi4+0x8e>
 8000556:	601c      	str	r4, [r3, #0]
 8000558:	605d      	str	r5, [r3, #4]
 800055a:	9800      	ldr	r0, [sp, #0]
 800055c:	9901      	ldr	r1, [sp, #4]
 800055e:	b003      	add	sp, #12
 8000560:	bcf0      	pop	{r4, r5, r6, r7}
 8000562:	46bb      	mov	fp, r7
 8000564:	46b2      	mov	sl, r6
 8000566:	46a9      	mov	r9, r5
 8000568:	46a0      	mov	r8, r4
 800056a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800056c:	4642      	mov	r2, r8
 800056e:	469b      	mov	fp, r3
 8000570:	2320      	movs	r3, #32
 8000572:	1a9b      	subs	r3, r3, r2
 8000574:	4652      	mov	r2, sl
 8000576:	40da      	lsrs	r2, r3
 8000578:	4641      	mov	r1, r8
 800057a:	0013      	movs	r3, r2
 800057c:	464a      	mov	r2, r9
 800057e:	408a      	lsls	r2, r1
 8000580:	0017      	movs	r7, r2
 8000582:	4642      	mov	r2, r8
 8000584:	431f      	orrs	r7, r3
 8000586:	4653      	mov	r3, sl
 8000588:	4093      	lsls	r3, r2
 800058a:	001e      	movs	r6, r3
 800058c:	42af      	cmp	r7, r5
 800058e:	d9c3      	bls.n	8000518 <__udivmoddi4+0x4c>
 8000590:	2200      	movs	r2, #0
 8000592:	2300      	movs	r3, #0
 8000594:	9200      	str	r2, [sp, #0]
 8000596:	9301      	str	r3, [sp, #4]
 8000598:	4643      	mov	r3, r8
 800059a:	2b00      	cmp	r3, #0
 800059c:	d0d8      	beq.n	8000550 <__udivmoddi4+0x84>
 800059e:	07fb      	lsls	r3, r7, #31
 80005a0:	0872      	lsrs	r2, r6, #1
 80005a2:	431a      	orrs	r2, r3
 80005a4:	4646      	mov	r6, r8
 80005a6:	087b      	lsrs	r3, r7, #1
 80005a8:	e00e      	b.n	80005c8 <__udivmoddi4+0xfc>
 80005aa:	42ab      	cmp	r3, r5
 80005ac:	d101      	bne.n	80005b2 <__udivmoddi4+0xe6>
 80005ae:	42a2      	cmp	r2, r4
 80005b0:	d80c      	bhi.n	80005cc <__udivmoddi4+0x100>
 80005b2:	1aa4      	subs	r4, r4, r2
 80005b4:	419d      	sbcs	r5, r3
 80005b6:	2001      	movs	r0, #1
 80005b8:	1924      	adds	r4, r4, r4
 80005ba:	416d      	adcs	r5, r5
 80005bc:	2100      	movs	r1, #0
 80005be:	3e01      	subs	r6, #1
 80005c0:	1824      	adds	r4, r4, r0
 80005c2:	414d      	adcs	r5, r1
 80005c4:	2e00      	cmp	r6, #0
 80005c6:	d006      	beq.n	80005d6 <__udivmoddi4+0x10a>
 80005c8:	42ab      	cmp	r3, r5
 80005ca:	d9ee      	bls.n	80005aa <__udivmoddi4+0xde>
 80005cc:	3e01      	subs	r6, #1
 80005ce:	1924      	adds	r4, r4, r4
 80005d0:	416d      	adcs	r5, r5
 80005d2:	2e00      	cmp	r6, #0
 80005d4:	d1f8      	bne.n	80005c8 <__udivmoddi4+0xfc>
 80005d6:	9800      	ldr	r0, [sp, #0]
 80005d8:	9901      	ldr	r1, [sp, #4]
 80005da:	465b      	mov	r3, fp
 80005dc:	1900      	adds	r0, r0, r4
 80005de:	4169      	adcs	r1, r5
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	db24      	blt.n	800062e <__udivmoddi4+0x162>
 80005e4:	002b      	movs	r3, r5
 80005e6:	465a      	mov	r2, fp
 80005e8:	4644      	mov	r4, r8
 80005ea:	40d3      	lsrs	r3, r2
 80005ec:	002a      	movs	r2, r5
 80005ee:	40e2      	lsrs	r2, r4
 80005f0:	001c      	movs	r4, r3
 80005f2:	465b      	mov	r3, fp
 80005f4:	0015      	movs	r5, r2
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	db2a      	blt.n	8000650 <__udivmoddi4+0x184>
 80005fa:	0026      	movs	r6, r4
 80005fc:	409e      	lsls	r6, r3
 80005fe:	0033      	movs	r3, r6
 8000600:	0026      	movs	r6, r4
 8000602:	4647      	mov	r7, r8
 8000604:	40be      	lsls	r6, r7
 8000606:	0032      	movs	r2, r6
 8000608:	1a80      	subs	r0, r0, r2
 800060a:	4199      	sbcs	r1, r3
 800060c:	9000      	str	r0, [sp, #0]
 800060e:	9101      	str	r1, [sp, #4]
 8000610:	e79e      	b.n	8000550 <__udivmoddi4+0x84>
 8000612:	42a3      	cmp	r3, r4
 8000614:	d8bc      	bhi.n	8000590 <__udivmoddi4+0xc4>
 8000616:	e782      	b.n	800051e <__udivmoddi4+0x52>
 8000618:	4642      	mov	r2, r8
 800061a:	2320      	movs	r3, #32
 800061c:	2100      	movs	r1, #0
 800061e:	1a9b      	subs	r3, r3, r2
 8000620:	2200      	movs	r2, #0
 8000622:	9100      	str	r1, [sp, #0]
 8000624:	9201      	str	r2, [sp, #4]
 8000626:	2201      	movs	r2, #1
 8000628:	40da      	lsrs	r2, r3
 800062a:	9201      	str	r2, [sp, #4]
 800062c:	e785      	b.n	800053a <__udivmoddi4+0x6e>
 800062e:	4642      	mov	r2, r8
 8000630:	2320      	movs	r3, #32
 8000632:	1a9b      	subs	r3, r3, r2
 8000634:	002a      	movs	r2, r5
 8000636:	4646      	mov	r6, r8
 8000638:	409a      	lsls	r2, r3
 800063a:	0023      	movs	r3, r4
 800063c:	40f3      	lsrs	r3, r6
 800063e:	4644      	mov	r4, r8
 8000640:	4313      	orrs	r3, r2
 8000642:	002a      	movs	r2, r5
 8000644:	40e2      	lsrs	r2, r4
 8000646:	001c      	movs	r4, r3
 8000648:	465b      	mov	r3, fp
 800064a:	0015      	movs	r5, r2
 800064c:	2b00      	cmp	r3, #0
 800064e:	dad4      	bge.n	80005fa <__udivmoddi4+0x12e>
 8000650:	4642      	mov	r2, r8
 8000652:	002f      	movs	r7, r5
 8000654:	2320      	movs	r3, #32
 8000656:	0026      	movs	r6, r4
 8000658:	4097      	lsls	r7, r2
 800065a:	1a9b      	subs	r3, r3, r2
 800065c:	40de      	lsrs	r6, r3
 800065e:	003b      	movs	r3, r7
 8000660:	4333      	orrs	r3, r6
 8000662:	e7cd      	b.n	8000600 <__udivmoddi4+0x134>

08000664 <__aeabi_fadd>:
 8000664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000666:	46ce      	mov	lr, r9
 8000668:	4647      	mov	r7, r8
 800066a:	0243      	lsls	r3, r0, #9
 800066c:	0a5a      	lsrs	r2, r3, #9
 800066e:	024e      	lsls	r6, r1, #9
 8000670:	0045      	lsls	r5, r0, #1
 8000672:	0fc4      	lsrs	r4, r0, #31
 8000674:	0048      	lsls	r0, r1, #1
 8000676:	4691      	mov	r9, r2
 8000678:	0e2d      	lsrs	r5, r5, #24
 800067a:	0a72      	lsrs	r2, r6, #9
 800067c:	0e00      	lsrs	r0, r0, #24
 800067e:	4694      	mov	ip, r2
 8000680:	b580      	push	{r7, lr}
 8000682:	099b      	lsrs	r3, r3, #6
 8000684:	0fc9      	lsrs	r1, r1, #31
 8000686:	09b6      	lsrs	r6, r6, #6
 8000688:	1a2a      	subs	r2, r5, r0
 800068a:	428c      	cmp	r4, r1
 800068c:	d021      	beq.n	80006d2 <__aeabi_fadd+0x6e>
 800068e:	2a00      	cmp	r2, #0
 8000690:	dd0d      	ble.n	80006ae <__aeabi_fadd+0x4a>
 8000692:	2800      	cmp	r0, #0
 8000694:	d12d      	bne.n	80006f2 <__aeabi_fadd+0x8e>
 8000696:	2e00      	cmp	r6, #0
 8000698:	d100      	bne.n	800069c <__aeabi_fadd+0x38>
 800069a:	e08d      	b.n	80007b8 <__aeabi_fadd+0x154>
 800069c:	1e51      	subs	r1, r2, #1
 800069e:	2a01      	cmp	r2, #1
 80006a0:	d100      	bne.n	80006a4 <__aeabi_fadd+0x40>
 80006a2:	e11d      	b.n	80008e0 <__aeabi_fadd+0x27c>
 80006a4:	2aff      	cmp	r2, #255	@ 0xff
 80006a6:	d100      	bne.n	80006aa <__aeabi_fadd+0x46>
 80006a8:	e0ab      	b.n	8000802 <__aeabi_fadd+0x19e>
 80006aa:	000a      	movs	r2, r1
 80006ac:	e027      	b.n	80006fe <__aeabi_fadd+0x9a>
 80006ae:	2a00      	cmp	r2, #0
 80006b0:	d04d      	beq.n	800074e <__aeabi_fadd+0xea>
 80006b2:	1b42      	subs	r2, r0, r5
 80006b4:	2d00      	cmp	r5, #0
 80006b6:	d000      	beq.n	80006ba <__aeabi_fadd+0x56>
 80006b8:	e0cc      	b.n	8000854 <__aeabi_fadd+0x1f0>
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d100      	bne.n	80006c0 <__aeabi_fadd+0x5c>
 80006be:	e079      	b.n	80007b4 <__aeabi_fadd+0x150>
 80006c0:	1e54      	subs	r4, r2, #1
 80006c2:	2a01      	cmp	r2, #1
 80006c4:	d100      	bne.n	80006c8 <__aeabi_fadd+0x64>
 80006c6:	e128      	b.n	800091a <__aeabi_fadd+0x2b6>
 80006c8:	2aff      	cmp	r2, #255	@ 0xff
 80006ca:	d100      	bne.n	80006ce <__aeabi_fadd+0x6a>
 80006cc:	e097      	b.n	80007fe <__aeabi_fadd+0x19a>
 80006ce:	0022      	movs	r2, r4
 80006d0:	e0c5      	b.n	800085e <__aeabi_fadd+0x1fa>
 80006d2:	2a00      	cmp	r2, #0
 80006d4:	dc00      	bgt.n	80006d8 <__aeabi_fadd+0x74>
 80006d6:	e096      	b.n	8000806 <__aeabi_fadd+0x1a2>
 80006d8:	2800      	cmp	r0, #0
 80006da:	d04f      	beq.n	800077c <__aeabi_fadd+0x118>
 80006dc:	2dff      	cmp	r5, #255	@ 0xff
 80006de:	d100      	bne.n	80006e2 <__aeabi_fadd+0x7e>
 80006e0:	e08f      	b.n	8000802 <__aeabi_fadd+0x19e>
 80006e2:	2180      	movs	r1, #128	@ 0x80
 80006e4:	04c9      	lsls	r1, r1, #19
 80006e6:	430e      	orrs	r6, r1
 80006e8:	2a1b      	cmp	r2, #27
 80006ea:	dd51      	ble.n	8000790 <__aeabi_fadd+0x12c>
 80006ec:	002a      	movs	r2, r5
 80006ee:	3301      	adds	r3, #1
 80006f0:	e018      	b.n	8000724 <__aeabi_fadd+0xc0>
 80006f2:	2dff      	cmp	r5, #255	@ 0xff
 80006f4:	d100      	bne.n	80006f8 <__aeabi_fadd+0x94>
 80006f6:	e084      	b.n	8000802 <__aeabi_fadd+0x19e>
 80006f8:	2180      	movs	r1, #128	@ 0x80
 80006fa:	04c9      	lsls	r1, r1, #19
 80006fc:	430e      	orrs	r6, r1
 80006fe:	2101      	movs	r1, #1
 8000700:	2a1b      	cmp	r2, #27
 8000702:	dc08      	bgt.n	8000716 <__aeabi_fadd+0xb2>
 8000704:	0031      	movs	r1, r6
 8000706:	2020      	movs	r0, #32
 8000708:	40d1      	lsrs	r1, r2
 800070a:	1a82      	subs	r2, r0, r2
 800070c:	4096      	lsls	r6, r2
 800070e:	0032      	movs	r2, r6
 8000710:	1e50      	subs	r0, r2, #1
 8000712:	4182      	sbcs	r2, r0
 8000714:	4311      	orrs	r1, r2
 8000716:	1a5b      	subs	r3, r3, r1
 8000718:	015a      	lsls	r2, r3, #5
 800071a:	d459      	bmi.n	80007d0 <__aeabi_fadd+0x16c>
 800071c:	2107      	movs	r1, #7
 800071e:	002a      	movs	r2, r5
 8000720:	4019      	ands	r1, r3
 8000722:	d049      	beq.n	80007b8 <__aeabi_fadd+0x154>
 8000724:	210f      	movs	r1, #15
 8000726:	4019      	ands	r1, r3
 8000728:	2904      	cmp	r1, #4
 800072a:	d000      	beq.n	800072e <__aeabi_fadd+0xca>
 800072c:	3304      	adds	r3, #4
 800072e:	0159      	lsls	r1, r3, #5
 8000730:	d542      	bpl.n	80007b8 <__aeabi_fadd+0x154>
 8000732:	1c50      	adds	r0, r2, #1
 8000734:	2afe      	cmp	r2, #254	@ 0xfe
 8000736:	d03a      	beq.n	80007ae <__aeabi_fadd+0x14a>
 8000738:	019b      	lsls	r3, r3, #6
 800073a:	b2c0      	uxtb	r0, r0
 800073c:	0a5b      	lsrs	r3, r3, #9
 800073e:	05c0      	lsls	r0, r0, #23
 8000740:	4318      	orrs	r0, r3
 8000742:	07e4      	lsls	r4, r4, #31
 8000744:	4320      	orrs	r0, r4
 8000746:	bcc0      	pop	{r6, r7}
 8000748:	46b9      	mov	r9, r7
 800074a:	46b0      	mov	r8, r6
 800074c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800074e:	20fe      	movs	r0, #254	@ 0xfe
 8000750:	4680      	mov	r8, r0
 8000752:	1c6f      	adds	r7, r5, #1
 8000754:	0038      	movs	r0, r7
 8000756:	4647      	mov	r7, r8
 8000758:	4207      	tst	r7, r0
 800075a:	d000      	beq.n	800075e <__aeabi_fadd+0xfa>
 800075c:	e08e      	b.n	800087c <__aeabi_fadd+0x218>
 800075e:	2d00      	cmp	r5, #0
 8000760:	d000      	beq.n	8000764 <__aeabi_fadd+0x100>
 8000762:	e0b4      	b.n	80008ce <__aeabi_fadd+0x26a>
 8000764:	2b00      	cmp	r3, #0
 8000766:	d100      	bne.n	800076a <__aeabi_fadd+0x106>
 8000768:	e0db      	b.n	8000922 <__aeabi_fadd+0x2be>
 800076a:	2e00      	cmp	r6, #0
 800076c:	d06c      	beq.n	8000848 <__aeabi_fadd+0x1e4>
 800076e:	1b98      	subs	r0, r3, r6
 8000770:	0145      	lsls	r5, r0, #5
 8000772:	d400      	bmi.n	8000776 <__aeabi_fadd+0x112>
 8000774:	e0f7      	b.n	8000966 <__aeabi_fadd+0x302>
 8000776:	000c      	movs	r4, r1
 8000778:	1af3      	subs	r3, r6, r3
 800077a:	e03d      	b.n	80007f8 <__aeabi_fadd+0x194>
 800077c:	2e00      	cmp	r6, #0
 800077e:	d01b      	beq.n	80007b8 <__aeabi_fadd+0x154>
 8000780:	1e51      	subs	r1, r2, #1
 8000782:	2a01      	cmp	r2, #1
 8000784:	d100      	bne.n	8000788 <__aeabi_fadd+0x124>
 8000786:	e082      	b.n	800088e <__aeabi_fadd+0x22a>
 8000788:	2aff      	cmp	r2, #255	@ 0xff
 800078a:	d03a      	beq.n	8000802 <__aeabi_fadd+0x19e>
 800078c:	000a      	movs	r2, r1
 800078e:	e7ab      	b.n	80006e8 <__aeabi_fadd+0x84>
 8000790:	0031      	movs	r1, r6
 8000792:	2020      	movs	r0, #32
 8000794:	40d1      	lsrs	r1, r2
 8000796:	1a82      	subs	r2, r0, r2
 8000798:	4096      	lsls	r6, r2
 800079a:	0032      	movs	r2, r6
 800079c:	1e50      	subs	r0, r2, #1
 800079e:	4182      	sbcs	r2, r0
 80007a0:	430a      	orrs	r2, r1
 80007a2:	189b      	adds	r3, r3, r2
 80007a4:	015a      	lsls	r2, r3, #5
 80007a6:	d5b9      	bpl.n	800071c <__aeabi_fadd+0xb8>
 80007a8:	1c6a      	adds	r2, r5, #1
 80007aa:	2dfe      	cmp	r5, #254	@ 0xfe
 80007ac:	d175      	bne.n	800089a <__aeabi_fadd+0x236>
 80007ae:	20ff      	movs	r0, #255	@ 0xff
 80007b0:	2300      	movs	r3, #0
 80007b2:	e7c4      	b.n	800073e <__aeabi_fadd+0xda>
 80007b4:	000c      	movs	r4, r1
 80007b6:	0033      	movs	r3, r6
 80007b8:	08db      	lsrs	r3, r3, #3
 80007ba:	2aff      	cmp	r2, #255	@ 0xff
 80007bc:	d146      	bne.n	800084c <__aeabi_fadd+0x1e8>
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d0f5      	beq.n	80007ae <__aeabi_fadd+0x14a>
 80007c2:	2280      	movs	r2, #128	@ 0x80
 80007c4:	03d2      	lsls	r2, r2, #15
 80007c6:	4313      	orrs	r3, r2
 80007c8:	025b      	lsls	r3, r3, #9
 80007ca:	20ff      	movs	r0, #255	@ 0xff
 80007cc:	0a5b      	lsrs	r3, r3, #9
 80007ce:	e7b6      	b.n	800073e <__aeabi_fadd+0xda>
 80007d0:	019f      	lsls	r7, r3, #6
 80007d2:	09bf      	lsrs	r7, r7, #6
 80007d4:	0038      	movs	r0, r7
 80007d6:	f000 fe19 	bl	800140c <__clzsi2>
 80007da:	3805      	subs	r0, #5
 80007dc:	4087      	lsls	r7, r0
 80007de:	4285      	cmp	r5, r0
 80007e0:	dc24      	bgt.n	800082c <__aeabi_fadd+0x1c8>
 80007e2:	003b      	movs	r3, r7
 80007e4:	2120      	movs	r1, #32
 80007e6:	1b42      	subs	r2, r0, r5
 80007e8:	3201      	adds	r2, #1
 80007ea:	40d3      	lsrs	r3, r2
 80007ec:	1a8a      	subs	r2, r1, r2
 80007ee:	4097      	lsls	r7, r2
 80007f0:	1e7a      	subs	r2, r7, #1
 80007f2:	4197      	sbcs	r7, r2
 80007f4:	2200      	movs	r2, #0
 80007f6:	433b      	orrs	r3, r7
 80007f8:	0759      	lsls	r1, r3, #29
 80007fa:	d193      	bne.n	8000724 <__aeabi_fadd+0xc0>
 80007fc:	e797      	b.n	800072e <__aeabi_fadd+0xca>
 80007fe:	000c      	movs	r4, r1
 8000800:	0033      	movs	r3, r6
 8000802:	08db      	lsrs	r3, r3, #3
 8000804:	e7db      	b.n	80007be <__aeabi_fadd+0x15a>
 8000806:	2a00      	cmp	r2, #0
 8000808:	d014      	beq.n	8000834 <__aeabi_fadd+0x1d0>
 800080a:	1b42      	subs	r2, r0, r5
 800080c:	2d00      	cmp	r5, #0
 800080e:	d14b      	bne.n	80008a8 <__aeabi_fadd+0x244>
 8000810:	2b00      	cmp	r3, #0
 8000812:	d0d0      	beq.n	80007b6 <__aeabi_fadd+0x152>
 8000814:	1e51      	subs	r1, r2, #1
 8000816:	2a01      	cmp	r2, #1
 8000818:	d100      	bne.n	800081c <__aeabi_fadd+0x1b8>
 800081a:	e09e      	b.n	800095a <__aeabi_fadd+0x2f6>
 800081c:	2aff      	cmp	r2, #255	@ 0xff
 800081e:	d0ef      	beq.n	8000800 <__aeabi_fadd+0x19c>
 8000820:	000a      	movs	r2, r1
 8000822:	2a1b      	cmp	r2, #27
 8000824:	dd5f      	ble.n	80008e6 <__aeabi_fadd+0x282>
 8000826:	0002      	movs	r2, r0
 8000828:	1c73      	adds	r3, r6, #1
 800082a:	e77b      	b.n	8000724 <__aeabi_fadd+0xc0>
 800082c:	4b50      	ldr	r3, [pc, #320]	@ (8000970 <__aeabi_fadd+0x30c>)
 800082e:	1a2a      	subs	r2, r5, r0
 8000830:	403b      	ands	r3, r7
 8000832:	e7e1      	b.n	80007f8 <__aeabi_fadd+0x194>
 8000834:	21fe      	movs	r1, #254	@ 0xfe
 8000836:	1c6a      	adds	r2, r5, #1
 8000838:	4211      	tst	r1, r2
 800083a:	d13b      	bne.n	80008b4 <__aeabi_fadd+0x250>
 800083c:	2d00      	cmp	r5, #0
 800083e:	d15d      	bne.n	80008fc <__aeabi_fadd+0x298>
 8000840:	2b00      	cmp	r3, #0
 8000842:	d07f      	beq.n	8000944 <__aeabi_fadd+0x2e0>
 8000844:	2e00      	cmp	r6, #0
 8000846:	d17f      	bne.n	8000948 <__aeabi_fadd+0x2e4>
 8000848:	2200      	movs	r2, #0
 800084a:	08db      	lsrs	r3, r3, #3
 800084c:	025b      	lsls	r3, r3, #9
 800084e:	0a5b      	lsrs	r3, r3, #9
 8000850:	b2d0      	uxtb	r0, r2
 8000852:	e774      	b.n	800073e <__aeabi_fadd+0xda>
 8000854:	28ff      	cmp	r0, #255	@ 0xff
 8000856:	d0d2      	beq.n	80007fe <__aeabi_fadd+0x19a>
 8000858:	2480      	movs	r4, #128	@ 0x80
 800085a:	04e4      	lsls	r4, r4, #19
 800085c:	4323      	orrs	r3, r4
 800085e:	2401      	movs	r4, #1
 8000860:	2a1b      	cmp	r2, #27
 8000862:	dc07      	bgt.n	8000874 <__aeabi_fadd+0x210>
 8000864:	001c      	movs	r4, r3
 8000866:	2520      	movs	r5, #32
 8000868:	40d4      	lsrs	r4, r2
 800086a:	1aaa      	subs	r2, r5, r2
 800086c:	4093      	lsls	r3, r2
 800086e:	1e5a      	subs	r2, r3, #1
 8000870:	4193      	sbcs	r3, r2
 8000872:	431c      	orrs	r4, r3
 8000874:	1b33      	subs	r3, r6, r4
 8000876:	0005      	movs	r5, r0
 8000878:	000c      	movs	r4, r1
 800087a:	e74d      	b.n	8000718 <__aeabi_fadd+0xb4>
 800087c:	1b9f      	subs	r7, r3, r6
 800087e:	017a      	lsls	r2, r7, #5
 8000880:	d422      	bmi.n	80008c8 <__aeabi_fadd+0x264>
 8000882:	2f00      	cmp	r7, #0
 8000884:	d1a6      	bne.n	80007d4 <__aeabi_fadd+0x170>
 8000886:	2400      	movs	r4, #0
 8000888:	2000      	movs	r0, #0
 800088a:	2300      	movs	r3, #0
 800088c:	e757      	b.n	800073e <__aeabi_fadd+0xda>
 800088e:	199b      	adds	r3, r3, r6
 8000890:	2501      	movs	r5, #1
 8000892:	3201      	adds	r2, #1
 8000894:	0159      	lsls	r1, r3, #5
 8000896:	d400      	bmi.n	800089a <__aeabi_fadd+0x236>
 8000898:	e740      	b.n	800071c <__aeabi_fadd+0xb8>
 800089a:	2101      	movs	r1, #1
 800089c:	4835      	ldr	r0, [pc, #212]	@ (8000974 <__aeabi_fadd+0x310>)
 800089e:	4019      	ands	r1, r3
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	4003      	ands	r3, r0
 80008a4:	430b      	orrs	r3, r1
 80008a6:	e7a7      	b.n	80007f8 <__aeabi_fadd+0x194>
 80008a8:	28ff      	cmp	r0, #255	@ 0xff
 80008aa:	d0a9      	beq.n	8000800 <__aeabi_fadd+0x19c>
 80008ac:	2180      	movs	r1, #128	@ 0x80
 80008ae:	04c9      	lsls	r1, r1, #19
 80008b0:	430b      	orrs	r3, r1
 80008b2:	e7b6      	b.n	8000822 <__aeabi_fadd+0x1be>
 80008b4:	2aff      	cmp	r2, #255	@ 0xff
 80008b6:	d100      	bne.n	80008ba <__aeabi_fadd+0x256>
 80008b8:	e779      	b.n	80007ae <__aeabi_fadd+0x14a>
 80008ba:	199b      	adds	r3, r3, r6
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	0759      	lsls	r1, r3, #29
 80008c0:	d000      	beq.n	80008c4 <__aeabi_fadd+0x260>
 80008c2:	e72f      	b.n	8000724 <__aeabi_fadd+0xc0>
 80008c4:	08db      	lsrs	r3, r3, #3
 80008c6:	e7c1      	b.n	800084c <__aeabi_fadd+0x1e8>
 80008c8:	000c      	movs	r4, r1
 80008ca:	1af7      	subs	r7, r6, r3
 80008cc:	e782      	b.n	80007d4 <__aeabi_fadd+0x170>
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d12c      	bne.n	800092c <__aeabi_fadd+0x2c8>
 80008d2:	2e00      	cmp	r6, #0
 80008d4:	d193      	bne.n	80007fe <__aeabi_fadd+0x19a>
 80008d6:	2380      	movs	r3, #128	@ 0x80
 80008d8:	2400      	movs	r4, #0
 80008da:	20ff      	movs	r0, #255	@ 0xff
 80008dc:	03db      	lsls	r3, r3, #15
 80008de:	e72e      	b.n	800073e <__aeabi_fadd+0xda>
 80008e0:	2501      	movs	r5, #1
 80008e2:	1b9b      	subs	r3, r3, r6
 80008e4:	e718      	b.n	8000718 <__aeabi_fadd+0xb4>
 80008e6:	0019      	movs	r1, r3
 80008e8:	2520      	movs	r5, #32
 80008ea:	40d1      	lsrs	r1, r2
 80008ec:	1aaa      	subs	r2, r5, r2
 80008ee:	4093      	lsls	r3, r2
 80008f0:	1e5a      	subs	r2, r3, #1
 80008f2:	4193      	sbcs	r3, r2
 80008f4:	430b      	orrs	r3, r1
 80008f6:	0005      	movs	r5, r0
 80008f8:	199b      	adds	r3, r3, r6
 80008fa:	e753      	b.n	80007a4 <__aeabi_fadd+0x140>
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d100      	bne.n	8000902 <__aeabi_fadd+0x29e>
 8000900:	e77e      	b.n	8000800 <__aeabi_fadd+0x19c>
 8000902:	2e00      	cmp	r6, #0
 8000904:	d100      	bne.n	8000908 <__aeabi_fadd+0x2a4>
 8000906:	e77c      	b.n	8000802 <__aeabi_fadd+0x19e>
 8000908:	2280      	movs	r2, #128	@ 0x80
 800090a:	03d2      	lsls	r2, r2, #15
 800090c:	4591      	cmp	r9, r2
 800090e:	d302      	bcc.n	8000916 <__aeabi_fadd+0x2b2>
 8000910:	4594      	cmp	ip, r2
 8000912:	d200      	bcs.n	8000916 <__aeabi_fadd+0x2b2>
 8000914:	0033      	movs	r3, r6
 8000916:	08db      	lsrs	r3, r3, #3
 8000918:	e753      	b.n	80007c2 <__aeabi_fadd+0x15e>
 800091a:	000c      	movs	r4, r1
 800091c:	1af3      	subs	r3, r6, r3
 800091e:	3501      	adds	r5, #1
 8000920:	e6fa      	b.n	8000718 <__aeabi_fadd+0xb4>
 8000922:	2e00      	cmp	r6, #0
 8000924:	d0af      	beq.n	8000886 <__aeabi_fadd+0x222>
 8000926:	000c      	movs	r4, r1
 8000928:	0033      	movs	r3, r6
 800092a:	e78d      	b.n	8000848 <__aeabi_fadd+0x1e4>
 800092c:	2e00      	cmp	r6, #0
 800092e:	d100      	bne.n	8000932 <__aeabi_fadd+0x2ce>
 8000930:	e767      	b.n	8000802 <__aeabi_fadd+0x19e>
 8000932:	2280      	movs	r2, #128	@ 0x80
 8000934:	03d2      	lsls	r2, r2, #15
 8000936:	4591      	cmp	r9, r2
 8000938:	d3ed      	bcc.n	8000916 <__aeabi_fadd+0x2b2>
 800093a:	4594      	cmp	ip, r2
 800093c:	d2eb      	bcs.n	8000916 <__aeabi_fadd+0x2b2>
 800093e:	000c      	movs	r4, r1
 8000940:	0033      	movs	r3, r6
 8000942:	e7e8      	b.n	8000916 <__aeabi_fadd+0x2b2>
 8000944:	0033      	movs	r3, r6
 8000946:	e77f      	b.n	8000848 <__aeabi_fadd+0x1e4>
 8000948:	199b      	adds	r3, r3, r6
 800094a:	2200      	movs	r2, #0
 800094c:	0159      	lsls	r1, r3, #5
 800094e:	d5b9      	bpl.n	80008c4 <__aeabi_fadd+0x260>
 8000950:	4a07      	ldr	r2, [pc, #28]	@ (8000970 <__aeabi_fadd+0x30c>)
 8000952:	4013      	ands	r3, r2
 8000954:	08db      	lsrs	r3, r3, #3
 8000956:	2201      	movs	r2, #1
 8000958:	e778      	b.n	800084c <__aeabi_fadd+0x1e8>
 800095a:	199b      	adds	r3, r3, r6
 800095c:	3201      	adds	r2, #1
 800095e:	3501      	adds	r5, #1
 8000960:	0159      	lsls	r1, r3, #5
 8000962:	d49a      	bmi.n	800089a <__aeabi_fadd+0x236>
 8000964:	e6da      	b.n	800071c <__aeabi_fadd+0xb8>
 8000966:	1e03      	subs	r3, r0, #0
 8000968:	d08d      	beq.n	8000886 <__aeabi_fadd+0x222>
 800096a:	08db      	lsrs	r3, r3, #3
 800096c:	e76e      	b.n	800084c <__aeabi_fadd+0x1e8>
 800096e:	46c0      	nop			@ (mov r8, r8)
 8000970:	fbffffff 	.word	0xfbffffff
 8000974:	7dffffff 	.word	0x7dffffff

08000978 <__aeabi_fdiv>:
 8000978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800097a:	464f      	mov	r7, r9
 800097c:	4646      	mov	r6, r8
 800097e:	46d6      	mov	lr, sl
 8000980:	0244      	lsls	r4, r0, #9
 8000982:	b5c0      	push	{r6, r7, lr}
 8000984:	0047      	lsls	r7, r0, #1
 8000986:	1c0e      	adds	r6, r1, #0
 8000988:	0a64      	lsrs	r4, r4, #9
 800098a:	0e3f      	lsrs	r7, r7, #24
 800098c:	0fc5      	lsrs	r5, r0, #31
 800098e:	2f00      	cmp	r7, #0
 8000990:	d03c      	beq.n	8000a0c <__aeabi_fdiv+0x94>
 8000992:	2fff      	cmp	r7, #255	@ 0xff
 8000994:	d042      	beq.n	8000a1c <__aeabi_fdiv+0xa4>
 8000996:	2300      	movs	r3, #0
 8000998:	2280      	movs	r2, #128	@ 0x80
 800099a:	4699      	mov	r9, r3
 800099c:	469a      	mov	sl, r3
 800099e:	00e4      	lsls	r4, r4, #3
 80009a0:	04d2      	lsls	r2, r2, #19
 80009a2:	4314      	orrs	r4, r2
 80009a4:	3f7f      	subs	r7, #127	@ 0x7f
 80009a6:	0273      	lsls	r3, r6, #9
 80009a8:	0a5b      	lsrs	r3, r3, #9
 80009aa:	4698      	mov	r8, r3
 80009ac:	0073      	lsls	r3, r6, #1
 80009ae:	0e1b      	lsrs	r3, r3, #24
 80009b0:	0ff6      	lsrs	r6, r6, #31
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d01b      	beq.n	80009ee <__aeabi_fdiv+0x76>
 80009b6:	2bff      	cmp	r3, #255	@ 0xff
 80009b8:	d013      	beq.n	80009e2 <__aeabi_fdiv+0x6a>
 80009ba:	4642      	mov	r2, r8
 80009bc:	2180      	movs	r1, #128	@ 0x80
 80009be:	00d2      	lsls	r2, r2, #3
 80009c0:	04c9      	lsls	r1, r1, #19
 80009c2:	4311      	orrs	r1, r2
 80009c4:	4688      	mov	r8, r1
 80009c6:	2000      	movs	r0, #0
 80009c8:	3b7f      	subs	r3, #127	@ 0x7f
 80009ca:	0029      	movs	r1, r5
 80009cc:	1aff      	subs	r7, r7, r3
 80009ce:	464b      	mov	r3, r9
 80009d0:	4071      	eors	r1, r6
 80009d2:	b2c9      	uxtb	r1, r1
 80009d4:	2b0f      	cmp	r3, #15
 80009d6:	d900      	bls.n	80009da <__aeabi_fdiv+0x62>
 80009d8:	e0b5      	b.n	8000b46 <__aeabi_fdiv+0x1ce>
 80009da:	4a74      	ldr	r2, [pc, #464]	@ (8000bac <__aeabi_fdiv+0x234>)
 80009dc:	009b      	lsls	r3, r3, #2
 80009de:	58d3      	ldr	r3, [r2, r3]
 80009e0:	469f      	mov	pc, r3
 80009e2:	4643      	mov	r3, r8
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d13f      	bne.n	8000a68 <__aeabi_fdiv+0xf0>
 80009e8:	3fff      	subs	r7, #255	@ 0xff
 80009ea:	3302      	adds	r3, #2
 80009ec:	e003      	b.n	80009f6 <__aeabi_fdiv+0x7e>
 80009ee:	4643      	mov	r3, r8
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d12d      	bne.n	8000a50 <__aeabi_fdiv+0xd8>
 80009f4:	2301      	movs	r3, #1
 80009f6:	0029      	movs	r1, r5
 80009f8:	464a      	mov	r2, r9
 80009fa:	4071      	eors	r1, r6
 80009fc:	b2c9      	uxtb	r1, r1
 80009fe:	431a      	orrs	r2, r3
 8000a00:	2a0e      	cmp	r2, #14
 8000a02:	d838      	bhi.n	8000a76 <__aeabi_fdiv+0xfe>
 8000a04:	486a      	ldr	r0, [pc, #424]	@ (8000bb0 <__aeabi_fdiv+0x238>)
 8000a06:	0092      	lsls	r2, r2, #2
 8000a08:	5882      	ldr	r2, [r0, r2]
 8000a0a:	4697      	mov	pc, r2
 8000a0c:	2c00      	cmp	r4, #0
 8000a0e:	d113      	bne.n	8000a38 <__aeabi_fdiv+0xc0>
 8000a10:	2304      	movs	r3, #4
 8000a12:	4699      	mov	r9, r3
 8000a14:	3b03      	subs	r3, #3
 8000a16:	2700      	movs	r7, #0
 8000a18:	469a      	mov	sl, r3
 8000a1a:	e7c4      	b.n	80009a6 <__aeabi_fdiv+0x2e>
 8000a1c:	2c00      	cmp	r4, #0
 8000a1e:	d105      	bne.n	8000a2c <__aeabi_fdiv+0xb4>
 8000a20:	2308      	movs	r3, #8
 8000a22:	4699      	mov	r9, r3
 8000a24:	3b06      	subs	r3, #6
 8000a26:	27ff      	movs	r7, #255	@ 0xff
 8000a28:	469a      	mov	sl, r3
 8000a2a:	e7bc      	b.n	80009a6 <__aeabi_fdiv+0x2e>
 8000a2c:	230c      	movs	r3, #12
 8000a2e:	4699      	mov	r9, r3
 8000a30:	3b09      	subs	r3, #9
 8000a32:	27ff      	movs	r7, #255	@ 0xff
 8000a34:	469a      	mov	sl, r3
 8000a36:	e7b6      	b.n	80009a6 <__aeabi_fdiv+0x2e>
 8000a38:	0020      	movs	r0, r4
 8000a3a:	f000 fce7 	bl	800140c <__clzsi2>
 8000a3e:	2776      	movs	r7, #118	@ 0x76
 8000a40:	1f43      	subs	r3, r0, #5
 8000a42:	409c      	lsls	r4, r3
 8000a44:	2300      	movs	r3, #0
 8000a46:	427f      	negs	r7, r7
 8000a48:	4699      	mov	r9, r3
 8000a4a:	469a      	mov	sl, r3
 8000a4c:	1a3f      	subs	r7, r7, r0
 8000a4e:	e7aa      	b.n	80009a6 <__aeabi_fdiv+0x2e>
 8000a50:	4640      	mov	r0, r8
 8000a52:	f000 fcdb 	bl	800140c <__clzsi2>
 8000a56:	4642      	mov	r2, r8
 8000a58:	1f43      	subs	r3, r0, #5
 8000a5a:	409a      	lsls	r2, r3
 8000a5c:	2376      	movs	r3, #118	@ 0x76
 8000a5e:	425b      	negs	r3, r3
 8000a60:	1a1b      	subs	r3, r3, r0
 8000a62:	4690      	mov	r8, r2
 8000a64:	2000      	movs	r0, #0
 8000a66:	e7b0      	b.n	80009ca <__aeabi_fdiv+0x52>
 8000a68:	2303      	movs	r3, #3
 8000a6a:	464a      	mov	r2, r9
 8000a6c:	431a      	orrs	r2, r3
 8000a6e:	4691      	mov	r9, r2
 8000a70:	2003      	movs	r0, #3
 8000a72:	33fc      	adds	r3, #252	@ 0xfc
 8000a74:	e7a9      	b.n	80009ca <__aeabi_fdiv+0x52>
 8000a76:	000d      	movs	r5, r1
 8000a78:	20ff      	movs	r0, #255	@ 0xff
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	05c0      	lsls	r0, r0, #23
 8000a7e:	07ed      	lsls	r5, r5, #31
 8000a80:	4310      	orrs	r0, r2
 8000a82:	4328      	orrs	r0, r5
 8000a84:	bce0      	pop	{r5, r6, r7}
 8000a86:	46ba      	mov	sl, r7
 8000a88:	46b1      	mov	r9, r6
 8000a8a:	46a8      	mov	r8, r5
 8000a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a8e:	000d      	movs	r5, r1
 8000a90:	2000      	movs	r0, #0
 8000a92:	2200      	movs	r2, #0
 8000a94:	e7f2      	b.n	8000a7c <__aeabi_fdiv+0x104>
 8000a96:	4653      	mov	r3, sl
 8000a98:	2b02      	cmp	r3, #2
 8000a9a:	d0ed      	beq.n	8000a78 <__aeabi_fdiv+0x100>
 8000a9c:	2b03      	cmp	r3, #3
 8000a9e:	d033      	beq.n	8000b08 <__aeabi_fdiv+0x190>
 8000aa0:	46a0      	mov	r8, r4
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	d105      	bne.n	8000ab2 <__aeabi_fdiv+0x13a>
 8000aa6:	2000      	movs	r0, #0
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	e7e7      	b.n	8000a7c <__aeabi_fdiv+0x104>
 8000aac:	0035      	movs	r5, r6
 8000aae:	2803      	cmp	r0, #3
 8000ab0:	d07a      	beq.n	8000ba8 <__aeabi_fdiv+0x230>
 8000ab2:	003b      	movs	r3, r7
 8000ab4:	337f      	adds	r3, #127	@ 0x7f
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	dd2d      	ble.n	8000b16 <__aeabi_fdiv+0x19e>
 8000aba:	4642      	mov	r2, r8
 8000abc:	0752      	lsls	r2, r2, #29
 8000abe:	d007      	beq.n	8000ad0 <__aeabi_fdiv+0x158>
 8000ac0:	220f      	movs	r2, #15
 8000ac2:	4641      	mov	r1, r8
 8000ac4:	400a      	ands	r2, r1
 8000ac6:	2a04      	cmp	r2, #4
 8000ac8:	d002      	beq.n	8000ad0 <__aeabi_fdiv+0x158>
 8000aca:	2204      	movs	r2, #4
 8000acc:	4694      	mov	ip, r2
 8000ace:	44e0      	add	r8, ip
 8000ad0:	4642      	mov	r2, r8
 8000ad2:	0112      	lsls	r2, r2, #4
 8000ad4:	d505      	bpl.n	8000ae2 <__aeabi_fdiv+0x16a>
 8000ad6:	4642      	mov	r2, r8
 8000ad8:	4b36      	ldr	r3, [pc, #216]	@ (8000bb4 <__aeabi_fdiv+0x23c>)
 8000ada:	401a      	ands	r2, r3
 8000adc:	003b      	movs	r3, r7
 8000ade:	4690      	mov	r8, r2
 8000ae0:	3380      	adds	r3, #128	@ 0x80
 8000ae2:	2bfe      	cmp	r3, #254	@ 0xfe
 8000ae4:	dcc8      	bgt.n	8000a78 <__aeabi_fdiv+0x100>
 8000ae6:	4642      	mov	r2, r8
 8000ae8:	0192      	lsls	r2, r2, #6
 8000aea:	0a52      	lsrs	r2, r2, #9
 8000aec:	b2d8      	uxtb	r0, r3
 8000aee:	e7c5      	b.n	8000a7c <__aeabi_fdiv+0x104>
 8000af0:	2280      	movs	r2, #128	@ 0x80
 8000af2:	2500      	movs	r5, #0
 8000af4:	20ff      	movs	r0, #255	@ 0xff
 8000af6:	03d2      	lsls	r2, r2, #15
 8000af8:	e7c0      	b.n	8000a7c <__aeabi_fdiv+0x104>
 8000afa:	2280      	movs	r2, #128	@ 0x80
 8000afc:	03d2      	lsls	r2, r2, #15
 8000afe:	4214      	tst	r4, r2
 8000b00:	d002      	beq.n	8000b08 <__aeabi_fdiv+0x190>
 8000b02:	4643      	mov	r3, r8
 8000b04:	4213      	tst	r3, r2
 8000b06:	d049      	beq.n	8000b9c <__aeabi_fdiv+0x224>
 8000b08:	2280      	movs	r2, #128	@ 0x80
 8000b0a:	03d2      	lsls	r2, r2, #15
 8000b0c:	4322      	orrs	r2, r4
 8000b0e:	0252      	lsls	r2, r2, #9
 8000b10:	20ff      	movs	r0, #255	@ 0xff
 8000b12:	0a52      	lsrs	r2, r2, #9
 8000b14:	e7b2      	b.n	8000a7c <__aeabi_fdiv+0x104>
 8000b16:	2201      	movs	r2, #1
 8000b18:	1ad3      	subs	r3, r2, r3
 8000b1a:	2b1b      	cmp	r3, #27
 8000b1c:	dcc3      	bgt.n	8000aa6 <__aeabi_fdiv+0x12e>
 8000b1e:	4642      	mov	r2, r8
 8000b20:	40da      	lsrs	r2, r3
 8000b22:	4643      	mov	r3, r8
 8000b24:	379e      	adds	r7, #158	@ 0x9e
 8000b26:	40bb      	lsls	r3, r7
 8000b28:	1e59      	subs	r1, r3, #1
 8000b2a:	418b      	sbcs	r3, r1
 8000b2c:	431a      	orrs	r2, r3
 8000b2e:	0753      	lsls	r3, r2, #29
 8000b30:	d004      	beq.n	8000b3c <__aeabi_fdiv+0x1c4>
 8000b32:	230f      	movs	r3, #15
 8000b34:	4013      	ands	r3, r2
 8000b36:	2b04      	cmp	r3, #4
 8000b38:	d000      	beq.n	8000b3c <__aeabi_fdiv+0x1c4>
 8000b3a:	3204      	adds	r2, #4
 8000b3c:	0153      	lsls	r3, r2, #5
 8000b3e:	d529      	bpl.n	8000b94 <__aeabi_fdiv+0x21c>
 8000b40:	2001      	movs	r0, #1
 8000b42:	2200      	movs	r2, #0
 8000b44:	e79a      	b.n	8000a7c <__aeabi_fdiv+0x104>
 8000b46:	4642      	mov	r2, r8
 8000b48:	0163      	lsls	r3, r4, #5
 8000b4a:	0155      	lsls	r5, r2, #5
 8000b4c:	42ab      	cmp	r3, r5
 8000b4e:	d215      	bcs.n	8000b7c <__aeabi_fdiv+0x204>
 8000b50:	201b      	movs	r0, #27
 8000b52:	2200      	movs	r2, #0
 8000b54:	3f01      	subs	r7, #1
 8000b56:	2601      	movs	r6, #1
 8000b58:	001c      	movs	r4, r3
 8000b5a:	0052      	lsls	r2, r2, #1
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	2c00      	cmp	r4, #0
 8000b60:	db01      	blt.n	8000b66 <__aeabi_fdiv+0x1ee>
 8000b62:	429d      	cmp	r5, r3
 8000b64:	d801      	bhi.n	8000b6a <__aeabi_fdiv+0x1f2>
 8000b66:	1b5b      	subs	r3, r3, r5
 8000b68:	4332      	orrs	r2, r6
 8000b6a:	3801      	subs	r0, #1
 8000b6c:	2800      	cmp	r0, #0
 8000b6e:	d1f3      	bne.n	8000b58 <__aeabi_fdiv+0x1e0>
 8000b70:	1e58      	subs	r0, r3, #1
 8000b72:	4183      	sbcs	r3, r0
 8000b74:	4313      	orrs	r3, r2
 8000b76:	4698      	mov	r8, r3
 8000b78:	000d      	movs	r5, r1
 8000b7a:	e79a      	b.n	8000ab2 <__aeabi_fdiv+0x13a>
 8000b7c:	201a      	movs	r0, #26
 8000b7e:	2201      	movs	r2, #1
 8000b80:	1b5b      	subs	r3, r3, r5
 8000b82:	e7e8      	b.n	8000b56 <__aeabi_fdiv+0x1de>
 8000b84:	3b02      	subs	r3, #2
 8000b86:	425a      	negs	r2, r3
 8000b88:	4153      	adcs	r3, r2
 8000b8a:	425b      	negs	r3, r3
 8000b8c:	0035      	movs	r5, r6
 8000b8e:	2200      	movs	r2, #0
 8000b90:	b2d8      	uxtb	r0, r3
 8000b92:	e773      	b.n	8000a7c <__aeabi_fdiv+0x104>
 8000b94:	0192      	lsls	r2, r2, #6
 8000b96:	2000      	movs	r0, #0
 8000b98:	0a52      	lsrs	r2, r2, #9
 8000b9a:	e76f      	b.n	8000a7c <__aeabi_fdiv+0x104>
 8000b9c:	431a      	orrs	r2, r3
 8000b9e:	0252      	lsls	r2, r2, #9
 8000ba0:	0035      	movs	r5, r6
 8000ba2:	20ff      	movs	r0, #255	@ 0xff
 8000ba4:	0a52      	lsrs	r2, r2, #9
 8000ba6:	e769      	b.n	8000a7c <__aeabi_fdiv+0x104>
 8000ba8:	4644      	mov	r4, r8
 8000baa:	e7ad      	b.n	8000b08 <__aeabi_fdiv+0x190>
 8000bac:	0800698c 	.word	0x0800698c
 8000bb0:	080069cc 	.word	0x080069cc
 8000bb4:	f7ffffff 	.word	0xf7ffffff

08000bb8 <__eqsf2>:
 8000bb8:	b570      	push	{r4, r5, r6, lr}
 8000bba:	0042      	lsls	r2, r0, #1
 8000bbc:	024e      	lsls	r6, r1, #9
 8000bbe:	004c      	lsls	r4, r1, #1
 8000bc0:	0245      	lsls	r5, r0, #9
 8000bc2:	0a6d      	lsrs	r5, r5, #9
 8000bc4:	0e12      	lsrs	r2, r2, #24
 8000bc6:	0fc3      	lsrs	r3, r0, #31
 8000bc8:	0a76      	lsrs	r6, r6, #9
 8000bca:	0e24      	lsrs	r4, r4, #24
 8000bcc:	0fc9      	lsrs	r1, r1, #31
 8000bce:	2aff      	cmp	r2, #255	@ 0xff
 8000bd0:	d010      	beq.n	8000bf4 <__eqsf2+0x3c>
 8000bd2:	2cff      	cmp	r4, #255	@ 0xff
 8000bd4:	d00c      	beq.n	8000bf0 <__eqsf2+0x38>
 8000bd6:	2001      	movs	r0, #1
 8000bd8:	42a2      	cmp	r2, r4
 8000bda:	d10a      	bne.n	8000bf2 <__eqsf2+0x3a>
 8000bdc:	42b5      	cmp	r5, r6
 8000bde:	d108      	bne.n	8000bf2 <__eqsf2+0x3a>
 8000be0:	428b      	cmp	r3, r1
 8000be2:	d00f      	beq.n	8000c04 <__eqsf2+0x4c>
 8000be4:	2a00      	cmp	r2, #0
 8000be6:	d104      	bne.n	8000bf2 <__eqsf2+0x3a>
 8000be8:	0028      	movs	r0, r5
 8000bea:	1e43      	subs	r3, r0, #1
 8000bec:	4198      	sbcs	r0, r3
 8000bee:	e000      	b.n	8000bf2 <__eqsf2+0x3a>
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	bd70      	pop	{r4, r5, r6, pc}
 8000bf4:	2001      	movs	r0, #1
 8000bf6:	2cff      	cmp	r4, #255	@ 0xff
 8000bf8:	d1fb      	bne.n	8000bf2 <__eqsf2+0x3a>
 8000bfa:	4335      	orrs	r5, r6
 8000bfc:	d1f9      	bne.n	8000bf2 <__eqsf2+0x3a>
 8000bfe:	404b      	eors	r3, r1
 8000c00:	0018      	movs	r0, r3
 8000c02:	e7f6      	b.n	8000bf2 <__eqsf2+0x3a>
 8000c04:	2000      	movs	r0, #0
 8000c06:	e7f4      	b.n	8000bf2 <__eqsf2+0x3a>

08000c08 <__gesf2>:
 8000c08:	b530      	push	{r4, r5, lr}
 8000c0a:	0042      	lsls	r2, r0, #1
 8000c0c:	0244      	lsls	r4, r0, #9
 8000c0e:	024d      	lsls	r5, r1, #9
 8000c10:	0fc3      	lsrs	r3, r0, #31
 8000c12:	0048      	lsls	r0, r1, #1
 8000c14:	0a64      	lsrs	r4, r4, #9
 8000c16:	0e12      	lsrs	r2, r2, #24
 8000c18:	0a6d      	lsrs	r5, r5, #9
 8000c1a:	0e00      	lsrs	r0, r0, #24
 8000c1c:	0fc9      	lsrs	r1, r1, #31
 8000c1e:	2aff      	cmp	r2, #255	@ 0xff
 8000c20:	d019      	beq.n	8000c56 <__gesf2+0x4e>
 8000c22:	28ff      	cmp	r0, #255	@ 0xff
 8000c24:	d00b      	beq.n	8000c3e <__gesf2+0x36>
 8000c26:	2a00      	cmp	r2, #0
 8000c28:	d11e      	bne.n	8000c68 <__gesf2+0x60>
 8000c2a:	2800      	cmp	r0, #0
 8000c2c:	d10b      	bne.n	8000c46 <__gesf2+0x3e>
 8000c2e:	2d00      	cmp	r5, #0
 8000c30:	d027      	beq.n	8000c82 <__gesf2+0x7a>
 8000c32:	2c00      	cmp	r4, #0
 8000c34:	d134      	bne.n	8000ca0 <__gesf2+0x98>
 8000c36:	2900      	cmp	r1, #0
 8000c38:	d02f      	beq.n	8000c9a <__gesf2+0x92>
 8000c3a:	0008      	movs	r0, r1
 8000c3c:	bd30      	pop	{r4, r5, pc}
 8000c3e:	2d00      	cmp	r5, #0
 8000c40:	d128      	bne.n	8000c94 <__gesf2+0x8c>
 8000c42:	2a00      	cmp	r2, #0
 8000c44:	d101      	bne.n	8000c4a <__gesf2+0x42>
 8000c46:	2c00      	cmp	r4, #0
 8000c48:	d0f5      	beq.n	8000c36 <__gesf2+0x2e>
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d107      	bne.n	8000c5e <__gesf2+0x56>
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d023      	beq.n	8000c9a <__gesf2+0x92>
 8000c52:	0018      	movs	r0, r3
 8000c54:	e7f2      	b.n	8000c3c <__gesf2+0x34>
 8000c56:	2c00      	cmp	r4, #0
 8000c58:	d11c      	bne.n	8000c94 <__gesf2+0x8c>
 8000c5a:	28ff      	cmp	r0, #255	@ 0xff
 8000c5c:	d014      	beq.n	8000c88 <__gesf2+0x80>
 8000c5e:	1e58      	subs	r0, r3, #1
 8000c60:	2302      	movs	r3, #2
 8000c62:	4018      	ands	r0, r3
 8000c64:	3801      	subs	r0, #1
 8000c66:	e7e9      	b.n	8000c3c <__gesf2+0x34>
 8000c68:	2800      	cmp	r0, #0
 8000c6a:	d0f8      	beq.n	8000c5e <__gesf2+0x56>
 8000c6c:	428b      	cmp	r3, r1
 8000c6e:	d1f6      	bne.n	8000c5e <__gesf2+0x56>
 8000c70:	4282      	cmp	r2, r0
 8000c72:	dcf4      	bgt.n	8000c5e <__gesf2+0x56>
 8000c74:	dbeb      	blt.n	8000c4e <__gesf2+0x46>
 8000c76:	42ac      	cmp	r4, r5
 8000c78:	d8f1      	bhi.n	8000c5e <__gesf2+0x56>
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	42ac      	cmp	r4, r5
 8000c7e:	d2dd      	bcs.n	8000c3c <__gesf2+0x34>
 8000c80:	e7e5      	b.n	8000c4e <__gesf2+0x46>
 8000c82:	2c00      	cmp	r4, #0
 8000c84:	d0da      	beq.n	8000c3c <__gesf2+0x34>
 8000c86:	e7ea      	b.n	8000c5e <__gesf2+0x56>
 8000c88:	2d00      	cmp	r5, #0
 8000c8a:	d103      	bne.n	8000c94 <__gesf2+0x8c>
 8000c8c:	428b      	cmp	r3, r1
 8000c8e:	d1e6      	bne.n	8000c5e <__gesf2+0x56>
 8000c90:	2000      	movs	r0, #0
 8000c92:	e7d3      	b.n	8000c3c <__gesf2+0x34>
 8000c94:	2002      	movs	r0, #2
 8000c96:	4240      	negs	r0, r0
 8000c98:	e7d0      	b.n	8000c3c <__gesf2+0x34>
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	4240      	negs	r0, r0
 8000c9e:	e7cd      	b.n	8000c3c <__gesf2+0x34>
 8000ca0:	428b      	cmp	r3, r1
 8000ca2:	d0e8      	beq.n	8000c76 <__gesf2+0x6e>
 8000ca4:	e7db      	b.n	8000c5e <__gesf2+0x56>
 8000ca6:	46c0      	nop			@ (mov r8, r8)

08000ca8 <__lesf2>:
 8000ca8:	b530      	push	{r4, r5, lr}
 8000caa:	0042      	lsls	r2, r0, #1
 8000cac:	0244      	lsls	r4, r0, #9
 8000cae:	024d      	lsls	r5, r1, #9
 8000cb0:	0fc3      	lsrs	r3, r0, #31
 8000cb2:	0048      	lsls	r0, r1, #1
 8000cb4:	0a64      	lsrs	r4, r4, #9
 8000cb6:	0e12      	lsrs	r2, r2, #24
 8000cb8:	0a6d      	lsrs	r5, r5, #9
 8000cba:	0e00      	lsrs	r0, r0, #24
 8000cbc:	0fc9      	lsrs	r1, r1, #31
 8000cbe:	2aff      	cmp	r2, #255	@ 0xff
 8000cc0:	d01a      	beq.n	8000cf8 <__lesf2+0x50>
 8000cc2:	28ff      	cmp	r0, #255	@ 0xff
 8000cc4:	d00e      	beq.n	8000ce4 <__lesf2+0x3c>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d11e      	bne.n	8000d08 <__lesf2+0x60>
 8000cca:	2800      	cmp	r0, #0
 8000ccc:	d10e      	bne.n	8000cec <__lesf2+0x44>
 8000cce:	2d00      	cmp	r5, #0
 8000cd0:	d02a      	beq.n	8000d28 <__lesf2+0x80>
 8000cd2:	2c00      	cmp	r4, #0
 8000cd4:	d00c      	beq.n	8000cf0 <__lesf2+0x48>
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d01d      	beq.n	8000d16 <__lesf2+0x6e>
 8000cda:	1e58      	subs	r0, r3, #1
 8000cdc:	2302      	movs	r3, #2
 8000cde:	4018      	ands	r0, r3
 8000ce0:	3801      	subs	r0, #1
 8000ce2:	e010      	b.n	8000d06 <__lesf2+0x5e>
 8000ce4:	2d00      	cmp	r5, #0
 8000ce6:	d10d      	bne.n	8000d04 <__lesf2+0x5c>
 8000ce8:	2a00      	cmp	r2, #0
 8000cea:	d120      	bne.n	8000d2e <__lesf2+0x86>
 8000cec:	2c00      	cmp	r4, #0
 8000cee:	d11e      	bne.n	8000d2e <__lesf2+0x86>
 8000cf0:	2900      	cmp	r1, #0
 8000cf2:	d023      	beq.n	8000d3c <__lesf2+0x94>
 8000cf4:	0008      	movs	r0, r1
 8000cf6:	e006      	b.n	8000d06 <__lesf2+0x5e>
 8000cf8:	2c00      	cmp	r4, #0
 8000cfa:	d103      	bne.n	8000d04 <__lesf2+0x5c>
 8000cfc:	28ff      	cmp	r0, #255	@ 0xff
 8000cfe:	d1ec      	bne.n	8000cda <__lesf2+0x32>
 8000d00:	2d00      	cmp	r5, #0
 8000d02:	d017      	beq.n	8000d34 <__lesf2+0x8c>
 8000d04:	2002      	movs	r0, #2
 8000d06:	bd30      	pop	{r4, r5, pc}
 8000d08:	2800      	cmp	r0, #0
 8000d0a:	d0e6      	beq.n	8000cda <__lesf2+0x32>
 8000d0c:	428b      	cmp	r3, r1
 8000d0e:	d1e4      	bne.n	8000cda <__lesf2+0x32>
 8000d10:	4282      	cmp	r2, r0
 8000d12:	dce2      	bgt.n	8000cda <__lesf2+0x32>
 8000d14:	db04      	blt.n	8000d20 <__lesf2+0x78>
 8000d16:	42ac      	cmp	r4, r5
 8000d18:	d8df      	bhi.n	8000cda <__lesf2+0x32>
 8000d1a:	2000      	movs	r0, #0
 8000d1c:	42ac      	cmp	r4, r5
 8000d1e:	d2f2      	bcs.n	8000d06 <__lesf2+0x5e>
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d00b      	beq.n	8000d3c <__lesf2+0x94>
 8000d24:	0018      	movs	r0, r3
 8000d26:	e7ee      	b.n	8000d06 <__lesf2+0x5e>
 8000d28:	2c00      	cmp	r4, #0
 8000d2a:	d0ec      	beq.n	8000d06 <__lesf2+0x5e>
 8000d2c:	e7d5      	b.n	8000cda <__lesf2+0x32>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d1d3      	bne.n	8000cda <__lesf2+0x32>
 8000d32:	e7f5      	b.n	8000d20 <__lesf2+0x78>
 8000d34:	2000      	movs	r0, #0
 8000d36:	428b      	cmp	r3, r1
 8000d38:	d0e5      	beq.n	8000d06 <__lesf2+0x5e>
 8000d3a:	e7ce      	b.n	8000cda <__lesf2+0x32>
 8000d3c:	2001      	movs	r0, #1
 8000d3e:	4240      	negs	r0, r0
 8000d40:	e7e1      	b.n	8000d06 <__lesf2+0x5e>
 8000d42:	46c0      	nop			@ (mov r8, r8)

08000d44 <__aeabi_fmul>:
 8000d44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d46:	464f      	mov	r7, r9
 8000d48:	4646      	mov	r6, r8
 8000d4a:	46d6      	mov	lr, sl
 8000d4c:	0243      	lsls	r3, r0, #9
 8000d4e:	0a5b      	lsrs	r3, r3, #9
 8000d50:	0045      	lsls	r5, r0, #1
 8000d52:	b5c0      	push	{r6, r7, lr}
 8000d54:	4699      	mov	r9, r3
 8000d56:	1c0f      	adds	r7, r1, #0
 8000d58:	0e2d      	lsrs	r5, r5, #24
 8000d5a:	0fc6      	lsrs	r6, r0, #31
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d100      	bne.n	8000d62 <__aeabi_fmul+0x1e>
 8000d60:	e088      	b.n	8000e74 <__aeabi_fmul+0x130>
 8000d62:	2dff      	cmp	r5, #255	@ 0xff
 8000d64:	d100      	bne.n	8000d68 <__aeabi_fmul+0x24>
 8000d66:	e08d      	b.n	8000e84 <__aeabi_fmul+0x140>
 8000d68:	2280      	movs	r2, #128	@ 0x80
 8000d6a:	00db      	lsls	r3, r3, #3
 8000d6c:	04d2      	lsls	r2, r2, #19
 8000d6e:	431a      	orrs	r2, r3
 8000d70:	2300      	movs	r3, #0
 8000d72:	4691      	mov	r9, r2
 8000d74:	4698      	mov	r8, r3
 8000d76:	469a      	mov	sl, r3
 8000d78:	3d7f      	subs	r5, #127	@ 0x7f
 8000d7a:	027c      	lsls	r4, r7, #9
 8000d7c:	007b      	lsls	r3, r7, #1
 8000d7e:	0a64      	lsrs	r4, r4, #9
 8000d80:	0e1b      	lsrs	r3, r3, #24
 8000d82:	0fff      	lsrs	r7, r7, #31
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d068      	beq.n	8000e5a <__aeabi_fmul+0x116>
 8000d88:	2bff      	cmp	r3, #255	@ 0xff
 8000d8a:	d021      	beq.n	8000dd0 <__aeabi_fmul+0x8c>
 8000d8c:	2280      	movs	r2, #128	@ 0x80
 8000d8e:	00e4      	lsls	r4, r4, #3
 8000d90:	04d2      	lsls	r2, r2, #19
 8000d92:	4314      	orrs	r4, r2
 8000d94:	4642      	mov	r2, r8
 8000d96:	3b7f      	subs	r3, #127	@ 0x7f
 8000d98:	195b      	adds	r3, r3, r5
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	1c5d      	adds	r5, r3, #1
 8000d9e:	2a0a      	cmp	r2, #10
 8000da0:	dc2e      	bgt.n	8000e00 <__aeabi_fmul+0xbc>
 8000da2:	407e      	eors	r6, r7
 8000da4:	4642      	mov	r2, r8
 8000da6:	2a02      	cmp	r2, #2
 8000da8:	dc23      	bgt.n	8000df2 <__aeabi_fmul+0xae>
 8000daa:	3a01      	subs	r2, #1
 8000dac:	2a01      	cmp	r2, #1
 8000dae:	d900      	bls.n	8000db2 <__aeabi_fmul+0x6e>
 8000db0:	e0bd      	b.n	8000f2e <__aeabi_fmul+0x1ea>
 8000db2:	2902      	cmp	r1, #2
 8000db4:	d06e      	beq.n	8000e94 <__aeabi_fmul+0x150>
 8000db6:	2901      	cmp	r1, #1
 8000db8:	d12c      	bne.n	8000e14 <__aeabi_fmul+0xd0>
 8000dba:	2000      	movs	r0, #0
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	05c0      	lsls	r0, r0, #23
 8000dc0:	07f6      	lsls	r6, r6, #31
 8000dc2:	4310      	orrs	r0, r2
 8000dc4:	4330      	orrs	r0, r6
 8000dc6:	bce0      	pop	{r5, r6, r7}
 8000dc8:	46ba      	mov	sl, r7
 8000dca:	46b1      	mov	r9, r6
 8000dcc:	46a8      	mov	r8, r5
 8000dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dd0:	002b      	movs	r3, r5
 8000dd2:	33ff      	adds	r3, #255	@ 0xff
 8000dd4:	2c00      	cmp	r4, #0
 8000dd6:	d065      	beq.n	8000ea4 <__aeabi_fmul+0x160>
 8000dd8:	2203      	movs	r2, #3
 8000dda:	4641      	mov	r1, r8
 8000ddc:	4311      	orrs	r1, r2
 8000dde:	0032      	movs	r2, r6
 8000de0:	3501      	adds	r5, #1
 8000de2:	4688      	mov	r8, r1
 8000de4:	407a      	eors	r2, r7
 8000de6:	35ff      	adds	r5, #255	@ 0xff
 8000de8:	290a      	cmp	r1, #10
 8000dea:	dd00      	ble.n	8000dee <__aeabi_fmul+0xaa>
 8000dec:	e0d8      	b.n	8000fa0 <__aeabi_fmul+0x25c>
 8000dee:	0016      	movs	r6, r2
 8000df0:	2103      	movs	r1, #3
 8000df2:	4640      	mov	r0, r8
 8000df4:	2201      	movs	r2, #1
 8000df6:	4082      	lsls	r2, r0
 8000df8:	20a6      	movs	r0, #166	@ 0xa6
 8000dfa:	00c0      	lsls	r0, r0, #3
 8000dfc:	4202      	tst	r2, r0
 8000dfe:	d020      	beq.n	8000e42 <__aeabi_fmul+0xfe>
 8000e00:	4653      	mov	r3, sl
 8000e02:	2b02      	cmp	r3, #2
 8000e04:	d046      	beq.n	8000e94 <__aeabi_fmul+0x150>
 8000e06:	2b03      	cmp	r3, #3
 8000e08:	d100      	bne.n	8000e0c <__aeabi_fmul+0xc8>
 8000e0a:	e0bb      	b.n	8000f84 <__aeabi_fmul+0x240>
 8000e0c:	4651      	mov	r1, sl
 8000e0e:	464c      	mov	r4, r9
 8000e10:	2901      	cmp	r1, #1
 8000e12:	d0d2      	beq.n	8000dba <__aeabi_fmul+0x76>
 8000e14:	002b      	movs	r3, r5
 8000e16:	337f      	adds	r3, #127	@ 0x7f
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	dd70      	ble.n	8000efe <__aeabi_fmul+0x1ba>
 8000e1c:	0762      	lsls	r2, r4, #29
 8000e1e:	d004      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e20:	220f      	movs	r2, #15
 8000e22:	4022      	ands	r2, r4
 8000e24:	2a04      	cmp	r2, #4
 8000e26:	d000      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e28:	3404      	adds	r4, #4
 8000e2a:	0122      	lsls	r2, r4, #4
 8000e2c:	d503      	bpl.n	8000e36 <__aeabi_fmul+0xf2>
 8000e2e:	4b63      	ldr	r3, [pc, #396]	@ (8000fbc <__aeabi_fmul+0x278>)
 8000e30:	401c      	ands	r4, r3
 8000e32:	002b      	movs	r3, r5
 8000e34:	3380      	adds	r3, #128	@ 0x80
 8000e36:	2bfe      	cmp	r3, #254	@ 0xfe
 8000e38:	dc2c      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000e3a:	01a2      	lsls	r2, r4, #6
 8000e3c:	0a52      	lsrs	r2, r2, #9
 8000e3e:	b2d8      	uxtb	r0, r3
 8000e40:	e7bd      	b.n	8000dbe <__aeabi_fmul+0x7a>
 8000e42:	2090      	movs	r0, #144	@ 0x90
 8000e44:	0080      	lsls	r0, r0, #2
 8000e46:	4202      	tst	r2, r0
 8000e48:	d127      	bne.n	8000e9a <__aeabi_fmul+0x156>
 8000e4a:	38b9      	subs	r0, #185	@ 0xb9
 8000e4c:	38ff      	subs	r0, #255	@ 0xff
 8000e4e:	4210      	tst	r0, r2
 8000e50:	d06d      	beq.n	8000f2e <__aeabi_fmul+0x1ea>
 8000e52:	003e      	movs	r6, r7
 8000e54:	46a1      	mov	r9, r4
 8000e56:	468a      	mov	sl, r1
 8000e58:	e7d2      	b.n	8000e00 <__aeabi_fmul+0xbc>
 8000e5a:	2c00      	cmp	r4, #0
 8000e5c:	d141      	bne.n	8000ee2 <__aeabi_fmul+0x19e>
 8000e5e:	2301      	movs	r3, #1
 8000e60:	4642      	mov	r2, r8
 8000e62:	431a      	orrs	r2, r3
 8000e64:	4690      	mov	r8, r2
 8000e66:	002b      	movs	r3, r5
 8000e68:	4642      	mov	r2, r8
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	1c5d      	adds	r5, r3, #1
 8000e6e:	2a0a      	cmp	r2, #10
 8000e70:	dd97      	ble.n	8000da2 <__aeabi_fmul+0x5e>
 8000e72:	e7c5      	b.n	8000e00 <__aeabi_fmul+0xbc>
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d126      	bne.n	8000ec6 <__aeabi_fmul+0x182>
 8000e78:	2304      	movs	r3, #4
 8000e7a:	4698      	mov	r8, r3
 8000e7c:	3b03      	subs	r3, #3
 8000e7e:	2500      	movs	r5, #0
 8000e80:	469a      	mov	sl, r3
 8000e82:	e77a      	b.n	8000d7a <__aeabi_fmul+0x36>
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d118      	bne.n	8000eba <__aeabi_fmul+0x176>
 8000e88:	2308      	movs	r3, #8
 8000e8a:	4698      	mov	r8, r3
 8000e8c:	3b06      	subs	r3, #6
 8000e8e:	25ff      	movs	r5, #255	@ 0xff
 8000e90:	469a      	mov	sl, r3
 8000e92:	e772      	b.n	8000d7a <__aeabi_fmul+0x36>
 8000e94:	20ff      	movs	r0, #255	@ 0xff
 8000e96:	2200      	movs	r2, #0
 8000e98:	e791      	b.n	8000dbe <__aeabi_fmul+0x7a>
 8000e9a:	2280      	movs	r2, #128	@ 0x80
 8000e9c:	2600      	movs	r6, #0
 8000e9e:	20ff      	movs	r0, #255	@ 0xff
 8000ea0:	03d2      	lsls	r2, r2, #15
 8000ea2:	e78c      	b.n	8000dbe <__aeabi_fmul+0x7a>
 8000ea4:	4641      	mov	r1, r8
 8000ea6:	2202      	movs	r2, #2
 8000ea8:	3501      	adds	r5, #1
 8000eaa:	4311      	orrs	r1, r2
 8000eac:	4688      	mov	r8, r1
 8000eae:	35ff      	adds	r5, #255	@ 0xff
 8000eb0:	290a      	cmp	r1, #10
 8000eb2:	dca5      	bgt.n	8000e00 <__aeabi_fmul+0xbc>
 8000eb4:	2102      	movs	r1, #2
 8000eb6:	407e      	eors	r6, r7
 8000eb8:	e774      	b.n	8000da4 <__aeabi_fmul+0x60>
 8000eba:	230c      	movs	r3, #12
 8000ebc:	4698      	mov	r8, r3
 8000ebe:	3b09      	subs	r3, #9
 8000ec0:	25ff      	movs	r5, #255	@ 0xff
 8000ec2:	469a      	mov	sl, r3
 8000ec4:	e759      	b.n	8000d7a <__aeabi_fmul+0x36>
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	f000 faa0 	bl	800140c <__clzsi2>
 8000ecc:	464a      	mov	r2, r9
 8000ece:	1f43      	subs	r3, r0, #5
 8000ed0:	2576      	movs	r5, #118	@ 0x76
 8000ed2:	409a      	lsls	r2, r3
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	426d      	negs	r5, r5
 8000ed8:	4691      	mov	r9, r2
 8000eda:	4698      	mov	r8, r3
 8000edc:	469a      	mov	sl, r3
 8000ede:	1a2d      	subs	r5, r5, r0
 8000ee0:	e74b      	b.n	8000d7a <__aeabi_fmul+0x36>
 8000ee2:	0020      	movs	r0, r4
 8000ee4:	f000 fa92 	bl	800140c <__clzsi2>
 8000ee8:	4642      	mov	r2, r8
 8000eea:	1f43      	subs	r3, r0, #5
 8000eec:	409c      	lsls	r4, r3
 8000eee:	1a2b      	subs	r3, r5, r0
 8000ef0:	3b76      	subs	r3, #118	@ 0x76
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	1c5d      	adds	r5, r3, #1
 8000ef6:	2a0a      	cmp	r2, #10
 8000ef8:	dc00      	bgt.n	8000efc <__aeabi_fmul+0x1b8>
 8000efa:	e752      	b.n	8000da2 <__aeabi_fmul+0x5e>
 8000efc:	e780      	b.n	8000e00 <__aeabi_fmul+0xbc>
 8000efe:	2201      	movs	r2, #1
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	2b1b      	cmp	r3, #27
 8000f04:	dd00      	ble.n	8000f08 <__aeabi_fmul+0x1c4>
 8000f06:	e758      	b.n	8000dba <__aeabi_fmul+0x76>
 8000f08:	359e      	adds	r5, #158	@ 0x9e
 8000f0a:	0022      	movs	r2, r4
 8000f0c:	40ac      	lsls	r4, r5
 8000f0e:	40da      	lsrs	r2, r3
 8000f10:	1e63      	subs	r3, r4, #1
 8000f12:	419c      	sbcs	r4, r3
 8000f14:	4322      	orrs	r2, r4
 8000f16:	0753      	lsls	r3, r2, #29
 8000f18:	d004      	beq.n	8000f24 <__aeabi_fmul+0x1e0>
 8000f1a:	230f      	movs	r3, #15
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	2b04      	cmp	r3, #4
 8000f20:	d000      	beq.n	8000f24 <__aeabi_fmul+0x1e0>
 8000f22:	3204      	adds	r2, #4
 8000f24:	0153      	lsls	r3, r2, #5
 8000f26:	d537      	bpl.n	8000f98 <__aeabi_fmul+0x254>
 8000f28:	2001      	movs	r0, #1
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	e747      	b.n	8000dbe <__aeabi_fmul+0x7a>
 8000f2e:	0c21      	lsrs	r1, r4, #16
 8000f30:	464a      	mov	r2, r9
 8000f32:	0424      	lsls	r4, r4, #16
 8000f34:	0c24      	lsrs	r4, r4, #16
 8000f36:	0027      	movs	r7, r4
 8000f38:	0c10      	lsrs	r0, r2, #16
 8000f3a:	0412      	lsls	r2, r2, #16
 8000f3c:	0c12      	lsrs	r2, r2, #16
 8000f3e:	4344      	muls	r4, r0
 8000f40:	4357      	muls	r7, r2
 8000f42:	4348      	muls	r0, r1
 8000f44:	4351      	muls	r1, r2
 8000f46:	0c3a      	lsrs	r2, r7, #16
 8000f48:	1909      	adds	r1, r1, r4
 8000f4a:	1852      	adds	r2, r2, r1
 8000f4c:	4294      	cmp	r4, r2
 8000f4e:	d903      	bls.n	8000f58 <__aeabi_fmul+0x214>
 8000f50:	2180      	movs	r1, #128	@ 0x80
 8000f52:	0249      	lsls	r1, r1, #9
 8000f54:	468c      	mov	ip, r1
 8000f56:	4460      	add	r0, ip
 8000f58:	043f      	lsls	r7, r7, #16
 8000f5a:	0411      	lsls	r1, r2, #16
 8000f5c:	0c3f      	lsrs	r7, r7, #16
 8000f5e:	19c9      	adds	r1, r1, r7
 8000f60:	018c      	lsls	r4, r1, #6
 8000f62:	1e67      	subs	r7, r4, #1
 8000f64:	41bc      	sbcs	r4, r7
 8000f66:	0c12      	lsrs	r2, r2, #16
 8000f68:	0e89      	lsrs	r1, r1, #26
 8000f6a:	1812      	adds	r2, r2, r0
 8000f6c:	430c      	orrs	r4, r1
 8000f6e:	0192      	lsls	r2, r2, #6
 8000f70:	4314      	orrs	r4, r2
 8000f72:	0112      	lsls	r2, r2, #4
 8000f74:	d50e      	bpl.n	8000f94 <__aeabi_fmul+0x250>
 8000f76:	2301      	movs	r3, #1
 8000f78:	0862      	lsrs	r2, r4, #1
 8000f7a:	401c      	ands	r4, r3
 8000f7c:	4314      	orrs	r4, r2
 8000f7e:	e749      	b.n	8000e14 <__aeabi_fmul+0xd0>
 8000f80:	003e      	movs	r6, r7
 8000f82:	46a1      	mov	r9, r4
 8000f84:	2280      	movs	r2, #128	@ 0x80
 8000f86:	464b      	mov	r3, r9
 8000f88:	03d2      	lsls	r2, r2, #15
 8000f8a:	431a      	orrs	r2, r3
 8000f8c:	0252      	lsls	r2, r2, #9
 8000f8e:	20ff      	movs	r0, #255	@ 0xff
 8000f90:	0a52      	lsrs	r2, r2, #9
 8000f92:	e714      	b.n	8000dbe <__aeabi_fmul+0x7a>
 8000f94:	001d      	movs	r5, r3
 8000f96:	e73d      	b.n	8000e14 <__aeabi_fmul+0xd0>
 8000f98:	0192      	lsls	r2, r2, #6
 8000f9a:	2000      	movs	r0, #0
 8000f9c:	0a52      	lsrs	r2, r2, #9
 8000f9e:	e70e      	b.n	8000dbe <__aeabi_fmul+0x7a>
 8000fa0:	290f      	cmp	r1, #15
 8000fa2:	d1ed      	bne.n	8000f80 <__aeabi_fmul+0x23c>
 8000fa4:	2280      	movs	r2, #128	@ 0x80
 8000fa6:	464b      	mov	r3, r9
 8000fa8:	03d2      	lsls	r2, r2, #15
 8000faa:	4213      	tst	r3, r2
 8000fac:	d0ea      	beq.n	8000f84 <__aeabi_fmul+0x240>
 8000fae:	4214      	tst	r4, r2
 8000fb0:	d1e8      	bne.n	8000f84 <__aeabi_fmul+0x240>
 8000fb2:	003e      	movs	r6, r7
 8000fb4:	20ff      	movs	r0, #255	@ 0xff
 8000fb6:	4322      	orrs	r2, r4
 8000fb8:	e701      	b.n	8000dbe <__aeabi_fmul+0x7a>
 8000fba:	46c0      	nop			@ (mov r8, r8)
 8000fbc:	f7ffffff 	.word	0xf7ffffff

08000fc0 <__aeabi_fsub>:
 8000fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fc2:	4647      	mov	r7, r8
 8000fc4:	46ce      	mov	lr, r9
 8000fc6:	024e      	lsls	r6, r1, #9
 8000fc8:	0243      	lsls	r3, r0, #9
 8000fca:	0045      	lsls	r5, r0, #1
 8000fcc:	0a72      	lsrs	r2, r6, #9
 8000fce:	0fc4      	lsrs	r4, r0, #31
 8000fd0:	0048      	lsls	r0, r1, #1
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	4694      	mov	ip, r2
 8000fd6:	0a5f      	lsrs	r7, r3, #9
 8000fd8:	0e2d      	lsrs	r5, r5, #24
 8000fda:	099b      	lsrs	r3, r3, #6
 8000fdc:	0e00      	lsrs	r0, r0, #24
 8000fde:	0fc9      	lsrs	r1, r1, #31
 8000fe0:	09b6      	lsrs	r6, r6, #6
 8000fe2:	28ff      	cmp	r0, #255	@ 0xff
 8000fe4:	d024      	beq.n	8001030 <__aeabi_fsub+0x70>
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	4051      	eors	r1, r2
 8000fea:	1a2a      	subs	r2, r5, r0
 8000fec:	428c      	cmp	r4, r1
 8000fee:	d00f      	beq.n	8001010 <__aeabi_fsub+0x50>
 8000ff0:	2a00      	cmp	r2, #0
 8000ff2:	dc00      	bgt.n	8000ff6 <__aeabi_fsub+0x36>
 8000ff4:	e16a      	b.n	80012cc <__aeabi_fsub+0x30c>
 8000ff6:	2800      	cmp	r0, #0
 8000ff8:	d135      	bne.n	8001066 <__aeabi_fsub+0xa6>
 8000ffa:	2e00      	cmp	r6, #0
 8000ffc:	d100      	bne.n	8001000 <__aeabi_fsub+0x40>
 8000ffe:	e0a2      	b.n	8001146 <__aeabi_fsub+0x186>
 8001000:	1e51      	subs	r1, r2, #1
 8001002:	2a01      	cmp	r2, #1
 8001004:	d100      	bne.n	8001008 <__aeabi_fsub+0x48>
 8001006:	e124      	b.n	8001252 <__aeabi_fsub+0x292>
 8001008:	2aff      	cmp	r2, #255	@ 0xff
 800100a:	d021      	beq.n	8001050 <__aeabi_fsub+0x90>
 800100c:	000a      	movs	r2, r1
 800100e:	e02f      	b.n	8001070 <__aeabi_fsub+0xb0>
 8001010:	2a00      	cmp	r2, #0
 8001012:	dc00      	bgt.n	8001016 <__aeabi_fsub+0x56>
 8001014:	e167      	b.n	80012e6 <__aeabi_fsub+0x326>
 8001016:	2800      	cmp	r0, #0
 8001018:	d05e      	beq.n	80010d8 <__aeabi_fsub+0x118>
 800101a:	2dff      	cmp	r5, #255	@ 0xff
 800101c:	d018      	beq.n	8001050 <__aeabi_fsub+0x90>
 800101e:	2180      	movs	r1, #128	@ 0x80
 8001020:	04c9      	lsls	r1, r1, #19
 8001022:	430e      	orrs	r6, r1
 8001024:	2a1b      	cmp	r2, #27
 8001026:	dc00      	bgt.n	800102a <__aeabi_fsub+0x6a>
 8001028:	e076      	b.n	8001118 <__aeabi_fsub+0x158>
 800102a:	002a      	movs	r2, r5
 800102c:	3301      	adds	r3, #1
 800102e:	e032      	b.n	8001096 <__aeabi_fsub+0xd6>
 8001030:	002a      	movs	r2, r5
 8001032:	3aff      	subs	r2, #255	@ 0xff
 8001034:	4691      	mov	r9, r2
 8001036:	2e00      	cmp	r6, #0
 8001038:	d042      	beq.n	80010c0 <__aeabi_fsub+0x100>
 800103a:	428c      	cmp	r4, r1
 800103c:	d055      	beq.n	80010ea <__aeabi_fsub+0x12a>
 800103e:	464a      	mov	r2, r9
 8001040:	2a00      	cmp	r2, #0
 8001042:	d100      	bne.n	8001046 <__aeabi_fsub+0x86>
 8001044:	e09c      	b.n	8001180 <__aeabi_fsub+0x1c0>
 8001046:	2d00      	cmp	r5, #0
 8001048:	d100      	bne.n	800104c <__aeabi_fsub+0x8c>
 800104a:	e077      	b.n	800113c <__aeabi_fsub+0x17c>
 800104c:	000c      	movs	r4, r1
 800104e:	0033      	movs	r3, r6
 8001050:	08db      	lsrs	r3, r3, #3
 8001052:	2b00      	cmp	r3, #0
 8001054:	d100      	bne.n	8001058 <__aeabi_fsub+0x98>
 8001056:	e06e      	b.n	8001136 <__aeabi_fsub+0x176>
 8001058:	2280      	movs	r2, #128	@ 0x80
 800105a:	03d2      	lsls	r2, r2, #15
 800105c:	4313      	orrs	r3, r2
 800105e:	025b      	lsls	r3, r3, #9
 8001060:	20ff      	movs	r0, #255	@ 0xff
 8001062:	0a5b      	lsrs	r3, r3, #9
 8001064:	e024      	b.n	80010b0 <__aeabi_fsub+0xf0>
 8001066:	2dff      	cmp	r5, #255	@ 0xff
 8001068:	d0f2      	beq.n	8001050 <__aeabi_fsub+0x90>
 800106a:	2180      	movs	r1, #128	@ 0x80
 800106c:	04c9      	lsls	r1, r1, #19
 800106e:	430e      	orrs	r6, r1
 8001070:	2101      	movs	r1, #1
 8001072:	2a1b      	cmp	r2, #27
 8001074:	dc08      	bgt.n	8001088 <__aeabi_fsub+0xc8>
 8001076:	0031      	movs	r1, r6
 8001078:	2020      	movs	r0, #32
 800107a:	40d1      	lsrs	r1, r2
 800107c:	1a82      	subs	r2, r0, r2
 800107e:	4096      	lsls	r6, r2
 8001080:	0032      	movs	r2, r6
 8001082:	1e50      	subs	r0, r2, #1
 8001084:	4182      	sbcs	r2, r0
 8001086:	4311      	orrs	r1, r2
 8001088:	1a5b      	subs	r3, r3, r1
 800108a:	015a      	lsls	r2, r3, #5
 800108c:	d460      	bmi.n	8001150 <__aeabi_fsub+0x190>
 800108e:	2107      	movs	r1, #7
 8001090:	002a      	movs	r2, r5
 8001092:	4019      	ands	r1, r3
 8001094:	d057      	beq.n	8001146 <__aeabi_fsub+0x186>
 8001096:	210f      	movs	r1, #15
 8001098:	4019      	ands	r1, r3
 800109a:	2904      	cmp	r1, #4
 800109c:	d000      	beq.n	80010a0 <__aeabi_fsub+0xe0>
 800109e:	3304      	adds	r3, #4
 80010a0:	0159      	lsls	r1, r3, #5
 80010a2:	d550      	bpl.n	8001146 <__aeabi_fsub+0x186>
 80010a4:	1c50      	adds	r0, r2, #1
 80010a6:	2afe      	cmp	r2, #254	@ 0xfe
 80010a8:	d045      	beq.n	8001136 <__aeabi_fsub+0x176>
 80010aa:	019b      	lsls	r3, r3, #6
 80010ac:	b2c0      	uxtb	r0, r0
 80010ae:	0a5b      	lsrs	r3, r3, #9
 80010b0:	05c0      	lsls	r0, r0, #23
 80010b2:	4318      	orrs	r0, r3
 80010b4:	07e4      	lsls	r4, r4, #31
 80010b6:	4320      	orrs	r0, r4
 80010b8:	bcc0      	pop	{r6, r7}
 80010ba:	46b9      	mov	r9, r7
 80010bc:	46b0      	mov	r8, r6
 80010be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80010c0:	2201      	movs	r2, #1
 80010c2:	4051      	eors	r1, r2
 80010c4:	428c      	cmp	r4, r1
 80010c6:	d1ba      	bne.n	800103e <__aeabi_fsub+0x7e>
 80010c8:	464a      	mov	r2, r9
 80010ca:	2a00      	cmp	r2, #0
 80010cc:	d010      	beq.n	80010f0 <__aeabi_fsub+0x130>
 80010ce:	2d00      	cmp	r5, #0
 80010d0:	d100      	bne.n	80010d4 <__aeabi_fsub+0x114>
 80010d2:	e098      	b.n	8001206 <__aeabi_fsub+0x246>
 80010d4:	2300      	movs	r3, #0
 80010d6:	e7bb      	b.n	8001050 <__aeabi_fsub+0x90>
 80010d8:	2e00      	cmp	r6, #0
 80010da:	d034      	beq.n	8001146 <__aeabi_fsub+0x186>
 80010dc:	1e51      	subs	r1, r2, #1
 80010de:	2a01      	cmp	r2, #1
 80010e0:	d06e      	beq.n	80011c0 <__aeabi_fsub+0x200>
 80010e2:	2aff      	cmp	r2, #255	@ 0xff
 80010e4:	d0b4      	beq.n	8001050 <__aeabi_fsub+0x90>
 80010e6:	000a      	movs	r2, r1
 80010e8:	e79c      	b.n	8001024 <__aeabi_fsub+0x64>
 80010ea:	2a00      	cmp	r2, #0
 80010ec:	d000      	beq.n	80010f0 <__aeabi_fsub+0x130>
 80010ee:	e088      	b.n	8001202 <__aeabi_fsub+0x242>
 80010f0:	20fe      	movs	r0, #254	@ 0xfe
 80010f2:	1c6a      	adds	r2, r5, #1
 80010f4:	4210      	tst	r0, r2
 80010f6:	d000      	beq.n	80010fa <__aeabi_fsub+0x13a>
 80010f8:	e092      	b.n	8001220 <__aeabi_fsub+0x260>
 80010fa:	2d00      	cmp	r5, #0
 80010fc:	d000      	beq.n	8001100 <__aeabi_fsub+0x140>
 80010fe:	e0a4      	b.n	800124a <__aeabi_fsub+0x28a>
 8001100:	2b00      	cmp	r3, #0
 8001102:	d100      	bne.n	8001106 <__aeabi_fsub+0x146>
 8001104:	e0cb      	b.n	800129e <__aeabi_fsub+0x2de>
 8001106:	2e00      	cmp	r6, #0
 8001108:	d000      	beq.n	800110c <__aeabi_fsub+0x14c>
 800110a:	e0ca      	b.n	80012a2 <__aeabi_fsub+0x2e2>
 800110c:	2200      	movs	r2, #0
 800110e:	08db      	lsrs	r3, r3, #3
 8001110:	025b      	lsls	r3, r3, #9
 8001112:	0a5b      	lsrs	r3, r3, #9
 8001114:	b2d0      	uxtb	r0, r2
 8001116:	e7cb      	b.n	80010b0 <__aeabi_fsub+0xf0>
 8001118:	0031      	movs	r1, r6
 800111a:	2020      	movs	r0, #32
 800111c:	40d1      	lsrs	r1, r2
 800111e:	1a82      	subs	r2, r0, r2
 8001120:	4096      	lsls	r6, r2
 8001122:	0032      	movs	r2, r6
 8001124:	1e50      	subs	r0, r2, #1
 8001126:	4182      	sbcs	r2, r0
 8001128:	430a      	orrs	r2, r1
 800112a:	189b      	adds	r3, r3, r2
 800112c:	015a      	lsls	r2, r3, #5
 800112e:	d5ae      	bpl.n	800108e <__aeabi_fsub+0xce>
 8001130:	1c6a      	adds	r2, r5, #1
 8001132:	2dfe      	cmp	r5, #254	@ 0xfe
 8001134:	d14a      	bne.n	80011cc <__aeabi_fsub+0x20c>
 8001136:	20ff      	movs	r0, #255	@ 0xff
 8001138:	2300      	movs	r3, #0
 800113a:	e7b9      	b.n	80010b0 <__aeabi_fsub+0xf0>
 800113c:	22ff      	movs	r2, #255	@ 0xff
 800113e:	2b00      	cmp	r3, #0
 8001140:	d14b      	bne.n	80011da <__aeabi_fsub+0x21a>
 8001142:	000c      	movs	r4, r1
 8001144:	0033      	movs	r3, r6
 8001146:	08db      	lsrs	r3, r3, #3
 8001148:	2aff      	cmp	r2, #255	@ 0xff
 800114a:	d100      	bne.n	800114e <__aeabi_fsub+0x18e>
 800114c:	e781      	b.n	8001052 <__aeabi_fsub+0x92>
 800114e:	e7df      	b.n	8001110 <__aeabi_fsub+0x150>
 8001150:	019f      	lsls	r7, r3, #6
 8001152:	09bf      	lsrs	r7, r7, #6
 8001154:	0038      	movs	r0, r7
 8001156:	f000 f959 	bl	800140c <__clzsi2>
 800115a:	3805      	subs	r0, #5
 800115c:	4087      	lsls	r7, r0
 800115e:	4285      	cmp	r5, r0
 8001160:	dc21      	bgt.n	80011a6 <__aeabi_fsub+0x1e6>
 8001162:	003b      	movs	r3, r7
 8001164:	2120      	movs	r1, #32
 8001166:	1b42      	subs	r2, r0, r5
 8001168:	3201      	adds	r2, #1
 800116a:	40d3      	lsrs	r3, r2
 800116c:	1a8a      	subs	r2, r1, r2
 800116e:	4097      	lsls	r7, r2
 8001170:	1e7a      	subs	r2, r7, #1
 8001172:	4197      	sbcs	r7, r2
 8001174:	2200      	movs	r2, #0
 8001176:	433b      	orrs	r3, r7
 8001178:	0759      	lsls	r1, r3, #29
 800117a:	d000      	beq.n	800117e <__aeabi_fsub+0x1be>
 800117c:	e78b      	b.n	8001096 <__aeabi_fsub+0xd6>
 800117e:	e78f      	b.n	80010a0 <__aeabi_fsub+0xe0>
 8001180:	20fe      	movs	r0, #254	@ 0xfe
 8001182:	1c6a      	adds	r2, r5, #1
 8001184:	4210      	tst	r0, r2
 8001186:	d112      	bne.n	80011ae <__aeabi_fsub+0x1ee>
 8001188:	2d00      	cmp	r5, #0
 800118a:	d152      	bne.n	8001232 <__aeabi_fsub+0x272>
 800118c:	2b00      	cmp	r3, #0
 800118e:	d07c      	beq.n	800128a <__aeabi_fsub+0x2ca>
 8001190:	2e00      	cmp	r6, #0
 8001192:	d0bb      	beq.n	800110c <__aeabi_fsub+0x14c>
 8001194:	1b9a      	subs	r2, r3, r6
 8001196:	0150      	lsls	r0, r2, #5
 8001198:	d400      	bmi.n	800119c <__aeabi_fsub+0x1dc>
 800119a:	e08b      	b.n	80012b4 <__aeabi_fsub+0x2f4>
 800119c:	2401      	movs	r4, #1
 800119e:	2200      	movs	r2, #0
 80011a0:	1af3      	subs	r3, r6, r3
 80011a2:	400c      	ands	r4, r1
 80011a4:	e7e8      	b.n	8001178 <__aeabi_fsub+0x1b8>
 80011a6:	4b56      	ldr	r3, [pc, #344]	@ (8001300 <__aeabi_fsub+0x340>)
 80011a8:	1a2a      	subs	r2, r5, r0
 80011aa:	403b      	ands	r3, r7
 80011ac:	e7e4      	b.n	8001178 <__aeabi_fsub+0x1b8>
 80011ae:	1b9f      	subs	r7, r3, r6
 80011b0:	017a      	lsls	r2, r7, #5
 80011b2:	d446      	bmi.n	8001242 <__aeabi_fsub+0x282>
 80011b4:	2f00      	cmp	r7, #0
 80011b6:	d1cd      	bne.n	8001154 <__aeabi_fsub+0x194>
 80011b8:	2400      	movs	r4, #0
 80011ba:	2000      	movs	r0, #0
 80011bc:	2300      	movs	r3, #0
 80011be:	e777      	b.n	80010b0 <__aeabi_fsub+0xf0>
 80011c0:	199b      	adds	r3, r3, r6
 80011c2:	2501      	movs	r5, #1
 80011c4:	3201      	adds	r2, #1
 80011c6:	0159      	lsls	r1, r3, #5
 80011c8:	d400      	bmi.n	80011cc <__aeabi_fsub+0x20c>
 80011ca:	e760      	b.n	800108e <__aeabi_fsub+0xce>
 80011cc:	2101      	movs	r1, #1
 80011ce:	484d      	ldr	r0, [pc, #308]	@ (8001304 <__aeabi_fsub+0x344>)
 80011d0:	4019      	ands	r1, r3
 80011d2:	085b      	lsrs	r3, r3, #1
 80011d4:	4003      	ands	r3, r0
 80011d6:	430b      	orrs	r3, r1
 80011d8:	e7ce      	b.n	8001178 <__aeabi_fsub+0x1b8>
 80011da:	1e57      	subs	r7, r2, #1
 80011dc:	2a01      	cmp	r2, #1
 80011de:	d05a      	beq.n	8001296 <__aeabi_fsub+0x2d6>
 80011e0:	000c      	movs	r4, r1
 80011e2:	2aff      	cmp	r2, #255	@ 0xff
 80011e4:	d033      	beq.n	800124e <__aeabi_fsub+0x28e>
 80011e6:	2201      	movs	r2, #1
 80011e8:	2f1b      	cmp	r7, #27
 80011ea:	dc07      	bgt.n	80011fc <__aeabi_fsub+0x23c>
 80011ec:	2120      	movs	r1, #32
 80011ee:	1bc9      	subs	r1, r1, r7
 80011f0:	001a      	movs	r2, r3
 80011f2:	408b      	lsls	r3, r1
 80011f4:	40fa      	lsrs	r2, r7
 80011f6:	1e59      	subs	r1, r3, #1
 80011f8:	418b      	sbcs	r3, r1
 80011fa:	431a      	orrs	r2, r3
 80011fc:	0005      	movs	r5, r0
 80011fe:	1ab3      	subs	r3, r6, r2
 8001200:	e743      	b.n	800108a <__aeabi_fsub+0xca>
 8001202:	2d00      	cmp	r5, #0
 8001204:	d123      	bne.n	800124e <__aeabi_fsub+0x28e>
 8001206:	22ff      	movs	r2, #255	@ 0xff
 8001208:	2b00      	cmp	r3, #0
 800120a:	d09b      	beq.n	8001144 <__aeabi_fsub+0x184>
 800120c:	1e51      	subs	r1, r2, #1
 800120e:	2a01      	cmp	r2, #1
 8001210:	d0d6      	beq.n	80011c0 <__aeabi_fsub+0x200>
 8001212:	2aff      	cmp	r2, #255	@ 0xff
 8001214:	d01b      	beq.n	800124e <__aeabi_fsub+0x28e>
 8001216:	291b      	cmp	r1, #27
 8001218:	dd2c      	ble.n	8001274 <__aeabi_fsub+0x2b4>
 800121a:	0002      	movs	r2, r0
 800121c:	1c73      	adds	r3, r6, #1
 800121e:	e73a      	b.n	8001096 <__aeabi_fsub+0xd6>
 8001220:	2aff      	cmp	r2, #255	@ 0xff
 8001222:	d088      	beq.n	8001136 <__aeabi_fsub+0x176>
 8001224:	199b      	adds	r3, r3, r6
 8001226:	085b      	lsrs	r3, r3, #1
 8001228:	0759      	lsls	r1, r3, #29
 800122a:	d000      	beq.n	800122e <__aeabi_fsub+0x26e>
 800122c:	e733      	b.n	8001096 <__aeabi_fsub+0xd6>
 800122e:	08db      	lsrs	r3, r3, #3
 8001230:	e76e      	b.n	8001110 <__aeabi_fsub+0x150>
 8001232:	2b00      	cmp	r3, #0
 8001234:	d110      	bne.n	8001258 <__aeabi_fsub+0x298>
 8001236:	2e00      	cmp	r6, #0
 8001238:	d043      	beq.n	80012c2 <__aeabi_fsub+0x302>
 800123a:	2401      	movs	r4, #1
 800123c:	0033      	movs	r3, r6
 800123e:	400c      	ands	r4, r1
 8001240:	e706      	b.n	8001050 <__aeabi_fsub+0x90>
 8001242:	2401      	movs	r4, #1
 8001244:	1af7      	subs	r7, r6, r3
 8001246:	400c      	ands	r4, r1
 8001248:	e784      	b.n	8001154 <__aeabi_fsub+0x194>
 800124a:	2b00      	cmp	r3, #0
 800124c:	d104      	bne.n	8001258 <__aeabi_fsub+0x298>
 800124e:	0033      	movs	r3, r6
 8001250:	e6fe      	b.n	8001050 <__aeabi_fsub+0x90>
 8001252:	2501      	movs	r5, #1
 8001254:	1b9b      	subs	r3, r3, r6
 8001256:	e718      	b.n	800108a <__aeabi_fsub+0xca>
 8001258:	2e00      	cmp	r6, #0
 800125a:	d100      	bne.n	800125e <__aeabi_fsub+0x29e>
 800125c:	e6f8      	b.n	8001050 <__aeabi_fsub+0x90>
 800125e:	2280      	movs	r2, #128	@ 0x80
 8001260:	03d2      	lsls	r2, r2, #15
 8001262:	4297      	cmp	r7, r2
 8001264:	d304      	bcc.n	8001270 <__aeabi_fsub+0x2b0>
 8001266:	4594      	cmp	ip, r2
 8001268:	d202      	bcs.n	8001270 <__aeabi_fsub+0x2b0>
 800126a:	2401      	movs	r4, #1
 800126c:	0033      	movs	r3, r6
 800126e:	400c      	ands	r4, r1
 8001270:	08db      	lsrs	r3, r3, #3
 8001272:	e6f1      	b.n	8001058 <__aeabi_fsub+0x98>
 8001274:	001a      	movs	r2, r3
 8001276:	2520      	movs	r5, #32
 8001278:	40ca      	lsrs	r2, r1
 800127a:	1a69      	subs	r1, r5, r1
 800127c:	408b      	lsls	r3, r1
 800127e:	1e59      	subs	r1, r3, #1
 8001280:	418b      	sbcs	r3, r1
 8001282:	4313      	orrs	r3, r2
 8001284:	0005      	movs	r5, r0
 8001286:	199b      	adds	r3, r3, r6
 8001288:	e750      	b.n	800112c <__aeabi_fsub+0x16c>
 800128a:	2e00      	cmp	r6, #0
 800128c:	d094      	beq.n	80011b8 <__aeabi_fsub+0x1f8>
 800128e:	2401      	movs	r4, #1
 8001290:	0033      	movs	r3, r6
 8001292:	400c      	ands	r4, r1
 8001294:	e73a      	b.n	800110c <__aeabi_fsub+0x14c>
 8001296:	000c      	movs	r4, r1
 8001298:	2501      	movs	r5, #1
 800129a:	1af3      	subs	r3, r6, r3
 800129c:	e6f5      	b.n	800108a <__aeabi_fsub+0xca>
 800129e:	0033      	movs	r3, r6
 80012a0:	e734      	b.n	800110c <__aeabi_fsub+0x14c>
 80012a2:	199b      	adds	r3, r3, r6
 80012a4:	2200      	movs	r2, #0
 80012a6:	0159      	lsls	r1, r3, #5
 80012a8:	d5c1      	bpl.n	800122e <__aeabi_fsub+0x26e>
 80012aa:	4a15      	ldr	r2, [pc, #84]	@ (8001300 <__aeabi_fsub+0x340>)
 80012ac:	4013      	ands	r3, r2
 80012ae:	08db      	lsrs	r3, r3, #3
 80012b0:	2201      	movs	r2, #1
 80012b2:	e72d      	b.n	8001110 <__aeabi_fsub+0x150>
 80012b4:	2a00      	cmp	r2, #0
 80012b6:	d100      	bne.n	80012ba <__aeabi_fsub+0x2fa>
 80012b8:	e77e      	b.n	80011b8 <__aeabi_fsub+0x1f8>
 80012ba:	0013      	movs	r3, r2
 80012bc:	2200      	movs	r2, #0
 80012be:	08db      	lsrs	r3, r3, #3
 80012c0:	e726      	b.n	8001110 <__aeabi_fsub+0x150>
 80012c2:	2380      	movs	r3, #128	@ 0x80
 80012c4:	2400      	movs	r4, #0
 80012c6:	20ff      	movs	r0, #255	@ 0xff
 80012c8:	03db      	lsls	r3, r3, #15
 80012ca:	e6f1      	b.n	80010b0 <__aeabi_fsub+0xf0>
 80012cc:	2a00      	cmp	r2, #0
 80012ce:	d100      	bne.n	80012d2 <__aeabi_fsub+0x312>
 80012d0:	e756      	b.n	8001180 <__aeabi_fsub+0x1c0>
 80012d2:	1b47      	subs	r7, r0, r5
 80012d4:	003a      	movs	r2, r7
 80012d6:	2d00      	cmp	r5, #0
 80012d8:	d100      	bne.n	80012dc <__aeabi_fsub+0x31c>
 80012da:	e730      	b.n	800113e <__aeabi_fsub+0x17e>
 80012dc:	2280      	movs	r2, #128	@ 0x80
 80012de:	04d2      	lsls	r2, r2, #19
 80012e0:	000c      	movs	r4, r1
 80012e2:	4313      	orrs	r3, r2
 80012e4:	e77f      	b.n	80011e6 <__aeabi_fsub+0x226>
 80012e6:	2a00      	cmp	r2, #0
 80012e8:	d100      	bne.n	80012ec <__aeabi_fsub+0x32c>
 80012ea:	e701      	b.n	80010f0 <__aeabi_fsub+0x130>
 80012ec:	1b41      	subs	r1, r0, r5
 80012ee:	2d00      	cmp	r5, #0
 80012f0:	d101      	bne.n	80012f6 <__aeabi_fsub+0x336>
 80012f2:	000a      	movs	r2, r1
 80012f4:	e788      	b.n	8001208 <__aeabi_fsub+0x248>
 80012f6:	2280      	movs	r2, #128	@ 0x80
 80012f8:	04d2      	lsls	r2, r2, #19
 80012fa:	4313      	orrs	r3, r2
 80012fc:	e78b      	b.n	8001216 <__aeabi_fsub+0x256>
 80012fe:	46c0      	nop			@ (mov r8, r8)
 8001300:	fbffffff 	.word	0xfbffffff
 8001304:	7dffffff 	.word	0x7dffffff

08001308 <__aeabi_fcmpun>:
 8001308:	0243      	lsls	r3, r0, #9
 800130a:	024a      	lsls	r2, r1, #9
 800130c:	0040      	lsls	r0, r0, #1
 800130e:	0049      	lsls	r1, r1, #1
 8001310:	0a5b      	lsrs	r3, r3, #9
 8001312:	0a52      	lsrs	r2, r2, #9
 8001314:	0e09      	lsrs	r1, r1, #24
 8001316:	0e00      	lsrs	r0, r0, #24
 8001318:	28ff      	cmp	r0, #255	@ 0xff
 800131a:	d006      	beq.n	800132a <__aeabi_fcmpun+0x22>
 800131c:	2000      	movs	r0, #0
 800131e:	29ff      	cmp	r1, #255	@ 0xff
 8001320:	d102      	bne.n	8001328 <__aeabi_fcmpun+0x20>
 8001322:	1e53      	subs	r3, r2, #1
 8001324:	419a      	sbcs	r2, r3
 8001326:	0010      	movs	r0, r2
 8001328:	4770      	bx	lr
 800132a:	38fe      	subs	r0, #254	@ 0xfe
 800132c:	2b00      	cmp	r3, #0
 800132e:	d1fb      	bne.n	8001328 <__aeabi_fcmpun+0x20>
 8001330:	e7f4      	b.n	800131c <__aeabi_fcmpun+0x14>
 8001332:	46c0      	nop			@ (mov r8, r8)

08001334 <__aeabi_f2iz>:
 8001334:	0241      	lsls	r1, r0, #9
 8001336:	0042      	lsls	r2, r0, #1
 8001338:	0fc3      	lsrs	r3, r0, #31
 800133a:	0a49      	lsrs	r1, r1, #9
 800133c:	2000      	movs	r0, #0
 800133e:	0e12      	lsrs	r2, r2, #24
 8001340:	2a7e      	cmp	r2, #126	@ 0x7e
 8001342:	dd03      	ble.n	800134c <__aeabi_f2iz+0x18>
 8001344:	2a9d      	cmp	r2, #157	@ 0x9d
 8001346:	dd02      	ble.n	800134e <__aeabi_f2iz+0x1a>
 8001348:	4a09      	ldr	r2, [pc, #36]	@ (8001370 <__aeabi_f2iz+0x3c>)
 800134a:	1898      	adds	r0, r3, r2
 800134c:	4770      	bx	lr
 800134e:	2080      	movs	r0, #128	@ 0x80
 8001350:	0400      	lsls	r0, r0, #16
 8001352:	4301      	orrs	r1, r0
 8001354:	2a95      	cmp	r2, #149	@ 0x95
 8001356:	dc07      	bgt.n	8001368 <__aeabi_f2iz+0x34>
 8001358:	2096      	movs	r0, #150	@ 0x96
 800135a:	1a82      	subs	r2, r0, r2
 800135c:	40d1      	lsrs	r1, r2
 800135e:	4248      	negs	r0, r1
 8001360:	2b00      	cmp	r3, #0
 8001362:	d1f3      	bne.n	800134c <__aeabi_f2iz+0x18>
 8001364:	0008      	movs	r0, r1
 8001366:	e7f1      	b.n	800134c <__aeabi_f2iz+0x18>
 8001368:	3a96      	subs	r2, #150	@ 0x96
 800136a:	4091      	lsls	r1, r2
 800136c:	e7f7      	b.n	800135e <__aeabi_f2iz+0x2a>
 800136e:	46c0      	nop			@ (mov r8, r8)
 8001370:	7fffffff 	.word	0x7fffffff

08001374 <__aeabi_i2f>:
 8001374:	b570      	push	{r4, r5, r6, lr}
 8001376:	2800      	cmp	r0, #0
 8001378:	d013      	beq.n	80013a2 <__aeabi_i2f+0x2e>
 800137a:	17c3      	asrs	r3, r0, #31
 800137c:	18c5      	adds	r5, r0, r3
 800137e:	405d      	eors	r5, r3
 8001380:	0fc4      	lsrs	r4, r0, #31
 8001382:	0028      	movs	r0, r5
 8001384:	f000 f842 	bl	800140c <__clzsi2>
 8001388:	239e      	movs	r3, #158	@ 0x9e
 800138a:	0001      	movs	r1, r0
 800138c:	1a1b      	subs	r3, r3, r0
 800138e:	2b96      	cmp	r3, #150	@ 0x96
 8001390:	dc0f      	bgt.n	80013b2 <__aeabi_i2f+0x3e>
 8001392:	2808      	cmp	r0, #8
 8001394:	d034      	beq.n	8001400 <__aeabi_i2f+0x8c>
 8001396:	3908      	subs	r1, #8
 8001398:	408d      	lsls	r5, r1
 800139a:	026d      	lsls	r5, r5, #9
 800139c:	0a6d      	lsrs	r5, r5, #9
 800139e:	b2d8      	uxtb	r0, r3
 80013a0:	e002      	b.n	80013a8 <__aeabi_i2f+0x34>
 80013a2:	2400      	movs	r4, #0
 80013a4:	2000      	movs	r0, #0
 80013a6:	2500      	movs	r5, #0
 80013a8:	05c0      	lsls	r0, r0, #23
 80013aa:	4328      	orrs	r0, r5
 80013ac:	07e4      	lsls	r4, r4, #31
 80013ae:	4320      	orrs	r0, r4
 80013b0:	bd70      	pop	{r4, r5, r6, pc}
 80013b2:	2b99      	cmp	r3, #153	@ 0x99
 80013b4:	dc16      	bgt.n	80013e4 <__aeabi_i2f+0x70>
 80013b6:	1f42      	subs	r2, r0, #5
 80013b8:	2805      	cmp	r0, #5
 80013ba:	d000      	beq.n	80013be <__aeabi_i2f+0x4a>
 80013bc:	4095      	lsls	r5, r2
 80013be:	002a      	movs	r2, r5
 80013c0:	4811      	ldr	r0, [pc, #68]	@ (8001408 <__aeabi_i2f+0x94>)
 80013c2:	4002      	ands	r2, r0
 80013c4:	076e      	lsls	r6, r5, #29
 80013c6:	d009      	beq.n	80013dc <__aeabi_i2f+0x68>
 80013c8:	260f      	movs	r6, #15
 80013ca:	4035      	ands	r5, r6
 80013cc:	2d04      	cmp	r5, #4
 80013ce:	d005      	beq.n	80013dc <__aeabi_i2f+0x68>
 80013d0:	3204      	adds	r2, #4
 80013d2:	0155      	lsls	r5, r2, #5
 80013d4:	d502      	bpl.n	80013dc <__aeabi_i2f+0x68>
 80013d6:	239f      	movs	r3, #159	@ 0x9f
 80013d8:	4002      	ands	r2, r0
 80013da:	1a5b      	subs	r3, r3, r1
 80013dc:	0192      	lsls	r2, r2, #6
 80013de:	0a55      	lsrs	r5, r2, #9
 80013e0:	b2d8      	uxtb	r0, r3
 80013e2:	e7e1      	b.n	80013a8 <__aeabi_i2f+0x34>
 80013e4:	2205      	movs	r2, #5
 80013e6:	1a12      	subs	r2, r2, r0
 80013e8:	0028      	movs	r0, r5
 80013ea:	40d0      	lsrs	r0, r2
 80013ec:	0002      	movs	r2, r0
 80013ee:	0008      	movs	r0, r1
 80013f0:	301b      	adds	r0, #27
 80013f2:	4085      	lsls	r5, r0
 80013f4:	0028      	movs	r0, r5
 80013f6:	1e45      	subs	r5, r0, #1
 80013f8:	41a8      	sbcs	r0, r5
 80013fa:	4302      	orrs	r2, r0
 80013fc:	0015      	movs	r5, r2
 80013fe:	e7de      	b.n	80013be <__aeabi_i2f+0x4a>
 8001400:	026d      	lsls	r5, r5, #9
 8001402:	2096      	movs	r0, #150	@ 0x96
 8001404:	0a6d      	lsrs	r5, r5, #9
 8001406:	e7cf      	b.n	80013a8 <__aeabi_i2f+0x34>
 8001408:	fbffffff 	.word	0xfbffffff

0800140c <__clzsi2>:
 800140c:	211c      	movs	r1, #28
 800140e:	2301      	movs	r3, #1
 8001410:	041b      	lsls	r3, r3, #16
 8001412:	4298      	cmp	r0, r3
 8001414:	d301      	bcc.n	800141a <__clzsi2+0xe>
 8001416:	0c00      	lsrs	r0, r0, #16
 8001418:	3910      	subs	r1, #16
 800141a:	0a1b      	lsrs	r3, r3, #8
 800141c:	4298      	cmp	r0, r3
 800141e:	d301      	bcc.n	8001424 <__clzsi2+0x18>
 8001420:	0a00      	lsrs	r0, r0, #8
 8001422:	3908      	subs	r1, #8
 8001424:	091b      	lsrs	r3, r3, #4
 8001426:	4298      	cmp	r0, r3
 8001428:	d301      	bcc.n	800142e <__clzsi2+0x22>
 800142a:	0900      	lsrs	r0, r0, #4
 800142c:	3904      	subs	r1, #4
 800142e:	a202      	add	r2, pc, #8	@ (adr r2, 8001438 <__clzsi2+0x2c>)
 8001430:	5c10      	ldrb	r0, [r2, r0]
 8001432:	1840      	adds	r0, r0, r1
 8001434:	4770      	bx	lr
 8001436:	46c0      	nop			@ (mov r8, r8)
 8001438:	02020304 	.word	0x02020304
 800143c:	01010101 	.word	0x01010101
	...

08001448 <__clzdi2>:
 8001448:	b510      	push	{r4, lr}
 800144a:	2900      	cmp	r1, #0
 800144c:	d103      	bne.n	8001456 <__clzdi2+0xe>
 800144e:	f7ff ffdd 	bl	800140c <__clzsi2>
 8001452:	3020      	adds	r0, #32
 8001454:	e002      	b.n	800145c <__clzdi2+0x14>
 8001456:	0008      	movs	r0, r1
 8001458:	f7ff ffd8 	bl	800140c <__clzsi2>
 800145c:	bd10      	pop	{r4, pc}
 800145e:	46c0      	nop			@ (mov r8, r8)

08001460 <calc_elev_angle>:
#include "inertia_math.h"
#include "math.h"

float calc_elev_angle(module_ctrl_t *data) {
	return atanf(data->acc_raw[0] / (sqrtf(data->acc_raw[1]*data->acc_raw[1] + data->acc_raw[2]*data->acc_raw[2]))) * RAD_TO_DEG * -1;
 8001460:	2127      	movs	r1, #39	@ 0x27
 8001462:	2226      	movs	r2, #38	@ 0x26
float calc_elev_angle(module_ctrl_t *data) {
 8001464:	b570      	push	{r4, r5, r6, lr}
	return atanf(data->acc_raw[0] / (sqrtf(data->acc_raw[1]*data->acc_raw[1] + data->acc_raw[2]*data->acc_raw[2]))) * RAD_TO_DEG * -1;
 8001466:	5c41      	ldrb	r1, [r0, r1]
 8001468:	5c82      	ldrb	r2, [r0, r2]
 800146a:	0209      	lsls	r1, r1, #8
 800146c:	4311      	orrs	r1, r2
 800146e:	2228      	movs	r2, #40	@ 0x28
 8001470:	5c82      	ldrb	r2, [r0, r2]
float calc_elev_angle(module_ctrl_t *data) {
 8001472:	0003      	movs	r3, r0
	return atanf(data->acc_raw[0] / (sqrtf(data->acc_raw[1]*data->acc_raw[1] + data->acc_raw[2]*data->acc_raw[2]))) * RAD_TO_DEG * -1;
 8001474:	0412      	lsls	r2, r2, #16
 8001476:	430a      	orrs	r2, r1
 8001478:	2129      	movs	r1, #41	@ 0x29
 800147a:	5c45      	ldrb	r5, [r0, r1]
 800147c:	3102      	adds	r1, #2
 800147e:	062d      	lsls	r5, r5, #24
 8001480:	4315      	orrs	r5, r2
 8001482:	222a      	movs	r2, #42	@ 0x2a
 8001484:	5c41      	ldrb	r1, [r0, r1]
 8001486:	5c82      	ldrb	r2, [r0, r2]
 8001488:	0209      	lsls	r1, r1, #8
 800148a:	4311      	orrs	r1, r2
 800148c:	222c      	movs	r2, #44	@ 0x2c
 800148e:	5c82      	ldrb	r2, [r0, r2]
 8001490:	0412      	lsls	r2, r2, #16
 8001492:	430a      	orrs	r2, r1
 8001494:	212d      	movs	r1, #45	@ 0x2d
 8001496:	5c40      	ldrb	r0, [r0, r1]
 8001498:	3102      	adds	r1, #2
 800149a:	0600      	lsls	r0, r0, #24
 800149c:	4310      	orrs	r0, r2
 800149e:	222e      	movs	r2, #46	@ 0x2e
 80014a0:	5c59      	ldrb	r1, [r3, r1]
 80014a2:	5c9a      	ldrb	r2, [r3, r2]
 80014a4:	0209      	lsls	r1, r1, #8
 80014a6:	4311      	orrs	r1, r2
 80014a8:	2230      	movs	r2, #48	@ 0x30
 80014aa:	5c9a      	ldrb	r2, [r3, r2]
 80014ac:	0412      	lsls	r2, r2, #16
 80014ae:	430a      	orrs	r2, r1
 80014b0:	2131      	movs	r1, #49	@ 0x31
 80014b2:	5c5c      	ldrb	r4, [r3, r1]
 80014b4:	1c01      	adds	r1, r0, #0
 80014b6:	0624      	lsls	r4, r4, #24
 80014b8:	4314      	orrs	r4, r2
 80014ba:	f7ff fc43 	bl	8000d44 <__aeabi_fmul>
 80014be:	1c21      	adds	r1, r4, #0
 80014c0:	1c06      	adds	r6, r0, #0
 80014c2:	1c20      	adds	r0, r4, #0
 80014c4:	f7ff fc3e 	bl	8000d44 <__aeabi_fmul>
 80014c8:	1c01      	adds	r1, r0, #0
 80014ca:	1c30      	adds	r0, r6, #0
 80014cc:	f7ff f8ca 	bl	8000664 <__aeabi_fadd>
 80014d0:	f004 f8ce 	bl	8005670 <sqrtf>
 80014d4:	1c01      	adds	r1, r0, #0
 80014d6:	1c28      	adds	r0, r5, #0
 80014d8:	f7ff fa4e 	bl	8000978 <__aeabi_fdiv>
 80014dc:	f004 f8e4 	bl	80056a8 <atanf>
 80014e0:	4903      	ldr	r1, [pc, #12]	@ (80014f0 <calc_elev_angle+0x90>)
 80014e2:	f7ff fc2f 	bl	8000d44 <__aeabi_fmul>
 80014e6:	2380      	movs	r3, #128	@ 0x80
 80014e8:	061b      	lsls	r3, r3, #24
 80014ea:	469c      	mov	ip, r3
 80014ec:	4460      	add	r0, ip
}
 80014ee:	bd70      	pop	{r4, r5, r6, pc}
 80014f0:	42652ee1 	.word	0x42652ee1

080014f4 <capture_init_pos>:
uint8_t capture_init_pos(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t capture_init_pos(void) {
 80014f4:	b570      	push	{r4, r5, r6, lr}
	uint8_t err = 0x00;
	err = lsm6dsox_read_acc();
 80014f6:	f000 fb7f 	bl	8001bf8 <lsm6dsox_read_acc>
	Data.acc_raw[0] = lsm6dsox_from_fs2_to_mg(sensors_data.acc_data_raw[0]);
 80014fa:	4e33      	ldr	r6, [pc, #204]	@ (80015c8 <capture_init_pos+0xd4>)
 80014fc:	6830      	ldr	r0, [r6, #0]
 80014fe:	f7ff ff19 	bl	8001334 <__aeabi_f2iz>
 8001502:	b200      	sxth	r0, r0
 8001504:	f000 fbf8 	bl	8001cf8 <lsm6dsox_from_fs2_to_mg>
 8001508:	4b30      	ldr	r3, [pc, #192]	@ (80015cc <capture_init_pos+0xd8>)
 800150a:	0a02      	lsrs	r2, r0, #8
 800150c:	7018      	strb	r0, [r3, #0]
 800150e:	705a      	strb	r2, [r3, #1]
 8001510:	0c02      	lsrs	r2, r0, #16
 8001512:	0e00      	lsrs	r0, r0, #24
 8001514:	709a      	strb	r2, [r3, #2]
 8001516:	70d8      	strb	r0, [r3, #3]
	Data.acc_raw[1] = lsm6dsox_from_fs2_to_mg(sensors_data.acc_data_raw[1]);
 8001518:	6870      	ldr	r0, [r6, #4]
 800151a:	f7ff ff0b 	bl	8001334 <__aeabi_f2iz>
	Data.acc_raw[0] = lsm6dsox_from_fs2_to_mg(sensors_data.acc_data_raw[0]);
 800151e:	4c2c      	ldr	r4, [pc, #176]	@ (80015d0 <capture_init_pos+0xdc>)
	Data.acc_raw[1] = lsm6dsox_from_fs2_to_mg(sensors_data.acc_data_raw[1]);
 8001520:	b200      	sxth	r0, r0
 8001522:	f000 fbe9 	bl	8001cf8 <lsm6dsox_from_fs2_to_mg>
 8001526:	0023      	movs	r3, r4
 8001528:	0a02      	lsrs	r2, r0, #8
 800152a:	332a      	adds	r3, #42	@ 0x2a
 800152c:	7018      	strb	r0, [r3, #0]
 800152e:	705a      	strb	r2, [r3, #1]
 8001530:	0c02      	lsrs	r2, r0, #16
 8001532:	0e00      	lsrs	r0, r0, #24
 8001534:	709a      	strb	r2, [r3, #2]
 8001536:	70d8      	strb	r0, [r3, #3]
	Data.acc_raw[2] = lsm6dsox_from_fs2_to_mg(sensors_data.acc_data_raw[2]);
 8001538:	68b0      	ldr	r0, [r6, #8]
 800153a:	f7ff fefb 	bl	8001334 <__aeabi_f2iz>
 800153e:	b200      	sxth	r0, r0
 8001540:	f000 fbda 	bl	8001cf8 <lsm6dsox_from_fs2_to_mg>
 8001544:	0023      	movs	r3, r4
 8001546:	0a02      	lsrs	r2, r0, #8
 8001548:	332e      	adds	r3, #46	@ 0x2e
 800154a:	7018      	strb	r0, [r3, #0]
 800154c:	705a      	strb	r2, [r3, #1]
 800154e:	0c02      	lsrs	r2, r0, #16
 8001550:	0e00      	lsrs	r0, r0, #24
 8001552:	709a      	strb	r2, [r3, #2]
 8001554:	70d8      	strb	r0, [r3, #3]
	err = lsm6dsox_read_gyro();
 8001556:	f000 fb8f 	bl	8001c78 <lsm6dsox_read_gyro>
 800155a:	0005      	movs	r5, r0
	Data.gyro_raw[0] = lsm6dsox_from_fs125_to_mdps(sensors_data.gyro_data_raw[0]);
 800155c:	68f0      	ldr	r0, [r6, #12]
 800155e:	f7ff fee9 	bl	8001334 <__aeabi_f2iz>
 8001562:	b200      	sxth	r0, r0
 8001564:	f000 fbd2 	bl	8001d0c <lsm6dsox_from_fs125_to_mdps>
 8001568:	0023      	movs	r3, r4
 800156a:	0a02      	lsrs	r2, r0, #8
 800156c:	3332      	adds	r3, #50	@ 0x32
 800156e:	7018      	strb	r0, [r3, #0]
 8001570:	705a      	strb	r2, [r3, #1]
 8001572:	0c02      	lsrs	r2, r0, #16
 8001574:	0e00      	lsrs	r0, r0, #24
 8001576:	709a      	strb	r2, [r3, #2]
 8001578:	70d8      	strb	r0, [r3, #3]
	Data.gyro_raw[1] = lsm6dsox_from_fs125_to_mdps(sensors_data.gyro_data_raw[1]);
 800157a:	6930      	ldr	r0, [r6, #16]
 800157c:	f7ff feda 	bl	8001334 <__aeabi_f2iz>
 8001580:	b200      	sxth	r0, r0
 8001582:	f000 fbc3 	bl	8001d0c <lsm6dsox_from_fs125_to_mdps>
 8001586:	0023      	movs	r3, r4
 8001588:	0a02      	lsrs	r2, r0, #8
 800158a:	3336      	adds	r3, #54	@ 0x36
 800158c:	7018      	strb	r0, [r3, #0]
 800158e:	705a      	strb	r2, [r3, #1]
 8001590:	0c02      	lsrs	r2, r0, #16
 8001592:	0e00      	lsrs	r0, r0, #24
 8001594:	709a      	strb	r2, [r3, #2]
 8001596:	70d8      	strb	r0, [r3, #3]
	Data.gyro_raw[2] = lsm6dsox_from_fs125_to_mdps(sensors_data.gyro_data_raw[2]);
 8001598:	6970      	ldr	r0, [r6, #20]
 800159a:	f7ff fecb 	bl	8001334 <__aeabi_f2iz>
 800159e:	b200      	sxth	r0, r0
 80015a0:	f000 fbb4 	bl	8001d0c <lsm6dsox_from_fs125_to_mdps>
 80015a4:	0022      	movs	r2, r4
 80015a6:	0a03      	lsrs	r3, r0, #8
 80015a8:	323a      	adds	r2, #58	@ 0x3a
 80015aa:	7010      	strb	r0, [r2, #0]
 80015ac:	7053      	strb	r3, [r2, #1]
 80015ae:	0c03      	lsrs	r3, r0, #16
 80015b0:	0e00      	lsrs	r0, r0, #24
 80015b2:	7093      	strb	r3, [r2, #2]
 80015b4:	70d0      	strb	r0, [r2, #3]
	/*err = lis3mdl_read_mag();
	 Data.mag_raw[0] = lis3mdl_from_fs4_to_gauss(sensors_data.mag_data_raw[0]);
	 Data.mag_raw[1] = lis3mdl_from_fs4_to_gauss(sensors_data.mag_data_raw[1]);
	 Data.mag_raw[2] = lis3mdl_from_fs4_to_gauss(sensors_data.mag_data_raw[2]);*/
	if (!err) {
 80015b6:	2d00      	cmp	r5, #0
 80015b8:	d104      	bne.n	80015c4 <capture_init_pos+0xd0>
		init_elev = calc_elev_angle(&Data);
 80015ba:	0020      	movs	r0, r4
 80015bc:	f7ff ff50 	bl	8001460 <calc_elev_angle>
 80015c0:	4b04      	ldr	r3, [pc, #16]	@ (80015d4 <capture_init_pos+0xe0>)
 80015c2:	6018      	str	r0, [r3, #0]
		//init_yaw = calc_yaw_angle(&Data);
	}
	return err;
}
 80015c4:	0028      	movs	r0, r5
 80015c6:	bd70      	pop	{r4, r5, r6, pc}
 80015c8:	20000340 	.word	0x20000340
 80015cc:	2000030a 	.word	0x2000030a
 80015d0:	200002e4 	.word	0x200002e4
 80015d4:	20000114 	.word	0x20000114

080015d8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80015d8:	b500      	push	{lr}
 80015da:	b093      	sub	sp, #76	@ 0x4c
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80015dc:	2238      	movs	r2, #56	@ 0x38
 80015de:	2100      	movs	r1, #0
 80015e0:	a804      	add	r0, sp, #16
 80015e2:	f004 fb2b 	bl	8005c3c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80015e6:	2100      	movs	r1, #0
 80015e8:	2210      	movs	r2, #16
 80015ea:	4668      	mov	r0, sp
 80015ec:	f004 fb26 	bl	8005c3c <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015f0:	2080      	movs	r0, #128	@ 0x80
 80015f2:	0080      	lsls	r0, r0, #2
 80015f4:	f001 fa1e 	bl	8002a34 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015f8:	2302      	movs	r3, #2
 80015fa:	9304      	str	r3, [sp, #16]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015fc:	33fe      	adds	r3, #254	@ 0xfe
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015fe:	2240      	movs	r2, #64	@ 0x40
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001600:	9307      	str	r3, [sp, #28]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001602:	2300      	movs	r3, #0
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001604:	a804      	add	r0, sp, #16
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001606:	9308      	str	r3, [sp, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001608:	9209      	str	r2, [sp, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800160a:	930b      	str	r3, [sp, #44]	@ 0x2c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800160c:	f001 fa3e 	bl	8002a8c <HAL_RCC_OscConfig>
 8001610:	1e01      	subs	r1, r0, #0
 8001612:	d001      	beq.n	8001618 <SystemClock_Config+0x40>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001614:	b672      	cpsid	i
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001616:	e7fe      	b.n	8001616 <SystemClock_Config+0x3e>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001618:	2307      	movs	r3, #7
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800161a:	9001      	str	r0, [sp, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800161c:	9002      	str	r0, [sp, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800161e:	9003      	str	r0, [sp, #12]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001620:	4668      	mov	r0, sp
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001622:	9300      	str	r3, [sp, #0]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001624:	f001 fc9a 	bl	8002f5c <HAL_RCC_ClockConfig>
 8001628:	2800      	cmp	r0, #0
 800162a:	d001      	beq.n	8001630 <SystemClock_Config+0x58>
 800162c:	b672      	cpsid	i
	while (1) {
 800162e:	e7fe      	b.n	800162e <SystemClock_Config+0x56>
}
 8001630:	b013      	add	sp, #76	@ 0x4c
 8001632:	bd00      	pop	{pc}

08001634 <main>:
int main(void) {
 8001634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001636:	b091      	sub	sp, #68	@ 0x44
	HAL_Init();
 8001638:	f000 fd02 	bl	8002040 <HAL_Init>
	SystemClock_Config();
 800163c:	f7ff ffcc 	bl	80015d8 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001640:	2214      	movs	r2, #20
 8001642:	2100      	movs	r1, #0
 8001644:	a80b      	add	r0, sp, #44	@ 0x2c
 8001646:	f004 faf9 	bl	8005c3c <memset>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800164a:	2102      	movs	r1, #2
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800164c:	2601      	movs	r6, #1
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 800164e:	20a0      	movs	r0, #160	@ 0xa0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001650:	4bb4      	ldr	r3, [pc, #720]	@ (8001924 <main+0x2f0>)
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8001652:	05c0      	lsls	r0, r0, #23
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001654:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	2500      	movs	r5, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001658:	430a      	orrs	r2, r1
 800165a:	635a      	str	r2, [r3, #52]	@ 0x34
 800165c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800165e:	400a      	ands	r2, r1
 8001660:	9205      	str	r2, [sp, #20]
 8001662:	9a05      	ldr	r2, [sp, #20]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001664:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001666:	1849      	adds	r1, r1, r1
 8001668:	430a      	orrs	r2, r1
 800166a:	635a      	str	r2, [r3, #52]	@ 0x34
 800166c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800166e:	400a      	ands	r2, r1
 8001670:	9206      	str	r2, [sp, #24]
 8001672:	9a06      	ldr	r2, [sp, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001674:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8001676:	0031      	movs	r1, r6
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001678:	4332      	orrs	r2, r6
 800167a:	635a      	str	r2, [r3, #52]	@ 0x34
 800167c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 800167e:	0032      	movs	r2, r6
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001680:	4033      	ands	r3, r6
 8001682:	9307      	str	r3, [sp, #28]
 8001684:	9b07      	ldr	r3, [sp, #28]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8001686:	f000 fe77 	bl	8002378 <HAL_GPIO_WritePin>
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168a:	20a0      	movs	r0, #160	@ 0xa0
 800168c:	a90b      	add	r1, sp, #44	@ 0x2c
 800168e:	05c0      	lsls	r0, r0, #23
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001690:	960b      	str	r6, [sp, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001692:	960c      	str	r6, [sp, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	950d      	str	r5, [sp, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001696:	950e      	str	r5, [sp, #56]	@ 0x38
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001698:	f000 fdbc 	bl	8002214 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 800169c:	2380      	movs	r3, #128	@ 0x80
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	930b      	str	r3, [sp, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a2:	20a0      	movs	r0, #160	@ 0xa0
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016a4:	2388      	movs	r3, #136	@ 0x88
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a6:	a90b      	add	r1, sp, #44	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016a8:	035b      	lsls	r3, r3, #13
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016aa:	05c0      	lsls	r0, r0, #23
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016ac:	930c      	str	r3, [sp, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	950d      	str	r5, [sp, #52]	@ 0x34
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b0:	f000 fdb0 	bl	8002214 <HAL_GPIO_Init>
	hi2c2.Instance = I2C2;
 80016b4:	4c9c      	ldr	r4, [pc, #624]	@ (8001928 <main+0x2f4>)
 80016b6:	4b9d      	ldr	r3, [pc, #628]	@ (800192c <main+0x2f8>)
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 80016b8:	0020      	movs	r0, r4
	hi2c2.Instance = I2C2;
 80016ba:	6023      	str	r3, [r4, #0]
	hi2c2.Init.Timing = 0x00303D5B;
 80016bc:	4b9c      	ldr	r3, [pc, #624]	@ (8001930 <main+0x2fc>)
	hi2c2.Init.OwnAddress1 = 0;
 80016be:	60a5      	str	r5, [r4, #8]
	hi2c2.Init.Timing = 0x00303D5B;
 80016c0:	6063      	str	r3, [r4, #4]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016c2:	60e6      	str	r6, [r4, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016c4:	6125      	str	r5, [r4, #16]
	hi2c2.Init.OwnAddress2 = 0;
 80016c6:	6165      	str	r5, [r4, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016c8:	61a5      	str	r5, [r4, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016ca:	61e5      	str	r5, [r4, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016cc:	6225      	str	r5, [r4, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 80016ce:	f000 ffdb 	bl	8002688 <HAL_I2C_Init>
 80016d2:	0001      	movs	r1, r0
 80016d4:	42a8      	cmp	r0, r5
 80016d6:	d001      	beq.n	80016dc <main+0xa8>
 80016d8:	b672      	cpsid	i
	while (1) {
 80016da:	e7fe      	b.n	80016da <main+0xa6>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE)
 80016dc:	0020      	movs	r0, r4
 80016de:	f001 f95f 	bl	80029a0 <HAL_I2CEx_ConfigAnalogFilter>
 80016e2:	1e01      	subs	r1, r0, #0
 80016e4:	d001      	beq.n	80016ea <main+0xb6>
 80016e6:	b672      	cpsid	i
	while (1) {
 80016e8:	e7fe      	b.n	80016e8 <main+0xb4>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 80016ea:	0020      	movs	r0, r4
 80016ec:	f001 f97e 	bl	80029ec <HAL_I2CEx_ConfigDigitalFilter>
 80016f0:	2800      	cmp	r0, #0
 80016f2:	d001      	beq.n	80016f8 <main+0xc4>
 80016f4:	b672      	cpsid	i
	while (1) {
 80016f6:	e7fe      	b.n	80016f6 <main+0xc2>
	huart1.Init.BaudRate = 115200;
 80016f8:	26e1      	movs	r6, #225	@ 0xe1
	huart1.Init.Mode = UART_MODE_TX_RX;
 80016fa:	250c      	movs	r5, #12
	huart1.Instance = USART1;
 80016fc:	4c8d      	ldr	r4, [pc, #564]	@ (8001934 <main+0x300>)
 80016fe:	4b8e      	ldr	r3, [pc, #568]	@ (8001938 <main+0x304>)
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001700:	60a0      	str	r0, [r4, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001702:	60e0      	str	r0, [r4, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001704:	6120      	str	r0, [r4, #16]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001706:	61a0      	str	r0, [r4, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001708:	61e0      	str	r0, [r4, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800170a:	6220      	str	r0, [r4, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800170c:	6260      	str	r0, [r4, #36]	@ 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800170e:	62a0      	str	r0, [r4, #40]	@ 0x28
	huart1.Init.BaudRate = 115200;
 8001710:	0276      	lsls	r6, r6, #9
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001712:	0020      	movs	r0, r4
	huart1.Instance = USART1;
 8001714:	6023      	str	r3, [r4, #0]
	huart1.Init.BaudRate = 115200;
 8001716:	6066      	str	r6, [r4, #4]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001718:	6165      	str	r5, [r4, #20]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800171a:	f003 f8bb 	bl	8004894 <HAL_UART_Init>
 800171e:	1e01      	subs	r1, r0, #0
 8001720:	d001      	beq.n	8001726 <main+0xf2>
 8001722:	b672      	cpsid	i
	while (1) {
 8001724:	e7fe      	b.n	8001724 <main+0xf0>
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 8001726:	0020      	movs	r0, r4
 8001728:	f003 fa42 	bl	8004bb0 <HAL_UARTEx_SetTxFifoThreshold>
 800172c:	1e01      	subs	r1, r0, #0
 800172e:	d001      	beq.n	8001734 <main+0x100>
 8001730:	b672      	cpsid	i
	while (1) {
 8001732:	e7fe      	b.n	8001732 <main+0xfe>
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 8001734:	0020      	movs	r0, r4
 8001736:	f003 fa5b 	bl	8004bf0 <HAL_UARTEx_SetRxFifoThreshold>
 800173a:	2800      	cmp	r0, #0
 800173c:	d001      	beq.n	8001742 <main+0x10e>
 800173e:	b672      	cpsid	i
	while (1) {
 8001740:	e7fe      	b.n	8001740 <main+0x10c>
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 8001742:	0020      	movs	r0, r4
 8001744:	f003 fa16 	bl	8004b74 <HAL_UARTEx_DisableFifoMode>
 8001748:	1e01      	subs	r1, r0, #0
 800174a:	d001      	beq.n	8001750 <main+0x11c>
 800174c:	b672      	cpsid	i
	while (1) {
 800174e:	e7fe      	b.n	800174e <main+0x11a>
	huart2.Instance = USART2;
 8001750:	4c7a      	ldr	r4, [pc, #488]	@ (800193c <main+0x308>)
 8001752:	4b7b      	ldr	r3, [pc, #492]	@ (8001940 <main+0x30c>)
	if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 8001754:	0002      	movs	r2, r0
	huart2.Instance = USART2;
 8001756:	6023      	str	r3, [r4, #0]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001758:	60a0      	str	r0, [r4, #8]
	if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 800175a:	0003      	movs	r3, r0
	huart2.Init.StopBits = UART_STOPBITS_1;
 800175c:	60e0      	str	r0, [r4, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800175e:	6120      	str	r0, [r4, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001760:	61a0      	str	r0, [r4, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001762:	61e0      	str	r0, [r4, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001764:	6220      	str	r0, [r4, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001766:	6260      	str	r0, [r4, #36]	@ 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001768:	62a0      	str	r0, [r4, #40]	@ 0x28
	if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 800176a:	0020      	movs	r0, r4
	huart2.Init.BaudRate = 115200;
 800176c:	6066      	str	r6, [r4, #4]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800176e:	6165      	str	r5, [r4, #20]
	if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 8001770:	f003 f9b6 	bl	8004ae0 <HAL_RS485Ex_Init>
 8001774:	1e06      	subs	r6, r0, #0
 8001776:	d001      	beq.n	800177c <main+0x148>
 8001778:	b672      	cpsid	i
	while (1) {
 800177a:	e7fe      	b.n	800177a <main+0x146>
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800177c:	0001      	movs	r1, r0
 800177e:	2210      	movs	r2, #16
 8001780:	a80b      	add	r0, sp, #44	@ 0x2c
 8001782:	f004 fa5b 	bl	8005c3c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001786:	002a      	movs	r2, r5
 8001788:	0031      	movs	r1, r6
 800178a:	a808      	add	r0, sp, #32
 800178c:	f004 fa56 	bl	8005c3c <memset>
	htim3.Instance = TIM3;
 8001790:	4d6c      	ldr	r5, [pc, #432]	@ (8001944 <main+0x310>)
 8001792:	4b6d      	ldr	r3, [pc, #436]	@ (8001948 <main+0x314>)
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001794:	0028      	movs	r0, r5
	htim3.Instance = TIM3;
 8001796:	602b      	str	r3, [r5, #0]
	htim3.Init.Prescaler = 15;
 8001798:	230f      	movs	r3, #15
 800179a:	606b      	str	r3, [r5, #4]
	htim3.Init.Period = 50;
 800179c:	3323      	adds	r3, #35	@ 0x23
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800179e:	60ae      	str	r6, [r5, #8]
	htim3.Init.Period = 50;
 80017a0:	60eb      	str	r3, [r5, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017a2:	612e      	str	r6, [r5, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017a4:	61ae      	str	r6, [r5, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 80017a6:	f001 fec3 	bl	8003530 <HAL_TIM_Base_Init>
 80017aa:	2800      	cmp	r0, #0
 80017ac:	d001      	beq.n	80017b2 <main+0x17e>
 80017ae:	b672      	cpsid	i
	while (1) {
 80017b0:	e7fe      	b.n	80017b0 <main+0x17c>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017b2:	2380      	movs	r3, #128	@ 0x80
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80017b4:	0028      	movs	r0, r5
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017b6:	015b      	lsls	r3, r3, #5
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80017b8:	a90b      	add	r1, sp, #44	@ 0x2c
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017ba:	930b      	str	r3, [sp, #44]	@ 0x2c
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80017bc:	f001 feee 	bl	800359c <HAL_TIM_ConfigClockSource>
 80017c0:	2800      	cmp	r0, #0
 80017c2:	d001      	beq.n	80017c8 <main+0x194>
 80017c4:	b672      	cpsid	i
	while (1) {
 80017c6:	e7fe      	b.n	80017c6 <main+0x192>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017c8:	2300      	movs	r3, #0
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80017ca:	0028      	movs	r0, r5
 80017cc:	a908      	add	r1, sp, #32
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ce:	9308      	str	r3, [sp, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017d0:	930a      	str	r3, [sp, #40]	@ 0x28
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80017d2:	f001 ff7b 	bl	80036cc <HAL_TIMEx_MasterConfigSynchronization>
 80017d6:	1e06      	subs	r6, r0, #0
 80017d8:	d001      	beq.n	80017de <main+0x1aa>
 80017da:	b672      	cpsid	i
	while (1) {
 80017dc:	e7fe      	b.n	80017dc <main+0x1a8>
	HAL_GPIO_WritePin(GPIOA, 0, GPIO_PIN_SET); /* Driver HARDSTOP connected to GND */
 80017de:	0001      	movs	r1, r0
 80017e0:	20a0      	movs	r0, #160	@ 0xa0
 80017e2:	2201      	movs	r2, #1
 80017e4:	05c0      	lsls	r0, r0, #23
 80017e6:	f000 fdc7 	bl	8002378 <HAL_GPIO_WritePin>
	MT_PORT_SetTimerModule(&htim3);
 80017ea:	0028      	movs	r0, r5
 80017ec:	f003 fce4 	bl	80051b8 <MT_PORT_SetTimerModule>
	MT_PORT_SetUartModule(&huart2);
 80017f0:	0020      	movs	r0, r4
 80017f2:	f003 fce7 	bl	80051c4 <MT_PORT_SetUartModule>
	mb_data_init();
 80017f6:	f000 f981 	bl	8001afc <mb_data_init>
	uint8_t err = lsm6dsox_init();
 80017fa:	f000 f9ef 	bl	8001bdc <lsm6dsox_init>
	err = lis3mdl_init();
 80017fe:	f000 f9d1 	bl	8001ba4 <lis3mdl_init>
	eStatus = eMBInit(MB_RTU, 0x0A, 0, 115200, MB_PAR_NONE);
 8001802:	23e1      	movs	r3, #225	@ 0xe1
 8001804:	0032      	movs	r2, r6
 8001806:	210a      	movs	r1, #10
 8001808:	0030      	movs	r0, r6
 800180a:	9600      	str	r6, [sp, #0]
 800180c:	025b      	lsls	r3, r3, #9
					Data.mode = 0xFFFF;
 800180e:	2601      	movs	r6, #1
	eStatus = eMBInit(MB_RTU, 0x0A, 0, 115200, MB_PAR_NONE);
 8001810:	f003 fbda 	bl	8004fc8 <eMBInit>
	eStatus = eMBEnable();
 8001814:	f003 fc32 	bl	800507c <eMBEnable>
					Data.mode = 0xFFFF;
 8001818:	4276      	negs	r6, r6
		eMBPoll();
 800181a:	f003 fc3f 	bl	800509c <eMBPoll>
		switch (Data.mode) {
 800181e:	4c4b      	ldr	r4, [pc, #300]	@ (800194c <main+0x318>)
 8001820:	7863      	ldrb	r3, [r4, #1]
 8001822:	7822      	ldrb	r2, [r4, #0]
 8001824:	021b      	lsls	r3, r3, #8
 8001826:	4313      	orrs	r3, r2
 8001828:	2b02      	cmp	r3, #2
 800182a:	d100      	bne.n	800182e <main+0x1fa>
 800182c:	e098      	b.n	8001960 <main+0x32c>
 800182e:	4a48      	ldr	r2, [pc, #288]	@ (8001950 <main+0x31c>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d072      	beq.n	800191a <main+0x2e6>
 8001834:	2b01      	cmp	r3, #1
 8001836:	d000      	beq.n	800183a <main+0x206>
 8001838:	e124      	b.n	8001a84 <main+0x450>
			if (HAL_GetTick() - data_upd_time_prev > DATA_UPD_TIME) {
 800183a:	f000 fc21 	bl	8002080 <HAL_GetTick>
 800183e:	4f45      	ldr	r7, [pc, #276]	@ (8001954 <main+0x320>)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	1ac0      	subs	r0, r0, r3
 8001844:	2832      	cmp	r0, #50	@ 0x32
 8001846:	d9e8      	bls.n	800181a <main+0x1e6>
				err = lsm6dsox_read_acc();
 8001848:	f000 f9d6 	bl	8001bf8 <lsm6dsox_read_acc>
				Data.acc_raw[0] = lsm6dsox_from_fs2_to_mg(sensors_data.acc_data_raw[0]);
 800184c:	4d42      	ldr	r5, [pc, #264]	@ (8001958 <main+0x324>)
 800184e:	6828      	ldr	r0, [r5, #0]
 8001850:	f7ff fd70 	bl	8001334 <__aeabi_f2iz>
 8001854:	b200      	sxth	r0, r0
 8001856:	f000 fa4f 	bl	8001cf8 <lsm6dsox_from_fs2_to_mg>
 800185a:	0023      	movs	r3, r4
 800185c:	0a02      	lsrs	r2, r0, #8
 800185e:	3326      	adds	r3, #38	@ 0x26
 8001860:	7018      	strb	r0, [r3, #0]
 8001862:	705a      	strb	r2, [r3, #1]
 8001864:	0c02      	lsrs	r2, r0, #16
 8001866:	0e00      	lsrs	r0, r0, #24
 8001868:	709a      	strb	r2, [r3, #2]
 800186a:	70d8      	strb	r0, [r3, #3]
				Data.acc_raw[1] = lsm6dsox_from_fs2_to_mg(sensors_data.acc_data_raw[1]);
 800186c:	6868      	ldr	r0, [r5, #4]
 800186e:	f7ff fd61 	bl	8001334 <__aeabi_f2iz>
 8001872:	b200      	sxth	r0, r0
 8001874:	f000 fa40 	bl	8001cf8 <lsm6dsox_from_fs2_to_mg>
 8001878:	0023      	movs	r3, r4
 800187a:	0a02      	lsrs	r2, r0, #8
 800187c:	332a      	adds	r3, #42	@ 0x2a
 800187e:	7018      	strb	r0, [r3, #0]
 8001880:	705a      	strb	r2, [r3, #1]
 8001882:	0c02      	lsrs	r2, r0, #16
 8001884:	0e00      	lsrs	r0, r0, #24
 8001886:	709a      	strb	r2, [r3, #2]
 8001888:	70d8      	strb	r0, [r3, #3]
				Data.acc_raw[2] = lsm6dsox_from_fs2_to_mg(sensors_data.acc_data_raw[2]);
 800188a:	68a8      	ldr	r0, [r5, #8]
 800188c:	f7ff fd52 	bl	8001334 <__aeabi_f2iz>
 8001890:	b200      	sxth	r0, r0
 8001892:	f000 fa31 	bl	8001cf8 <lsm6dsox_from_fs2_to_mg>
 8001896:	0023      	movs	r3, r4
 8001898:	0a02      	lsrs	r2, r0, #8
 800189a:	332e      	adds	r3, #46	@ 0x2e
 800189c:	7018      	strb	r0, [r3, #0]
 800189e:	705a      	strb	r2, [r3, #1]
 80018a0:	0c02      	lsrs	r2, r0, #16
 80018a2:	0e00      	lsrs	r0, r0, #24
 80018a4:	709a      	strb	r2, [r3, #2]
 80018a6:	70d8      	strb	r0, [r3, #3]
				err = lsm6dsox_read_gyro();
 80018a8:	f000 f9e6 	bl	8001c78 <lsm6dsox_read_gyro>
 80018ac:	9003      	str	r0, [sp, #12]
				Data.gyro_raw[0] = lsm6dsox_from_fs125_to_mdps(sensors_data.gyro_data_raw[0]);
 80018ae:	68e8      	ldr	r0, [r5, #12]
 80018b0:	f7ff fd40 	bl	8001334 <__aeabi_f2iz>
 80018b4:	b200      	sxth	r0, r0
 80018b6:	f000 fa29 	bl	8001d0c <lsm6dsox_from_fs125_to_mdps>
 80018ba:	0023      	movs	r3, r4
 80018bc:	0a02      	lsrs	r2, r0, #8
 80018be:	3332      	adds	r3, #50	@ 0x32
 80018c0:	7018      	strb	r0, [r3, #0]
 80018c2:	705a      	strb	r2, [r3, #1]
 80018c4:	0c02      	lsrs	r2, r0, #16
 80018c6:	0e00      	lsrs	r0, r0, #24
 80018c8:	709a      	strb	r2, [r3, #2]
 80018ca:	70d8      	strb	r0, [r3, #3]
				Data.gyro_raw[1] = lsm6dsox_from_fs125_to_mdps(sensors_data.gyro_data_raw[1]);
 80018cc:	6928      	ldr	r0, [r5, #16]
 80018ce:	f7ff fd31 	bl	8001334 <__aeabi_f2iz>
 80018d2:	b200      	sxth	r0, r0
 80018d4:	f000 fa1a 	bl	8001d0c <lsm6dsox_from_fs125_to_mdps>
 80018d8:	0023      	movs	r3, r4
 80018da:	0a02      	lsrs	r2, r0, #8
 80018dc:	3336      	adds	r3, #54	@ 0x36
 80018de:	7018      	strb	r0, [r3, #0]
 80018e0:	705a      	strb	r2, [r3, #1]
 80018e2:	0c02      	lsrs	r2, r0, #16
 80018e4:	0e00      	lsrs	r0, r0, #24
 80018e6:	709a      	strb	r2, [r3, #2]
 80018e8:	70d8      	strb	r0, [r3, #3]
				Data.gyro_raw[2] = lsm6dsox_from_fs125_to_mdps(sensors_data.gyro_data_raw[2]);
 80018ea:	6968      	ldr	r0, [r5, #20]
 80018ec:	f7ff fd22 	bl	8001334 <__aeabi_f2iz>
 80018f0:	b200      	sxth	r0, r0
 80018f2:	f000 fa0b 	bl	8001d0c <lsm6dsox_from_fs125_to_mdps>
 80018f6:	0023      	movs	r3, r4
 80018f8:	0a02      	lsrs	r2, r0, #8
 80018fa:	333a      	adds	r3, #58	@ 0x3a
 80018fc:	7018      	strb	r0, [r3, #0]
 80018fe:	705a      	strb	r2, [r3, #1]
 8001900:	0c02      	lsrs	r2, r0, #16
 8001902:	0e00      	lsrs	r0, r0, #24
 8001904:	709a      	strb	r2, [r3, #2]
 8001906:	70d8      	strb	r0, [r3, #3]
				Data.status = err;
 8001908:	9b03      	ldr	r3, [sp, #12]
 800190a:	345a      	adds	r4, #90	@ 0x5a
 800190c:	7023      	strb	r3, [r4, #0]
 800190e:	0a1b      	lsrs	r3, r3, #8
 8001910:	7063      	strb	r3, [r4, #1]
				data_upd_time_prev = HAL_GetTick();
 8001912:	f000 fbb5 	bl	8002080 <HAL_GetTick>
 8001916:	6038      	str	r0, [r7, #0]
 8001918:	e77f      	b.n	800181a <main+0x1e6>
			captured_pos = 0x00;
 800191a:	2200      	movs	r2, #0
 800191c:	4b0f      	ldr	r3, [pc, #60]	@ (800195c <main+0x328>)
 800191e:	701a      	strb	r2, [r3, #0]
			break;
 8001920:	e77b      	b.n	800181a <main+0x1e6>
 8001922:	46c0      	nop			@ (mov r8, r8)
 8001924:	40021000 	.word	0x40021000
 8001928:	20000290 	.word	0x20000290
 800192c:	40005800 	.word	0x40005800
 8001930:	00303d5b 	.word	0x00303d5b
 8001934:	200001b0 	.word	0x200001b0
 8001938:	40013800 	.word	0x40013800
 800193c:	2000011c 	.word	0x2000011c
 8001940:	40004400 	.word	0x40004400
 8001944:	20000244 	.word	0x20000244
 8001948:	40000400 	.word	0x40000400
 800194c:	200002e4 	.word	0x200002e4
 8001950:	0000ffff 	.word	0x0000ffff
 8001954:	20000110 	.word	0x20000110
 8001958:	20000340 	.word	0x20000340
 800195c:	20000118 	.word	0x20000118
			if (!captured_pos) {
 8001960:	4d4a      	ldr	r5, [pc, #296]	@ (8001a8c <main+0x458>)
 8001962:	782b      	ldrb	r3, [r5, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d106      	bne.n	8001976 <main+0x342>
				if (capture_init_pos() == 0) {
 8001968:	f7ff fdc4 	bl	80014f4 <capture_init_pos>
 800196c:	2800      	cmp	r0, #0
 800196e:	d000      	beq.n	8001972 <main+0x33e>
 8001970:	e088      	b.n	8001a84 <main+0x450>
					captured_pos = 0x01;
 8001972:	2301      	movs	r3, #1
 8001974:	702b      	strb	r3, [r5, #0]
			if (HAL_GetTick() - data_upd_time_prev > DATA_UPD_TIME) {
 8001976:	f000 fb83 	bl	8002080 <HAL_GetTick>
 800197a:	4f45      	ldr	r7, [pc, #276]	@ (8001a90 <main+0x45c>)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	1ac0      	subs	r0, r0, r3
 8001980:	2832      	cmp	r0, #50	@ 0x32
 8001982:	d800      	bhi.n	8001986 <main+0x352>
 8001984:	e749      	b.n	800181a <main+0x1e6>
				err = lsm6dsox_read_acc();
 8001986:	f000 f937 	bl	8001bf8 <lsm6dsox_read_acc>
				Data.acc_raw[0] = lsm6dsox_from_fs2_to_mg(sensors_data.acc_data_raw[0]);
 800198a:	4d42      	ldr	r5, [pc, #264]	@ (8001a94 <main+0x460>)
 800198c:	6828      	ldr	r0, [r5, #0]
 800198e:	f7ff fcd1 	bl	8001334 <__aeabi_f2iz>
 8001992:	b200      	sxth	r0, r0
 8001994:	f000 f9b0 	bl	8001cf8 <lsm6dsox_from_fs2_to_mg>
 8001998:	0023      	movs	r3, r4
 800199a:	0a02      	lsrs	r2, r0, #8
 800199c:	3326      	adds	r3, #38	@ 0x26
 800199e:	7018      	strb	r0, [r3, #0]
 80019a0:	705a      	strb	r2, [r3, #1]
 80019a2:	0c02      	lsrs	r2, r0, #16
 80019a4:	0e00      	lsrs	r0, r0, #24
 80019a6:	709a      	strb	r2, [r3, #2]
 80019a8:	70d8      	strb	r0, [r3, #3]
				Data.acc_raw[1] = lsm6dsox_from_fs2_to_mg(sensors_data.acc_data_raw[1]);
 80019aa:	6868      	ldr	r0, [r5, #4]
 80019ac:	f7ff fcc2 	bl	8001334 <__aeabi_f2iz>
 80019b0:	b200      	sxth	r0, r0
 80019b2:	f000 f9a1 	bl	8001cf8 <lsm6dsox_from_fs2_to_mg>
 80019b6:	0023      	movs	r3, r4
 80019b8:	0a02      	lsrs	r2, r0, #8
 80019ba:	332a      	adds	r3, #42	@ 0x2a
 80019bc:	7018      	strb	r0, [r3, #0]
 80019be:	705a      	strb	r2, [r3, #1]
 80019c0:	0c02      	lsrs	r2, r0, #16
 80019c2:	0e00      	lsrs	r0, r0, #24
 80019c4:	709a      	strb	r2, [r3, #2]
 80019c6:	70d8      	strb	r0, [r3, #3]
				Data.acc_raw[2] = lsm6dsox_from_fs2_to_mg(sensors_data.acc_data_raw[2]);
 80019c8:	68a8      	ldr	r0, [r5, #8]
 80019ca:	f7ff fcb3 	bl	8001334 <__aeabi_f2iz>
 80019ce:	b200      	sxth	r0, r0
 80019d0:	f000 f992 	bl	8001cf8 <lsm6dsox_from_fs2_to_mg>
 80019d4:	0023      	movs	r3, r4
 80019d6:	0a02      	lsrs	r2, r0, #8
 80019d8:	332e      	adds	r3, #46	@ 0x2e
 80019da:	7018      	strb	r0, [r3, #0]
 80019dc:	705a      	strb	r2, [r3, #1]
 80019de:	0c02      	lsrs	r2, r0, #16
 80019e0:	0e00      	lsrs	r0, r0, #24
 80019e2:	709a      	strb	r2, [r3, #2]
 80019e4:	70d8      	strb	r0, [r3, #3]
				err = lsm6dsox_read_gyro();
 80019e6:	f000 f947 	bl	8001c78 <lsm6dsox_read_gyro>
 80019ea:	9003      	str	r0, [sp, #12]
				Data.gyro_raw[0] = lsm6dsox_from_fs125_to_mdps(sensors_data.gyro_data_raw[0]);
 80019ec:	68e8      	ldr	r0, [r5, #12]
 80019ee:	f7ff fca1 	bl	8001334 <__aeabi_f2iz>
 80019f2:	b200      	sxth	r0, r0
 80019f4:	f000 f98a 	bl	8001d0c <lsm6dsox_from_fs125_to_mdps>
 80019f8:	0023      	movs	r3, r4
 80019fa:	0a02      	lsrs	r2, r0, #8
 80019fc:	3332      	adds	r3, #50	@ 0x32
 80019fe:	7018      	strb	r0, [r3, #0]
 8001a00:	705a      	strb	r2, [r3, #1]
 8001a02:	0c02      	lsrs	r2, r0, #16
 8001a04:	0e00      	lsrs	r0, r0, #24
 8001a06:	709a      	strb	r2, [r3, #2]
 8001a08:	70d8      	strb	r0, [r3, #3]
				Data.gyro_raw[1] = lsm6dsox_from_fs125_to_mdps(sensors_data.gyro_data_raw[1]);
 8001a0a:	6928      	ldr	r0, [r5, #16]
 8001a0c:	f7ff fc92 	bl	8001334 <__aeabi_f2iz>
 8001a10:	b200      	sxth	r0, r0
 8001a12:	f000 f97b 	bl	8001d0c <lsm6dsox_from_fs125_to_mdps>
 8001a16:	0023      	movs	r3, r4
 8001a18:	0a02      	lsrs	r2, r0, #8
 8001a1a:	3336      	adds	r3, #54	@ 0x36
 8001a1c:	7018      	strb	r0, [r3, #0]
 8001a1e:	705a      	strb	r2, [r3, #1]
 8001a20:	0c02      	lsrs	r2, r0, #16
 8001a22:	0e00      	lsrs	r0, r0, #24
 8001a24:	709a      	strb	r2, [r3, #2]
 8001a26:	70d8      	strb	r0, [r3, #3]
				Data.gyro_raw[2] = lsm6dsox_from_fs125_to_mdps(sensors_data.gyro_data_raw[2]);
 8001a28:	6968      	ldr	r0, [r5, #20]
 8001a2a:	f7ff fc83 	bl	8001334 <__aeabi_f2iz>
 8001a2e:	b200      	sxth	r0, r0
 8001a30:	f000 f96c 	bl	8001d0c <lsm6dsox_from_fs125_to_mdps>
 8001a34:	0023      	movs	r3, r4
 8001a36:	0a02      	lsrs	r2, r0, #8
 8001a38:	333a      	adds	r3, #58	@ 0x3a
 8001a3a:	705a      	strb	r2, [r3, #1]
 8001a3c:	0c02      	lsrs	r2, r0, #16
 8001a3e:	709a      	strb	r2, [r3, #2]
				Data.status = err;
 8001a40:	0022      	movs	r2, r4
				Data.gyro_raw[2] = lsm6dsox_from_fs125_to_mdps(sensors_data.gyro_data_raw[2]);
 8001a42:	7018      	strb	r0, [r3, #0]
 8001a44:	0e00      	lsrs	r0, r0, #24
 8001a46:	70d8      	strb	r0, [r3, #3]
				Data.status = err;
 8001a48:	9b03      	ldr	r3, [sp, #12]
 8001a4a:	325a      	adds	r2, #90	@ 0x5a
 8001a4c:	7013      	strb	r3, [r2, #0]
				Data.elev_angle = calc_elev_angle(&Data);
 8001a4e:	0020      	movs	r0, r4
				Data.status = err;
 8001a50:	0a1b      	lsrs	r3, r3, #8
 8001a52:	7053      	strb	r3, [r2, #1]
				Data.elev_angle = calc_elev_angle(&Data);
 8001a54:	f7ff fd04 	bl	8001460 <calc_elev_angle>
 8001a58:	0022      	movs	r2, r4
 8001a5a:	0e03      	lsrs	r3, r0, #24
 8001a5c:	324a      	adds	r2, #74	@ 0x4a
 8001a5e:	0a01      	lsrs	r1, r0, #8
 8001a60:	70d3      	strb	r3, [r2, #3]
				Data.elev_angle_d = Data.elev_angle - init_elev;
 8001a62:	4b0d      	ldr	r3, [pc, #52]	@ (8001a98 <main+0x464>)
				Data.elev_angle = calc_elev_angle(&Data);
 8001a64:	7051      	strb	r1, [r2, #1]
 8001a66:	0c01      	lsrs	r1, r0, #16
 8001a68:	7091      	strb	r1, [r2, #2]
 8001a6a:	7010      	strb	r0, [r2, #0]
				Data.elev_angle_d = Data.elev_angle - init_elev;
 8001a6c:	6819      	ldr	r1, [r3, #0]
 8001a6e:	f7ff faa7 	bl	8000fc0 <__aeabi_fsub>
 8001a72:	3452      	adds	r4, #82	@ 0x52
 8001a74:	0a03      	lsrs	r3, r0, #8
 8001a76:	7020      	strb	r0, [r4, #0]
 8001a78:	7063      	strb	r3, [r4, #1]
 8001a7a:	0c03      	lsrs	r3, r0, #16
 8001a7c:	0e00      	lsrs	r0, r0, #24
 8001a7e:	70a3      	strb	r3, [r4, #2]
 8001a80:	70e0      	strb	r0, [r4, #3]
 8001a82:	e746      	b.n	8001912 <main+0x2de>
			Data.mode = 0xFFFF;
 8001a84:	7026      	strb	r6, [r4, #0]
 8001a86:	7066      	strb	r6, [r4, #1]
			break;
 8001a88:	e6c7      	b.n	800181a <main+0x1e6>
 8001a8a:	46c0      	nop			@ (mov r8, r8)
 8001a8c:	20000118 	.word	0x20000118
 8001a90:	20000110 	.word	0x20000110
 8001a94:	20000340 	.word	0x20000340
 8001a98:	20000114 	.word	0x20000114

08001a9c <eMBRegInputCB>:
}
 8001a9c:	2001      	movs	r0, #1
 8001a9e:	4770      	bx	lr

08001aa0 <eMBRegHoldingCB>:
		USHORT usNRegs, eMBRegisterMode eMode) {
 8001aa0:	b510      	push	{r4, lr}
 8001aa2:	0004      	movs	r4, r0
	if (eMode == MB_REG_WRITE) {
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d10f      	bne.n	8001ac8 <eMBRegHoldingCB+0x28>
		if ((usAddress >= REG_INPUT_START)
 8001aa8:	2900      	cmp	r1, #0
 8001aaa:	d00b      	beq.n	8001ac4 <eMBRegHoldingCB+0x24>
				&& (usAddress + usNRegs <= REG_INPUT_NREGS + 1)) {
 8001aac:	1888      	adds	r0, r1, r2
 8001aae:	282f      	cmp	r0, #47	@ 0x2f
 8001ab0:	dc08      	bgt.n	8001ac4 <eMBRegHoldingCB+0x24>
			iRegIndex = (int) (usAddress - 1);
 8001ab2:	3901      	subs	r1, #1
			memcpy((unsigned char*) &Data + iRegIndex * 2, pucRegBuffer,
 8001ab4:	0048      	lsls	r0, r1, #1
 8001ab6:	0021      	movs	r1, r4
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8001aec <eMBRegHoldingCB+0x4c>)
					usNRegs * 2);
 8001aba:	0052      	lsls	r2, r2, #1
			memcpy((unsigned char*) &Data + iRegIndex * 2, pucRegBuffer,
 8001abc:	18c0      	adds	r0, r0, r3
			memcpy(pucRegBuffer, (unsigned char*) &Data + iRegIndex * 2,
 8001abe:	f004 f940 	bl	8005d42 <memcpy>
	eMBErrorCode eStatus = MB_ENOERR;
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	0018      	movs	r0, r3
 8001ac6:	bd10      	pop	{r4, pc}
	} else if (eMode == MB_REG_READ) {
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d10c      	bne.n	8001ae6 <eMBRegHoldingCB+0x46>
			eStatus = MB_ENOREG;
 8001acc:	3301      	adds	r3, #1
		if ((usAddress >= REG_INPUT_START)
 8001ace:	2900      	cmp	r1, #0
 8001ad0:	d0f8      	beq.n	8001ac4 <eMBRegHoldingCB+0x24>
				&& (usAddress + usNRegs <= REG_INPUT_NREGS + 1)) {
 8001ad2:	1888      	adds	r0, r1, r2
 8001ad4:	282f      	cmp	r0, #47	@ 0x2f
 8001ad6:	dcf5      	bgt.n	8001ac4 <eMBRegHoldingCB+0x24>
			iRegIndex = (int) (usAddress - 1);
 8001ad8:	3901      	subs	r1, #1
			memcpy(pucRegBuffer, (unsigned char*) &Data + iRegIndex * 2,
 8001ada:	4099      	lsls	r1, r3
					usNRegs * 2);
 8001adc:	409a      	lsls	r2, r3
			memcpy(pucRegBuffer, (unsigned char*) &Data + iRegIndex * 2,
 8001ade:	4b03      	ldr	r3, [pc, #12]	@ (8001aec <eMBRegHoldingCB+0x4c>)
 8001ae0:	0020      	movs	r0, r4
 8001ae2:	18c9      	adds	r1, r1, r3
 8001ae4:	e7eb      	b.n	8001abe <eMBRegHoldingCB+0x1e>
			eStatus = MB_ENOREG;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e7ec      	b.n	8001ac4 <eMBRegHoldingCB+0x24>
 8001aea:	46c0      	nop			@ (mov r8, r8)
 8001aec:	200002e4 	.word	0x200002e4

08001af0 <eMBRegCoilsCB>:
}
 8001af0:	2001      	movs	r0, #1
 8001af2:	4770      	bx	lr

08001af4 <eMBRegDiscreteCB>:
eMBErrorCode eMBRegDiscreteCB(UCHAR *pucRegBuffer, USHORT usAddress,
 8001af4:	2001      	movs	r0, #1
 8001af6:	4770      	bx	lr

08001af8 <Error_Handler>:
 8001af8:	b672      	cpsid	i
	while (1) {
 8001afa:	e7fe      	b.n	8001afa <Error_Handler+0x2>

08001afc <mb_data_init>:
#include "mbdata.h"

module_ctrl_t Data;

void mb_data_init(){
	Data.mode = 0xFFFF;
 8001afc:	2301      	movs	r3, #1
 8001afe:	4a1e      	ldr	r2, [pc, #120]	@ (8001b78 <mb_data_init+0x7c>)
 8001b00:	425b      	negs	r3, r3
	Data.acc_cal_coeffs[0] = 0.0f;
	Data.acc_cal_coeffs[1] = 0.0f;
	Data.acc_cal_coeffs[2] = 0.0f;
 8001b02:	0011      	movs	r1, r2
	Data.mode = 0xFFFF;
 8001b04:	7013      	strb	r3, [r2, #0]
 8001b06:	7053      	strb	r3, [r2, #1]
	Data.acc_cal_coeffs[0] = 0.0f;
 8001b08:	2300      	movs	r3, #0
	Data.gyro_cal_coeffs[0] = 0.0f;
	Data.gyro_cal_coeffs[1] = 0.0f;
	Data.gyro_cal_coeffs[2] = 0.0f;
	Data.mag_cal_coeffs[0] = 0.0f;
	Data.mag_cal_coeffs[1] = 0.0f;
 8001b0a:	311e      	adds	r1, #30
	Data.acc_cal_coeffs[0] = 0.0f;
 8001b0c:	7093      	strb	r3, [r2, #2]
 8001b0e:	70d3      	strb	r3, [r2, #3]
 8001b10:	7113      	strb	r3, [r2, #4]
 8001b12:	7153      	strb	r3, [r2, #5]
	Data.acc_cal_coeffs[1] = 0.0f;
 8001b14:	7193      	strb	r3, [r2, #6]
 8001b16:	71d3      	strb	r3, [r2, #7]
 8001b18:	7213      	strb	r3, [r2, #8]
 8001b1a:	7253      	strb	r3, [r2, #9]
	Data.acc_cal_coeffs[2] = 0.0f;
 8001b1c:	7293      	strb	r3, [r2, #10]
 8001b1e:	72d3      	strb	r3, [r2, #11]
 8001b20:	7313      	strb	r3, [r2, #12]
 8001b22:	7353      	strb	r3, [r2, #13]
	Data.gyro_cal_coeffs[0] = 0.0f;
 8001b24:	7393      	strb	r3, [r2, #14]
 8001b26:	73d3      	strb	r3, [r2, #15]
 8001b28:	7413      	strb	r3, [r2, #16]
 8001b2a:	7453      	strb	r3, [r2, #17]
	Data.gyro_cal_coeffs[1] = 0.0f;
 8001b2c:	7493      	strb	r3, [r2, #18]
 8001b2e:	74d3      	strb	r3, [r2, #19]
 8001b30:	7513      	strb	r3, [r2, #20]
 8001b32:	7553      	strb	r3, [r2, #21]
	Data.gyro_cal_coeffs[2] = 0.0f;
 8001b34:	7593      	strb	r3, [r2, #22]
 8001b36:	75d3      	strb	r3, [r2, #23]
 8001b38:	7613      	strb	r3, [r2, #24]
 8001b3a:	7653      	strb	r3, [r2, #25]
	Data.mag_cal_coeffs[0] = 0.0f;
 8001b3c:	7693      	strb	r3, [r2, #26]
 8001b3e:	76d3      	strb	r3, [r2, #27]
 8001b40:	7713      	strb	r3, [r2, #28]
 8001b42:	7753      	strb	r3, [r2, #29]
	Data.mag_cal_coeffs[1] = 0.0f;
 8001b44:	7793      	strb	r3, [r2, #30]
 8001b46:	77d3      	strb	r3, [r2, #31]
 8001b48:	708b      	strb	r3, [r1, #2]
 8001b4a:	70cb      	strb	r3, [r1, #3]
	Data.mag_cal_coeffs[2] = 0.0f;
 8001b4c:	0011      	movs	r1, r2
 8001b4e:	3122      	adds	r1, #34	@ 0x22
 8001b50:	700b      	strb	r3, [r1, #0]
 8001b52:	704b      	strb	r3, [r1, #1]
 8001b54:	708b      	strb	r3, [r1, #2]
 8001b56:	70cb      	strb	r3, [r1, #3]
	Data.elev_angle_d = 0.0f;
 8001b58:	0011      	movs	r1, r2
 8001b5a:	3152      	adds	r1, #82	@ 0x52
 8001b5c:	700b      	strb	r3, [r1, #0]
 8001b5e:	704b      	strb	r3, [r1, #1]
 8001b60:	708b      	strb	r3, [r1, #2]
 8001b62:	70cb      	strb	r3, [r1, #3]
	Data.yaw_angle_d = 0.0f;
 8001b64:	0011      	movs	r1, r2
	Data.status = 0x0000;
 8001b66:	325a      	adds	r2, #90	@ 0x5a
	Data.yaw_angle_d = 0.0f;
 8001b68:	3156      	adds	r1, #86	@ 0x56
 8001b6a:	700b      	strb	r3, [r1, #0]
 8001b6c:	704b      	strb	r3, [r1, #1]
 8001b6e:	708b      	strb	r3, [r1, #2]
 8001b70:	70cb      	strb	r3, [r1, #3]
	Data.status = 0x0000;
 8001b72:	7013      	strb	r3, [r2, #0]
 8001b74:	7053      	strb	r3, [r2, #1]
}
 8001b76:	4770      	bx	lr
 8001b78:	200002e4 	.word	0x200002e4

08001b7c <i2c_write_reg>:

extern I2C_HandleTypeDef hi2c2;

sensors_ctrl_t sensors_data;

uint8_t i2c_write_reg(uint8_t sensor, uint8_t addr, uint8_t val) {
 8001b7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   uint8_t buff[2];

   buff[0] = addr;
 8001b7e:	466b      	mov	r3, sp
 8001b80:	7319      	strb	r1, [r3, #12]
   buff[1] = val;
 8001b82:	735a      	strb	r2, [r3, #13]

   if (HAL_I2C_Master_Transmit(&hi2c2, sensor << 1U, buff, 2, I2C_TIMEOUT) != HAL_OK) {
 8001b84:	2364      	movs	r3, #100	@ 0x64
 8001b86:	0041      	lsls	r1, r0, #1
 8001b88:	9300      	str	r3, [sp, #0]
 8001b8a:	aa03      	add	r2, sp, #12
 8001b8c:	3b62      	subs	r3, #98	@ 0x62
 8001b8e:	4804      	ldr	r0, [pc, #16]	@ (8001ba0 <i2c_write_reg+0x24>)
 8001b90:	f000 fdd8 	bl	8002744 <HAL_I2C_Master_Transmit>
 8001b94:	1e43      	subs	r3, r0, #1
 8001b96:	4198      	sbcs	r0, r3
      return 1;
   }
   return 0;
}
 8001b98:	b2c0      	uxtb	r0, r0
 8001b9a:	b005      	add	sp, #20
 8001b9c:	bd00      	pop	{pc}
 8001b9e:	46c0      	nop			@ (mov r8, r8)
 8001ba0:	20000290 	.word	0x20000290

08001ba4 <lis3mdl_init>:
       return 1;
   }
   return 0;
}

uint8_t lis3mdl_init(void) {
 8001ba4:	b510      	push	{r4, lr}
	uint8_t ret = 0;
	ret = i2c_write_reg(LIS3MDL_ADDR, LIS3MDL_CTRL1, 0xF4);
 8001ba6:	22f4      	movs	r2, #244	@ 0xf4
 8001ba8:	2120      	movs	r1, #32
 8001baa:	201c      	movs	r0, #28
 8001bac:	f7ff ffe6 	bl	8001b7c <i2c_write_reg>
	if(ret != 0) {
 8001bb0:	2800      	cmp	r0, #0
 8001bb2:	d112      	bne.n	8001bda <lis3mdl_init+0x36>
		return ret;
	}
	ret = i2c_write_reg(LIS3MDL_ADDR, LIS3MDL_CTRL2, 0x00);
 8001bb4:	0002      	movs	r2, r0
 8001bb6:	2121      	movs	r1, #33	@ 0x21
 8001bb8:	301c      	adds	r0, #28
 8001bba:	f7ff ffdf 	bl	8001b7c <i2c_write_reg>
	if(ret != 0) {
 8001bbe:	2800      	cmp	r0, #0
 8001bc0:	d10b      	bne.n	8001bda <lis3mdl_init+0x36>
		return ret;
	}
	ret = i2c_write_reg(LIS3MDL_ADDR, LIS3MDL_CTRL3, 0x00);
 8001bc2:	0002      	movs	r2, r0
 8001bc4:	2122      	movs	r1, #34	@ 0x22
 8001bc6:	301c      	adds	r0, #28
 8001bc8:	f7ff ffd8 	bl	8001b7c <i2c_write_reg>
	if(ret != 0) {
 8001bcc:	2800      	cmp	r0, #0
 8001bce:	d104      	bne.n	8001bda <lis3mdl_init+0x36>
		return ret;
	}
	ret = i2c_write_reg(LIS3MDL_ADDR, LIS3MDL_CTRL4, 0x0C);
 8001bd0:	220c      	movs	r2, #12
 8001bd2:	2123      	movs	r1, #35	@ 0x23
 8001bd4:	301c      	adds	r0, #28
 8001bd6:	f7ff ffd1 	bl	8001b7c <i2c_write_reg>
	return ret;
}
 8001bda:	bd10      	pop	{r4, pc}

08001bdc <lsm6dsox_init>:
	val = (val * 256) + (int16_t)buff[0];

	return lsm6dsox_from_lsb_to_celsius(val);
}

uint8_t lsm6dsox_init(void) {
 8001bdc:	b510      	push	{r4, lr}
	uint8_t ret = 0;
	ret = i2c_write_reg(LSM6DSOX_ADDR, LSM6DSOX_CTRL1_XL, 0x42);
 8001bde:	2242      	movs	r2, #66	@ 0x42
 8001be0:	2110      	movs	r1, #16
 8001be2:	206a      	movs	r0, #106	@ 0x6a
 8001be4:	f7ff ffca 	bl	8001b7c <i2c_write_reg>
	if(ret != 0) {
 8001be8:	2800      	cmp	r0, #0
 8001bea:	d104      	bne.n	8001bf6 <lsm6dsox_init+0x1a>
		return ret;
	}
	ret = i2c_write_reg(LSM6DSOX_ADDR, LSM6DSOX_CTRL2_G, 0x40);
 8001bec:	2240      	movs	r2, #64	@ 0x40
 8001bee:	2111      	movs	r1, #17
 8001bf0:	306a      	adds	r0, #106	@ 0x6a
 8001bf2:	f7ff ffc3 	bl	8001b7c <i2c_write_reg>
	return ret;
}
 8001bf6:	bd10      	pop	{r4, pc}

08001bf8 <lsm6dsox_read_acc>:

	return lsm6dsox_from_lsb_to_celsius(val);
}

uint8_t lsm6dsox_read_acc(void) {
	uint8_t regAddress = LSM6DSOX_ACC_REG;
 8001bf8:	220f      	movs	r2, #15
uint8_t lsm6dsox_read_acc(void) {
 8001bfa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bfc:	b089      	sub	sp, #36	@ 0x24
	uint8_t regAddress = LSM6DSOX_ACC_REG;
 8001bfe:	ab02      	add	r3, sp, #8
 8001c00:	18d2      	adds	r2, r2, r3
	uint8_t buff[6];
	int16_t val[3];

	if (HAL_I2C_Master_Transmit(&hi2c2, (LSM6DSOX_ADDR << 1), &regAddress, 1,
 8001c02:	2664      	movs	r6, #100	@ 0x64
	uint8_t regAddress = LSM6DSOX_ACC_REG;
 8001c04:	2328      	movs	r3, #40	@ 0x28
	if (HAL_I2C_Master_Transmit(&hi2c2, (LSM6DSOX_ADDR << 1), &regAddress, 1,
 8001c06:	4d1a      	ldr	r5, [pc, #104]	@ (8001c70 <lsm6dsox_read_acc+0x78>)
	uint8_t regAddress = LSM6DSOX_ACC_REG;
 8001c08:	7013      	strb	r3, [r2, #0]
	if (HAL_I2C_Master_Transmit(&hi2c2, (LSM6DSOX_ADDR << 1), &regAddress, 1,
 8001c0a:	21d4      	movs	r1, #212	@ 0xd4
 8001c0c:	0028      	movs	r0, r5
 8001c0e:	9600      	str	r6, [sp, #0]
 8001c10:	3b27      	subs	r3, #39	@ 0x27
 8001c12:	f000 fd97 	bl	8002744 <HAL_I2C_Master_Transmit>
 8001c16:	2800      	cmp	r0, #0
 8001c18:	d003      	beq.n	8001c22 <lsm6dsox_read_acc+0x2a>
			I2C_TIMEOUT) != HAL_OK) {
		return 1;
 8001c1a:	2501      	movs	r5, #1
	sensors_data.acc_data_raw[0] = val[0];
	sensors_data.acc_data_raw[1] = val[1];
	sensors_data.acc_data_raw[2] = val[2];

	return 0;
}
 8001c1c:	0028      	movs	r0, r5
 8001c1e:	b009      	add	sp, #36	@ 0x24
 8001c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (HAL_I2C_Master_Receive(&hi2c2, (LSM6DSOX_ADDR << 1), buff, 6,
 8001c22:	ac06      	add	r4, sp, #24
 8001c24:	0028      	movs	r0, r5
 8001c26:	2306      	movs	r3, #6
 8001c28:	0022      	movs	r2, r4
 8001c2a:	21d4      	movs	r1, #212	@ 0xd4
 8001c2c:	9600      	str	r6, [sp, #0]
 8001c2e:	f000 fe29 	bl	8002884 <HAL_I2C_Master_Receive>
 8001c32:	1e05      	subs	r5, r0, #0
 8001c34:	d1f1      	bne.n	8001c1a <lsm6dsox_read_acc+0x22>
	val[1] = (val[1] * 256) + (int16_t) buff[2];
 8001c36:	78e3      	ldrb	r3, [r4, #3]
 8001c38:	78a6      	ldrb	r6, [r4, #2]
	val[2] = (val[2] * 256) + (int16_t) buff[4];
 8001c3a:	7962      	ldrb	r2, [r4, #5]
	val[1] = (val[1] * 256) + (int16_t) buff[2];
 8001c3c:	021b      	lsls	r3, r3, #8
 8001c3e:	18f6      	adds	r6, r6, r3
	val[2] = (val[2] * 256) + (int16_t) buff[4];
 8001c40:	7923      	ldrb	r3, [r4, #4]
 8001c42:	0212      	lsls	r2, r2, #8
 8001c44:	189b      	adds	r3, r3, r2
 8001c46:	b21b      	sxth	r3, r3
 8001c48:	9303      	str	r3, [sp, #12]
	val[0] = (val[0] * 256) + (int16_t) buff[0];
 8001c4a:	7863      	ldrb	r3, [r4, #1]
 8001c4c:	7820      	ldrb	r0, [r4, #0]
 8001c4e:	021b      	lsls	r3, r3, #8
 8001c50:	18c0      	adds	r0, r0, r3
	sensors_data.acc_data_raw[0] = val[0];
 8001c52:	b200      	sxth	r0, r0
 8001c54:	f7ff fb8e 	bl	8001374 <__aeabi_i2f>
 8001c58:	4f06      	ldr	r7, [pc, #24]	@ (8001c74 <lsm6dsox_read_acc+0x7c>)
	val[1] = (val[1] * 256) + (int16_t) buff[2];
 8001c5a:	b236      	sxth	r6, r6
	sensors_data.acc_data_raw[0] = val[0];
 8001c5c:	6038      	str	r0, [r7, #0]
	sensors_data.acc_data_raw[1] = val[1];
 8001c5e:	0030      	movs	r0, r6
 8001c60:	f7ff fb88 	bl	8001374 <__aeabi_i2f>
 8001c64:	6078      	str	r0, [r7, #4]
	sensors_data.acc_data_raw[2] = val[2];
 8001c66:	9803      	ldr	r0, [sp, #12]
 8001c68:	f7ff fb84 	bl	8001374 <__aeabi_i2f>
 8001c6c:	60b8      	str	r0, [r7, #8]
	return 0;
 8001c6e:	e7d5      	b.n	8001c1c <lsm6dsox_read_acc+0x24>
 8001c70:	20000290 	.word	0x20000290
 8001c74:	20000340 	.word	0x20000340

08001c78 <lsm6dsox_read_gyro>:

uint8_t lsm6dsox_read_gyro(void) {
	uint8_t regAddress = LSM6DSOX_GYRO_REG;
 8001c78:	220f      	movs	r2, #15
uint8_t lsm6dsox_read_gyro(void) {
 8001c7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c7c:	b089      	sub	sp, #36	@ 0x24
	uint8_t regAddress = LSM6DSOX_GYRO_REG;
 8001c7e:	ab02      	add	r3, sp, #8
 8001c80:	18d2      	adds	r2, r2, r3
	uint8_t buff[6];
	int16_t val[3];

	if (HAL_I2C_Master_Transmit(&hi2c2, (LSM6DSOX_ADDR << 1), &regAddress, 1,
 8001c82:	2664      	movs	r6, #100	@ 0x64
	uint8_t regAddress = LSM6DSOX_GYRO_REG;
 8001c84:	2322      	movs	r3, #34	@ 0x22
	if (HAL_I2C_Master_Transmit(&hi2c2, (LSM6DSOX_ADDR << 1), &regAddress, 1,
 8001c86:	4d1a      	ldr	r5, [pc, #104]	@ (8001cf0 <lsm6dsox_read_gyro+0x78>)
	uint8_t regAddress = LSM6DSOX_GYRO_REG;
 8001c88:	7013      	strb	r3, [r2, #0]
	if (HAL_I2C_Master_Transmit(&hi2c2, (LSM6DSOX_ADDR << 1), &regAddress, 1,
 8001c8a:	21d4      	movs	r1, #212	@ 0xd4
 8001c8c:	0028      	movs	r0, r5
 8001c8e:	9600      	str	r6, [sp, #0]
 8001c90:	3b21      	subs	r3, #33	@ 0x21
 8001c92:	f000 fd57 	bl	8002744 <HAL_I2C_Master_Transmit>
 8001c96:	2800      	cmp	r0, #0
 8001c98:	d003      	beq.n	8001ca2 <lsm6dsox_read_gyro+0x2a>
			I2C_TIMEOUT) != HAL_OK) {
		return 1;
 8001c9a:	2501      	movs	r5, #1
	sensors_data.gyro_data_raw[0] = val[0];
	sensors_data.gyro_data_raw[1] = val[1];
	sensors_data.gyro_data_raw[2] = val[2];

	return 0;
}
 8001c9c:	0028      	movs	r0, r5
 8001c9e:	b009      	add	sp, #36	@ 0x24
 8001ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (HAL_I2C_Master_Receive(&hi2c2, (LSM6DSOX_ADDR << 1), buff, 6,
 8001ca2:	ac06      	add	r4, sp, #24
 8001ca4:	0028      	movs	r0, r5
 8001ca6:	2306      	movs	r3, #6
 8001ca8:	0022      	movs	r2, r4
 8001caa:	21d4      	movs	r1, #212	@ 0xd4
 8001cac:	9600      	str	r6, [sp, #0]
 8001cae:	f000 fde9 	bl	8002884 <HAL_I2C_Master_Receive>
 8001cb2:	1e05      	subs	r5, r0, #0
 8001cb4:	d1f1      	bne.n	8001c9a <lsm6dsox_read_gyro+0x22>
	val[1] = (val[1] * 256) + (int16_t) buff[2];
 8001cb6:	78e3      	ldrb	r3, [r4, #3]
 8001cb8:	78a6      	ldrb	r6, [r4, #2]
	val[2] = (val[2] * 256) + (int16_t) buff[4];
 8001cba:	7962      	ldrb	r2, [r4, #5]
	val[1] = (val[1] * 256) + (int16_t) buff[2];
 8001cbc:	021b      	lsls	r3, r3, #8
 8001cbe:	18f6      	adds	r6, r6, r3
	val[2] = (val[2] * 256) + (int16_t) buff[4];
 8001cc0:	7923      	ldrb	r3, [r4, #4]
 8001cc2:	0212      	lsls	r2, r2, #8
 8001cc4:	189b      	adds	r3, r3, r2
 8001cc6:	b21b      	sxth	r3, r3
 8001cc8:	9303      	str	r3, [sp, #12]
	val[0] = (val[0] * 256) + (int16_t) buff[0];
 8001cca:	7863      	ldrb	r3, [r4, #1]
 8001ccc:	7820      	ldrb	r0, [r4, #0]
 8001cce:	021b      	lsls	r3, r3, #8
 8001cd0:	18c0      	adds	r0, r0, r3
	sensors_data.gyro_data_raw[0] = val[0];
 8001cd2:	b200      	sxth	r0, r0
 8001cd4:	f7ff fb4e 	bl	8001374 <__aeabi_i2f>
 8001cd8:	4f06      	ldr	r7, [pc, #24]	@ (8001cf4 <lsm6dsox_read_gyro+0x7c>)
	val[1] = (val[1] * 256) + (int16_t) buff[2];
 8001cda:	b236      	sxth	r6, r6
	sensors_data.gyro_data_raw[0] = val[0];
 8001cdc:	60f8      	str	r0, [r7, #12]
	sensors_data.gyro_data_raw[1] = val[1];
 8001cde:	0030      	movs	r0, r6
 8001ce0:	f7ff fb48 	bl	8001374 <__aeabi_i2f>
 8001ce4:	6138      	str	r0, [r7, #16]
	sensors_data.gyro_data_raw[2] = val[2];
 8001ce6:	9803      	ldr	r0, [sp, #12]
 8001ce8:	f7ff fb44 	bl	8001374 <__aeabi_i2f>
 8001cec:	6178      	str	r0, [r7, #20]
	return 0;
 8001cee:	e7d5      	b.n	8001c9c <lsm6dsox_read_gyro+0x24>
 8001cf0:	20000290 	.word	0x20000290
 8001cf4:	20000340 	.word	0x20000340

08001cf8 <lsm6dsox_from_fs2_to_mg>:
float lis3mdl_from_lsb_to_celsius(int16_t lsb)
{
  return ((float)lsb / 8.0f) + (25.0f);
}

float lsm6dsox_from_fs2_to_mg(int16_t lsb) {
 8001cf8:	b510      	push	{r4, lr}
	return ((float) lsb) * 0.061f;
 8001cfa:	f7ff fb3b 	bl	8001374 <__aeabi_i2f>
 8001cfe:	4902      	ldr	r1, [pc, #8]	@ (8001d08 <lsm6dsox_from_fs2_to_mg+0x10>)
 8001d00:	f7ff f820 	bl	8000d44 <__aeabi_fmul>
}
 8001d04:	bd10      	pop	{r4, pc}
 8001d06:	46c0      	nop			@ (mov r8, r8)
 8001d08:	3d79db23 	.word	0x3d79db23

08001d0c <lsm6dsox_from_fs125_to_mdps>:

float lsm6dsox_from_fs16_to_mg(int16_t lsb) {
	return ((float) lsb) * 0.488f;
}

float lsm6dsox_from_fs125_to_mdps(int16_t lsb) {
 8001d0c:	b510      	push	{r4, lr}
	return ((float) lsb) * 4.375f;
 8001d0e:	f7ff fb31 	bl	8001374 <__aeabi_i2f>
 8001d12:	4902      	ldr	r1, [pc, #8]	@ (8001d1c <lsm6dsox_from_fs125_to_mdps+0x10>)
 8001d14:	f7ff f816 	bl	8000d44 <__aeabi_fmul>
}
 8001d18:	bd10      	pop	{r4, pc}
 8001d1a:	46c0      	nop			@ (mov r8, r8)
 8001d1c:	408c0000 	.word	0x408c0000

08001d20 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d20:	2101      	movs	r1, #1
 8001d22:	4b0a      	ldr	r3, [pc, #40]	@ (8001d4c <HAL_MspInit+0x2c>)
{
 8001d24:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d26:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d2c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d2e:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d30:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d32:	9200      	str	r2, [sp, #0]
 8001d34:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d36:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001d38:	0549      	lsls	r1, r1, #21
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001d3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d40:	400b      	ands	r3, r1
 8001d42:	9301      	str	r3, [sp, #4]
 8001d44:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d46:	b002      	add	sp, #8
 8001d48:	4770      	bx	lr
 8001d4a:	46c0      	nop			@ (mov r8, r8)
 8001d4c:	40021000 	.word	0x40021000

08001d50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d50:	b510      	push	{r4, lr}
 8001d52:	0004      	movs	r4, r0
 8001d54:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d56:	2214      	movs	r2, #20
 8001d58:	2100      	movs	r1, #0
 8001d5a:	a803      	add	r0, sp, #12
 8001d5c:	f003 ff6e 	bl	8005c3c <memset>
  if(hi2c->Instance==I2C2)
 8001d60:	4b11      	ldr	r3, [pc, #68]	@ (8001da8 <HAL_I2C_MspInit+0x58>)
 8001d62:	6822      	ldr	r2, [r4, #0]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d11d      	bne.n	8001da4 <HAL_I2C_MspInit+0x54>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d68:	2201      	movs	r2, #1
 8001d6a:	4c10      	ldr	r4, [pc, #64]	@ (8001dac <HAL_I2C_MspInit+0x5c>)
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d6c:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d70:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d72:	4313      	orrs	r3, r2
 8001d74:	6363      	str	r3, [r4, #52]	@ 0x34
 8001d76:	6b63      	ldr	r3, [r4, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d78:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	9301      	str	r3, [sp, #4]
 8001d7e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001d80:	23c0      	movs	r3, #192	@ 0xc0
 8001d82:	015b      	lsls	r3, r3, #5
 8001d84:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d86:	2312      	movs	r3, #18
 8001d88:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8001d8a:	3b0c      	subs	r3, #12
 8001d8c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d8e:	f000 fa41 	bl	8002214 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d92:	2280      	movs	r2, #128	@ 0x80
 8001d94:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001d96:	03d2      	lsls	r2, r2, #15
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8001d9c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001d9e:	4013      	ands	r3, r2
 8001da0:	9302      	str	r3, [sp, #8]
 8001da2:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001da4:	b008      	add	sp, #32
 8001da6:	bd10      	pop	{r4, pc}
 8001da8:	40005800 	.word	0x40005800
 8001dac:	40021000 	.word	0x40021000

08001db0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001db0:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM3)
 8001db2:	4b0b      	ldr	r3, [pc, #44]	@ (8001de0 <HAL_TIM_Base_MspInit+0x30>)
 8001db4:	6802      	ldr	r2, [r0, #0]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d110      	bne.n	8001ddc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001dba:	2102      	movs	r1, #2
 8001dbc:	4b09      	ldr	r3, [pc, #36]	@ (8001de4 <HAL_TIM_Base_MspInit+0x34>)
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001dbe:	2010      	movs	r0, #16
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001dc0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001dc6:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001dc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dca:	400b      	ands	r3, r1
 8001dcc:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001dce:	0011      	movs	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001dd0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001dd2:	f000 f95b 	bl	800208c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001dd6:	2010      	movs	r0, #16
 8001dd8:	f000 f982 	bl	80020e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001ddc:	bd07      	pop	{r0, r1, r2, pc}
 8001dde:	46c0      	nop			@ (mov r8, r8)
 8001de0:	40000400 	.word	0x40000400
 8001de4:	40021000 	.word	0x40021000

08001de8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001de8:	b510      	push	{r4, lr}
 8001dea:	0004      	movs	r4, r0
 8001dec:	b094      	sub	sp, #80	@ 0x50
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dee:	2214      	movs	r2, #20
 8001df0:	2100      	movs	r1, #0
 8001df2:	a805      	add	r0, sp, #20
 8001df4:	f003 ff22 	bl	8005c3c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001df8:	2228      	movs	r2, #40	@ 0x28
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	a80a      	add	r0, sp, #40	@ 0x28
 8001dfe:	f003 ff1d 	bl	8005c3c <memset>
  if(huart->Instance==USART1)
 8001e02:	6823      	ldr	r3, [r4, #0]
 8001e04:	4a29      	ldr	r2, [pc, #164]	@ (8001eac <HAL_UART_MspInit+0xc4>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d127      	bne.n	8001e5a <HAL_UART_MspInit+0x72>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001e0a:	2301      	movs	r3, #1
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e0c:	a80a      	add	r0, sp, #40	@ 0x28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001e0e:	930a      	str	r3, [sp, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e10:	f001 f966 	bl	80030e0 <HAL_RCCEx_PeriphCLKConfig>
 8001e14:	2800      	cmp	r0, #0
 8001e16:	d001      	beq.n	8001e1c <HAL_UART_MspInit+0x34>
    {
      Error_Handler();
 8001e18:	f7ff fe6e 	bl	8001af8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e1c:	2180      	movs	r1, #128	@ 0x80
 8001e1e:	4b24      	ldr	r3, [pc, #144]	@ (8001eb0 <HAL_UART_MspInit+0xc8>)
 8001e20:	01c9      	lsls	r1, r1, #7
 8001e22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e24:	4823      	ldr	r0, [pc, #140]	@ (8001eb4 <HAL_UART_MspInit+0xcc>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e26:	430a      	orrs	r2, r1
 8001e28:	641a      	str	r2, [r3, #64]	@ 0x40
 8001e2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e2c:	400a      	ands	r2, r1
 8001e2e:	9201      	str	r2, [sp, #4]
 8001e30:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e32:	2202      	movs	r2, #2
 8001e34:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001e36:	4311      	orrs	r1, r2
 8001e38:	6359      	str	r1, [r3, #52]	@ 0x34
 8001e3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e3c:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e3e:	4013      	ands	r3, r2
 8001e40:	9302      	str	r3, [sp, #8]
 8001e42:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001e44:	23c0      	movs	r3, #192	@ 0xc0
 8001e46:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e48:	2300      	movs	r3, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4a:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4e:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8001e50:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e52:	f000 f9df 	bl	8002214 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e56:	b014      	add	sp, #80	@ 0x50
 8001e58:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART2)
 8001e5a:	4a17      	ldr	r2, [pc, #92]	@ (8001eb8 <HAL_UART_MspInit+0xd0>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d1fa      	bne.n	8001e56 <HAL_UART_MspInit+0x6e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e60:	2180      	movs	r1, #128	@ 0x80
 8001e62:	4b13      	ldr	r3, [pc, #76]	@ (8001eb0 <HAL_UART_MspInit+0xc8>)
 8001e64:	0289      	lsls	r1, r1, #10
 8001e66:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e68:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001e6e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e70:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e72:	400a      	ands	r2, r1
 8001e74:	9203      	str	r2, [sp, #12]
 8001e76:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e78:	2201      	movs	r2, #1
 8001e7a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001e7c:	4311      	orrs	r1, r2
 8001e7e:	6359      	str	r1, [r3, #52]	@ 0x34
 8001e80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e82:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e84:	4013      	ands	r3, r2
 8001e86:	9304      	str	r3, [sp, #16]
 8001e88:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001e8a:	230e      	movs	r3, #14
 8001e8c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8e:	3b0c      	subs	r3, #12
 8001e90:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001e92:	9209      	str	r2, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e94:	f000 f9be 	bl	8002214 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001e98:	2200      	movs	r2, #0
 8001e9a:	201c      	movs	r0, #28
 8001e9c:	0011      	movs	r1, r2
 8001e9e:	f000 f8f5 	bl	800208c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ea2:	201c      	movs	r0, #28
 8001ea4:	f000 f91c 	bl	80020e0 <HAL_NVIC_EnableIRQ>
}
 8001ea8:	e7d5      	b.n	8001e56 <HAL_UART_MspInit+0x6e>
 8001eaa:	46c0      	nop			@ (mov r8, r8)
 8001eac:	40013800 	.word	0x40013800
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	50000400 	.word	0x50000400
 8001eb8:	40004400 	.word	0x40004400

08001ebc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ebc:	e7fe      	b.n	8001ebc <NMI_Handler>

08001ebe <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ebe:	e7fe      	b.n	8001ebe <HardFault_Handler>

08001ec0 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001ec0:	4770      	bx	lr

08001ec2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8001ec2:	4770      	bx	lr

08001ec4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ec4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ec6:	f000 f8cf 	bl	8002068 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eca:	bd10      	pop	{r4, pc}

08001ecc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001ecc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001ece:	4802      	ldr	r0, [pc, #8]	@ (8001ed8 <TIM3_IRQHandler+0xc>)
 8001ed0:	f001 fa34 	bl	800333c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001ed4:	bd10      	pop	{r4, pc}
 8001ed6:	46c0      	nop			@ (mov r8, r8)
 8001ed8:	20000244 	.word	0x20000244

08001edc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001edc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ede:	4802      	ldr	r0, [pc, #8]	@ (8001ee8 <USART2_IRQHandler+0xc>)
 8001ee0:	f001 fe7e 	bl	8003be0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001ee4:	bd10      	pop	{r4, pc}
 8001ee6:	46c0      	nop			@ (mov r8, r8)
 8001ee8:	2000011c 	.word	0x2000011c

08001eec <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8001eec:	2001      	movs	r0, #1
 8001eee:	4770      	bx	lr

08001ef0 <_kill>:

int _kill(int pid, int sig)
{
 8001ef0:	b510      	push	{r4, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ef2:	f003 fef9 	bl	8005ce8 <__errno>
 8001ef6:	2316      	movs	r3, #22
 8001ef8:	6003      	str	r3, [r0, #0]
  return -1;
 8001efa:	2001      	movs	r0, #1
}
 8001efc:	4240      	negs	r0, r0
 8001efe:	bd10      	pop	{r4, pc}

08001f00 <_exit>:

void _exit (int status)
{
 8001f00:	b510      	push	{r4, lr}
  errno = EINVAL;
 8001f02:	f003 fef1 	bl	8005ce8 <__errno>
 8001f06:	2316      	movs	r3, #22
 8001f08:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8001f0a:	e7fe      	b.n	8001f0a <_exit+0xa>

08001f0c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f0c:	b570      	push	{r4, r5, r6, lr}
 8001f0e:	000e      	movs	r6, r1
 8001f10:	0014      	movs	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f12:	2500      	movs	r5, #0
 8001f14:	42a5      	cmp	r5, r4
 8001f16:	db01      	blt.n	8001f1c <_read+0x10>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 8001f18:	0020      	movs	r0, r4
 8001f1a:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 8001f1c:	e000      	b.n	8001f20 <_read+0x14>
 8001f1e:	bf00      	nop
 8001f20:	5570      	strb	r0, [r6, r5]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f22:	3501      	adds	r5, #1
 8001f24:	e7f6      	b.n	8001f14 <_read+0x8>

08001f26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f26:	b570      	push	{r4, r5, r6, lr}
 8001f28:	000e      	movs	r6, r1
 8001f2a:	0014      	movs	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f2c:	2500      	movs	r5, #0
 8001f2e:	42a5      	cmp	r5, r4
 8001f30:	db01      	blt.n	8001f36 <_write+0x10>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 8001f32:	0020      	movs	r0, r4
 8001f34:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 8001f36:	5d70      	ldrb	r0, [r6, r5]
 8001f38:	e000      	b.n	8001f3c <_write+0x16>
 8001f3a:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f3c:	3501      	adds	r5, #1
 8001f3e:	e7f6      	b.n	8001f2e <_write+0x8>

08001f40 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
 8001f40:	2001      	movs	r0, #1
}
 8001f42:	4240      	negs	r0, r0
 8001f44:	4770      	bx	lr

08001f46 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8001f46:	2380      	movs	r3, #128	@ 0x80
 8001f48:	019b      	lsls	r3, r3, #6
  return 0;
}
 8001f4a:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8001f4c:	604b      	str	r3, [r1, #4]
}
 8001f4e:	4770      	bx	lr

08001f50 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001f50:	2001      	movs	r0, #1
 8001f52:	4770      	bx	lr

08001f54 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001f54:	2000      	movs	r0, #0
 8001f56:	4770      	bx	lr

08001f58 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f58:	490b      	ldr	r1, [pc, #44]	@ (8001f88 <_sbrk+0x30>)
 8001f5a:	4a0c      	ldr	r2, [pc, #48]	@ (8001f8c <_sbrk+0x34>)
{
 8001f5c:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f5e:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f60:	490b      	ldr	r1, [pc, #44]	@ (8001f90 <_sbrk+0x38>)
{
 8001f62:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001f64:	6808      	ldr	r0, [r1, #0]
 8001f66:	2800      	cmp	r0, #0
 8001f68:	d101      	bne.n	8001f6e <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 8001f6a:	480a      	ldr	r0, [pc, #40]	@ (8001f94 <_sbrk+0x3c>)
 8001f6c:	6008      	str	r0, [r1, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f6e:	6808      	ldr	r0, [r1, #0]
 8001f70:	18c3      	adds	r3, r0, r3
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d906      	bls.n	8001f84 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 8001f76:	f003 feb7 	bl	8005ce8 <__errno>
 8001f7a:	230c      	movs	r3, #12
 8001f7c:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001f7e:	2001      	movs	r0, #1
 8001f80:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001f82:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001f84:	600b      	str	r3, [r1, #0]
  return (void *)prev_heap_end;
 8001f86:	e7fc      	b.n	8001f82 <_sbrk+0x2a>
 8001f88:	00000400 	.word	0x00000400
 8001f8c:	20002000 	.word	0x20002000
 8001f90:	20000364 	.word	0x20000364
 8001f94:	20000630 	.word	0x20000630

08001f98 <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f98:	4770      	bx	lr
	...

08001f9c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f9c:	480d      	ldr	r0, [pc, #52]	@ (8001fd4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f9e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001fa0:	f7ff fffa 	bl	8001f98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fa4:	480c      	ldr	r0, [pc, #48]	@ (8001fd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001fa6:	490d      	ldr	r1, [pc, #52]	@ (8001fdc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fa8:	4a0d      	ldr	r2, [pc, #52]	@ (8001fe0 <LoopForever+0xe>)
  movs r3, #0
 8001faa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fac:	e002      	b.n	8001fb4 <LoopCopyDataInit>

08001fae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fb2:	3304      	adds	r3, #4

08001fb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fb8:	d3f9      	bcc.n	8001fae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fba:	4a0a      	ldr	r2, [pc, #40]	@ (8001fe4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fbc:	4c0a      	ldr	r4, [pc, #40]	@ (8001fe8 <LoopForever+0x16>)
  movs r3, #0
 8001fbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fc0:	e001      	b.n	8001fc6 <LoopFillZerobss>

08001fc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fc4:	3204      	adds	r2, #4

08001fc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fc8:	d3fb      	bcc.n	8001fc2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001fca:	f003 fe93 	bl	8005cf4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001fce:	f7ff fb31 	bl	8001634 <main>

08001fd2 <LoopForever>:

LoopForever:
  b LoopForever
 8001fd2:	e7fe      	b.n	8001fd2 <LoopForever>
  ldr   r0, =_estack
 8001fd4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001fd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fdc:	200000f4 	.word	0x200000f4
  ldr r2, =_sidata
 8001fe0:	08006e5c 	.word	0x08006e5c
  ldr r2, =_sbss
 8001fe4:	200000f4 	.word	0x200000f4
  ldr r4, =_ebss
 8001fe8:	2000062c 	.word	0x2000062c

08001fec <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fec:	e7fe      	b.n	8001fec <ADC1_IRQHandler>
	...

08001ff0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ff0:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001ff2:	4b10      	ldr	r3, [pc, #64]	@ (8002034 <HAL_InitTick+0x44>)
{
 8001ff4:	0005      	movs	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 8001ff6:	7819      	ldrb	r1, [r3, #0]
 8001ff8:	2900      	cmp	r1, #0
 8001ffa:	d101      	bne.n	8002000 <HAL_InitTick+0x10>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ffc:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 8001ffe:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002000:	20fa      	movs	r0, #250	@ 0xfa
 8002002:	0080      	lsls	r0, r0, #2
 8002004:	f7fe f892 	bl	800012c <__udivsi3>
 8002008:	4c0b      	ldr	r4, [pc, #44]	@ (8002038 <HAL_InitTick+0x48>)
 800200a:	0001      	movs	r1, r0
 800200c:	6820      	ldr	r0, [r4, #0]
 800200e:	f7fe f88d 	bl	800012c <__udivsi3>
 8002012:	f000 f871 	bl	80020f8 <HAL_SYSTICK_Config>
 8002016:	1e04      	subs	r4, r0, #0
 8002018:	d1f0      	bne.n	8001ffc <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800201a:	2d03      	cmp	r5, #3
 800201c:	d8ee      	bhi.n	8001ffc <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800201e:	0002      	movs	r2, r0
 8002020:	2001      	movs	r0, #1
 8002022:	0029      	movs	r1, r5
 8002024:	4240      	negs	r0, r0
 8002026:	f000 f831 	bl	800208c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800202a:	4b04      	ldr	r3, [pc, #16]	@ (800203c <HAL_InitTick+0x4c>)
 800202c:	0020      	movs	r0, r4
 800202e:	601d      	str	r5, [r3, #0]
  return status;
 8002030:	e7e5      	b.n	8001ffe <HAL_InitTick+0xe>
 8002032:	46c0      	nop			@ (mov r8, r8)
 8002034:	20000004 	.word	0x20000004
 8002038:	20000000 	.word	0x20000000
 800203c:	20000008 	.word	0x20000008

08002040 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002040:	2380      	movs	r3, #128	@ 0x80
 8002042:	4a08      	ldr	r2, [pc, #32]	@ (8002064 <HAL_Init+0x24>)
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	6811      	ldr	r1, [r2, #0]
{
 8002048:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800204a:	430b      	orrs	r3, r1
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800204c:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800204e:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002050:	f7ff ffce 	bl	8001ff0 <HAL_InitTick>
 8002054:	1e04      	subs	r4, r0, #0
 8002056:	d103      	bne.n	8002060 <HAL_Init+0x20>
  HAL_MspInit();
 8002058:	f7ff fe62 	bl	8001d20 <HAL_MspInit>
}
 800205c:	0020      	movs	r0, r4
 800205e:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8002060:	2401      	movs	r4, #1
 8002062:	e7fb      	b.n	800205c <HAL_Init+0x1c>
 8002064:	40022000 	.word	0x40022000

08002068 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8002068:	4a03      	ldr	r2, [pc, #12]	@ (8002078 <HAL_IncTick+0x10>)
 800206a:	4b04      	ldr	r3, [pc, #16]	@ (800207c <HAL_IncTick+0x14>)
 800206c:	6811      	ldr	r1, [r2, #0]
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	185b      	adds	r3, r3, r1
 8002072:	6013      	str	r3, [r2, #0]
}
 8002074:	4770      	bx	lr
 8002076:	46c0      	nop			@ (mov r8, r8)
 8002078:	20000368 	.word	0x20000368
 800207c:	20000004 	.word	0x20000004

08002080 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002080:	4b01      	ldr	r3, [pc, #4]	@ (8002088 <HAL_GetTick+0x8>)
 8002082:	6818      	ldr	r0, [r3, #0]
}
 8002084:	4770      	bx	lr
 8002086:	46c0      	nop			@ (mov r8, r8)
 8002088:	20000368 	.word	0x20000368

0800208c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800208c:	b510      	push	{r4, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800208e:	24ff      	movs	r4, #255	@ 0xff
 8002090:	2203      	movs	r2, #3
 8002092:	000b      	movs	r3, r1
 8002094:	0021      	movs	r1, r4
 8002096:	4002      	ands	r2, r0
 8002098:	00d2      	lsls	r2, r2, #3
 800209a:	4091      	lsls	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800209c:	019b      	lsls	r3, r3, #6
 800209e:	4023      	ands	r3, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020a0:	43c9      	mvns	r1, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80020a2:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
 80020a4:	2800      	cmp	r0, #0
 80020a6:	db0a      	blt.n	80020be <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020a8:	24c0      	movs	r4, #192	@ 0xc0
 80020aa:	4a0b      	ldr	r2, [pc, #44]	@ (80020d8 <HAL_NVIC_SetPriority+0x4c>)
 80020ac:	0880      	lsrs	r0, r0, #2
 80020ae:	0080      	lsls	r0, r0, #2
 80020b0:	1880      	adds	r0, r0, r2
 80020b2:	00a4      	lsls	r4, r4, #2
 80020b4:	5902      	ldr	r2, [r0, r4]
 80020b6:	400a      	ands	r2, r1
 80020b8:	4313      	orrs	r3, r2
 80020ba:	5103      	str	r3, [r0, r4]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 80020bc:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020be:	220f      	movs	r2, #15
 80020c0:	4010      	ands	r0, r2
 80020c2:	3808      	subs	r0, #8
 80020c4:	4a05      	ldr	r2, [pc, #20]	@ (80020dc <HAL_NVIC_SetPriority+0x50>)
 80020c6:	0880      	lsrs	r0, r0, #2
 80020c8:	0080      	lsls	r0, r0, #2
 80020ca:	1880      	adds	r0, r0, r2
 80020cc:	69c2      	ldr	r2, [r0, #28]
 80020ce:	4011      	ands	r1, r2
 80020d0:	4319      	orrs	r1, r3
 80020d2:	61c1      	str	r1, [r0, #28]
 80020d4:	e7f2      	b.n	80020bc <HAL_NVIC_SetPriority+0x30>
 80020d6:	46c0      	nop			@ (mov r8, r8)
 80020d8:	e000e100 	.word	0xe000e100
 80020dc:	e000ed00 	.word	0xe000ed00

080020e0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80020e0:	2800      	cmp	r0, #0
 80020e2:	db05      	blt.n	80020f0 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020e4:	231f      	movs	r3, #31
 80020e6:	4018      	ands	r0, r3
 80020e8:	3b1e      	subs	r3, #30
 80020ea:	4083      	lsls	r3, r0
 80020ec:	4a01      	ldr	r2, [pc, #4]	@ (80020f4 <HAL_NVIC_EnableIRQ+0x14>)
 80020ee:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80020f0:	4770      	bx	lr
 80020f2:	46c0      	nop			@ (mov r8, r8)
 80020f4:	e000e100 	.word	0xe000e100

080020f8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020f8:	2280      	movs	r2, #128	@ 0x80
 80020fa:	1e43      	subs	r3, r0, #1
 80020fc:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 80020fe:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002100:	4293      	cmp	r3, r2
 8002102:	d20d      	bcs.n	8002120 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002104:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002106:	4a07      	ldr	r2, [pc, #28]	@ (8002124 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002108:	4807      	ldr	r0, [pc, #28]	@ (8002128 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800210a:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800210c:	6a03      	ldr	r3, [r0, #32]
 800210e:	0609      	lsls	r1, r1, #24
 8002110:	021b      	lsls	r3, r3, #8
 8002112:	0a1b      	lsrs	r3, r3, #8
 8002114:	430b      	orrs	r3, r1
 8002116:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002118:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800211a:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800211c:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800211e:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8002120:	4770      	bx	lr
 8002122:	46c0      	nop			@ (mov r8, r8)
 8002124:	e000e010 	.word	0xe000e010
 8002128:	e000ed00 	.word	0xe000ed00

0800212c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800212c:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800212e:	2800      	cmp	r0, #0
 8002130:	d008      	beq.n	8002144 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002132:	1d84      	adds	r4, r0, #6
 8002134:	7fe3      	ldrb	r3, [r4, #31]
 8002136:	1d41      	adds	r1, r0, #5
 8002138:	2b02      	cmp	r3, #2
 800213a:	d005      	beq.n	8002148 <HAL_DMA_Abort+0x1c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800213c:	2304      	movs	r3, #4
 800213e:	63c3      	str	r3, [r0, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002140:	2300      	movs	r3, #0
 8002142:	77cb      	strb	r3, [r1, #31]
    return HAL_ERROR;
 8002144:	2001      	movs	r0, #1
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
  }

  return HAL_OK;
}
 8002146:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002148:	250e      	movs	r5, #14
 800214a:	6802      	ldr	r2, [r0, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800214c:	6c46      	ldr	r6, [r0, #68]	@ 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800214e:	6813      	ldr	r3, [r2, #0]
 8002150:	43ab      	bics	r3, r5
 8002152:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002154:	6833      	ldr	r3, [r6, #0]
 8002156:	4d10      	ldr	r5, [pc, #64]	@ (8002198 <HAL_DMA_Abort+0x6c>)
 8002158:	402b      	ands	r3, r5
 800215a:	6033      	str	r3, [r6, #0]
    __HAL_DMA_DISABLE(hdma);
 800215c:	2301      	movs	r3, #1
 800215e:	6816      	ldr	r6, [r2, #0]
 8002160:	439e      	bics	r6, r3
 8002162:	6016      	str	r6, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8002164:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8002166:	331b      	adds	r3, #27
 8002168:	401a      	ands	r2, r3
 800216a:	3b1b      	subs	r3, #27
 800216c:	4093      	lsls	r3, r2
 800216e:	4e0b      	ldr	r6, [pc, #44]	@ (800219c <HAL_DMA_Abort+0x70>)
 8002170:	6877      	ldr	r7, [r6, #4]
 8002172:	433b      	orrs	r3, r7
 8002174:	6073      	str	r3, [r6, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002176:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8002178:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 800217a:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 800217c:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800217e:	2b00      	cmp	r3, #0
 8002180:	d005      	beq.n	800218e <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	402a      	ands	r2, r5
 8002186:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002188:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800218a:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 800218c:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800218e:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 8002190:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 8002192:	77e3      	strb	r3, [r4, #31]
    __HAL_UNLOCK(hdma);
 8002194:	77c8      	strb	r0, [r1, #31]
  return HAL_OK;
 8002196:	e7d6      	b.n	8002146 <HAL_DMA_Abort+0x1a>
 8002198:	fffffeff 	.word	0xfffffeff
 800219c:	40020000 	.word	0x40020000

080021a0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80021a2:	1d81      	adds	r1, r0, #6
 80021a4:	7fcb      	ldrb	r3, [r1, #31]
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d003      	beq.n	80021b2 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021aa:	2304      	movs	r3, #4
 80021ac:	63c3      	str	r3, [r0, #60]	@ 0x3c

    status = HAL_ERROR;
 80021ae:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 80021b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021b2:	240e      	movs	r4, #14
 80021b4:	6802      	ldr	r2, [r0, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80021b6:	271c      	movs	r7, #28
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021b8:	6813      	ldr	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80021ba:	6c45      	ldr	r5, [r0, #68]	@ 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021bc:	43a3      	bics	r3, r4
 80021be:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80021c0:	2301      	movs	r3, #1
 80021c2:	6814      	ldr	r4, [r2, #0]
 80021c4:	439c      	bics	r4, r3
 80021c6:	6014      	str	r4, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80021c8:	682a      	ldr	r2, [r5, #0]
 80021ca:	4c10      	ldr	r4, [pc, #64]	@ (800220c <HAL_DMA_Abort_IT+0x6c>)
 80021cc:	4022      	ands	r2, r4
 80021ce:	602a      	str	r2, [r5, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80021d0:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80021d2:	4d0f      	ldr	r5, [pc, #60]	@ (8002210 <HAL_DMA_Abort_IT+0x70>)
 80021d4:	403a      	ands	r2, r7
 80021d6:	4093      	lsls	r3, r2
 80021d8:	686e      	ldr	r6, [r5, #4]
 80021da:	4333      	orrs	r3, r6
 80021dc:	606b      	str	r3, [r5, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021de:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 80021e0:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 80021e2:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80021e4:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d005      	beq.n	80021f6 <HAL_DMA_Abort_IT+0x56>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	4022      	ands	r2, r4
 80021ee:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021f0:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80021f2:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 80021f4:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80021f6:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 80021f8:	2200      	movs	r2, #0
    hdma->State = HAL_DMA_STATE_READY;
 80021fa:	77cb      	strb	r3, [r1, #31]
    __HAL_UNLOCK(hdma);
 80021fc:	1d43      	adds	r3, r0, #5
 80021fe:	77da      	strb	r2, [r3, #31]
    if (hdma->XferAbortCallback != NULL)
 8002200:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8002202:	4293      	cmp	r3, r2
 8002204:	d000      	beq.n	8002208 <HAL_DMA_Abort_IT+0x68>
      hdma->XferAbortCallback(hdma);
 8002206:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8002208:	2000      	movs	r0, #0
 800220a:	e7d1      	b.n	80021b0 <HAL_DMA_Abort_IT+0x10>
 800220c:	fffffeff 	.word	0xfffffeff
 8002210:	40020000 	.word	0x40020000

08002214 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 8002214:	2300      	movs	r3, #0
{
 8002216:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002218:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800221a:	680a      	ldr	r2, [r1, #0]
 800221c:	0014      	movs	r4, r2
 800221e:	40dc      	lsrs	r4, r3
 8002220:	d101      	bne.n	8002226 <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  }
}
 8002222:	b005      	add	sp, #20
 8002224:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002226:	2501      	movs	r5, #1
 8002228:	0014      	movs	r4, r2
 800222a:	409d      	lsls	r5, r3
 800222c:	402c      	ands	r4, r5
 800222e:	9400      	str	r4, [sp, #0]
    if (iocurrent != 0x00u)
 8002230:	422a      	tst	r2, r5
 8002232:	d100      	bne.n	8002236 <HAL_GPIO_Init+0x22>
 8002234:	e091      	b.n	800235a <HAL_GPIO_Init+0x146>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002236:	684a      	ldr	r2, [r1, #4]
 8002238:	005f      	lsls	r7, r3, #1
 800223a:	4694      	mov	ip, r2
 800223c:	2203      	movs	r2, #3
 800223e:	4664      	mov	r4, ip
 8002240:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002242:	2403      	movs	r4, #3
 8002244:	40bc      	lsls	r4, r7
 8002246:	43e4      	mvns	r4, r4
 8002248:	9401      	str	r4, [sp, #4]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800224a:	1e54      	subs	r4, r2, #1
 800224c:	2c01      	cmp	r4, #1
 800224e:	d82e      	bhi.n	80022ae <HAL_GPIO_Init+0x9a>
        temp = GPIOx->OSPEEDR;
 8002250:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002252:	9c01      	ldr	r4, [sp, #4]
 8002254:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002256:	68cc      	ldr	r4, [r1, #12]
 8002258:	40bc      	lsls	r4, r7
 800225a:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 800225c:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 800225e:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002260:	2601      	movs	r6, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002262:	43ac      	bics	r4, r5
 8002264:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002266:	4664      	mov	r4, ip
 8002268:	0924      	lsrs	r4, r4, #4
 800226a:	4034      	ands	r4, r6
 800226c:	409c      	lsls	r4, r3
 800226e:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8002270:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8002272:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002274:	9c01      	ldr	r4, [sp, #4]
 8002276:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002278:	688c      	ldr	r4, [r1, #8]
 800227a:	40bc      	lsls	r4, r7
 800227c:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 800227e:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002280:	2a02      	cmp	r2, #2
 8002282:	d116      	bne.n	80022b2 <HAL_GPIO_Init+0x9e>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002284:	2507      	movs	r5, #7
 8002286:	260f      	movs	r6, #15
 8002288:	401d      	ands	r5, r3
 800228a:	00ad      	lsls	r5, r5, #2
 800228c:	40ae      	lsls	r6, r5
        temp = GPIOx->AFR[position >> 3u];
 800228e:	08dc      	lsrs	r4, r3, #3
 8002290:	00a4      	lsls	r4, r4, #2
 8002292:	1904      	adds	r4, r0, r4
 8002294:	9402      	str	r4, [sp, #8]
 8002296:	6a24      	ldr	r4, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002298:	9603      	str	r6, [sp, #12]
 800229a:	0026      	movs	r6, r4
 800229c:	9c03      	ldr	r4, [sp, #12]
 800229e:	43a6      	bics	r6, r4
 80022a0:	0034      	movs	r4, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022a2:	690e      	ldr	r6, [r1, #16]
 80022a4:	40ae      	lsls	r6, r5
 80022a6:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3u] = temp;
 80022a8:	9c02      	ldr	r4, [sp, #8]
 80022aa:	6226      	str	r6, [r4, #32]
 80022ac:	e001      	b.n	80022b2 <HAL_GPIO_Init+0x9e>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022ae:	2a03      	cmp	r2, #3
 80022b0:	d1df      	bne.n	8002272 <HAL_GPIO_Init+0x5e>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022b2:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 80022b4:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80022b6:	9d01      	ldr	r5, [sp, #4]
 80022b8:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022ba:	432a      	orrs	r2, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022bc:	24c0      	movs	r4, #192	@ 0xc0
      GPIOx->MODER = temp;
 80022be:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022c0:	4662      	mov	r2, ip
 80022c2:	02a4      	lsls	r4, r4, #10
 80022c4:	4222      	tst	r2, r4
 80022c6:	d048      	beq.n	800235a <HAL_GPIO_Init+0x146>
        temp = EXTI->EXTICR[position >> 2u];
 80022c8:	4a25      	ldr	r2, [pc, #148]	@ (8002360 <HAL_GPIO_Init+0x14c>)
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80022ca:	2503      	movs	r5, #3
        temp = EXTI->EXTICR[position >> 2u];
 80022cc:	089c      	lsrs	r4, r3, #2
 80022ce:	00a4      	lsls	r4, r4, #2
 80022d0:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80022d2:	220f      	movs	r2, #15
 80022d4:	401d      	ands	r5, r3
 80022d6:	00ed      	lsls	r5, r5, #3
 80022d8:	40aa      	lsls	r2, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80022da:	27a0      	movs	r7, #160	@ 0xa0
        temp = EXTI->EXTICR[position >> 2u];
 80022dc:	6e26      	ldr	r6, [r4, #96]	@ 0x60
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80022de:	05ff      	lsls	r7, r7, #23
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80022e0:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80022e2:	2200      	movs	r2, #0
 80022e4:	42b8      	cmp	r0, r7
 80022e6:	d00c      	beq.n	8002302 <HAL_GPIO_Init+0xee>
 80022e8:	4f1e      	ldr	r7, [pc, #120]	@ (8002364 <HAL_GPIO_Init+0x150>)
 80022ea:	3201      	adds	r2, #1
 80022ec:	42b8      	cmp	r0, r7
 80022ee:	d008      	beq.n	8002302 <HAL_GPIO_Init+0xee>
 80022f0:	4f1d      	ldr	r7, [pc, #116]	@ (8002368 <HAL_GPIO_Init+0x154>)
 80022f2:	3201      	adds	r2, #1
 80022f4:	42b8      	cmp	r0, r7
 80022f6:	d004      	beq.n	8002302 <HAL_GPIO_Init+0xee>
 80022f8:	4f1c      	ldr	r7, [pc, #112]	@ (800236c <HAL_GPIO_Init+0x158>)
 80022fa:	3203      	adds	r2, #3
 80022fc:	42b8      	cmp	r0, r7
 80022fe:	d100      	bne.n	8002302 <HAL_GPIO_Init+0xee>
 8002300:	3a02      	subs	r2, #2
 8002302:	40aa      	lsls	r2, r5
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002304:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002306:	4332      	orrs	r2, r6
        EXTI->EXTICR[position >> 2u] = temp;
 8002308:	6622      	str	r2, [r4, #96]	@ 0x60
        temp = EXTI->RTSR1;
 800230a:	4c15      	ldr	r4, [pc, #84]	@ (8002360 <HAL_GPIO_Init+0x14c>)
        temp &= ~(iocurrent);
 800230c:	9a00      	ldr	r2, [sp, #0]
        temp = EXTI->RTSR1;
 800230e:	6826      	ldr	r6, [r4, #0]
          temp |= iocurrent;
 8002310:	9d00      	ldr	r5, [sp, #0]
        temp &= ~(iocurrent);
 8002312:	43d2      	mvns	r2, r2
          temp |= iocurrent;
 8002314:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002316:	02ff      	lsls	r7, r7, #11
 8002318:	d401      	bmi.n	800231e <HAL_GPIO_Init+0x10a>
        temp &= ~(iocurrent);
 800231a:	0035      	movs	r5, r6
 800231c:	4015      	ands	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800231e:	4667      	mov	r7, ip
        EXTI->RTSR1 = temp;
 8002320:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 8002322:	6866      	ldr	r6, [r4, #4]
          temp |= iocurrent;
 8002324:	9d00      	ldr	r5, [sp, #0]
 8002326:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002328:	02bf      	lsls	r7, r7, #10
 800232a:	d401      	bmi.n	8002330 <HAL_GPIO_Init+0x11c>
        temp &= ~(iocurrent);
 800232c:	0035      	movs	r5, r6
 800232e:	4015      	ands	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002330:	4667      	mov	r7, ip
        EXTI->FTSR1 = temp;
 8002332:	6065      	str	r5, [r4, #4]
        temp = EXTI->EMR1;
 8002334:	4c0e      	ldr	r4, [pc, #56]	@ (8002370 <HAL_GPIO_Init+0x15c>)
          temp |= iocurrent;
 8002336:	9d00      	ldr	r5, [sp, #0]
        temp = EXTI->EMR1;
 8002338:	6fe6      	ldr	r6, [r4, #124]	@ 0x7c
          temp |= iocurrent;
 800233a:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800233c:	03bf      	lsls	r7, r7, #14
 800233e:	d401      	bmi.n	8002344 <HAL_GPIO_Init+0x130>
        temp &= ~(iocurrent);
 8002340:	0035      	movs	r5, r6
 8002342:	4015      	ands	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002344:	4667      	mov	r7, ip
        EXTI->EMR1 = temp;
 8002346:	67e5      	str	r5, [r4, #124]	@ 0x7c
        temp = EXTI->IMR1;
 8002348:	4c0a      	ldr	r4, [pc, #40]	@ (8002374 <HAL_GPIO_Init+0x160>)
          temp |= iocurrent;
 800234a:	9e00      	ldr	r6, [sp, #0]
        temp = EXTI->IMR1;
 800234c:	6fe5      	ldr	r5, [r4, #124]	@ 0x7c
          temp |= iocurrent;
 800234e:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002350:	03ff      	lsls	r7, r7, #15
 8002352:	d401      	bmi.n	8002358 <HAL_GPIO_Init+0x144>
        temp &= ~(iocurrent);
 8002354:	4015      	ands	r5, r2
 8002356:	002e      	movs	r6, r5
        EXTI->IMR1 = temp;
 8002358:	67e6      	str	r6, [r4, #124]	@ 0x7c
    position++;
 800235a:	3301      	adds	r3, #1
 800235c:	e75d      	b.n	800221a <HAL_GPIO_Init+0x6>
 800235e:	46c0      	nop			@ (mov r8, r8)
 8002360:	40021800 	.word	0x40021800
 8002364:	50000400 	.word	0x50000400
 8002368:	50000800 	.word	0x50000800
 800236c:	50000c00 	.word	0x50000c00
 8002370:	40021808 	.word	0x40021808
 8002374:	40021804 	.word	0x40021804

08002378 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002378:	2a00      	cmp	r2, #0
 800237a:	d001      	beq.n	8002380 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800237c:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800237e:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002380:	6281      	str	r1, [r0, #40]	@ 0x28
}
 8002382:	e7fc      	b.n	800237e <HAL_GPIO_WritePin+0x6>

08002384 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002384:	6803      	ldr	r3, [r0, #0]
 8002386:	699a      	ldr	r2, [r3, #24]
 8002388:	0792      	lsls	r2, r2, #30
 800238a:	d501      	bpl.n	8002390 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 800238c:	2200      	movs	r2, #0
 800238e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002390:	2201      	movs	r2, #1
 8002392:	6999      	ldr	r1, [r3, #24]
 8002394:	4211      	tst	r1, r2
 8002396:	d102      	bne.n	800239e <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002398:	6999      	ldr	r1, [r3, #24]
 800239a:	430a      	orrs	r2, r1
 800239c:	619a      	str	r2, [r3, #24]
  }
}
 800239e:	4770      	bx	lr

080023a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80023a0:	b530      	push	{r4, r5, lr}
 80023a2:	9c03      	ldr	r4, [sp, #12]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80023a4:	6800      	ldr	r0, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80023a6:	4323      	orrs	r3, r4
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80023a8:	0412      	lsls	r2, r2, #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80023aa:	0589      	lsls	r1, r1, #22
 80023ac:	431a      	orrs	r2, r3
 80023ae:	0d89      	lsrs	r1, r1, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 80023b0:	4b05      	ldr	r3, [pc, #20]	@ (80023c8 <I2C_TransferConfig+0x28>)
 80023b2:	6845      	ldr	r5, [r0, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80023b4:	430a      	orrs	r2, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 80023b6:	0d64      	lsrs	r4, r4, #21
 80023b8:	4323      	orrs	r3, r4
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80023ba:	0052      	lsls	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 80023bc:	439d      	bics	r5, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80023be:	0852      	lsrs	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 80023c0:	432a      	orrs	r2, r5
 80023c2:	6042      	str	r2, [r0, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80023c4:	bd30      	pop	{r4, r5, pc}
 80023c6:	46c0      	nop			@ (mov r8, r8)
 80023c8:	03ff63ff 	.word	0x03ff63ff

080023cc <I2C_IsErrorOccurred>:
{
 80023cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80023ce:	0015      	movs	r5, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 80023d0:	6802      	ldr	r2, [r0, #0]
{
 80023d2:	000e      	movs	r6, r1
  uint32_t itflag   = hi2c->Instance->ISR;
 80023d4:	6991      	ldr	r1, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80023d6:	2310      	movs	r3, #16
 80023d8:	000f      	movs	r7, r1
{
 80023da:	0004      	movs	r4, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80023dc:	401f      	ands	r7, r3
  HAL_StatusTypeDef status = HAL_OK;
 80023de:	2000      	movs	r0, #0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80023e0:	4219      	tst	r1, r3
 80023e2:	d00d      	beq.n	8002400 <I2C_IsErrorOccurred+0x34>
  HAL_StatusTypeDef status = HAL_OK;
 80023e4:	0007      	movs	r7, r0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023e6:	61d3      	str	r3, [r2, #28]
  uint32_t error_code = 0;
 80023e8:	9001      	str	r0, [sp, #4]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80023ea:	6823      	ldr	r3, [r4, #0]
 80023ec:	2120      	movs	r1, #32
 80023ee:	699a      	ldr	r2, [r3, #24]
 80023f0:	420a      	tst	r2, r1
 80023f2:	d15f      	bne.n	80024b4 <I2C_IsErrorOccurred+0xe8>
 80023f4:	2f00      	cmp	r7, #0
 80023f6:	d031      	beq.n	800245c <I2C_IsErrorOccurred+0x90>
    error_code |= HAL_I2C_ERROR_AF;
 80023f8:	2704      	movs	r7, #4
    status = HAL_ERROR;
 80023fa:	2001      	movs	r0, #1
    error_code |= HAL_I2C_ERROR_AF;
 80023fc:	9b01      	ldr	r3, [sp, #4]
 80023fe:	431f      	orrs	r7, r3
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002400:	2280      	movs	r2, #128	@ 0x80
  itflag = hi2c->Instance->ISR;
 8002402:	6825      	ldr	r5, [r4, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002404:	0052      	lsls	r2, r2, #1
  itflag = hi2c->Instance->ISR;
 8002406:	69ab      	ldr	r3, [r5, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002408:	4213      	tst	r3, r2
 800240a:	d002      	beq.n	8002412 <I2C_IsErrorOccurred+0x46>
    error_code |= HAL_I2C_ERROR_BERR;
 800240c:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800240e:	61ea      	str	r2, [r5, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 8002410:	4307      	orrs	r7, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002412:	2280      	movs	r2, #128	@ 0x80
 8002414:	00d2      	lsls	r2, r2, #3
 8002416:	4213      	tst	r3, r2
 8002418:	d003      	beq.n	8002422 <I2C_IsErrorOccurred+0x56>
    error_code |= HAL_I2C_ERROR_OVR;
 800241a:	2108      	movs	r1, #8
    status = HAL_ERROR;
 800241c:	2001      	movs	r0, #1
    error_code |= HAL_I2C_ERROR_OVR;
 800241e:	430f      	orrs	r7, r1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002420:	61ea      	str	r2, [r5, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002422:	2280      	movs	r2, #128	@ 0x80
 8002424:	0092      	lsls	r2, r2, #2
 8002426:	4213      	tst	r3, r2
 8002428:	d049      	beq.n	80024be <I2C_IsErrorOccurred+0xf2>
    error_code |= HAL_I2C_ERROR_ARLO;
 800242a:	2302      	movs	r3, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800242c:	61ea      	str	r2, [r5, #28]
    error_code |= HAL_I2C_ERROR_ARLO;
 800242e:	431f      	orrs	r7, r3
    I2C_Flush_TXDR(hi2c);
 8002430:	0020      	movs	r0, r4
 8002432:	f7ff ffa7 	bl	8002384 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8002436:	686b      	ldr	r3, [r5, #4]
 8002438:	4a22      	ldr	r2, [pc, #136]	@ (80024c4 <I2C_IsErrorOccurred+0xf8>)
    __HAL_UNLOCK(hi2c);
 800243a:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 800243c:	4013      	ands	r3, r2
 800243e:	606b      	str	r3, [r5, #4]
    hi2c->ErrorCode |= error_code;
 8002440:	6c63      	ldr	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002442:	2220      	movs	r2, #32
    hi2c->ErrorCode |= error_code;
 8002444:	433b      	orrs	r3, r7
 8002446:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002448:	0023      	movs	r3, r4
 800244a:	3341      	adds	r3, #65	@ 0x41
 800244c:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800244e:	0022      	movs	r2, r4
 8002450:	2300      	movs	r3, #0
 8002452:	3242      	adds	r2, #66	@ 0x42
    __HAL_UNLOCK(hi2c);
 8002454:	3440      	adds	r4, #64	@ 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002456:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8002458:	7023      	strb	r3, [r4, #0]
 800245a:	e032      	b.n	80024c2 <I2C_IsErrorOccurred+0xf6>
      if (Timeout != HAL_MAX_DELAY)
 800245c:	1c72      	adds	r2, r6, #1
 800245e:	d0c5      	beq.n	80023ec <I2C_IsErrorOccurred+0x20>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002460:	f7ff fe0e 	bl	8002080 <HAL_GetTick>
 8002464:	1b40      	subs	r0, r0, r5
 8002466:	42b0      	cmp	r0, r6
 8002468:	d801      	bhi.n	800246e <I2C_IsErrorOccurred+0xa2>
 800246a:	2e00      	cmp	r6, #0
 800246c:	d1bd      	bne.n	80023ea <I2C_IsErrorOccurred+0x1e>
          tmp2 = hi2c->Mode;
 800246e:	0022      	movs	r2, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002470:	6823      	ldr	r3, [r4, #0]
          tmp2 = hi2c->Mode;
 8002472:	3242      	adds	r2, #66	@ 0x42
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002474:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8002476:	7811      	ldrb	r1, [r2, #0]
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002478:	699a      	ldr	r2, [r3, #24]
          tmp2 = hi2c->Mode;
 800247a:	b2c9      	uxtb	r1, r1
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800247c:	0412      	lsls	r2, r2, #16
 800247e:	d50b      	bpl.n	8002498 <I2C_IsErrorOccurred+0xcc>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002480:	2280      	movs	r2, #128	@ 0x80
 8002482:	01d2      	lsls	r2, r2, #7
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002484:	4210      	tst	r0, r2
 8002486:	d107      	bne.n	8002498 <I2C_IsErrorOccurred+0xcc>
              (tmp1 != I2C_CR2_STOP) && \
 8002488:	2920      	cmp	r1, #32
 800248a:	d005      	beq.n	8002498 <I2C_IsErrorOccurred+0xcc>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800248c:	6859      	ldr	r1, [r3, #4]
 800248e:	430a      	orrs	r2, r1
 8002490:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8002492:	f7ff fdf5 	bl	8002080 <HAL_GetTick>
 8002496:	0005      	movs	r5, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002498:	2220      	movs	r2, #32
 800249a:	6823      	ldr	r3, [r4, #0]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	4213      	tst	r3, r2
 80024a0:	d1a3      	bne.n	80023ea <I2C_IsErrorOccurred+0x1e>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80024a2:	f7ff fded 	bl	8002080 <HAL_GetTick>
 80024a6:	1b40      	subs	r0, r0, r5
 80024a8:	2819      	cmp	r0, #25
 80024aa:	d9f5      	bls.n	8002498 <I2C_IsErrorOccurred+0xcc>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80024ac:	2320      	movs	r3, #32
              status = HAL_ERROR;
 80024ae:	2701      	movs	r7, #1
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80024b0:	9301      	str	r3, [sp, #4]
 80024b2:	e79a      	b.n	80023ea <I2C_IsErrorOccurred+0x1e>
    if (status == HAL_OK)
 80024b4:	2f00      	cmp	r7, #0
 80024b6:	d19f      	bne.n	80023f8 <I2C_IsErrorOccurred+0x2c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024b8:	2220      	movs	r2, #32
 80024ba:	61da      	str	r2, [r3, #28]
 80024bc:	e79c      	b.n	80023f8 <I2C_IsErrorOccurred+0x2c>
  if (status != HAL_OK)
 80024be:	2800      	cmp	r0, #0
 80024c0:	d1b6      	bne.n	8002430 <I2C_IsErrorOccurred+0x64>
}
 80024c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80024c4:	fe00e800 	.word	0xfe00e800

080024c8 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80024c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ca:	0004      	movs	r4, r0
 80024cc:	000d      	movs	r5, r1
 80024ce:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80024d0:	2702      	movs	r7, #2
 80024d2:	6823      	ldr	r3, [r4, #0]
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	423b      	tst	r3, r7
 80024d8:	d001      	beq.n	80024de <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 80024da:	2000      	movs	r0, #0
 80024dc:	e021      	b.n	8002522 <I2C_WaitOnTXISFlagUntilTimeout+0x5a>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80024de:	0032      	movs	r2, r6
 80024e0:	0029      	movs	r1, r5
 80024e2:	0020      	movs	r0, r4
 80024e4:	f7ff ff72 	bl	80023cc <I2C_IsErrorOccurred>
 80024e8:	2800      	cmp	r0, #0
 80024ea:	d119      	bne.n	8002520 <I2C_WaitOnTXISFlagUntilTimeout+0x58>
    if (Timeout != HAL_MAX_DELAY)
 80024ec:	1c6b      	adds	r3, r5, #1
 80024ee:	d0f0      	beq.n	80024d2 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024f0:	f7ff fdc6 	bl	8002080 <HAL_GetTick>
 80024f4:	1b80      	subs	r0, r0, r6
 80024f6:	42a8      	cmp	r0, r5
 80024f8:	d801      	bhi.n	80024fe <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 80024fa:	2d00      	cmp	r5, #0
 80024fc:	d1e9      	bne.n	80024d2 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80024fe:	6823      	ldr	r3, [r4, #0]
 8002500:	6999      	ldr	r1, [r3, #24]
 8002502:	2302      	movs	r3, #2
 8002504:	000a      	movs	r2, r1
 8002506:	401a      	ands	r2, r3
 8002508:	4219      	tst	r1, r3
 800250a:	d1e2      	bne.n	80024d2 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800250c:	2120      	movs	r1, #32
 800250e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002510:	430b      	orrs	r3, r1
 8002512:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002514:	0023      	movs	r3, r4
          __HAL_UNLOCK(hi2c);
 8002516:	3440      	adds	r4, #64	@ 0x40
          hi2c->State = HAL_I2C_STATE_READY;
 8002518:	3341      	adds	r3, #65	@ 0x41
 800251a:	7019      	strb	r1, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800251c:	705a      	strb	r2, [r3, #1]
          __HAL_UNLOCK(hi2c);
 800251e:	7022      	strb	r2, [r4, #0]
      return HAL_ERROR;
 8002520:	2001      	movs	r0, #1
}
 8002522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002524 <I2C_WaitOnFlagUntilTimeout>:
{
 8002524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002526:	0004      	movs	r4, r0
 8002528:	000d      	movs	r5, r1
 800252a:	0017      	movs	r7, r2
 800252c:	001e      	movs	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800252e:	6823      	ldr	r3, [r4, #0]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	402b      	ands	r3, r5
 8002534:	1b5b      	subs	r3, r3, r5
 8002536:	425a      	negs	r2, r3
 8002538:	4153      	adcs	r3, r2
 800253a:	42bb      	cmp	r3, r7
 800253c:	d001      	beq.n	8002542 <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 800253e:	2000      	movs	r0, #0
 8002540:	e026      	b.n	8002590 <I2C_WaitOnFlagUntilTimeout+0x6c>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002542:	0031      	movs	r1, r6
 8002544:	0020      	movs	r0, r4
 8002546:	9a06      	ldr	r2, [sp, #24]
 8002548:	f7ff ff40 	bl	80023cc <I2C_IsErrorOccurred>
 800254c:	2800      	cmp	r0, #0
 800254e:	d11e      	bne.n	800258e <I2C_WaitOnFlagUntilTimeout+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 8002550:	1c73      	adds	r3, r6, #1
 8002552:	d0ec      	beq.n	800252e <I2C_WaitOnFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002554:	f7ff fd94 	bl	8002080 <HAL_GetTick>
 8002558:	9b06      	ldr	r3, [sp, #24]
 800255a:	1ac0      	subs	r0, r0, r3
 800255c:	42b0      	cmp	r0, r6
 800255e:	d801      	bhi.n	8002564 <I2C_WaitOnFlagUntilTimeout+0x40>
 8002560:	2e00      	cmp	r6, #0
 8002562:	d1e4      	bne.n	800252e <I2C_WaitOnFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002564:	6823      	ldr	r3, [r4, #0]
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	402b      	ands	r3, r5
 800256a:	1b5b      	subs	r3, r3, r5
 800256c:	425a      	negs	r2, r3
 800256e:	4153      	adcs	r3, r2
 8002570:	42bb      	cmp	r3, r7
 8002572:	d1dc      	bne.n	800252e <I2C_WaitOnFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002574:	2220      	movs	r2, #32
 8002576:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002578:	4313      	orrs	r3, r2
 800257a:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800257c:	0023      	movs	r3, r4
 800257e:	3341      	adds	r3, #65	@ 0x41
 8002580:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002582:	0022      	movs	r2, r4
 8002584:	2300      	movs	r3, #0
 8002586:	3242      	adds	r2, #66	@ 0x42
          __HAL_UNLOCK(hi2c);
 8002588:	3440      	adds	r4, #64	@ 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800258a:	7013      	strb	r3, [r2, #0]
          __HAL_UNLOCK(hi2c);
 800258c:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 800258e:	2001      	movs	r0, #1
}
 8002590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002592 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8002592:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002594:	0004      	movs	r4, r0
 8002596:	000e      	movs	r6, r1
 8002598:	0017      	movs	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800259a:	2520      	movs	r5, #32
 800259c:	6823      	ldr	r3, [r4, #0]
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	422b      	tst	r3, r5
 80025a2:	d001      	beq.n	80025a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 80025a4:	2000      	movs	r0, #0
 80025a6:	e01d      	b.n	80025e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x52>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80025a8:	003a      	movs	r2, r7
 80025aa:	0031      	movs	r1, r6
 80025ac:	0020      	movs	r0, r4
 80025ae:	f7ff ff0d 	bl	80023cc <I2C_IsErrorOccurred>
 80025b2:	2800      	cmp	r0, #0
 80025b4:	d115      	bne.n	80025e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025b6:	f7ff fd63 	bl	8002080 <HAL_GetTick>
 80025ba:	1bc0      	subs	r0, r0, r7
 80025bc:	42b0      	cmp	r0, r6
 80025be:	d801      	bhi.n	80025c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 80025c0:	2e00      	cmp	r6, #0
 80025c2:	d1eb      	bne.n	800259c <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80025c4:	6823      	ldr	r3, [r4, #0]
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	001a      	movs	r2, r3
 80025ca:	402a      	ands	r2, r5
 80025cc:	422b      	tst	r3, r5
 80025ce:	d1e5      	bne.n	800259c <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025d0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80025d2:	432b      	orrs	r3, r5
 80025d4:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80025d6:	0023      	movs	r3, r4
        __HAL_UNLOCK(hi2c);
 80025d8:	3440      	adds	r4, #64	@ 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 80025da:	3341      	adds	r3, #65	@ 0x41
 80025dc:	701d      	strb	r5, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025de:	705a      	strb	r2, [r3, #1]
        __HAL_UNLOCK(hi2c);
 80025e0:	7022      	strb	r2, [r4, #0]
      return HAL_ERROR;
 80025e2:	2001      	movs	r0, #1
}
 80025e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080025e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80025e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80025ea:	0005      	movs	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
 80025ec:	2400      	movs	r4, #0
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80025ee:	2704      	movs	r7, #4
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80025f0:	2620      	movs	r6, #32
{
 80025f2:	9100      	str	r1, [sp, #0]
 80025f4:	9201      	str	r2, [sp, #4]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80025f6:	682b      	ldr	r3, [r5, #0]
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	423b      	tst	r3, r7
 80025fc:	d101      	bne.n	8002602 <I2C_WaitOnRXNEFlagUntilTimeout+0x1a>
 80025fe:	2c00      	cmp	r4, #0
 8002600:	d001      	beq.n	8002606 <I2C_WaitOnRXNEFlagUntilTimeout+0x1e>
}
 8002602:	0020      	movs	r0, r4
 8002604:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002606:	9a01      	ldr	r2, [sp, #4]
 8002608:	0028      	movs	r0, r5
 800260a:	9900      	ldr	r1, [sp, #0]
 800260c:	f7ff fede 	bl	80023cc <I2C_IsErrorOccurred>
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8002610:	682b      	ldr	r3, [r5, #0]
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002612:	0004      	movs	r4, r0
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8002614:	699a      	ldr	r2, [r3, #24]
 8002616:	4232      	tst	r2, r6
 8002618:	d10f      	bne.n	800263a <I2C_WaitOnRXNEFlagUntilTimeout+0x52>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800261a:	1e63      	subs	r3, r4, #1
 800261c:	419c      	sbcs	r4, r3
 800261e:	b2e4      	uxtb	r4, r4
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8002620:	f7ff fd2e 	bl	8002080 <HAL_GetTick>
 8002624:	9b01      	ldr	r3, [sp, #4]
 8002626:	1ac0      	subs	r0, r0, r3
 8002628:	9b00      	ldr	r3, [sp, #0]
 800262a:	4298      	cmp	r0, r3
 800262c:	d801      	bhi.n	8002632 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1e1      	bne.n	80025f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
 8002632:	2c00      	cmp	r4, #0
 8002634:	d019      	beq.n	800266a <I2C_WaitOnRXNEFlagUntilTimeout+0x82>
{
 8002636:	2401      	movs	r4, #1
 8002638:	e7dd      	b.n	80025f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800263a:	2800      	cmp	r0, #0
 800263c:	d111      	bne.n	8002662 <I2C_WaitOnRXNEFlagUntilTimeout+0x7a>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800263e:	699a      	ldr	r2, [r3, #24]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002640:	2210      	movs	r2, #16
 8002642:	6999      	ldr	r1, [r3, #24]
 8002644:	4211      	tst	r1, r2
 8002646:	d00e      	beq.n	8002666 <I2C_WaitOnRXNEFlagUntilTimeout+0x7e>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002648:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800264a:	646f      	str	r7, [r5, #68]	@ 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800264c:	61de      	str	r6, [r3, #28]
        I2C_RESET_CR2(hi2c);
 800264e:	685a      	ldr	r2, [r3, #4]
 8002650:	490c      	ldr	r1, [pc, #48]	@ (8002684 <I2C_WaitOnRXNEFlagUntilTimeout+0x9c>)
 8002652:	400a      	ands	r2, r1
 8002654:	605a      	str	r2, [r3, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 8002656:	002b      	movs	r3, r5
 8002658:	3341      	adds	r3, #65	@ 0x41
 800265a:	701e      	strb	r6, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800265c:	7058      	strb	r0, [r3, #1]
        __HAL_UNLOCK(hi2c);
 800265e:	3b01      	subs	r3, #1
 8002660:	7018      	strb	r0, [r3, #0]
{
 8002662:	2401      	movs	r4, #1
 8002664:	e7dc      	b.n	8002620 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002666:	6468      	str	r0, [r5, #68]	@ 0x44
 8002668:	e7da      	b.n	8002620 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800266a:	682b      	ldr	r3, [r5, #0]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	423b      	tst	r3, r7
 8002670:	d1c1      	bne.n	80025f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002672:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8002674:	4333      	orrs	r3, r6
 8002676:	646b      	str	r3, [r5, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002678:	002b      	movs	r3, r5
 800267a:	3341      	adds	r3, #65	@ 0x41
 800267c:	701e      	strb	r6, [r3, #0]
        __HAL_UNLOCK(hi2c);
 800267e:	3b01      	subs	r3, #1
 8002680:	701c      	strb	r4, [r3, #0]
        status = HAL_ERROR;
 8002682:	e7d8      	b.n	8002636 <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
 8002684:	fe00e800 	.word	0xfe00e800

08002688 <HAL_I2C_Init>:
{
 8002688:	b570      	push	{r4, r5, r6, lr}
 800268a:	0004      	movs	r4, r0
    return HAL_ERROR;
 800268c:	2001      	movs	r0, #1
  if (hi2c == NULL)
 800268e:	2c00      	cmp	r4, #0
 8002690:	d04e      	beq.n	8002730 <HAL_I2C_Init+0xa8>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002692:	0025      	movs	r5, r4
 8002694:	3541      	adds	r5, #65	@ 0x41
 8002696:	782b      	ldrb	r3, [r5, #0]
 8002698:	b2da      	uxtb	r2, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d105      	bne.n	80026aa <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 800269e:	0023      	movs	r3, r4
 80026a0:	3340      	adds	r3, #64	@ 0x40
    HAL_I2C_MspInit(hi2c);
 80026a2:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 80026a4:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 80026a6:	f7ff fb53 	bl	8001d50 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80026aa:	2324      	movs	r3, #36	@ 0x24
  __HAL_I2C_DISABLE(hi2c);
 80026ac:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 80026ae:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 80026b0:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026b2:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 80026b4:	681a      	ldr	r2, [r3, #0]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80026b6:	68a6      	ldr	r6, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 80026b8:	438a      	bics	r2, r1
 80026ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80026bc:	491d      	ldr	r1, [pc, #116]	@ (8002734 <HAL_I2C_Init+0xac>)
 80026be:	6862      	ldr	r2, [r4, #4]
 80026c0:	400a      	ands	r2, r1
 80026c2:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80026c4:	689a      	ldr	r2, [r3, #8]
 80026c6:	491c      	ldr	r1, [pc, #112]	@ (8002738 <HAL_I2C_Init+0xb0>)
 80026c8:	400a      	ands	r2, r1
 80026ca:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026cc:	2801      	cmp	r0, #1
 80026ce:	d107      	bne.n	80026e0 <HAL_I2C_Init+0x58>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80026d0:	2280      	movs	r2, #128	@ 0x80
 80026d2:	0212      	lsls	r2, r2, #8
 80026d4:	4332      	orrs	r2, r6
 80026d6:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80026d8:	685a      	ldr	r2, [r3, #4]
 80026da:	4818      	ldr	r0, [pc, #96]	@ (800273c <HAL_I2C_Init+0xb4>)
 80026dc:	4002      	ands	r2, r0
 80026de:	e009      	b.n	80026f4 <HAL_I2C_Init+0x6c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80026e0:	2284      	movs	r2, #132	@ 0x84
 80026e2:	0212      	lsls	r2, r2, #8
 80026e4:	4332      	orrs	r2, r6
 80026e6:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80026e8:	2802      	cmp	r0, #2
 80026ea:	d1f5      	bne.n	80026d8 <HAL_I2C_Init+0x50>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80026ec:	2280      	movs	r2, #128	@ 0x80
 80026ee:	6858      	ldr	r0, [r3, #4]
 80026f0:	0112      	lsls	r2, r2, #4
 80026f2:	4302      	orrs	r2, r0
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80026f4:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80026f6:	6858      	ldr	r0, [r3, #4]
 80026f8:	4a11      	ldr	r2, [pc, #68]	@ (8002740 <HAL_I2C_Init+0xb8>)
 80026fa:	4302      	orrs	r2, r0
 80026fc:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80026fe:	68da      	ldr	r2, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002700:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002702:	400a      	ands	r2, r1
 8002704:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002706:	6961      	ldr	r1, [r4, #20]
 8002708:	6922      	ldr	r2, [r4, #16]
 800270a:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 800270c:	69a1      	ldr	r1, [r4, #24]
 800270e:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002710:	430a      	orrs	r2, r1
 8002712:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002714:	6a21      	ldr	r1, [r4, #32]
 8002716:	69e2      	ldr	r2, [r4, #28]
 8002718:	430a      	orrs	r2, r1
 800271a:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800271c:	2201      	movs	r2, #1
 800271e:	6819      	ldr	r1, [r3, #0]
 8002720:	430a      	orrs	r2, r1
 8002722:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8002724:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002726:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002728:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 800272a:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800272c:	3442      	adds	r4, #66	@ 0x42
 800272e:	7020      	strb	r0, [r4, #0]
}
 8002730:	bd70      	pop	{r4, r5, r6, pc}
 8002732:	46c0      	nop			@ (mov r8, r8)
 8002734:	f0ffffff 	.word	0xf0ffffff
 8002738:	ffff7fff 	.word	0xffff7fff
 800273c:	fffff7ff 	.word	0xfffff7ff
 8002740:	02008000 	.word	0x02008000

08002744 <HAL_I2C_Master_Transmit>:
{
 8002744:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002746:	0006      	movs	r6, r0
{
 8002748:	b085      	sub	sp, #20
 800274a:	9202      	str	r2, [sp, #8]
 800274c:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800274e:	3641      	adds	r6, #65	@ 0x41
 8002750:	7833      	ldrb	r3, [r6, #0]
{
 8002752:	0004      	movs	r4, r0
 8002754:	000f      	movs	r7, r1
    __HAL_LOCK(hi2c);
 8002756:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002758:	2b20      	cmp	r3, #32
 800275a:	d114      	bne.n	8002786 <HAL_I2C_Master_Transmit+0x42>
    __HAL_LOCK(hi2c);
 800275c:	0023      	movs	r3, r4
 800275e:	3340      	adds	r3, #64	@ 0x40
 8002760:	781a      	ldrb	r2, [r3, #0]
 8002762:	2a01      	cmp	r2, #1
 8002764:	d00f      	beq.n	8002786 <HAL_I2C_Master_Transmit+0x42>
 8002766:	2201      	movs	r2, #1
 8002768:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800276a:	f7ff fc89 	bl	8002080 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800276e:	2180      	movs	r1, #128	@ 0x80
    tickstart = HAL_GetTick();
 8002770:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002772:	9000      	str	r0, [sp, #0]
 8002774:	2319      	movs	r3, #25
 8002776:	2201      	movs	r2, #1
 8002778:	0020      	movs	r0, r4
 800277a:	0209      	lsls	r1, r1, #8
 800277c:	f7ff fed2 	bl	8002524 <I2C_WaitOnFlagUntilTimeout>
 8002780:	2800      	cmp	r0, #0
 8002782:	d002      	beq.n	800278a <HAL_I2C_Master_Transmit+0x46>
      return HAL_ERROR;
 8002784:	2001      	movs	r0, #1
}
 8002786:	b005      	add	sp, #20
 8002788:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800278a:	2321      	movs	r3, #33	@ 0x21
 800278c:	7033      	strb	r3, [r6, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800278e:	0023      	movs	r3, r4
 8002790:	2210      	movs	r2, #16
 8002792:	3342      	adds	r3, #66	@ 0x42
 8002794:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr  = pData;
 8002796:	9b02      	ldr	r3, [sp, #8]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002798:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 800279a:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 800279c:	9b03      	ldr	r3, [sp, #12]
    hi2c->XferISR   = NULL;
 800279e:	6360      	str	r0, [r4, #52]	@ 0x34
    hi2c->XferCount = Size;
 80027a0:	8563      	strh	r3, [r4, #42]	@ 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027a2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80027a4:	2bff      	cmp	r3, #255	@ 0xff
 80027a6:	d834      	bhi.n	8002812 <HAL_I2C_Master_Transmit+0xce>
      xfermode = I2C_AUTOEND_MODE;
 80027a8:	2380      	movs	r3, #128	@ 0x80
      hi2c->XferSize = hi2c->XferCount;
 80027aa:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      xfermode = I2C_AUTOEND_MODE;
 80027ac:	049b      	lsls	r3, r3, #18
      hi2c->XferSize = hi2c->XferCount;
 80027ae:	b292      	uxth	r2, r2
      xfermode = I2C_AUTOEND_MODE;
 80027b0:	4932      	ldr	r1, [pc, #200]	@ (800287c <HAL_I2C_Master_Transmit+0x138>)
 80027b2:	8522      	strh	r2, [r4, #40]	@ 0x28
    if (hi2c->XferSize > 0U)
 80027b4:	2a00      	cmp	r2, #0
 80027b6:	d00f      	beq.n	80027d8 <HAL_I2C_Master_Transmit+0x94>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80027b8:	9e02      	ldr	r6, [sp, #8]
 80027ba:	6820      	ldr	r0, [r4, #0]
 80027bc:	7836      	ldrb	r6, [r6, #0]
      hi2c->XferSize--;
 80027be:	3a01      	subs	r2, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80027c0:	6286      	str	r6, [r0, #40]	@ 0x28
      hi2c->pBuffPtr++;
 80027c2:	9802      	ldr	r0, [sp, #8]
      hi2c->XferSize--;
 80027c4:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 80027c6:	3001      	adds	r0, #1
 80027c8:	6260      	str	r0, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 80027ca:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80027cc:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 80027ce:	3801      	subs	r0, #1
 80027d0:	b280      	uxth	r0, r0
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80027d2:	3201      	adds	r2, #1
      hi2c->XferCount--;
 80027d4:	8560      	strh	r0, [r4, #42]	@ 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80027d6:	b2d2      	uxtb	r2, r2
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80027d8:	9100      	str	r1, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80027da:	0039      	movs	r1, r7
 80027dc:	0020      	movs	r0, r4
 80027de:	f7ff fddf 	bl	80023a0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80027e2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027e4:	002a      	movs	r2, r5
 80027e6:	0020      	movs	r0, r4
 80027e8:	990a      	ldr	r1, [sp, #40]	@ 0x28
    while (hi2c->XferCount > 0U)
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d115      	bne.n	800281a <HAL_I2C_Master_Transmit+0xd6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027ee:	f7ff fed0 	bl	8002592 <I2C_WaitOnSTOPFlagUntilTimeout>
 80027f2:	2800      	cmp	r0, #0
 80027f4:	d1c6      	bne.n	8002784 <HAL_I2C_Master_Transmit+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027f6:	2120      	movs	r1, #32
 80027f8:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 80027fa:	4d21      	ldr	r5, [pc, #132]	@ (8002880 <HAL_I2C_Master_Transmit+0x13c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027fc:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80027fe:	685a      	ldr	r2, [r3, #4]
 8002800:	402a      	ands	r2, r5
 8002802:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002804:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 8002806:	3440      	adds	r4, #64	@ 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8002808:	3341      	adds	r3, #65	@ 0x41
 800280a:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800280c:	7058      	strb	r0, [r3, #1]
    __HAL_UNLOCK(hi2c);
 800280e:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8002810:	e7b9      	b.n	8002786 <HAL_I2C_Master_Transmit+0x42>
      xfermode = I2C_RELOAD_MODE;
 8002812:	2380      	movs	r3, #128	@ 0x80
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002814:	22ff      	movs	r2, #255	@ 0xff
      xfermode = I2C_RELOAD_MODE;
 8002816:	045b      	lsls	r3, r3, #17
 8002818:	e7ca      	b.n	80027b0 <HAL_I2C_Master_Transmit+0x6c>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800281a:	f7ff fe55 	bl	80024c8 <I2C_WaitOnTXISFlagUntilTimeout>
 800281e:	2800      	cmp	r0, #0
 8002820:	d1b0      	bne.n	8002784 <HAL_I2C_Master_Transmit+0x40>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002822:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002824:	6822      	ldr	r2, [r4, #0]
 8002826:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8002828:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800282a:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 800282c:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800282e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8002830:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8002832:	3b01      	subs	r3, #1
 8002834:	b29b      	uxth	r3, r3
 8002836:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8002838:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800283a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800283c:	b292      	uxth	r2, r2
 800283e:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002840:	2b00      	cmp	r3, #0
 8002842:	d0ce      	beq.n	80027e2 <HAL_I2C_Master_Transmit+0x9e>
 8002844:	2a00      	cmp	r2, #0
 8002846:	d1cc      	bne.n	80027e2 <HAL_I2C_Master_Transmit+0x9e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002848:	2180      	movs	r1, #128	@ 0x80
 800284a:	0020      	movs	r0, r4
 800284c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800284e:	9500      	str	r5, [sp, #0]
 8002850:	f7ff fe68 	bl	8002524 <I2C_WaitOnFlagUntilTimeout>
 8002854:	2800      	cmp	r0, #0
 8002856:	d000      	beq.n	800285a <HAL_I2C_Master_Transmit+0x116>
 8002858:	e794      	b.n	8002784 <HAL_I2C_Master_Transmit+0x40>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800285a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800285c:	2bff      	cmp	r3, #255	@ 0xff
 800285e:	d905      	bls.n	800286c <HAL_I2C_Master_Transmit+0x128>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002860:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002862:	2380      	movs	r3, #128	@ 0x80
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002864:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002866:	045b      	lsls	r3, r3, #17
 8002868:	9000      	str	r0, [sp, #0]
 800286a:	e7b6      	b.n	80027da <HAL_I2C_Master_Transmit+0x96>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800286c:	2380      	movs	r3, #128	@ 0x80
          hi2c->XferSize = hi2c->XferCount;
 800286e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002870:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 8002872:	b292      	uxth	r2, r2
 8002874:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	9000      	str	r0, [sp, #0]
 800287a:	e7ae      	b.n	80027da <HAL_I2C_Master_Transmit+0x96>
 800287c:	80002000 	.word	0x80002000
 8002880:	fe00e800 	.word	0xfe00e800

08002884 <HAL_I2C_Master_Receive>:
{
 8002884:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002886:	0006      	movs	r6, r0
{
 8002888:	b085      	sub	sp, #20
 800288a:	9202      	str	r2, [sp, #8]
 800288c:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800288e:	3641      	adds	r6, #65	@ 0x41
 8002890:	7833      	ldrb	r3, [r6, #0]
{
 8002892:	0004      	movs	r4, r0
 8002894:	000f      	movs	r7, r1
    __HAL_LOCK(hi2c);
 8002896:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002898:	2b20      	cmp	r3, #32
 800289a:	d114      	bne.n	80028c6 <HAL_I2C_Master_Receive+0x42>
    __HAL_LOCK(hi2c);
 800289c:	0023      	movs	r3, r4
 800289e:	3340      	adds	r3, #64	@ 0x40
 80028a0:	781a      	ldrb	r2, [r3, #0]
 80028a2:	2a01      	cmp	r2, #1
 80028a4:	d00f      	beq.n	80028c6 <HAL_I2C_Master_Receive+0x42>
 80028a6:	2201      	movs	r2, #1
 80028a8:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80028aa:	f7ff fbe9 	bl	8002080 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80028ae:	2180      	movs	r1, #128	@ 0x80
    tickstart = HAL_GetTick();
 80028b0:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80028b2:	9000      	str	r0, [sp, #0]
 80028b4:	2319      	movs	r3, #25
 80028b6:	2201      	movs	r2, #1
 80028b8:	0020      	movs	r0, r4
 80028ba:	0209      	lsls	r1, r1, #8
 80028bc:	f7ff fe32 	bl	8002524 <I2C_WaitOnFlagUntilTimeout>
 80028c0:	2800      	cmp	r0, #0
 80028c2:	d002      	beq.n	80028ca <HAL_I2C_Master_Receive+0x46>
      return HAL_ERROR;
 80028c4:	2001      	movs	r0, #1
}
 80028c6:	b005      	add	sp, #20
 80028c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80028ca:	2322      	movs	r3, #34	@ 0x22
 80028cc:	7033      	strb	r3, [r6, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80028ce:	0026      	movs	r6, r4
 80028d0:	3b12      	subs	r3, #18
 80028d2:	3642      	adds	r6, #66	@ 0x42
 80028d4:	7033      	strb	r3, [r6, #0]
    hi2c->pBuffPtr  = pData;
 80028d6:	9b02      	ldr	r3, [sp, #8]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028d8:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 80028da:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 80028dc:	9b03      	ldr	r3, [sp, #12]
    hi2c->XferISR   = NULL;
 80028de:	6360      	str	r0, [r4, #52]	@ 0x34
    hi2c->XferCount = Size;
 80028e0:	8563      	strh	r3, [r4, #42]	@ 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028e2:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80028e4:	4b2c      	ldr	r3, [pc, #176]	@ (8002998 <HAL_I2C_Master_Receive+0x114>)
 80028e6:	2aff      	cmp	r2, #255	@ 0xff
 80028e8:	d920      	bls.n	800292c <HAL_I2C_Master_Receive+0xa8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80028ea:	22ff      	movs	r2, #255	@ 0xff
 80028ec:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80028ee:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80028f0:	2380      	movs	r3, #128	@ 0x80
 80028f2:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028f4:	0039      	movs	r1, r7
 80028f6:	0020      	movs	r0, r4
 80028f8:	f7ff fd52 	bl	80023a0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80028fc:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028fe:	002a      	movs	r2, r5
 8002900:	0020      	movs	r0, r4
 8002902:	990a      	ldr	r1, [sp, #40]	@ 0x28
    while (hi2c->XferCount > 0U)
 8002904:	2b00      	cmp	r3, #0
 8002906:	d119      	bne.n	800293c <HAL_I2C_Master_Receive+0xb8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002908:	f7ff fe43 	bl	8002592 <I2C_WaitOnSTOPFlagUntilTimeout>
 800290c:	2800      	cmp	r0, #0
 800290e:	d1d9      	bne.n	80028c4 <HAL_I2C_Master_Receive+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002910:	2120      	movs	r1, #32
 8002912:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8002914:	4d21      	ldr	r5, [pc, #132]	@ (800299c <HAL_I2C_Master_Receive+0x118>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002916:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002918:	685a      	ldr	r2, [r3, #4]
 800291a:	402a      	ands	r2, r5
 800291c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800291e:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 8002920:	3440      	adds	r4, #64	@ 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8002922:	3341      	adds	r3, #65	@ 0x41
 8002924:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002926:	7030      	strb	r0, [r6, #0]
    __HAL_UNLOCK(hi2c);
 8002928:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 800292a:	e7cc      	b.n	80028c6 <HAL_I2C_Master_Receive+0x42>
      hi2c->XferSize = hi2c->XferCount;
 800292c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800292e:	b292      	uxth	r2, r2
 8002930:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002936:	2380      	movs	r3, #128	@ 0x80
 8002938:	049b      	lsls	r3, r3, #18
 800293a:	e7db      	b.n	80028f4 <HAL_I2C_Master_Receive+0x70>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800293c:	f7ff fe54 	bl	80025e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002940:	2800      	cmp	r0, #0
 8002942:	d1bf      	bne.n	80028c4 <HAL_I2C_Master_Receive+0x40>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002944:	6823      	ldr	r3, [r4, #0]
 8002946:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002948:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800294a:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800294c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 800294e:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8002950:	3301      	adds	r3, #1
 8002952:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8002954:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8002956:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8002958:	3b01      	subs	r3, #1
 800295a:	b29b      	uxth	r3, r3
 800295c:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800295e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8002960:	b292      	uxth	r2, r2
 8002962:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002964:	2b00      	cmp	r3, #0
 8002966:	d0c9      	beq.n	80028fc <HAL_I2C_Master_Receive+0x78>
 8002968:	2a00      	cmp	r2, #0
 800296a:	d1c7      	bne.n	80028fc <HAL_I2C_Master_Receive+0x78>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800296c:	2180      	movs	r1, #128	@ 0x80
 800296e:	0020      	movs	r0, r4
 8002970:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002972:	9500      	str	r5, [sp, #0]
 8002974:	f7ff fdd6 	bl	8002524 <I2C_WaitOnFlagUntilTimeout>
 8002978:	2800      	cmp	r0, #0
 800297a:	d1a3      	bne.n	80028c4 <HAL_I2C_Master_Receive+0x40>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800297c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800297e:	2bff      	cmp	r3, #255	@ 0xff
 8002980:	d903      	bls.n	800298a <HAL_I2C_Master_Receive+0x106>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002982:	22ff      	movs	r2, #255	@ 0xff
 8002984:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002986:	9000      	str	r0, [sp, #0]
 8002988:	e7b2      	b.n	80028f0 <HAL_I2C_Master_Receive+0x6c>
          hi2c->XferSize = hi2c->XferCount;
 800298a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800298c:	b292      	uxth	r2, r2
 800298e:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002990:	b2d2      	uxtb	r2, r2
 8002992:	9000      	str	r0, [sp, #0]
 8002994:	e7cf      	b.n	8002936 <HAL_I2C_Master_Receive+0xb2>
 8002996:	46c0      	nop			@ (mov r8, r8)
 8002998:	80002400 	.word	0x80002400
 800299c:	fe00e800 	.word	0xfe00e800

080029a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80029a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029a2:	0004      	movs	r4, r0
 80029a4:	3441      	adds	r4, #65	@ 0x41
 80029a6:	7822      	ldrb	r2, [r4, #0]
{
 80029a8:	0003      	movs	r3, r0
 80029aa:	000f      	movs	r7, r1
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029ac:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80029ae:	b2d6      	uxtb	r6, r2
 80029b0:	2a20      	cmp	r2, #32
 80029b2:	d118      	bne.n	80029e6 <HAL_I2CEx_ConfigAnalogFilter+0x46>
    __HAL_LOCK(hi2c);
 80029b4:	001d      	movs	r5, r3
 80029b6:	3540      	adds	r5, #64	@ 0x40
 80029b8:	782a      	ldrb	r2, [r5, #0]
 80029ba:	2a01      	cmp	r2, #1
 80029bc:	d013      	beq.n	80029e6 <HAL_I2CEx_ConfigAnalogFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029be:	2224      	movs	r2, #36	@ 0x24
 80029c0:	7022      	strb	r2, [r4, #0]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	3a23      	subs	r2, #35	@ 0x23
 80029c6:	6819      	ldr	r1, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80029c8:	4807      	ldr	r0, [pc, #28]	@ (80029e8 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 80029ca:	4391      	bics	r1, r2
 80029cc:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80029ce:	6819      	ldr	r1, [r3, #0]
 80029d0:	4001      	ands	r1, r0
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029d2:	2000      	movs	r0, #0
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80029d4:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 80029d6:	6819      	ldr	r1, [r3, #0]
 80029d8:	4339      	orrs	r1, r7
 80029da:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 80029dc:	6819      	ldr	r1, [r3, #0]
 80029de:	430a      	orrs	r2, r1
 80029e0:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80029e2:	7026      	strb	r6, [r4, #0]
    __HAL_UNLOCK(hi2c);
 80029e4:	7028      	strb	r0, [r5, #0]
  }
  else
  {
    return HAL_BUSY;
  }
}
 80029e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029e8:	ffffefff 	.word	0xffffefff

080029ec <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029ec:	0002      	movs	r2, r0
{
 80029ee:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80029f0:	3241      	adds	r2, #65	@ 0x41
 80029f2:	7814      	ldrb	r4, [r2, #0]
{
 80029f4:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80029f6:	b2e5      	uxtb	r5, r4
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029f8:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80029fa:	2c20      	cmp	r4, #32
 80029fc:	d117      	bne.n	8002a2e <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 80029fe:	001c      	movs	r4, r3
 8002a00:	3440      	adds	r4, #64	@ 0x40
 8002a02:	7826      	ldrb	r6, [r4, #0]
 8002a04:	2e01      	cmp	r6, #1
 8002a06:	d012      	beq.n	8002a2e <HAL_I2CEx_ConfigDigitalFilter+0x42>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a08:	3022      	adds	r0, #34	@ 0x22
 8002a0a:	7010      	strb	r0, [r2, #0]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	3823      	subs	r0, #35	@ 0x23
 8002a10:	681e      	ldr	r6, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a12:	4f07      	ldr	r7, [pc, #28]	@ (8002a30 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    __HAL_I2C_DISABLE(hi2c);
 8002a14:	4386      	bics	r6, r0
 8002a16:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8002a18:	681e      	ldr	r6, [r3, #0]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a1a:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8002a1c:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8002a1e:	4331      	orrs	r1, r6

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a20:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a22:	6819      	ldr	r1, [r3, #0]
 8002a24:	4308      	orrs	r0, r1
 8002a26:	6018      	str	r0, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a28:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002a2a:	7015      	strb	r5, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8002a2c:	7020      	strb	r0, [r4, #0]
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a30:	fffff0ff 	.word	0xfffff0ff

08002a34 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a34:	b510      	push	{r4, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002a36:	4c11      	ldr	r4, [pc, #68]	@ (8002a7c <HAL_PWREx_ControlVoltageScaling+0x48>)
 8002a38:	4911      	ldr	r1, [pc, #68]	@ (8002a80 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 8002a3a:	6823      	ldr	r3, [r4, #0]
{
 8002a3c:	0002      	movs	r2, r0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002a3e:	400b      	ands	r3, r1
 8002a40:	4303      	orrs	r3, r0
 8002a42:	6023      	str	r3, [r4, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a44:	2380      	movs	r3, #128	@ 0x80
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8002a46:	2000      	movs	r0, #0
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d10e      	bne.n	8002a6c <HAL_PWREx_ControlVoltageScaling+0x38>
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8002a84 <HAL_PWREx_ControlVoltageScaling+0x50>)
 8002a50:	490d      	ldr	r1, [pc, #52]	@ (8002a88 <HAL_PWREx_ControlVoltageScaling+0x54>)
 8002a52:	6818      	ldr	r0, [r3, #0]
 8002a54:	2306      	movs	r3, #6
 8002a56:	4358      	muls	r0, r3
 8002a58:	f7fd fb68 	bl	800012c <__udivsi3>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a5c:	2280      	movs	r2, #128	@ 0x80
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002a5e:	1c43      	adds	r3, r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a60:	00d2      	lsls	r2, r2, #3
 8002a62:	6961      	ldr	r1, [r4, #20]
 8002a64:	0008      	movs	r0, r1
 8002a66:	4010      	ands	r0, r2
 8002a68:	4211      	tst	r1, r2
 8002a6a:	d100      	bne.n	8002a6e <HAL_PWREx_ControlVoltageScaling+0x3a>
}
 8002a6c:	bd10      	pop	{r4, pc}
      if (wait_loop_index != 0U)
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <HAL_PWREx_ControlVoltageScaling+0x42>
        wait_loop_index--;
 8002a72:	3b01      	subs	r3, #1
 8002a74:	e7f5      	b.n	8002a62 <HAL_PWREx_ControlVoltageScaling+0x2e>
        return HAL_TIMEOUT;
 8002a76:	2003      	movs	r0, #3
 8002a78:	e7f8      	b.n	8002a6c <HAL_PWREx_ControlVoltageScaling+0x38>
 8002a7a:	46c0      	nop			@ (mov r8, r8)
 8002a7c:	40007000 	.word	0x40007000
 8002a80:	fffff9ff 	.word	0xfffff9ff
 8002a84:	20000000 	.word	0x20000000
 8002a88:	000f4240 	.word	0x000f4240

08002a8c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a8e:	0004      	movs	r4, r0
 8002a90:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a92:	2800      	cmp	r0, #0
 8002a94:	d102      	bne.n	8002a9c <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8002a96:	2001      	movs	r0, #1
        }
      }
    }
  }
  return HAL_OK;
}
 8002a98:	b005      	add	sp, #20
 8002a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a9c:	6803      	ldr	r3, [r0, #0]
 8002a9e:	07db      	lsls	r3, r3, #31
 8002aa0:	d410      	bmi.n	8002ac4 <HAL_RCC_OscConfig+0x38>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aa2:	6823      	ldr	r3, [r4, #0]
 8002aa4:	079b      	lsls	r3, r3, #30
 8002aa6:	d45c      	bmi.n	8002b62 <HAL_RCC_OscConfig+0xd6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002aa8:	6823      	ldr	r3, [r4, #0]
 8002aaa:	071b      	lsls	r3, r3, #28
 8002aac:	d500      	bpl.n	8002ab0 <HAL_RCC_OscConfig+0x24>
 8002aae:	e0c1      	b.n	8002c34 <HAL_RCC_OscConfig+0x1a8>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ab0:	6823      	ldr	r3, [r4, #0]
 8002ab2:	075b      	lsls	r3, r3, #29
 8002ab4:	d500      	bpl.n	8002ab8 <HAL_RCC_OscConfig+0x2c>
 8002ab6:	e0f2      	b.n	8002c9e <HAL_RCC_OscConfig+0x212>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ab8:	69e3      	ldr	r3, [r4, #28]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d000      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x34>
 8002abe:	e179      	b.n	8002db4 <HAL_RCC_OscConfig+0x328>
  return HAL_OK;
 8002ac0:	2000      	movs	r0, #0
 8002ac2:	e7e9      	b.n	8002a98 <HAL_RCC_OscConfig+0xc>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ac4:	2238      	movs	r2, #56	@ 0x38
 8002ac6:	4daf      	ldr	r5, [pc, #700]	@ (8002d84 <HAL_RCC_OscConfig+0x2f8>)
 8002ac8:	68ab      	ldr	r3, [r5, #8]
 8002aca:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002acc:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002ace:	2b10      	cmp	r3, #16
 8002ad0:	d109      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x5a>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ad2:	43d3      	mvns	r3, r2
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002ad4:	079b      	lsls	r3, r3, #30
 8002ad6:	d108      	bne.n	8002aea <HAL_RCC_OscConfig+0x5e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ad8:	682b      	ldr	r3, [r5, #0]
 8002ada:	039b      	lsls	r3, r3, #14
 8002adc:	d5e1      	bpl.n	8002aa2 <HAL_RCC_OscConfig+0x16>
 8002ade:	6863      	ldr	r3, [r4, #4]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d1de      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x16>
 8002ae4:	e7d7      	b.n	8002a96 <HAL_RCC_OscConfig+0xa>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002ae6:	2b08      	cmp	r3, #8
 8002ae8:	d0f6      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x4c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aea:	2280      	movs	r2, #128	@ 0x80
 8002aec:	6863      	ldr	r3, [r4, #4]
 8002aee:	0252      	lsls	r2, r2, #9
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d111      	bne.n	8002b18 <HAL_RCC_OscConfig+0x8c>
 8002af4:	682a      	ldr	r2, [r5, #0]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002afa:	f7ff fac1 	bl	8002080 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002afe:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8002b00:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b02:	02bf      	lsls	r7, r7, #10
 8002b04:	682b      	ldr	r3, [r5, #0]
 8002b06:	423b      	tst	r3, r7
 8002b08:	d1cb      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b0a:	f7ff fab9 	bl	8002080 <HAL_GetTick>
 8002b0e:	1b80      	subs	r0, r0, r6
 8002b10:	2864      	cmp	r0, #100	@ 0x64
 8002b12:	d9f7      	bls.n	8002b04 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 8002b14:	2003      	movs	r0, #3
 8002b16:	e7bf      	b.n	8002a98 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b18:	21a0      	movs	r1, #160	@ 0xa0
 8002b1a:	02c9      	lsls	r1, r1, #11
 8002b1c:	428b      	cmp	r3, r1
 8002b1e:	d108      	bne.n	8002b32 <HAL_RCC_OscConfig+0xa6>
 8002b20:	2380      	movs	r3, #128	@ 0x80
 8002b22:	6829      	ldr	r1, [r5, #0]
 8002b24:	02db      	lsls	r3, r3, #11
 8002b26:	430b      	orrs	r3, r1
 8002b28:	602b      	str	r3, [r5, #0]
 8002b2a:	682b      	ldr	r3, [r5, #0]
 8002b2c:	431a      	orrs	r2, r3
 8002b2e:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b30:	e7e3      	b.n	8002afa <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b32:	682a      	ldr	r2, [r5, #0]
 8002b34:	4994      	ldr	r1, [pc, #592]	@ (8002d88 <HAL_RCC_OscConfig+0x2fc>)
 8002b36:	400a      	ands	r2, r1
 8002b38:	602a      	str	r2, [r5, #0]
 8002b3a:	682a      	ldr	r2, [r5, #0]
 8002b3c:	4993      	ldr	r1, [pc, #588]	@ (8002d8c <HAL_RCC_OscConfig+0x300>)
 8002b3e:	400a      	ands	r2, r1
 8002b40:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1d9      	bne.n	8002afa <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 8002b46:	f7ff fa9b 	bl	8002080 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b4a:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8002b4c:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b4e:	02bf      	lsls	r7, r7, #10
 8002b50:	682b      	ldr	r3, [r5, #0]
 8002b52:	423b      	tst	r3, r7
 8002b54:	d0a5      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b56:	f7ff fa93 	bl	8002080 <HAL_GetTick>
 8002b5a:	1b80      	subs	r0, r0, r6
 8002b5c:	2864      	cmp	r0, #100	@ 0x64
 8002b5e:	d9f7      	bls.n	8002b50 <HAL_RCC_OscConfig+0xc4>
 8002b60:	e7d8      	b.n	8002b14 <HAL_RCC_OscConfig+0x88>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b62:	2238      	movs	r2, #56	@ 0x38
 8002b64:	4d87      	ldr	r5, [pc, #540]	@ (8002d84 <HAL_RCC_OscConfig+0x2f8>)
 8002b66:	68ab      	ldr	r3, [r5, #8]
 8002b68:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b6a:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002b6c:	2b10      	cmp	r3, #16
 8002b6e:	d128      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x136>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b70:	2103      	movs	r1, #3
 8002b72:	400a      	ands	r2, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002b74:	2a02      	cmp	r2, #2
 8002b76:	d126      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x13a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b78:	682a      	ldr	r2, [r5, #0]
 8002b7a:	0552      	lsls	r2, r2, #21
 8002b7c:	d503      	bpl.n	8002b86 <HAL_RCC_OscConfig+0xfa>
 8002b7e:	68e2      	ldr	r2, [r4, #12]
 8002b80:	2a00      	cmp	r2, #0
 8002b82:	d100      	bne.n	8002b86 <HAL_RCC_OscConfig+0xfa>
 8002b84:	e787      	b.n	8002a96 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b86:	6869      	ldr	r1, [r5, #4]
 8002b88:	6962      	ldr	r2, [r4, #20]
 8002b8a:	4881      	ldr	r0, [pc, #516]	@ (8002d90 <HAL_RCC_OscConfig+0x304>)
 8002b8c:	0212      	lsls	r2, r2, #8
 8002b8e:	4001      	ands	r1, r0
 8002b90:	430a      	orrs	r2, r1
 8002b92:	606a      	str	r2, [r5, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d10c      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x126>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002b98:	682b      	ldr	r3, [r5, #0]
 8002b9a:	4a7e      	ldr	r2, [pc, #504]	@ (8002d94 <HAL_RCC_OscConfig+0x308>)
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002b9c:	497e      	ldr	r1, [pc, #504]	@ (8002d98 <HAL_RCC_OscConfig+0x30c>)
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	6922      	ldr	r2, [r4, #16]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	602b      	str	r3, [r5, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002ba6:	682b      	ldr	r3, [r5, #0]
 8002ba8:	4a7c      	ldr	r2, [pc, #496]	@ (8002d9c <HAL_RCC_OscConfig+0x310>)
 8002baa:	049b      	lsls	r3, r3, #18
 8002bac:	0f5b      	lsrs	r3, r3, #29
 8002bae:	40da      	lsrs	r2, r3
 8002bb0:	600a      	str	r2, [r1, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002bb2:	4b7b      	ldr	r3, [pc, #492]	@ (8002da0 <HAL_RCC_OscConfig+0x314>)
 8002bb4:	6818      	ldr	r0, [r3, #0]
 8002bb6:	f7ff fa1b 	bl	8001ff0 <HAL_InitTick>
 8002bba:	2800      	cmp	r0, #0
 8002bbc:	d100      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x134>
 8002bbe:	e773      	b.n	8002aa8 <HAL_RCC_OscConfig+0x1c>
 8002bc0:	e769      	b.n	8002a96 <HAL_RCC_OscConfig+0xa>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d0d8      	beq.n	8002b78 <HAL_RCC_OscConfig+0xec>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bc6:	68e3      	ldr	r3, [r4, #12]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d020      	beq.n	8002c0e <HAL_RCC_OscConfig+0x182>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002bcc:	682b      	ldr	r3, [r5, #0]
 8002bce:	4a71      	ldr	r2, [pc, #452]	@ (8002d94 <HAL_RCC_OscConfig+0x308>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bd0:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bd6:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 8002bdc:	2380      	movs	r3, #128	@ 0x80
 8002bde:	682a      	ldr	r2, [r5, #0]
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	4313      	orrs	r3, r2
 8002be4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002be6:	f7ff fa4b 	bl	8002080 <HAL_GetTick>
 8002bea:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bec:	682b      	ldr	r3, [r5, #0]
 8002bee:	423b      	tst	r3, r7
 8002bf0:	d007      	beq.n	8002c02 <HAL_RCC_OscConfig+0x176>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bf2:	686a      	ldr	r2, [r5, #4]
 8002bf4:	6963      	ldr	r3, [r4, #20]
 8002bf6:	4966      	ldr	r1, [pc, #408]	@ (8002d90 <HAL_RCC_OscConfig+0x304>)
 8002bf8:	021b      	lsls	r3, r3, #8
 8002bfa:	400a      	ands	r2, r1
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	606b      	str	r3, [r5, #4]
 8002c00:	e752      	b.n	8002aa8 <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c02:	f7ff fa3d 	bl	8002080 <HAL_GetTick>
 8002c06:	1b80      	subs	r0, r0, r6
 8002c08:	2802      	cmp	r0, #2
 8002c0a:	d9ef      	bls.n	8002bec <HAL_RCC_OscConfig+0x160>
 8002c0c:	e782      	b.n	8002b14 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 8002c0e:	682b      	ldr	r3, [r5, #0]
 8002c10:	4a64      	ldr	r2, [pc, #400]	@ (8002da4 <HAL_RCC_OscConfig+0x318>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c12:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_DISABLE();
 8002c14:	4013      	ands	r3, r2
 8002c16:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002c18:	f7ff fa32 	bl	8002080 <HAL_GetTick>
 8002c1c:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c1e:	00ff      	lsls	r7, r7, #3
 8002c20:	682b      	ldr	r3, [r5, #0]
 8002c22:	423b      	tst	r3, r7
 8002c24:	d100      	bne.n	8002c28 <HAL_RCC_OscConfig+0x19c>
 8002c26:	e73f      	b.n	8002aa8 <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c28:	f7ff fa2a 	bl	8002080 <HAL_GetTick>
 8002c2c:	1b80      	subs	r0, r0, r6
 8002c2e:	2802      	cmp	r0, #2
 8002c30:	d9f6      	bls.n	8002c20 <HAL_RCC_OscConfig+0x194>
 8002c32:	e76f      	b.n	8002b14 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002c34:	2238      	movs	r2, #56	@ 0x38
 8002c36:	4d53      	ldr	r5, [pc, #332]	@ (8002d84 <HAL_RCC_OscConfig+0x2f8>)
 8002c38:	68ab      	ldr	r3, [r5, #8]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	2b18      	cmp	r3, #24
 8002c3e:	d108      	bne.n	8002c52 <HAL_RCC_OscConfig+0x1c6>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002c40:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8002c42:	079b      	lsls	r3, r3, #30
 8002c44:	d400      	bmi.n	8002c48 <HAL_RCC_OscConfig+0x1bc>
 8002c46:	e733      	b.n	8002ab0 <HAL_RCC_OscConfig+0x24>
 8002c48:	69a3      	ldr	r3, [r4, #24]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d000      	beq.n	8002c50 <HAL_RCC_OscConfig+0x1c4>
 8002c4e:	e72f      	b.n	8002ab0 <HAL_RCC_OscConfig+0x24>
 8002c50:	e721      	b.n	8002a96 <HAL_RCC_OscConfig+0xa>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c52:	69a2      	ldr	r2, [r4, #24]
 8002c54:	2301      	movs	r3, #1
 8002c56:	2a00      	cmp	r2, #0
 8002c58:	d010      	beq.n	8002c7c <HAL_RCC_OscConfig+0x1f0>
        __HAL_RCC_LSI_ENABLE();
 8002c5a:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c5c:	2702      	movs	r7, #2
        __HAL_RCC_LSI_ENABLE();
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	662b      	str	r3, [r5, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002c62:	f7ff fa0d 	bl	8002080 <HAL_GetTick>
 8002c66:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c68:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8002c6a:	423b      	tst	r3, r7
 8002c6c:	d000      	beq.n	8002c70 <HAL_RCC_OscConfig+0x1e4>
 8002c6e:	e71f      	b.n	8002ab0 <HAL_RCC_OscConfig+0x24>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c70:	f7ff fa06 	bl	8002080 <HAL_GetTick>
 8002c74:	1b80      	subs	r0, r0, r6
 8002c76:	2802      	cmp	r0, #2
 8002c78:	d9f6      	bls.n	8002c68 <HAL_RCC_OscConfig+0x1dc>
 8002c7a:	e74b      	b.n	8002b14 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_LSI_DISABLE();
 8002c7c:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c7e:	2702      	movs	r7, #2
        __HAL_RCC_LSI_DISABLE();
 8002c80:	439a      	bics	r2, r3
 8002c82:	662a      	str	r2, [r5, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002c84:	f7ff f9fc 	bl	8002080 <HAL_GetTick>
 8002c88:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c8a:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8002c8c:	423b      	tst	r3, r7
 8002c8e:	d100      	bne.n	8002c92 <HAL_RCC_OscConfig+0x206>
 8002c90:	e70e      	b.n	8002ab0 <HAL_RCC_OscConfig+0x24>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c92:	f7ff f9f5 	bl	8002080 <HAL_GetTick>
 8002c96:	1b80      	subs	r0, r0, r6
 8002c98:	2802      	cmp	r0, #2
 8002c9a:	d9f6      	bls.n	8002c8a <HAL_RCC_OscConfig+0x1fe>
 8002c9c:	e73a      	b.n	8002b14 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002c9e:	2238      	movs	r2, #56	@ 0x38
 8002ca0:	4d38      	ldr	r5, [pc, #224]	@ (8002d84 <HAL_RCC_OscConfig+0x2f8>)
 8002ca2:	68ab      	ldr	r3, [r5, #8]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	2b20      	cmp	r3, #32
 8002ca8:	d108      	bne.n	8002cbc <HAL_RCC_OscConfig+0x230>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002caa:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 8002cac:	079b      	lsls	r3, r3, #30
 8002cae:	d400      	bmi.n	8002cb2 <HAL_RCC_OscConfig+0x226>
 8002cb0:	e702      	b.n	8002ab8 <HAL_RCC_OscConfig+0x2c>
 8002cb2:	68a3      	ldr	r3, [r4, #8]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d000      	beq.n	8002cba <HAL_RCC_OscConfig+0x22e>
 8002cb8:	e6fe      	b.n	8002ab8 <HAL_RCC_OscConfig+0x2c>
 8002cba:	e6ec      	b.n	8002a96 <HAL_RCC_OscConfig+0xa>
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002cbc:	2280      	movs	r2, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 8002cbe:	2100      	movs	r1, #0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002cc0:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8002cc2:	0552      	lsls	r2, r2, #21
    FlagStatus       pwrclkchanged = RESET;
 8002cc4:	9100      	str	r1, [sp, #0]
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002cc6:	4213      	tst	r3, r2
 8002cc8:	d108      	bne.n	8002cdc <HAL_RCC_OscConfig+0x250>
        __HAL_RCC_PWR_CLK_ENABLE();
 8002cca:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	63eb      	str	r3, [r5, #60]	@ 0x3c
 8002cd0:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	9303      	str	r3, [sp, #12]
 8002cd6:	9b03      	ldr	r3, [sp, #12]
        pwrclkchanged = SET;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	9300      	str	r3, [sp, #0]
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cdc:	2780      	movs	r7, #128	@ 0x80
 8002cde:	4e32      	ldr	r6, [pc, #200]	@ (8002da8 <HAL_RCC_OscConfig+0x31c>)
 8002ce0:	007f      	lsls	r7, r7, #1
 8002ce2:	6833      	ldr	r3, [r6, #0]
 8002ce4:	423b      	tst	r3, r7
 8002ce6:	d015      	beq.n	8002d14 <HAL_RCC_OscConfig+0x288>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ce8:	68a3      	ldr	r3, [r4, #8]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d122      	bne.n	8002d34 <HAL_RCC_OscConfig+0x2a8>
 8002cee:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	65eb      	str	r3, [r5, #92]	@ 0x5c
        tickstart = HAL_GetTick();
 8002cf4:	f7ff f9c4 	bl	8002080 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cf8:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8002cfa:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cfc:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 8002cfe:	423b      	tst	r3, r7
 8002d00:	d038      	beq.n	8002d74 <HAL_RCC_OscConfig+0x2e8>
      if (pwrclkchanged == SET)
 8002d02:	9b00      	ldr	r3, [sp, #0]
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d000      	beq.n	8002d0a <HAL_RCC_OscConfig+0x27e>
 8002d08:	e6d6      	b.n	8002ab8 <HAL_RCC_OscConfig+0x2c>
        __HAL_RCC_PWR_CLK_DISABLE();
 8002d0a:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8002d0c:	4a27      	ldr	r2, [pc, #156]	@ (8002dac <HAL_RCC_OscConfig+0x320>)
 8002d0e:	4013      	ands	r3, r2
 8002d10:	63eb      	str	r3, [r5, #60]	@ 0x3c
 8002d12:	e6d1      	b.n	8002ab8 <HAL_RCC_OscConfig+0x2c>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d14:	6833      	ldr	r3, [r6, #0]
 8002d16:	433b      	orrs	r3, r7
 8002d18:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002d1a:	f7ff f9b1 	bl	8002080 <HAL_GetTick>
 8002d1e:	9001      	str	r0, [sp, #4]
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d20:	6833      	ldr	r3, [r6, #0]
 8002d22:	423b      	tst	r3, r7
 8002d24:	d1e0      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x25c>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d26:	f7ff f9ab 	bl	8002080 <HAL_GetTick>
 8002d2a:	9b01      	ldr	r3, [sp, #4]
 8002d2c:	1ac0      	subs	r0, r0, r3
 8002d2e:	2802      	cmp	r0, #2
 8002d30:	d9f6      	bls.n	8002d20 <HAL_RCC_OscConfig+0x294>
 8002d32:	e6ef      	b.n	8002b14 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d34:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 8002d36:	2b05      	cmp	r3, #5
 8002d38:	d105      	bne.n	8002d46 <HAL_RCC_OscConfig+0x2ba>
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	65eb      	str	r3, [r5, #92]	@ 0x5c
 8002d40:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 8002d42:	2301      	movs	r3, #1
 8002d44:	e7d4      	b.n	8002cf0 <HAL_RCC_OscConfig+0x264>
 8002d46:	2101      	movs	r1, #1
 8002d48:	438a      	bics	r2, r1
 8002d4a:	65ea      	str	r2, [r5, #92]	@ 0x5c
 8002d4c:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 8002d4e:	3103      	adds	r1, #3
 8002d50:	438a      	bics	r2, r1
 8002d52:	65ea      	str	r2, [r5, #92]	@ 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1cd      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x268>
        tickstart = HAL_GetTick();
 8002d58:	f7ff f992 	bl	8002080 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d5c:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8002d5e:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d60:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 8002d62:	423b      	tst	r3, r7
 8002d64:	d0cd      	beq.n	8002d02 <HAL_RCC_OscConfig+0x276>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d66:	f7ff f98b 	bl	8002080 <HAL_GetTick>
 8002d6a:	4b11      	ldr	r3, [pc, #68]	@ (8002db0 <HAL_RCC_OscConfig+0x324>)
 8002d6c:	1b80      	subs	r0, r0, r6
 8002d6e:	4298      	cmp	r0, r3
 8002d70:	d9f6      	bls.n	8002d60 <HAL_RCC_OscConfig+0x2d4>
 8002d72:	e6cf      	b.n	8002b14 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d74:	f7ff f984 	bl	8002080 <HAL_GetTick>
 8002d78:	4b0d      	ldr	r3, [pc, #52]	@ (8002db0 <HAL_RCC_OscConfig+0x324>)
 8002d7a:	1b80      	subs	r0, r0, r6
 8002d7c:	4298      	cmp	r0, r3
 8002d7e:	d9bd      	bls.n	8002cfc <HAL_RCC_OscConfig+0x270>
 8002d80:	e6c8      	b.n	8002b14 <HAL_RCC_OscConfig+0x88>
 8002d82:	46c0      	nop			@ (mov r8, r8)
 8002d84:	40021000 	.word	0x40021000
 8002d88:	fffeffff 	.word	0xfffeffff
 8002d8c:	fffbffff 	.word	0xfffbffff
 8002d90:	ffff80ff 	.word	0xffff80ff
 8002d94:	ffffc7ff 	.word	0xffffc7ff
 8002d98:	20000000 	.word	0x20000000
 8002d9c:	00f42400 	.word	0x00f42400
 8002da0:	20000008 	.word	0x20000008
 8002da4:	fffffeff 	.word	0xfffffeff
 8002da8:	40007000 	.word	0x40007000
 8002dac:	efffffff 	.word	0xefffffff
 8002db0:	00001388 	.word	0x00001388
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002db4:	2138      	movs	r1, #56	@ 0x38
 8002db6:	4d43      	ldr	r5, [pc, #268]	@ (8002ec4 <HAL_RCC_OscConfig+0x438>)
 8002db8:	68aa      	ldr	r2, [r5, #8]
 8002dba:	400a      	ands	r2, r1
 8002dbc:	2a10      	cmp	r2, #16
 8002dbe:	d053      	beq.n	8002e68 <HAL_RCC_OscConfig+0x3dc>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002dc0:	4a41      	ldr	r2, [pc, #260]	@ (8002ec8 <HAL_RCC_OscConfig+0x43c>)
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d13a      	bne.n	8002e3c <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_DISABLE();
 8002dc6:	682b      	ldr	r3, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dc8:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8002dca:	4013      	ands	r3, r2
 8002dcc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002dce:	f7ff f957 	bl	8002080 <HAL_GetTick>
 8002dd2:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dd4:	04bf      	lsls	r7, r7, #18
 8002dd6:	682b      	ldr	r3, [r5, #0]
 8002dd8:	423b      	tst	r3, r7
 8002dda:	d129      	bne.n	8002e30 <HAL_RCC_OscConfig+0x3a4>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ddc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002dde:	6a23      	ldr	r3, [r4, #32]
 8002de0:	68ea      	ldr	r2, [r5, #12]
 8002de2:	430b      	orrs	r3, r1
 8002de4:	4939      	ldr	r1, [pc, #228]	@ (8002ecc <HAL_RCC_OscConfig+0x440>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002de6:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002de8:	400a      	ands	r2, r1
 8002dea:	4313      	orrs	r3, r2
 8002dec:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dee:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002df0:	4313      	orrs	r3, r2
 8002df2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8002df4:	4313      	orrs	r3, r2
 8002df6:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002dfc:	0212      	lsls	r2, r2, #8
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8002e02:	2380      	movs	r3, #128	@ 0x80
 8002e04:	682a      	ldr	r2, [r5, #0]
 8002e06:	045b      	lsls	r3, r3, #17
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002e0c:	2380      	movs	r3, #128	@ 0x80
 8002e0e:	68ea      	ldr	r2, [r5, #12]
 8002e10:	055b      	lsls	r3, r3, #21
 8002e12:	4313      	orrs	r3, r2
 8002e14:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8002e16:	f7ff f933 	bl	8002080 <HAL_GetTick>
 8002e1a:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e1c:	682b      	ldr	r3, [r5, #0]
 8002e1e:	4233      	tst	r3, r6
 8002e20:	d000      	beq.n	8002e24 <HAL_RCC_OscConfig+0x398>
 8002e22:	e64d      	b.n	8002ac0 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e24:	f7ff f92c 	bl	8002080 <HAL_GetTick>
 8002e28:	1b00      	subs	r0, r0, r4
 8002e2a:	2802      	cmp	r0, #2
 8002e2c:	d9f6      	bls.n	8002e1c <HAL_RCC_OscConfig+0x390>
 8002e2e:	e671      	b.n	8002b14 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e30:	f7ff f926 	bl	8002080 <HAL_GetTick>
 8002e34:	1b80      	subs	r0, r0, r6
 8002e36:	2802      	cmp	r0, #2
 8002e38:	d9cd      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x34a>
 8002e3a:	e66b      	b.n	8002b14 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_PLL_DISABLE();
 8002e3c:	682b      	ldr	r3, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e3e:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8002e40:	4013      	ands	r3, r2
 8002e42:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002e44:	f7ff f91c 	bl	8002080 <HAL_GetTick>
 8002e48:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e4a:	04b6      	lsls	r6, r6, #18
 8002e4c:	682b      	ldr	r3, [r5, #0]
 8002e4e:	4233      	tst	r3, r6
 8002e50:	d104      	bne.n	8002e5c <HAL_RCC_OscConfig+0x3d0>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002e52:	68eb      	ldr	r3, [r5, #12]
 8002e54:	4a1e      	ldr	r2, [pc, #120]	@ (8002ed0 <HAL_RCC_OscConfig+0x444>)
 8002e56:	4013      	ands	r3, r2
 8002e58:	60eb      	str	r3, [r5, #12]
 8002e5a:	e631      	b.n	8002ac0 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e5c:	f7ff f910 	bl	8002080 <HAL_GetTick>
 8002e60:	1b00      	subs	r0, r0, r4
 8002e62:	2802      	cmp	r0, #2
 8002e64:	d9f2      	bls.n	8002e4c <HAL_RCC_OscConfig+0x3c0>
 8002e66:	e655      	b.n	8002b14 <HAL_RCC_OscConfig+0x88>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d100      	bne.n	8002e6e <HAL_RCC_OscConfig+0x3e2>
 8002e6c:	e613      	b.n	8002a96 <HAL_RCC_OscConfig+0xa>
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e6e:	2203      	movs	r2, #3
        temp_pllckcfg = RCC->PLLCFGR;
 8002e70:	68e8      	ldr	r0, [r5, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e72:	6a21      	ldr	r1, [r4, #32]
 8002e74:	4002      	ands	r2, r0
 8002e76:	428a      	cmp	r2, r1
 8002e78:	d000      	beq.n	8002e7c <HAL_RCC_OscConfig+0x3f0>
 8002e7a:	e60c      	b.n	8002a96 <HAL_RCC_OscConfig+0xa>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e7c:	2270      	movs	r2, #112	@ 0x70
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e7e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e80:	4002      	ands	r2, r0
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e82:	428a      	cmp	r2, r1
 8002e84:	d000      	beq.n	8002e88 <HAL_RCC_OscConfig+0x3fc>
 8002e86:	e606      	b.n	8002a96 <HAL_RCC_OscConfig+0xa>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e88:	21fe      	movs	r1, #254	@ 0xfe
 8002e8a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002e8c:	01c9      	lsls	r1, r1, #7
 8002e8e:	4001      	ands	r1, r0
 8002e90:	0212      	lsls	r2, r2, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e92:	4291      	cmp	r1, r2
 8002e94:	d000      	beq.n	8002e98 <HAL_RCC_OscConfig+0x40c>
 8002e96:	e5fe      	b.n	8002a96 <HAL_RCC_OscConfig+0xa>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e98:	22f8      	movs	r2, #248	@ 0xf8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e9a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e9c:	0392      	lsls	r2, r2, #14
 8002e9e:	4002      	ands	r2, r0
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ea0:	428a      	cmp	r2, r1
 8002ea2:	d000      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x41a>
 8002ea4:	e5f7      	b.n	8002a96 <HAL_RCC_OscConfig+0xa>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002ea6:	22e0      	movs	r2, #224	@ 0xe0
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ea8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002eaa:	0512      	lsls	r2, r2, #20
 8002eac:	4002      	ands	r2, r0
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002eae:	428a      	cmp	r2, r1
 8002eb0:	d000      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x428>
 8002eb2:	e5f0      	b.n	8002a96 <HAL_RCC_OscConfig+0xa>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002eb4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002eb6:	0f40      	lsrs	r0, r0, #29
 8002eb8:	0740      	lsls	r0, r0, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002eba:	1ac0      	subs	r0, r0, r3
 8002ebc:	1e43      	subs	r3, r0, #1
 8002ebe:	4198      	sbcs	r0, r3
 8002ec0:	b2c0      	uxtb	r0, r0
 8002ec2:	e5e9      	b.n	8002a98 <HAL_RCC_OscConfig+0xc>
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	feffffff 	.word	0xfeffffff
 8002ecc:	11c1808c 	.word	0x11c1808c
 8002ed0:	eefefffc 	.word	0xeefefffc

08002ed4 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ed4:	2338      	movs	r3, #56	@ 0x38
{
 8002ed6:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ed8:	4c1d      	ldr	r4, [pc, #116]	@ (8002f50 <HAL_RCC_GetSysClockFreq+0x7c>)
 8002eda:	68a2      	ldr	r2, [r4, #8]
 8002edc:	421a      	tst	r2, r3
 8002ede:	d105      	bne.n	8002eec <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002ee0:	6823      	ldr	r3, [r4, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002ee2:	481c      	ldr	r0, [pc, #112]	@ (8002f54 <HAL_RCC_GetSysClockFreq+0x80>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002ee4:	049b      	lsls	r3, r3, #18
 8002ee6:	0f5b      	lsrs	r3, r3, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002ee8:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8002eea:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002eec:	68a2      	ldr	r2, [r4, #8]
 8002eee:	401a      	ands	r2, r3
 8002ef0:	2a08      	cmp	r2, #8
 8002ef2:	d027      	beq.n	8002f44 <HAL_RCC_GetSysClockFreq+0x70>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ef4:	68a2      	ldr	r2, [r4, #8]
 8002ef6:	401a      	ands	r2, r3
 8002ef8:	2a10      	cmp	r2, #16
 8002efa:	d117      	bne.n	8002f2c <HAL_RCC_GetSysClockFreq+0x58>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002efc:	68e3      	ldr	r3, [r4, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002efe:	68e1      	ldr	r1, [r4, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002f00:	43db      	mvns	r3, r3
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002f02:	68e5      	ldr	r5, [r4, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f04:	0649      	lsls	r1, r1, #25
 8002f06:	0f49      	lsrs	r1, r1, #29
 8002f08:	326f      	adds	r2, #111	@ 0x6f
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002f0a:	0a2d      	lsrs	r5, r5, #8
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f0c:	3101      	adds	r1, #1
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002f0e:	4015      	ands	r5, r2
    switch (pllsource)
 8002f10:	079b      	lsls	r3, r3, #30
 8002f12:	d109      	bne.n	8002f28 <HAL_RCC_GetSysClockFreq+0x54>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f14:	4810      	ldr	r0, [pc, #64]	@ (8002f58 <HAL_RCC_GetSysClockFreq+0x84>)
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002f16:	f7fd f909 	bl	800012c <__udivsi3>
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002f1a:	68e1      	ldr	r1, [r4, #12]
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002f1c:	4368      	muls	r0, r5
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002f1e:	0f49      	lsrs	r1, r1, #29
 8002f20:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 8002f22:	f7fd f903 	bl	800012c <__udivsi3>
 8002f26:	e7e0      	b.n	8002eea <HAL_RCC_GetSysClockFreq+0x16>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002f28:	480a      	ldr	r0, [pc, #40]	@ (8002f54 <HAL_RCC_GetSysClockFreq+0x80>)
 8002f2a:	e7f4      	b.n	8002f16 <HAL_RCC_GetSysClockFreq+0x42>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002f2c:	68a2      	ldr	r2, [r4, #8]
 8002f2e:	401a      	ands	r2, r3
 8002f30:	2a20      	cmp	r2, #32
 8002f32:	d009      	beq.n	8002f48 <HAL_RCC_GetSysClockFreq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002f34:	68a2      	ldr	r2, [r4, #8]
    sysclockfreq = 0U;
 8002f36:	2000      	movs	r0, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002f38:	4013      	ands	r3, r2
 8002f3a:	2b18      	cmp	r3, #24
 8002f3c:	d1d5      	bne.n	8002eea <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSI_VALUE;
 8002f3e:	20fa      	movs	r0, #250	@ 0xfa
 8002f40:	01c0      	lsls	r0, r0, #7
 8002f42:	e7d2      	b.n	8002eea <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = HSE_VALUE;
 8002f44:	4804      	ldr	r0, [pc, #16]	@ (8002f58 <HAL_RCC_GetSysClockFreq+0x84>)
 8002f46:	e7d0      	b.n	8002eea <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSE_VALUE;
 8002f48:	2080      	movs	r0, #128	@ 0x80
 8002f4a:	0200      	lsls	r0, r0, #8
 8002f4c:	e7cd      	b.n	8002eea <HAL_RCC_GetSysClockFreq+0x16>
 8002f4e:	46c0      	nop			@ (mov r8, r8)
 8002f50:	40021000 	.word	0x40021000
 8002f54:	00f42400 	.word	0x00f42400
 8002f58:	007a1200 	.word	0x007a1200

08002f5c <HAL_RCC_ClockConfig>:
{
 8002f5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f5e:	0004      	movs	r4, r0
 8002f60:	000d      	movs	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8002f62:	2800      	cmp	r0, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 8002f66:	2001      	movs	r0, #1
}
 8002f68:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f6a:	2707      	movs	r7, #7
 8002f6c:	4e4a      	ldr	r6, [pc, #296]	@ (8003098 <HAL_RCC_ClockConfig+0x13c>)
 8002f6e:	6833      	ldr	r3, [r6, #0]
 8002f70:	403b      	ands	r3, r7
 8002f72:	428b      	cmp	r3, r1
 8002f74:	d32a      	bcc.n	8002fcc <HAL_RCC_ClockConfig+0x70>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f76:	6822      	ldr	r2, [r4, #0]
 8002f78:	0793      	lsls	r3, r2, #30
 8002f7a:	d43b      	bmi.n	8002ff4 <HAL_RCC_ClockConfig+0x98>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f7c:	07d2      	lsls	r2, r2, #31
 8002f7e:	d448      	bmi.n	8003012 <HAL_RCC_ClockConfig+0xb6>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f80:	2707      	movs	r7, #7
 8002f82:	6833      	ldr	r3, [r6, #0]
 8002f84:	403b      	ands	r3, r7
 8002f86:	42ab      	cmp	r3, r5
 8002f88:	d90a      	bls.n	8002fa0 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f8a:	6833      	ldr	r3, [r6, #0]
 8002f8c:	43bb      	bics	r3, r7
 8002f8e:	432b      	orrs	r3, r5
 8002f90:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002f92:	f7ff f875 	bl	8002080 <HAL_GetTick>
 8002f96:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002f98:	6833      	ldr	r3, [r6, #0]
 8002f9a:	403b      	ands	r3, r7
 8002f9c:	42ab      	cmp	r3, r5
 8002f9e:	d16b      	bne.n	8003078 <HAL_RCC_ClockConfig+0x11c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fa0:	6823      	ldr	r3, [r4, #0]
 8002fa2:	4d3e      	ldr	r5, [pc, #248]	@ (800309c <HAL_RCC_ClockConfig+0x140>)
 8002fa4:	075b      	lsls	r3, r3, #29
 8002fa6:	d46f      	bmi.n	8003088 <HAL_RCC_ClockConfig+0x12c>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002fa8:	f7ff ff94 	bl	8002ed4 <HAL_RCC_GetSysClockFreq>
 8002fac:	68ab      	ldr	r3, [r5, #8]
 8002fae:	493c      	ldr	r1, [pc, #240]	@ (80030a0 <HAL_RCC_ClockConfig+0x144>)
 8002fb0:	051b      	lsls	r3, r3, #20
 8002fb2:	0f1b      	lsrs	r3, r3, #28
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	585b      	ldr	r3, [r3, r1]
 8002fb8:	211f      	movs	r1, #31
 8002fba:	400b      	ands	r3, r1
 8002fbc:	40d8      	lsrs	r0, r3
 8002fbe:	4a39      	ldr	r2, [pc, #228]	@ (80030a4 <HAL_RCC_ClockConfig+0x148>)
  return HAL_InitTick(uwTickPrio);
 8002fc0:	4b39      	ldr	r3, [pc, #228]	@ (80030a8 <HAL_RCC_ClockConfig+0x14c>)
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002fc2:	6010      	str	r0, [r2, #0]
  return HAL_InitTick(uwTickPrio);
 8002fc4:	6818      	ldr	r0, [r3, #0]
 8002fc6:	f7ff f813 	bl	8001ff0 <HAL_InitTick>
 8002fca:	e7cd      	b.n	8002f68 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fcc:	6833      	ldr	r3, [r6, #0]
 8002fce:	43bb      	bics	r3, r7
 8002fd0:	430b      	orrs	r3, r1
 8002fd2:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002fd4:	f7ff f854 	bl	8002080 <HAL_GetTick>
 8002fd8:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002fda:	6833      	ldr	r3, [r6, #0]
 8002fdc:	403b      	ands	r3, r7
 8002fde:	42ab      	cmp	r3, r5
 8002fe0:	d0c9      	beq.n	8002f76 <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fe2:	f7ff f84d 	bl	8002080 <HAL_GetTick>
 8002fe6:	9b01      	ldr	r3, [sp, #4]
 8002fe8:	1ac0      	subs	r0, r0, r3
 8002fea:	4b30      	ldr	r3, [pc, #192]	@ (80030ac <HAL_RCC_ClockConfig+0x150>)
 8002fec:	4298      	cmp	r0, r3
 8002fee:	d9f4      	bls.n	8002fda <HAL_RCC_ClockConfig+0x7e>
        return HAL_TIMEOUT;
 8002ff0:	2003      	movs	r0, #3
 8002ff2:	e7b9      	b.n	8002f68 <HAL_RCC_ClockConfig+0xc>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ff4:	4929      	ldr	r1, [pc, #164]	@ (800309c <HAL_RCC_ClockConfig+0x140>)
 8002ff6:	0753      	lsls	r3, r2, #29
 8002ff8:	d504      	bpl.n	8003004 <HAL_RCC_ClockConfig+0xa8>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002ffa:	23e0      	movs	r3, #224	@ 0xe0
 8002ffc:	6888      	ldr	r0, [r1, #8]
 8002ffe:	01db      	lsls	r3, r3, #7
 8003000:	4303      	orrs	r3, r0
 8003002:	608b      	str	r3, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003004:	688b      	ldr	r3, [r1, #8]
 8003006:	482a      	ldr	r0, [pc, #168]	@ (80030b0 <HAL_RCC_ClockConfig+0x154>)
 8003008:	4003      	ands	r3, r0
 800300a:	68a0      	ldr	r0, [r4, #8]
 800300c:	4303      	orrs	r3, r0
 800300e:	608b      	str	r3, [r1, #8]
 8003010:	e7b4      	b.n	8002f7c <HAL_RCC_ClockConfig+0x20>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003012:	6862      	ldr	r2, [r4, #4]
 8003014:	4f21      	ldr	r7, [pc, #132]	@ (800309c <HAL_RCC_ClockConfig+0x140>)
 8003016:	2a01      	cmp	r2, #1
 8003018:	d119      	bne.n	800304e <HAL_RCC_ClockConfig+0xf2>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	039b      	lsls	r3, r3, #14
 800301e:	d5a2      	bpl.n	8002f66 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003020:	2107      	movs	r1, #7
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	438b      	bics	r3, r1
 8003026:	4313      	orrs	r3, r2
 8003028:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 800302a:	f7ff f829 	bl	8002080 <HAL_GetTick>
 800302e:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003030:	2338      	movs	r3, #56	@ 0x38
 8003032:	68ba      	ldr	r2, [r7, #8]
 8003034:	401a      	ands	r2, r3
 8003036:	6863      	ldr	r3, [r4, #4]
 8003038:	00db      	lsls	r3, r3, #3
 800303a:	429a      	cmp	r2, r3
 800303c:	d0a0      	beq.n	8002f80 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800303e:	f7ff f81f 	bl	8002080 <HAL_GetTick>
 8003042:	9b01      	ldr	r3, [sp, #4]
 8003044:	1ac0      	subs	r0, r0, r3
 8003046:	4b19      	ldr	r3, [pc, #100]	@ (80030ac <HAL_RCC_ClockConfig+0x150>)
 8003048:	4298      	cmp	r0, r3
 800304a:	d9f1      	bls.n	8003030 <HAL_RCC_ClockConfig+0xd4>
 800304c:	e7d0      	b.n	8002ff0 <HAL_RCC_ClockConfig+0x94>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800304e:	2a02      	cmp	r2, #2
 8003050:	d103      	bne.n	800305a <HAL_RCC_ClockConfig+0xfe>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	019b      	lsls	r3, r3, #6
 8003056:	d4e3      	bmi.n	8003020 <HAL_RCC_ClockConfig+0xc4>
 8003058:	e785      	b.n	8002f66 <HAL_RCC_ClockConfig+0xa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800305a:	2a00      	cmp	r2, #0
 800305c:	d103      	bne.n	8003066 <HAL_RCC_ClockConfig+0x10a>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	055b      	lsls	r3, r3, #21
 8003062:	d4dd      	bmi.n	8003020 <HAL_RCC_ClockConfig+0xc4>
 8003064:	e77f      	b.n	8002f66 <HAL_RCC_ClockConfig+0xa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003066:	2302      	movs	r3, #2
 8003068:	2a03      	cmp	r2, #3
 800306a:	d103      	bne.n	8003074 <HAL_RCC_ClockConfig+0x118>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800306c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800306e:	4219      	tst	r1, r3
 8003070:	d1d6      	bne.n	8003020 <HAL_RCC_ClockConfig+0xc4>
 8003072:	e778      	b.n	8002f66 <HAL_RCC_ClockConfig+0xa>
 8003074:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8003076:	e7fa      	b.n	800306e <HAL_RCC_ClockConfig+0x112>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003078:	f7ff f802 	bl	8002080 <HAL_GetTick>
 800307c:	9b01      	ldr	r3, [sp, #4]
 800307e:	1ac0      	subs	r0, r0, r3
 8003080:	4b0a      	ldr	r3, [pc, #40]	@ (80030ac <HAL_RCC_ClockConfig+0x150>)
 8003082:	4298      	cmp	r0, r3
 8003084:	d988      	bls.n	8002f98 <HAL_RCC_ClockConfig+0x3c>
 8003086:	e7b3      	b.n	8002ff0 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003088:	68ab      	ldr	r3, [r5, #8]
 800308a:	4a0a      	ldr	r2, [pc, #40]	@ (80030b4 <HAL_RCC_ClockConfig+0x158>)
 800308c:	4013      	ands	r3, r2
 800308e:	68e2      	ldr	r2, [r4, #12]
 8003090:	4313      	orrs	r3, r2
 8003092:	60ab      	str	r3, [r5, #8]
 8003094:	e788      	b.n	8002fa8 <HAL_RCC_ClockConfig+0x4c>
 8003096:	46c0      	nop			@ (mov r8, r8)
 8003098:	40022000 	.word	0x40022000
 800309c:	40021000 	.word	0x40021000
 80030a0:	08006a28 	.word	0x08006a28
 80030a4:	20000000 	.word	0x20000000
 80030a8:	20000008 	.word	0x20000008
 80030ac:	00001388 	.word	0x00001388
 80030b0:	fffff0ff 	.word	0xfffff0ff
 80030b4:	ffff8fff 	.word	0xffff8fff

080030b8 <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80030b8:	4b06      	ldr	r3, [pc, #24]	@ (80030d4 <HAL_RCC_GetPCLK1Freq+0x1c>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80030ba:	4907      	ldr	r1, [pc, #28]	@ (80030d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030bc:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80030be:	4a07      	ldr	r2, [pc, #28]	@ (80030dc <HAL_RCC_GetPCLK1Freq+0x24>)
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80030c0:	045b      	lsls	r3, r3, #17
 80030c2:	0f5b      	lsrs	r3, r3, #29
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	585b      	ldr	r3, [r3, r1]
 80030c8:	211f      	movs	r1, #31
 80030ca:	6810      	ldr	r0, [r2, #0]
 80030cc:	400b      	ands	r3, r1
 80030ce:	40d8      	lsrs	r0, r3
}
 80030d0:	4770      	bx	lr
 80030d2:	46c0      	nop			@ (mov r8, r8)
 80030d4:	40021000 	.word	0x40021000
 80030d8:	08006a08 	.word	0x08006a08
 80030dc:	20000000 	.word	0x20000000

080030e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030e0:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030e2:	6803      	ldr	r3, [r0, #0]
{
 80030e4:	0005      	movs	r5, r0
 80030e6:	b085      	sub	sp, #20
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030e8:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030ea:	039b      	lsls	r3, r3, #14
 80030ec:	d552      	bpl.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0xb4>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ee:	2280      	movs	r2, #128	@ 0x80
 80030f0:	4c5f      	ldr	r4, [pc, #380]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80030f2:	0552      	lsls	r2, r2, #21
 80030f4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
    FlagStatus       pwrclkchanged = RESET;
 80030f6:	9000      	str	r0, [sp, #0]
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030f8:	4213      	tst	r3, r2
 80030fa:	d108      	bne.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030fc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80030fe:	4313      	orrs	r3, r2
 8003100:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8003102:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003104:	4013      	ands	r3, r2
 8003106:	9303      	str	r3, [sp, #12]
 8003108:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 800310a:	2301      	movs	r3, #1
 800310c:	9300      	str	r3, [sp, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800310e:	2780      	movs	r7, #128	@ 0x80
 8003110:	4e58      	ldr	r6, [pc, #352]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8003112:	007f      	lsls	r7, r7, #1
 8003114:	6833      	ldr	r3, [r6, #0]
 8003116:	433b      	orrs	r3, r7
 8003118:	6033      	str	r3, [r6, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800311a:	f7fe ffb1 	bl	8002080 <HAL_GetTick>
 800311e:	9001      	str	r0, [sp, #4]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003120:	6833      	ldr	r3, [r6, #0]
 8003122:	423b      	tst	r3, r7
 8003124:	d028      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003126:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8003128:	22c0      	movs	r2, #192	@ 0xc0
 800312a:	0008      	movs	r0, r1
 800312c:	0092      	lsls	r2, r2, #2

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800312e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003130:	4010      	ands	r0, r2
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003132:	4211      	tst	r1, r2
 8003134:	d018      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x88>
 8003136:	4298      	cmp	r0, r3
 8003138:	d00c      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800313a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800313c:	4a4e      	ldr	r2, [pc, #312]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x198>)
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800313e:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003140:	4013      	ands	r3, r2
        __HAL_RCC_BACKUPRESET_FORCE();
 8003142:	2280      	movs	r2, #128	@ 0x80
 8003144:	0252      	lsls	r2, r2, #9
 8003146:	430a      	orrs	r2, r1
 8003148:	65e2      	str	r2, [r4, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800314a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800314c:	494b      	ldr	r1, [pc, #300]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 800314e:	400a      	ands	r2, r1
 8003150:	65e2      	str	r2, [r4, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003152:	65e3      	str	r3, [r4, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003154:	07db      	lsls	r3, r3, #31
 8003156:	d507      	bpl.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003158:	f7fe ff92 	bl	8002080 <HAL_GetTick>

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800315c:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 800315e:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003160:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003162:	423b      	tst	r3, r7
 8003164:	d100      	bne.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x88>
 8003166:	e07b      	b.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }

      if (ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003168:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800316a:	4a43      	ldr	r2, [pc, #268]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x198>)
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800316c:	2000      	movs	r0, #0
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800316e:	4013      	ands	r3, r2
 8003170:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8003172:	4313      	orrs	r3, r2
 8003174:	65e3      	str	r3, [r4, #92]	@ 0x5c
 8003176:	e006      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0xa6>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003178:	f7fe ff82 	bl	8002080 <HAL_GetTick>
 800317c:	9b01      	ldr	r3, [sp, #4]
 800317e:	1ac0      	subs	r0, r0, r3
 8003180:	2802      	cmp	r0, #2
 8003182:	d9cd      	bls.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x40>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003184:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003186:	9b00      	ldr	r3, [sp, #0]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d103      	bne.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800318c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800318e:	4a3c      	ldr	r2, [pc, #240]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8003190:	4013      	ands	r3, r2
 8003192:	63e3      	str	r3, [r4, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003194:	682b      	ldr	r3, [r5, #0]
 8003196:	07da      	lsls	r2, r3, #31
 8003198:	d506      	bpl.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0xc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800319a:	2403      	movs	r4, #3
 800319c:	4934      	ldr	r1, [pc, #208]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800319e:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 80031a0:	43a2      	bics	r2, r4
 80031a2:	686c      	ldr	r4, [r5, #4]
 80031a4:	4322      	orrs	r2, r4
 80031a6:	654a      	str	r2, [r1, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031a8:	06da      	lsls	r2, r3, #27
 80031aa:	d506      	bpl.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0xda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031ac:	4930      	ldr	r1, [pc, #192]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80031ae:	4c35      	ldr	r4, [pc, #212]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80031b0:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 80031b2:	4022      	ands	r2, r4
 80031b4:	68ac      	ldr	r4, [r5, #8]
 80031b6:	4322      	orrs	r2, r4
 80031b8:	654a      	str	r2, [r1, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80031ba:	059a      	lsls	r2, r3, #22
 80031bc:	d506      	bpl.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031be:	492c      	ldr	r1, [pc, #176]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80031c0:	4c31      	ldr	r4, [pc, #196]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80031c2:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 80031c4:	4022      	ands	r2, r4
 80031c6:	696c      	ldr	r4, [r5, #20]
 80031c8:	4322      	orrs	r2, r4
 80031ca:	654a      	str	r2, [r1, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80031cc:	055a      	lsls	r2, r3, #21
 80031ce:	d506      	bpl.n	80031de <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80031d0:	4927      	ldr	r1, [pc, #156]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80031d2:	4c2e      	ldr	r4, [pc, #184]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031d4:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 80031d6:	4022      	ands	r2, r4
 80031d8:	69ac      	ldr	r4, [r5, #24]
 80031da:	4322      	orrs	r2, r4
 80031dc:	654a      	str	r2, [r1, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031de:	069a      	lsls	r2, r3, #26
 80031e0:	d506      	bpl.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031e2:	4923      	ldr	r1, [pc, #140]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80031e4:	4c2a      	ldr	r4, [pc, #168]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80031e6:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 80031e8:	4022      	ands	r2, r4
 80031ea:	68ec      	ldr	r4, [r5, #12]
 80031ec:	4322      	orrs	r2, r4
 80031ee:	654a      	str	r2, [r1, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031f0:	045a      	lsls	r2, r3, #17
 80031f2:	d50f      	bpl.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031f4:	491e      	ldr	r1, [pc, #120]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80031f6:	69ec      	ldr	r4, [r5, #28]
 80031f8:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 80031fa:	0092      	lsls	r2, r2, #2
 80031fc:	0892      	lsrs	r2, r2, #2
 80031fe:	4322      	orrs	r2, r4
 8003200:	654a      	str	r2, [r1, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003202:	2280      	movs	r2, #128	@ 0x80
 8003204:	05d2      	lsls	r2, r2, #23
 8003206:	4294      	cmp	r4, r2
 8003208:	d104      	bne.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x134>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800320a:	2280      	movs	r2, #128	@ 0x80
 800320c:	68cc      	ldr	r4, [r1, #12]
 800320e:	0252      	lsls	r2, r2, #9
 8003210:	4322      	orrs	r2, r4
 8003212:	60ca      	str	r2, [r1, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003214:	029a      	lsls	r2, r3, #10
 8003216:	d50f      	bpl.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003218:	4915      	ldr	r1, [pc, #84]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800321a:	4e1e      	ldr	r6, [pc, #120]	@ (8003294 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800321c:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 800321e:	6a2c      	ldr	r4, [r5, #32]
 8003220:	4032      	ands	r2, r6
 8003222:	4322      	orrs	r2, r4
 8003224:	654a      	str	r2, [r1, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003226:	2280      	movs	r2, #128	@ 0x80
 8003228:	03d2      	lsls	r2, r2, #15
 800322a:	4294      	cmp	r4, r2
 800322c:	d104      	bne.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800322e:	2280      	movs	r2, #128	@ 0x80
 8003230:	68cc      	ldr	r4, [r1, #12]
 8003232:	0452      	lsls	r2, r2, #17
 8003234:	4322      	orrs	r2, r4
 8003236:	60ca      	str	r2, [r1, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003238:	051b      	lsls	r3, r3, #20
 800323a:	d50f      	bpl.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800323c:	4a0c      	ldr	r2, [pc, #48]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800323e:	4c16      	ldr	r4, [pc, #88]	@ (8003298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003240:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8003242:	6929      	ldr	r1, [r5, #16]
 8003244:	4023      	ands	r3, r4
 8003246:	430b      	orrs	r3, r1
 8003248:	6553      	str	r3, [r2, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800324a:	2380      	movs	r3, #128	@ 0x80
 800324c:	01db      	lsls	r3, r3, #7
 800324e:	4299      	cmp	r1, r3
 8003250:	d104      	bne.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x17c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003252:	2380      	movs	r3, #128	@ 0x80
 8003254:	68d1      	ldr	r1, [r2, #12]
 8003256:	025b      	lsls	r3, r3, #9
 8003258:	430b      	orrs	r3, r1
 800325a:	60d3      	str	r3, [r2, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 800325c:	b005      	add	sp, #20
 800325e:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003260:	f7fe ff0e 	bl	8002080 <HAL_GetTick>
 8003264:	4b0d      	ldr	r3, [pc, #52]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003266:	1b80      	subs	r0, r0, r6
 8003268:	4298      	cmp	r0, r3
 800326a:	d800      	bhi.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x18e>
 800326c:	e778      	b.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x80>
 800326e:	e789      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003270:	40021000 	.word	0x40021000
 8003274:	40007000 	.word	0x40007000
 8003278:	fffffcff 	.word	0xfffffcff
 800327c:	fffeffff 	.word	0xfffeffff
 8003280:	efffffff 	.word	0xefffffff
 8003284:	fffff3ff 	.word	0xfffff3ff
 8003288:	fff3ffff 	.word	0xfff3ffff
 800328c:	ffcfffff 	.word	0xffcfffff
 8003290:	ffffcfff 	.word	0xffffcfff
 8003294:	ffbfffff 	.word	0xffbfffff
 8003298:	ffff3fff 	.word	0xffff3fff
 800329c:	00001388 	.word	0x00001388

080032a0 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032a0:	0001      	movs	r1, r0
{
 80032a2:	0003      	movs	r3, r0
  {
    return HAL_ERROR;
 80032a4:	2001      	movs	r0, #1
{
 80032a6:	b510      	push	{r4, lr}
  if (htim->State != HAL_TIM_STATE_READY)
 80032a8:	313d      	adds	r1, #61	@ 0x3d
 80032aa:	780c      	ldrb	r4, [r1, #0]
 80032ac:	b2e2      	uxtb	r2, r4
 80032ae:	4284      	cmp	r4, r0
 80032b0:	d11c      	bne.n	80032ec <HAL_TIM_Base_Start_IT+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032b2:	1800      	adds	r0, r0, r0
 80032b4:	7008      	strb	r0, [r1, #0]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68d9      	ldr	r1, [r3, #12]
 80032ba:	4311      	orrs	r1, r2
 80032bc:	60d9      	str	r1, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032be:	490d      	ldr	r1, [pc, #52]	@ (80032f4 <HAL_TIM_Base_Start_IT+0x54>)
 80032c0:	428b      	cmp	r3, r1
 80032c2:	d006      	beq.n	80032d2 <HAL_TIM_Base_Start_IT+0x32>
 80032c4:	2180      	movs	r1, #128	@ 0x80
 80032c6:	05c9      	lsls	r1, r1, #23
 80032c8:	428b      	cmp	r3, r1
 80032ca:	d002      	beq.n	80032d2 <HAL_TIM_Base_Start_IT+0x32>
 80032cc:	490a      	ldr	r1, [pc, #40]	@ (80032f8 <HAL_TIM_Base_Start_IT+0x58>)
 80032ce:	428b      	cmp	r3, r1
 80032d0:	d10d      	bne.n	80032ee <HAL_TIM_Base_Start_IT+0x4e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032d2:	689a      	ldr	r2, [r3, #8]
 80032d4:	4909      	ldr	r1, [pc, #36]	@ (80032fc <HAL_TIM_Base_Start_IT+0x5c>)
 80032d6:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032d8:	2a06      	cmp	r2, #6
 80032da:	d006      	beq.n	80032ea <HAL_TIM_Base_Start_IT+0x4a>
 80032dc:	3907      	subs	r1, #7
 80032de:	428a      	cmp	r2, r1
 80032e0:	d003      	beq.n	80032ea <HAL_TIM_Base_Start_IT+0x4a>
    {
      __HAL_TIM_ENABLE(htim);
 80032e2:	2201      	movs	r2, #1
 80032e4:	6819      	ldr	r1, [r3, #0]
 80032e6:	430a      	orrs	r2, r1
 80032e8:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 80032ea:	2000      	movs	r0, #0
}
 80032ec:	bd10      	pop	{r4, pc}
    __HAL_TIM_ENABLE(htim);
 80032ee:	6819      	ldr	r1, [r3, #0]
 80032f0:	e7f9      	b.n	80032e6 <HAL_TIM_Base_Start_IT+0x46>
 80032f2:	46c0      	nop			@ (mov r8, r8)
 80032f4:	40012c00 	.word	0x40012c00
 80032f8:	40000400 	.word	0x40000400
 80032fc:	00010007 	.word	0x00010007

08003300 <HAL_TIM_Base_Stop_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003300:	2101      	movs	r1, #1
 8003302:	6803      	ldr	r3, [r0, #0]
{
 8003304:	b510      	push	{r4, lr}
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003306:	68da      	ldr	r2, [r3, #12]
 8003308:	438a      	bics	r2, r1
 800330a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800330c:	6a1c      	ldr	r4, [r3, #32]
 800330e:	4a07      	ldr	r2, [pc, #28]	@ (800332c <HAL_TIM_Base_Stop_IT+0x2c>)
 8003310:	4214      	tst	r4, r2
 8003312:	d106      	bne.n	8003322 <HAL_TIM_Base_Stop_IT+0x22>
 8003314:	6a1c      	ldr	r4, [r3, #32]
 8003316:	4a06      	ldr	r2, [pc, #24]	@ (8003330 <HAL_TIM_Base_Stop_IT+0x30>)
 8003318:	4214      	tst	r4, r2
 800331a:	d102      	bne.n	8003322 <HAL_TIM_Base_Stop_IT+0x22>
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	438a      	bics	r2, r1
 8003320:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003322:	2301      	movs	r3, #1
 8003324:	303d      	adds	r0, #61	@ 0x3d
 8003326:	7003      	strb	r3, [r0, #0]

  /* Return function status */
  return HAL_OK;
}
 8003328:	2000      	movs	r0, #0
 800332a:	bd10      	pop	{r4, pc}
 800332c:	00001111 	.word	0x00001111
 8003330:	00000444 	.word	0x00000444

08003334 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8003334:	4770      	bx	lr

08003336 <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8003336:	4770      	bx	lr

08003338 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8003338:	4770      	bx	lr

0800333a <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 800333a:	4770      	bx	lr

0800333c <HAL_TIM_IRQHandler>:
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800333c:	2202      	movs	r2, #2
  uint32_t itsource = htim->Instance->DIER;
 800333e:	6803      	ldr	r3, [r0, #0]
{
 8003340:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 8003342:	68dd      	ldr	r5, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003344:	691e      	ldr	r6, [r3, #16]
{
 8003346:	0004      	movs	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003348:	4216      	tst	r6, r2
 800334a:	d00d      	beq.n	8003368 <HAL_TIM_IRQHandler+0x2c>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800334c:	4215      	tst	r5, r2
 800334e:	d00b      	beq.n	8003368 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003350:	3a05      	subs	r2, #5
 8003352:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003354:	3204      	adds	r2, #4
 8003356:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	079b      	lsls	r3, r3, #30
 800335c:	d100      	bne.n	8003360 <HAL_TIM_IRQHandler+0x24>
 800335e:	e07c      	b.n	800345a <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8003360:	f7ff ffe9 	bl	8003336 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003364:	2300      	movs	r3, #0
 8003366:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003368:	2304      	movs	r3, #4
 800336a:	421e      	tst	r6, r3
 800336c:	d012      	beq.n	8003394 <HAL_TIM_IRQHandler+0x58>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800336e:	421d      	tst	r5, r3
 8003370:	d010      	beq.n	8003394 <HAL_TIM_IRQHandler+0x58>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003372:	2205      	movs	r2, #5
 8003374:	6823      	ldr	r3, [r4, #0]
 8003376:	4252      	negs	r2, r2
 8003378:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800337a:	3207      	adds	r2, #7
 800337c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800337e:	699a      	ldr	r2, [r3, #24]
 8003380:	23c0      	movs	r3, #192	@ 0xc0
 8003382:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8003384:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003386:	421a      	tst	r2, r3
 8003388:	d100      	bne.n	800338c <HAL_TIM_IRQHandler+0x50>
 800338a:	e06c      	b.n	8003466 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800338c:	f7ff ffd3 	bl	8003336 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003390:	2300      	movs	r3, #0
 8003392:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003394:	2308      	movs	r3, #8
 8003396:	421e      	tst	r6, r3
 8003398:	d00f      	beq.n	80033ba <HAL_TIM_IRQHandler+0x7e>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800339a:	421d      	tst	r5, r3
 800339c:	d00d      	beq.n	80033ba <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800339e:	2209      	movs	r2, #9
 80033a0:	6823      	ldr	r3, [r4, #0]
 80033a2:	4252      	negs	r2, r2
 80033a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033a6:	320d      	adds	r2, #13
 80033a8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033aa:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80033ac:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033ae:	079b      	lsls	r3, r3, #30
 80033b0:	d05f      	beq.n	8003472 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80033b2:	f7ff ffc0 	bl	8003336 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033b6:	2300      	movs	r3, #0
 80033b8:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80033ba:	2310      	movs	r3, #16
 80033bc:	421e      	tst	r6, r3
 80033be:	d011      	beq.n	80033e4 <HAL_TIM_IRQHandler+0xa8>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80033c0:	421d      	tst	r5, r3
 80033c2:	d00f      	beq.n	80033e4 <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80033c4:	2211      	movs	r2, #17
 80033c6:	6823      	ldr	r3, [r4, #0]
 80033c8:	4252      	negs	r2, r2
 80033ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033cc:	3219      	adds	r2, #25
 80033ce:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033d0:	69da      	ldr	r2, [r3, #28]
 80033d2:	23c0      	movs	r3, #192	@ 0xc0
 80033d4:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80033d6:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033d8:	421a      	tst	r2, r3
 80033da:	d050      	beq.n	800347e <HAL_TIM_IRQHandler+0x142>
        HAL_TIM_IC_CaptureCallback(htim);
 80033dc:	f7ff ffab 	bl	8003336 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033e0:	2300      	movs	r3, #0
 80033e2:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80033e4:	2301      	movs	r3, #1
 80033e6:	421e      	tst	r6, r3
 80033e8:	d008      	beq.n	80033fc <HAL_TIM_IRQHandler+0xc0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80033ea:	421d      	tst	r5, r3
 80033ec:	d006      	beq.n	80033fc <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80033ee:	2202      	movs	r2, #2
 80033f0:	6823      	ldr	r3, [r4, #0]
 80033f2:	4252      	negs	r2, r2
      HAL_TIM_PeriodElapsedCallback(htim);
 80033f4:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80033f6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80033f8:	f001 ff8c 	bl	8005314 <HAL_TIM_PeriodElapsedCallback>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80033fc:	2382      	movs	r3, #130	@ 0x82
 80033fe:	019b      	lsls	r3, r3, #6
 8003400:	421e      	tst	r6, r3
 8003402:	d007      	beq.n	8003414 <HAL_TIM_IRQHandler+0xd8>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003404:	062b      	lsls	r3, r5, #24
 8003406:	d505      	bpl.n	8003414 <HAL_TIM_IRQHandler+0xd8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003408:	6823      	ldr	r3, [r4, #0]
 800340a:	4a20      	ldr	r2, [pc, #128]	@ (800348c <HAL_TIM_IRQHandler+0x150>)
      HAL_TIMEx_BreakCallback(htim);
 800340c:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800340e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003410:	f000 f991 	bl	8003736 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003414:	05f3      	lsls	r3, r6, #23
 8003416:	d507      	bpl.n	8003428 <HAL_TIM_IRQHandler+0xec>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003418:	062b      	lsls	r3, r5, #24
 800341a:	d505      	bpl.n	8003428 <HAL_TIM_IRQHandler+0xec>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800341c:	6823      	ldr	r3, [r4, #0]
 800341e:	4a1c      	ldr	r2, [pc, #112]	@ (8003490 <HAL_TIM_IRQHandler+0x154>)
      HAL_TIMEx_Break2Callback(htim);
 8003420:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003422:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8003424:	f000 f988 	bl	8003738 <HAL_TIMEx_Break2Callback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003428:	2340      	movs	r3, #64	@ 0x40
 800342a:	421e      	tst	r6, r3
 800342c:	d008      	beq.n	8003440 <HAL_TIM_IRQHandler+0x104>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800342e:	421d      	tst	r5, r3
 8003430:	d006      	beq.n	8003440 <HAL_TIM_IRQHandler+0x104>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003432:	2241      	movs	r2, #65	@ 0x41
 8003434:	6823      	ldr	r3, [r4, #0]
 8003436:	4252      	negs	r2, r2
      HAL_TIM_TriggerCallback(htim);
 8003438:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800343a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800343c:	f7ff ff7d 	bl	800333a <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003440:	2320      	movs	r3, #32
 8003442:	421e      	tst	r6, r3
 8003444:	d008      	beq.n	8003458 <HAL_TIM_IRQHandler+0x11c>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003446:	421d      	tst	r5, r3
 8003448:	d006      	beq.n	8003458 <HAL_TIM_IRQHandler+0x11c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800344a:	2221      	movs	r2, #33	@ 0x21
 800344c:	6823      	ldr	r3, [r4, #0]
 800344e:	4252      	negs	r2, r2
      HAL_TIMEx_CommutCallback(htim);
 8003450:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003452:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8003454:	f000 f96e 	bl	8003734 <HAL_TIMEx_CommutCallback>
}
 8003458:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800345a:	f7ff ff6b 	bl	8003334 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800345e:	0020      	movs	r0, r4
 8003460:	f7ff ff6a 	bl	8003338 <HAL_TIM_PWM_PulseFinishedCallback>
 8003464:	e77e      	b.n	8003364 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003466:	f7ff ff65 	bl	8003334 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800346a:	0020      	movs	r0, r4
 800346c:	f7ff ff64 	bl	8003338 <HAL_TIM_PWM_PulseFinishedCallback>
 8003470:	e78e      	b.n	8003390 <HAL_TIM_IRQHandler+0x54>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003472:	f7ff ff5f 	bl	8003334 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003476:	0020      	movs	r0, r4
 8003478:	f7ff ff5e 	bl	8003338 <HAL_TIM_PWM_PulseFinishedCallback>
 800347c:	e79b      	b.n	80033b6 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800347e:	f7ff ff59 	bl	8003334 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003482:	0020      	movs	r0, r4
 8003484:	f7ff ff58 	bl	8003338 <HAL_TIM_PWM_PulseFinishedCallback>
 8003488:	e7aa      	b.n	80033e0 <HAL_TIM_IRQHandler+0xa4>
 800348a:	46c0      	nop			@ (mov r8, r8)
 800348c:	ffffdf7f 	.word	0xffffdf7f
 8003490:	fffffeff 	.word	0xfffffeff

08003494 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003494:	4a20      	ldr	r2, [pc, #128]	@ (8003518 <TIM_Base_SetConfig+0x84>)
{
 8003496:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8003498:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800349a:	4290      	cmp	r0, r2
 800349c:	d006      	beq.n	80034ac <TIM_Base_SetConfig+0x18>
 800349e:	2480      	movs	r4, #128	@ 0x80
 80034a0:	05e4      	lsls	r4, r4, #23
 80034a2:	42a0      	cmp	r0, r4
 80034a4:	d002      	beq.n	80034ac <TIM_Base_SetConfig+0x18>
 80034a6:	4c1d      	ldr	r4, [pc, #116]	@ (800351c <TIM_Base_SetConfig+0x88>)
 80034a8:	42a0      	cmp	r0, r4
 80034aa:	d10c      	bne.n	80034c6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034ac:	2470      	movs	r4, #112	@ 0x70
 80034ae:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 80034b0:	684c      	ldr	r4, [r1, #4]
 80034b2:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034b4:	4290      	cmp	r0, r2
 80034b6:	d00f      	beq.n	80034d8 <TIM_Base_SetConfig+0x44>
 80034b8:	2480      	movs	r4, #128	@ 0x80
 80034ba:	05e4      	lsls	r4, r4, #23
 80034bc:	42a0      	cmp	r0, r4
 80034be:	d00b      	beq.n	80034d8 <TIM_Base_SetConfig+0x44>
 80034c0:	4c16      	ldr	r4, [pc, #88]	@ (800351c <TIM_Base_SetConfig+0x88>)
 80034c2:	42a0      	cmp	r0, r4
 80034c4:	d008      	beq.n	80034d8 <TIM_Base_SetConfig+0x44>
 80034c6:	4c16      	ldr	r4, [pc, #88]	@ (8003520 <TIM_Base_SetConfig+0x8c>)
 80034c8:	42a0      	cmp	r0, r4
 80034ca:	d005      	beq.n	80034d8 <TIM_Base_SetConfig+0x44>
 80034cc:	4c15      	ldr	r4, [pc, #84]	@ (8003524 <TIM_Base_SetConfig+0x90>)
 80034ce:	42a0      	cmp	r0, r4
 80034d0:	d002      	beq.n	80034d8 <TIM_Base_SetConfig+0x44>
 80034d2:	4c15      	ldr	r4, [pc, #84]	@ (8003528 <TIM_Base_SetConfig+0x94>)
 80034d4:	42a0      	cmp	r0, r4
 80034d6:	d103      	bne.n	80034e0 <TIM_Base_SetConfig+0x4c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034d8:	4c14      	ldr	r4, [pc, #80]	@ (800352c <TIM_Base_SetConfig+0x98>)
 80034da:	401c      	ands	r4, r3
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034dc:	68cb      	ldr	r3, [r1, #12]
 80034de:	4323      	orrs	r3, r4
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034e0:	2480      	movs	r4, #128	@ 0x80
 80034e2:	43a3      	bics	r3, r4
 80034e4:	694c      	ldr	r4, [r1, #20]
 80034e6:	4323      	orrs	r3, r4

  TIMx->CR1 = tmpcr1;
 80034e8:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034ea:	688b      	ldr	r3, [r1, #8]
 80034ec:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034ee:	680b      	ldr	r3, [r1, #0]
 80034f0:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034f2:	4290      	cmp	r0, r2
 80034f4:	d005      	beq.n	8003502 <TIM_Base_SetConfig+0x6e>
 80034f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003524 <TIM_Base_SetConfig+0x90>)
 80034f8:	4298      	cmp	r0, r3
 80034fa:	d002      	beq.n	8003502 <TIM_Base_SetConfig+0x6e>
 80034fc:	4b0a      	ldr	r3, [pc, #40]	@ (8003528 <TIM_Base_SetConfig+0x94>)
 80034fe:	4298      	cmp	r0, r3
 8003500:	d101      	bne.n	8003506 <TIM_Base_SetConfig+0x72>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003502:	690b      	ldr	r3, [r1, #16]
 8003504:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003506:	2201      	movs	r2, #1
 8003508:	6142      	str	r2, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800350a:	6903      	ldr	r3, [r0, #16]
 800350c:	4213      	tst	r3, r2
 800350e:	d002      	beq.n	8003516 <TIM_Base_SetConfig+0x82>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003510:	6903      	ldr	r3, [r0, #16]
 8003512:	4393      	bics	r3, r2
 8003514:	6103      	str	r3, [r0, #16]
  }
}
 8003516:	bd10      	pop	{r4, pc}
 8003518:	40012c00 	.word	0x40012c00
 800351c:	40000400 	.word	0x40000400
 8003520:	40002000 	.word	0x40002000
 8003524:	40014400 	.word	0x40014400
 8003528:	40014800 	.word	0x40014800
 800352c:	fffffcff 	.word	0xfffffcff

08003530 <HAL_TIM_Base_Init>:
{
 8003530:	b570      	push	{r4, r5, r6, lr}
 8003532:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003534:	2001      	movs	r0, #1
  if (htim == NULL)
 8003536:	2c00      	cmp	r4, #0
 8003538:	d023      	beq.n	8003582 <HAL_TIM_Base_Init+0x52>
  if (htim->State == HAL_TIM_STATE_RESET)
 800353a:	0025      	movs	r5, r4
 800353c:	353d      	adds	r5, #61	@ 0x3d
 800353e:	782b      	ldrb	r3, [r5, #0]
 8003540:	b2da      	uxtb	r2, r3
 8003542:	2b00      	cmp	r3, #0
 8003544:	d105      	bne.n	8003552 <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8003546:	0023      	movs	r3, r4
 8003548:	333c      	adds	r3, #60	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800354a:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 800354c:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 800354e:	f7fe fc2f 	bl	8001db0 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003552:	2302      	movs	r3, #2
 8003554:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003556:	6820      	ldr	r0, [r4, #0]
 8003558:	1d21      	adds	r1, r4, #4
 800355a:	f7ff ff9b 	bl	8003494 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800355e:	0022      	movs	r2, r4
 8003560:	2301      	movs	r3, #1
  return HAL_OK;
 8003562:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003564:	3248      	adds	r2, #72	@ 0x48
 8003566:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003568:	3447      	adds	r4, #71	@ 0x47
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800356a:	3a0a      	subs	r2, #10
 800356c:	7013      	strb	r3, [r2, #0]
 800356e:	7053      	strb	r3, [r2, #1]
 8003570:	7093      	strb	r3, [r2, #2]
 8003572:	70d3      	strb	r3, [r2, #3]
 8003574:	7113      	strb	r3, [r2, #4]
 8003576:	7153      	strb	r3, [r2, #5]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003578:	7193      	strb	r3, [r2, #6]
 800357a:	71d3      	strb	r3, [r2, #7]
 800357c:	7213      	strb	r3, [r2, #8]
 800357e:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8003580:	702b      	strb	r3, [r5, #0]
}
 8003582:	bd70      	pop	{r4, r5, r6, pc}

08003584 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003584:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003586:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003588:	4d03      	ldr	r5, [pc, #12]	@ (8003598 <TIM_ETR_SetConfig+0x14>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800358a:	430a      	orrs	r2, r1
 800358c:	021b      	lsls	r3, r3, #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800358e:	402c      	ands	r4, r5
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003590:	4313      	orrs	r3, r2
 8003592:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003594:	6083      	str	r3, [r0, #8]
}
 8003596:	bd30      	pop	{r4, r5, pc}
 8003598:	ffff00ff 	.word	0xffff00ff

0800359c <HAL_TIM_ConfigClockSource>:
{
 800359c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800359e:	0005      	movs	r5, r0
 80035a0:	2202      	movs	r2, #2
 80035a2:	353c      	adds	r5, #60	@ 0x3c
 80035a4:	782c      	ldrb	r4, [r5, #0]
{
 80035a6:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 80035a8:	0010      	movs	r0, r2
 80035aa:	2c01      	cmp	r4, #1
 80035ac:	d01b      	beq.n	80035e6 <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80035ae:	001e      	movs	r6, r3
  __HAL_LOCK(htim);
 80035b0:	3801      	subs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80035b2:	363d      	adds	r6, #61	@ 0x3d
  __HAL_LOCK(htim);
 80035b4:	7028      	strb	r0, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80035b6:	7032      	strb	r2, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 80035b8:	681c      	ldr	r4, [r3, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035ba:	4a41      	ldr	r2, [pc, #260]	@ (80036c0 <HAL_TIM_ConfigClockSource+0x124>)
  tmpsmcr = htim->Instance->SMCR;
 80035bc:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035be:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 80035c0:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 80035c2:	680b      	ldr	r3, [r1, #0]
 80035c4:	2b60      	cmp	r3, #96	@ 0x60
 80035c6:	d04e      	beq.n	8003666 <HAL_TIM_ConfigClockSource+0xca>
 80035c8:	d82d      	bhi.n	8003626 <HAL_TIM_ConfigClockSource+0x8a>
 80035ca:	2b40      	cmp	r3, #64	@ 0x40
 80035cc:	d062      	beq.n	8003694 <HAL_TIM_ConfigClockSource+0xf8>
 80035ce:	d813      	bhi.n	80035f8 <HAL_TIM_ConfigClockSource+0x5c>
 80035d0:	2b20      	cmp	r3, #32
 80035d2:	d00b      	beq.n	80035ec <HAL_TIM_ConfigClockSource+0x50>
 80035d4:	d808      	bhi.n	80035e8 <HAL_TIM_ConfigClockSource+0x4c>
 80035d6:	2210      	movs	r2, #16
 80035d8:	0019      	movs	r1, r3
 80035da:	4391      	bics	r1, r2
 80035dc:	d006      	beq.n	80035ec <HAL_TIM_ConfigClockSource+0x50>
  htim->State = HAL_TIM_STATE_READY;
 80035de:	2301      	movs	r3, #1
 80035e0:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 80035e2:	2300      	movs	r3, #0
 80035e4:	702b      	strb	r3, [r5, #0]
}
 80035e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 80035e8:	2b30      	cmp	r3, #48	@ 0x30
 80035ea:	d1f8      	bne.n	80035de <HAL_TIM_ConfigClockSource+0x42>
  tmpsmcr = TIMx->SMCR;
 80035ec:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80035ee:	4935      	ldr	r1, [pc, #212]	@ (80036c4 <HAL_TIM_ConfigClockSource+0x128>)
 80035f0:	400a      	ands	r2, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035f2:	4313      	orrs	r3, r2
 80035f4:	2207      	movs	r2, #7
 80035f6:	e028      	b.n	800364a <HAL_TIM_ConfigClockSource+0xae>
  switch (sClockSourceConfig->ClockSource)
 80035f8:	2b50      	cmp	r3, #80	@ 0x50
 80035fa:	d1f0      	bne.n	80035de <HAL_TIM_ConfigClockSource+0x42>
                               sClockSourceConfig->ClockPolarity,
 80035fc:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80035fe:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8003600:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003602:	6a27      	ldr	r7, [r4, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003604:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003606:	4387      	bics	r7, r0
 8003608:	6227      	str	r7, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800360a:	27f0      	movs	r7, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 800360c:	69a0      	ldr	r0, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800360e:	43b8      	bics	r0, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003610:	4303      	orrs	r3, r0
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003612:	200a      	movs	r0, #10
 8003614:	4381      	bics	r1, r0
  tmpccer |= TIM_ICPolarity;
 8003616:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8003618:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 800361a:	6222      	str	r2, [r4, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 800361c:	4b29      	ldr	r3, [pc, #164]	@ (80036c4 <HAL_TIM_ConfigClockSource+0x128>)
  tmpsmcr = TIMx->SMCR;
 800361e:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003620:	401a      	ands	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003622:	2357      	movs	r3, #87	@ 0x57
 8003624:	e011      	b.n	800364a <HAL_TIM_ConfigClockSource+0xae>
  switch (sClockSourceConfig->ClockSource)
 8003626:	2280      	movs	r2, #128	@ 0x80
 8003628:	0152      	lsls	r2, r2, #5
 800362a:	4293      	cmp	r3, r2
 800362c:	d00f      	beq.n	800364e <HAL_TIM_ConfigClockSource+0xb2>
 800362e:	2280      	movs	r2, #128	@ 0x80
 8003630:	0192      	lsls	r2, r2, #6
 8003632:	4293      	cmp	r3, r2
 8003634:	d00d      	beq.n	8003652 <HAL_TIM_ConfigClockSource+0xb6>
 8003636:	2b70      	cmp	r3, #112	@ 0x70
 8003638:	d1d1      	bne.n	80035de <HAL_TIM_ConfigClockSource+0x42>
      TIM_ETR_SetConfig(htim->Instance,
 800363a:	68cb      	ldr	r3, [r1, #12]
 800363c:	684a      	ldr	r2, [r1, #4]
 800363e:	0020      	movs	r0, r4
 8003640:	6889      	ldr	r1, [r1, #8]
 8003642:	f7ff ff9f 	bl	8003584 <TIM_ETR_SetConfig>
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003646:	2377      	movs	r3, #119	@ 0x77
      tmpsmcr = htim->Instance->SMCR;
 8003648:	68a2      	ldr	r2, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800364a:	4313      	orrs	r3, r2
      htim->Instance->SMCR = tmpsmcr;
 800364c:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800364e:	2000      	movs	r0, #0
 8003650:	e7c5      	b.n	80035de <HAL_TIM_ConfigClockSource+0x42>
      TIM_ETR_SetConfig(htim->Instance,
 8003652:	68cb      	ldr	r3, [r1, #12]
 8003654:	684a      	ldr	r2, [r1, #4]
 8003656:	0020      	movs	r0, r4
 8003658:	6889      	ldr	r1, [r1, #8]
 800365a:	f7ff ff93 	bl	8003584 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800365e:	2380      	movs	r3, #128	@ 0x80
 8003660:	68a2      	ldr	r2, [r4, #8]
 8003662:	01db      	lsls	r3, r3, #7
 8003664:	e7f1      	b.n	800364a <HAL_TIM_ConfigClockSource+0xae>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003666:	2710      	movs	r7, #16
                               sClockSourceConfig->ClockPolarity,
 8003668:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800366a:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 800366c:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800366e:	6a20      	ldr	r0, [r4, #32]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003670:	0312      	lsls	r2, r2, #12
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003672:	43b8      	bics	r0, r7
 8003674:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003676:	69a0      	ldr	r0, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003678:	4f13      	ldr	r7, [pc, #76]	@ (80036c8 <HAL_TIM_ConfigClockSource+0x12c>)
  tmpccer |= (TIM_ICPolarity << 4U);
 800367a:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800367c:	4038      	ands	r0, r7
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800367e:	4302      	orrs	r2, r0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003680:	20a0      	movs	r0, #160	@ 0xa0
 8003682:	4381      	bics	r1, r0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003684:	430b      	orrs	r3, r1
  TIMx->CCMR1 = tmpccmr1 ;
 8003686:	61a2      	str	r2, [r4, #24]
  TIMx->CCER = tmpccer;
 8003688:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 800368a:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800368c:	4b0d      	ldr	r3, [pc, #52]	@ (80036c4 <HAL_TIM_ConfigClockSource+0x128>)
 800368e:	401a      	ands	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003690:	2367      	movs	r3, #103	@ 0x67
 8003692:	e7da      	b.n	800364a <HAL_TIM_ConfigClockSource+0xae>
                               sClockSourceConfig->ClockPolarity,
 8003694:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8003696:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8003698:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800369a:	6a27      	ldr	r7, [r4, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800369c:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800369e:	4387      	bics	r7, r0
 80036a0:	6227      	str	r7, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036a2:	27f0      	movs	r7, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 80036a4:	69a0      	ldr	r0, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036a6:	43b8      	bics	r0, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036a8:	4303      	orrs	r3, r0
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036aa:	200a      	movs	r0, #10
 80036ac:	4381      	bics	r1, r0
  tmpccer |= TIM_ICPolarity;
 80036ae:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80036b0:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 80036b2:	6222      	str	r2, [r4, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 80036b4:	4b03      	ldr	r3, [pc, #12]	@ (80036c4 <HAL_TIM_ConfigClockSource+0x128>)
  tmpsmcr = TIMx->SMCR;
 80036b6:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80036b8:	401a      	ands	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036ba:	2347      	movs	r3, #71	@ 0x47
 80036bc:	e7c5      	b.n	800364a <HAL_TIM_ConfigClockSource+0xae>
 80036be:	46c0      	nop			@ (mov r8, r8)
 80036c0:	ffce0088 	.word	0xffce0088
 80036c4:	ffcfff8f 	.word	0xffcfff8f
 80036c8:	ffff0fff 	.word	0xffff0fff

080036cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036ce:	0004      	movs	r4, r0
 80036d0:	2202      	movs	r2, #2
 80036d2:	343c      	adds	r4, #60	@ 0x3c
 80036d4:	7825      	ldrb	r5, [r4, #0]
{
 80036d6:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 80036d8:	0010      	movs	r0, r2
 80036da:	2d01      	cmp	r5, #1
 80036dc:	d023      	beq.n	8003726 <HAL_TIMEx_MasterConfigSynchronization+0x5a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036de:	001d      	movs	r5, r3
 80036e0:	353d      	adds	r5, #61	@ 0x3d
 80036e2:	702a      	strb	r2, [r5, #0]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036e4:	681a      	ldr	r2, [r3, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80036e6:	4e10      	ldr	r6, [pc, #64]	@ (8003728 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
  tmpcr2 = htim->Instance->CR2;
 80036e8:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 80036ea:	6890      	ldr	r0, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80036ec:	42b2      	cmp	r2, r6
 80036ee:	d103      	bne.n	80036f8 <HAL_TIMEx_MasterConfigSynchronization+0x2c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80036f0:	4f0e      	ldr	r7, [pc, #56]	@ (800372c <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 80036f2:	403b      	ands	r3, r7
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80036f4:	684f      	ldr	r7, [r1, #4]
 80036f6:	433b      	orrs	r3, r7
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036f8:	2770      	movs	r7, #112	@ 0x70
 80036fa:	43bb      	bics	r3, r7
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036fc:	680f      	ldr	r7, [r1, #0]
 80036fe:	433b      	orrs	r3, r7

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003700:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003702:	42b2      	cmp	r2, r6
 8003704:	d006      	beq.n	8003714 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8003706:	2380      	movs	r3, #128	@ 0x80
 8003708:	05db      	lsls	r3, r3, #23
 800370a:	429a      	cmp	r2, r3
 800370c:	d002      	beq.n	8003714 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 800370e:	4b08      	ldr	r3, [pc, #32]	@ (8003730 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8003710:	429a      	cmp	r2, r3
 8003712:	d104      	bne.n	800371e <HAL_TIMEx_MasterConfigSynchronization+0x52>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003714:	2380      	movs	r3, #128	@ 0x80
 8003716:	4398      	bics	r0, r3
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003718:	688b      	ldr	r3, [r1, #8]
 800371a:	4318      	orrs	r0, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800371c:	6090      	str	r0, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800371e:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8003720:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003722:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8003724:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8003726:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003728:	40012c00 	.word	0x40012c00
 800372c:	ff0fffff 	.word	0xff0fffff
 8003730:	40000400 	.word	0x40000400

08003734 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8003734:	4770      	bx	lr

08003736 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8003736:	4770      	bx	lr

08003738 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 8003738:	4770      	bx	lr
	...

0800373c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800373c:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800373e:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003742:	2201      	movs	r2, #1
 8003744:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003748:	6801      	ldr	r1, [r0, #0]
 800374a:	4d13      	ldr	r5, [pc, #76]	@ (8003798 <UART_EndRxTransfer+0x5c>)
 800374c:	680b      	ldr	r3, [r1, #0]
 800374e:	402b      	ands	r3, r5
 8003750:	600b      	str	r3, [r1, #0]
 8003752:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003756:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800375a:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800375e:	6802      	ldr	r2, [r0, #0]
 8003760:	4c0e      	ldr	r4, [pc, #56]	@ (800379c <UART_EndRxTransfer+0x60>)
 8003762:	6893      	ldr	r3, [r2, #8]
 8003764:	4023      	ands	r3, r4
 8003766:	6093      	str	r3, [r2, #8]
 8003768:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800376c:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800376e:	2b01      	cmp	r3, #1
 8003770:	d10a      	bne.n	8003788 <UART_EndRxTransfer+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003772:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003776:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800377a:	2410      	movs	r4, #16
 800377c:	6802      	ldr	r2, [r0, #0]
 800377e:	6813      	ldr	r3, [r2, #0]
 8003780:	43a3      	bics	r3, r4
 8003782:	6013      	str	r3, [r2, #0]
 8003784:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003788:	0003      	movs	r3, r0
 800378a:	2220      	movs	r2, #32
 800378c:	338c      	adds	r3, #140	@ 0x8c
 800378e:	601a      	str	r2, [r3, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003790:	2300      	movs	r3, #0
 8003792:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003794:	6743      	str	r3, [r0, #116]	@ 0x74
}
 8003796:	bd30      	pop	{r4, r5, pc}
 8003798:	fffffedf 	.word	0xfffffedf
 800379c:	effffffe 	.word	0xeffffffe

080037a0 <UART_TxISR_16BIT.part.0>:
  * @note   Function is called under interruption only, once
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
 80037a0:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037a2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037a6:	2201      	movs	r2, #1
 80037a8:	f382 8810 	msr	PRIMASK, r2
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
  {
    if (huart->TxXferCount == 0U)
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80037ac:	2580      	movs	r5, #128	@ 0x80
 80037ae:	6801      	ldr	r1, [r0, #0]
 80037b0:	680b      	ldr	r3, [r1, #0]
 80037b2:	43ab      	bics	r3, r5
 80037b4:	600b      	str	r3, [r1, #0]
 80037b6:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037ba:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037be:	f382 8810 	msr	PRIMASK, r2

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80037c2:	2340      	movs	r3, #64	@ 0x40
 80037c4:	6802      	ldr	r2, [r0, #0]
 80037c6:	6810      	ldr	r0, [r2, #0]
 80037c8:	4303      	orrs	r3, r0
 80037ca:	6013      	str	r3, [r2, #0]
 80037cc:	f381 8810 	msr	PRIMASK, r1
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80037d0:	bd30      	pop	{r4, r5, pc}

080037d2 <UART_TxISR_8BIT>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80037d2:	0003      	movs	r3, r0
 80037d4:	3388      	adds	r3, #136	@ 0x88
 80037d6:	681b      	ldr	r3, [r3, #0]
{
 80037d8:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80037da:	2b21      	cmp	r3, #33	@ 0x21
 80037dc:	d106      	bne.n	80037ec <UART_TxISR_8BIT+0x1a>
    if (huart->TxXferCount == 0U)
 80037de:	0002      	movs	r2, r0
 80037e0:	3256      	adds	r2, #86	@ 0x56
 80037e2:	8813      	ldrh	r3, [r2, #0]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d102      	bne.n	80037ee <UART_TxISR_8BIT+0x1c>
 80037e8:	f7ff ffda 	bl	80037a0 <UART_TxISR_16BIT.part.0>
}
 80037ec:	bd10      	pop	{r4, pc}
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80037ee:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80037f0:	6801      	ldr	r1, [r0, #0]
 80037f2:	781c      	ldrb	r4, [r3, #0]
      huart->pTxBuffPtr++;
 80037f4:	3301      	adds	r3, #1
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80037f6:	628c      	str	r4, [r1, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80037f8:	6503      	str	r3, [r0, #80]	@ 0x50
      huart->TxXferCount--;
 80037fa:	8813      	ldrh	r3, [r2, #0]
 80037fc:	3b01      	subs	r3, #1
 80037fe:	b29b      	uxth	r3, r3
 8003800:	8013      	strh	r3, [r2, #0]
}
 8003802:	e7f3      	b.n	80037ec <UART_TxISR_8BIT+0x1a>

08003804 <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003804:	0003      	movs	r3, r0
 8003806:	3388      	adds	r3, #136	@ 0x88
 8003808:	681b      	ldr	r3, [r3, #0]
{
 800380a:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800380c:	2b21      	cmp	r3, #33	@ 0x21
 800380e:	d106      	bne.n	800381e <UART_TxISR_16BIT+0x1a>
  {
    if (huart->TxXferCount == 0U)
 8003810:	0001      	movs	r1, r0
 8003812:	3156      	adds	r1, #86	@ 0x56
 8003814:	880b      	ldrh	r3, [r1, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d102      	bne.n	8003820 <UART_TxISR_16BIT+0x1c>
 800381a:	f7ff ffc1 	bl	80037a0 <UART_TxISR_16BIT.part.0>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800381e:	bd10      	pop	{r4, pc}
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003820:	6d02      	ldr	r2, [r0, #80]	@ 0x50
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003822:	6804      	ldr	r4, [r0, #0]
 8003824:	8813      	ldrh	r3, [r2, #0]
      huart->pTxBuffPtr += 2U;
 8003826:	3202      	adds	r2, #2
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003828:	05db      	lsls	r3, r3, #23
 800382a:	0ddb      	lsrs	r3, r3, #23
 800382c:	62a3      	str	r3, [r4, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800382e:	6502      	str	r2, [r0, #80]	@ 0x50
      huart->TxXferCount--;
 8003830:	880b      	ldrh	r3, [r1, #0]
 8003832:	3b01      	subs	r3, #1
 8003834:	b29b      	uxth	r3, r3
 8003836:	800b      	strh	r3, [r1, #0]
}
 8003838:	e7f1      	b.n	800381e <UART_TxISR_16BIT+0x1a>
	...

0800383c <UART_TxISR_8BIT_FIFOEN>:
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800383c:	0003      	movs	r3, r0
 800383e:	3388      	adds	r3, #136	@ 0x88
 8003840:	681b      	ldr	r3, [r3, #0]
{
 8003842:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003844:	2b21      	cmp	r3, #33	@ 0x21
 8003846:	d121      	bne.n	800388c <UART_TxISR_8BIT_FIFOEN+0x50>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003848:	0003      	movs	r3, r0
    {
      if (huart->TxXferCount == 0U)
 800384a:	0001      	movs	r1, r0
        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);

        break; /* force exit loop */
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800384c:	2480      	movs	r4, #128	@ 0x80
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800384e:	336a      	adds	r3, #106	@ 0x6a
 8003850:	881b      	ldrh	r3, [r3, #0]
      if (huart->TxXferCount == 0U)
 8003852:	3156      	adds	r1, #86	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003854:	2b00      	cmp	r3, #0
 8003856:	d019      	beq.n	800388c <UART_TxISR_8BIT_FIFOEN+0x50>
      if (huart->TxXferCount == 0U)
 8003858:	880a      	ldrh	r2, [r1, #0]
 800385a:	2a00      	cmp	r2, #0
 800385c:	d117      	bne.n	800388e <UART_TxISR_8BIT_FIFOEN+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800385e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003862:	3201      	adds	r2, #1
 8003864:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003868:	6801      	ldr	r1, [r0, #0]
 800386a:	4d11      	ldr	r5, [pc, #68]	@ (80038b0 <UART_TxISR_8BIT_FIFOEN+0x74>)
 800386c:	688b      	ldr	r3, [r1, #8]
 800386e:	402b      	ands	r3, r5
 8003870:	608b      	str	r3, [r1, #8]
 8003872:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003876:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800387a:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800387e:	2340      	movs	r3, #64	@ 0x40
 8003880:	6802      	ldr	r2, [r0, #0]
 8003882:	6810      	ldr	r0, [r2, #0]
 8003884:	4303      	orrs	r3, r0
 8003886:	6013      	str	r3, [r2, #0]
 8003888:	f381 8810 	msr	PRIMASK, r1
      {
        /* Nothing to do */
      }
    }
  }
}
 800388c:	bd70      	pop	{r4, r5, r6, pc}
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800388e:	6805      	ldr	r5, [r0, #0]
 8003890:	69ea      	ldr	r2, [r5, #28]
 8003892:	4222      	tst	r2, r4
 8003894:	d008      	beq.n	80038a8 <UART_TxISR_8BIT_FIFOEN+0x6c>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003896:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8003898:	7816      	ldrb	r6, [r2, #0]
        huart->pTxBuffPtr++;
 800389a:	3201      	adds	r2, #1
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800389c:	62ae      	str	r6, [r5, #40]	@ 0x28
        huart->pTxBuffPtr++;
 800389e:	6502      	str	r2, [r0, #80]	@ 0x50
        huart->TxXferCount--;
 80038a0:	880a      	ldrh	r2, [r1, #0]
 80038a2:	3a01      	subs	r2, #1
 80038a4:	b292      	uxth	r2, r2
 80038a6:	800a      	strh	r2, [r1, #0]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80038a8:	3b01      	subs	r3, #1
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	e7d2      	b.n	8003854 <UART_TxISR_8BIT_FIFOEN+0x18>
 80038ae:	46c0      	nop			@ (mov r8, r8)
 80038b0:	ff7fffff 	.word	0xff7fffff

080038b4 <UART_TxISR_16BIT_FIFOEN>:
{
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80038b4:	0003      	movs	r3, r0
 80038b6:	3388      	adds	r3, #136	@ 0x88
 80038b8:	681b      	ldr	r3, [r3, #0]
{
 80038ba:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80038bc:	2b21      	cmp	r3, #33	@ 0x21
 80038be:	d121      	bne.n	8003904 <UART_TxISR_16BIT_FIFOEN+0x50>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80038c0:	0003      	movs	r3, r0
    {
      if (huart->TxXferCount == 0U)
 80038c2:	0001      	movs	r1, r0
        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);

        break; /* force exit loop */
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80038c4:	2480      	movs	r4, #128	@ 0x80
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80038c6:	336a      	adds	r3, #106	@ 0x6a
 80038c8:	881b      	ldrh	r3, [r3, #0]
      if (huart->TxXferCount == 0U)
 80038ca:	3156      	adds	r1, #86	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d019      	beq.n	8003904 <UART_TxISR_16BIT_FIFOEN+0x50>
      if (huart->TxXferCount == 0U)
 80038d0:	880a      	ldrh	r2, [r1, #0]
 80038d2:	2a00      	cmp	r2, #0
 80038d4:	d117      	bne.n	8003906 <UART_TxISR_16BIT_FIFOEN+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038d6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038da:	3201      	adds	r2, #1
 80038dc:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80038e0:	6801      	ldr	r1, [r0, #0]
 80038e2:	4d12      	ldr	r5, [pc, #72]	@ (800392c <UART_TxISR_16BIT_FIFOEN+0x78>)
 80038e4:	688b      	ldr	r3, [r1, #8]
 80038e6:	402b      	ands	r3, r5
 80038e8:	608b      	str	r3, [r1, #8]
 80038ea:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038ee:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038f2:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80038f6:	2340      	movs	r3, #64	@ 0x40
 80038f8:	6802      	ldr	r2, [r0, #0]
 80038fa:	6810      	ldr	r0, [r2, #0]
 80038fc:	4303      	orrs	r3, r0
 80038fe:	6013      	str	r3, [r2, #0]
 8003900:	f381 8810 	msr	PRIMASK, r1
      {
        /* Nothing to do */
      }
    }
  }
}
 8003904:	bd70      	pop	{r4, r5, r6, pc}
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8003906:	6806      	ldr	r6, [r0, #0]
 8003908:	69f2      	ldr	r2, [r6, #28]
 800390a:	4222      	tst	r2, r4
 800390c:	d00a      	beq.n	8003924 <UART_TxISR_16BIT_FIFOEN+0x70>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800390e:	6d05      	ldr	r5, [r0, #80]	@ 0x50
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003910:	882a      	ldrh	r2, [r5, #0]
        huart->pTxBuffPtr += 2U;
 8003912:	3502      	adds	r5, #2
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003914:	05d2      	lsls	r2, r2, #23
 8003916:	0dd2      	lsrs	r2, r2, #23
 8003918:	62b2      	str	r2, [r6, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800391a:	6505      	str	r5, [r0, #80]	@ 0x50
        huart->TxXferCount--;
 800391c:	880a      	ldrh	r2, [r1, #0]
 800391e:	3a01      	subs	r2, #1
 8003920:	b292      	uxth	r2, r2
 8003922:	800a      	strh	r2, [r1, #0]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003924:	3b01      	subs	r3, #1
 8003926:	b29b      	uxth	r3, r3
 8003928:	e7d0      	b.n	80038cc <UART_TxISR_16BIT_FIFOEN+0x18>
 800392a:	46c0      	nop			@ (mov r8, r8)
 800392c:	ff7fffff 	.word	0xff7fffff

08003930 <HAL_UART_Transmit_IT>:
{
 8003930:	b530      	push	{r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 8003932:	0005      	movs	r5, r0
 8003934:	3588      	adds	r5, #136	@ 0x88
 8003936:	682c      	ldr	r4, [r5, #0]
{
 8003938:	0003      	movs	r3, r0
    return HAL_BUSY;
 800393a:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 800393c:	2c20      	cmp	r4, #32
 800393e:	d137      	bne.n	80039b0 <HAL_UART_Transmit_IT+0x80>
      return HAL_ERROR;
 8003940:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8003942:	2900      	cmp	r1, #0
 8003944:	d034      	beq.n	80039b0 <HAL_UART_Transmit_IT+0x80>
 8003946:	2a00      	cmp	r2, #0
 8003948:	d032      	beq.n	80039b0 <HAL_UART_Transmit_IT+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800394a:	2080      	movs	r0, #128	@ 0x80
 800394c:	689c      	ldr	r4, [r3, #8]
 800394e:	0140      	lsls	r0, r0, #5
 8003950:	4284      	cmp	r4, r0
 8003952:	d105      	bne.n	8003960 <HAL_UART_Transmit_IT+0x30>
 8003954:	6918      	ldr	r0, [r3, #16]
 8003956:	2800      	cmp	r0, #0
 8003958:	d102      	bne.n	8003960 <HAL_UART_Transmit_IT+0x30>
      return HAL_ERROR;
 800395a:	3001      	adds	r0, #1
      if ((((uint32_t)pData) & 1U) != 0U)
 800395c:	4201      	tst	r1, r0
 800395e:	d127      	bne.n	80039b0 <HAL_UART_Transmit_IT+0x80>
    huart->pTxBuffPtr  = pData;
 8003960:	6519      	str	r1, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8003962:	0019      	movs	r1, r3
 8003964:	3154      	adds	r1, #84	@ 0x54
 8003966:	800a      	strh	r2, [r1, #0]
    huart->TxXferCount = Size;
 8003968:	804a      	strh	r2, [r1, #2]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800396a:	001a      	movs	r2, r3
 800396c:	2100      	movs	r1, #0
 800396e:	3290      	adds	r2, #144	@ 0x90
 8003970:	6011      	str	r1, [r2, #0]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003972:	2221      	movs	r2, #33	@ 0x21
 8003974:	2180      	movs	r1, #128	@ 0x80
 8003976:	602a      	str	r2, [r5, #0]
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8003978:	2280      	movs	r2, #128	@ 0x80
 800397a:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 800397c:	0592      	lsls	r2, r2, #22
 800397e:	0149      	lsls	r1, r1, #5
 8003980:	4290      	cmp	r0, r2
 8003982:	d116      	bne.n	80039b2 <HAL_UART_Transmit_IT+0x82>
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8003984:	4a14      	ldr	r2, [pc, #80]	@ (80039d8 <HAL_UART_Transmit_IT+0xa8>)
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003986:	428c      	cmp	r4, r1
 8003988:	d103      	bne.n	8003992 <HAL_UART_Transmit_IT+0x62>
 800398a:	6919      	ldr	r1, [r3, #16]
 800398c:	2900      	cmp	r1, #0
 800398e:	d100      	bne.n	8003992 <HAL_UART_Transmit_IT+0x62>
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8003990:	4a12      	ldr	r2, [pc, #72]	@ (80039dc <HAL_UART_Transmit_IT+0xac>)
 8003992:	679a      	str	r2, [r3, #120]	@ 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003994:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003998:	2201      	movs	r2, #1
 800399a:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	2380      	movs	r3, #128	@ 0x80
 80039a2:	6890      	ldr	r0, [r2, #8]
 80039a4:	041b      	lsls	r3, r3, #16
 80039a6:	4303      	orrs	r3, r0
 80039a8:	6093      	str	r3, [r2, #8]
 80039aa:	f381 8810 	msr	PRIMASK, r1
    return HAL_OK;
 80039ae:	2000      	movs	r0, #0
}
 80039b0:	bd30      	pop	{r4, r5, pc}
        huart->TxISR = UART_TxISR_8BIT;
 80039b2:	4a0b      	ldr	r2, [pc, #44]	@ (80039e0 <HAL_UART_Transmit_IT+0xb0>)
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039b4:	428c      	cmp	r4, r1
 80039b6:	d103      	bne.n	80039c0 <HAL_UART_Transmit_IT+0x90>
 80039b8:	6919      	ldr	r1, [r3, #16]
 80039ba:	2900      	cmp	r1, #0
 80039bc:	d100      	bne.n	80039c0 <HAL_UART_Transmit_IT+0x90>
        huart->TxISR = UART_TxISR_16BIT;
 80039be:	4a09      	ldr	r2, [pc, #36]	@ (80039e4 <HAL_UART_Transmit_IT+0xb4>)
 80039c0:	679a      	str	r2, [r3, #120]	@ 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039c2:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039c6:	2201      	movs	r2, #1
 80039c8:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	2380      	movs	r3, #128	@ 0x80
 80039d0:	6810      	ldr	r0, [r2, #0]
 80039d2:	4303      	orrs	r3, r0
 80039d4:	6013      	str	r3, [r2, #0]
 80039d6:	e7e8      	b.n	80039aa <HAL_UART_Transmit_IT+0x7a>
 80039d8:	0800383d 	.word	0x0800383d
 80039dc:	080038b5 	.word	0x080038b5
 80039e0:	080037d3 	.word	0x080037d3
 80039e4:	08003805 	.word	0x08003805

080039e8 <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 80039e8:	4770      	bx	lr

080039ea <UART_DMAAbortOnError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80039ea:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxXferCount = 0U;
 80039ec:	2300      	movs	r3, #0
 80039ee:	0002      	movs	r2, r0
{
 80039f0:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 80039f2:	325e      	adds	r2, #94	@ 0x5e
 80039f4:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 80039f6:	3a08      	subs	r2, #8
 80039f8:	8013      	strh	r3, [r2, #0]
  HAL_UART_ErrorCallback(huart);
 80039fa:	f7ff fff5 	bl	80039e8 <HAL_UART_ErrorCallback>
}
 80039fe:	bd10      	pop	{r4, pc}

08003a00 <HAL_UART_AbortTransmitCpltCallback>:
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
 8003a00:	4770      	bx	lr
	...

08003a04 <HAL_UART_AbortTransmit_IT>:
{
 8003a04:	b570      	push	{r4, r5, r6, lr}
 8003a06:	0004      	movs	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a08:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a0c:	2101      	movs	r1, #1
 8003a0e:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TCIE | USART_CR1_TXEIE_TXFNFIE));
 8003a12:	25c0      	movs	r5, #192	@ 0xc0
 8003a14:	6822      	ldr	r2, [r4, #0]
 8003a16:	6813      	ldr	r3, [r2, #0]
 8003a18:	43ab      	bics	r3, r5
 8003a1a:	6013      	str	r3, [r2, #0]
 8003a1c:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a20:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a24:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003a28:	6822      	ldr	r2, [r4, #0]
 8003a2a:	4d20      	ldr	r5, [pc, #128]	@ (8003aac <HAL_UART_AbortTransmit_IT+0xa8>)
 8003a2c:	6893      	ldr	r3, [r2, #8]
 8003a2e:	402b      	ands	r3, r5
 8003a30:	6093      	str	r3, [r2, #8]
 8003a32:	f380 8810 	msr	PRIMASK, r0
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8003a36:	6823      	ldr	r3, [r4, #0]
 8003a38:	2280      	movs	r2, #128	@ 0x80
 8003a3a:	689d      	ldr	r5, [r3, #8]
 8003a3c:	0028      	movs	r0, r5
 8003a3e:	4010      	ands	r0, r2
 8003a40:	4215      	tst	r5, r2
 8003a42:	d022      	beq.n	8003a8a <HAL_UART_AbortTransmit_IT+0x86>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a44:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a48:	f381 8810 	msr	PRIMASK, r1
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003a4c:	6821      	ldr	r1, [r4, #0]
 8003a4e:	688b      	ldr	r3, [r1, #8]
 8003a50:	4393      	bics	r3, r2
 8003a52:	608b      	str	r3, [r1, #8]
 8003a54:	f380 8810 	msr	PRIMASK, r0
    if (huart->hdmatx != NULL)
 8003a58:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8003a5a:	2800      	cmp	r0, #0
 8003a5c:	d00a      	beq.n	8003a74 <HAL_UART_AbortTransmit_IT+0x70>
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 8003a5e:	4b14      	ldr	r3, [pc, #80]	@ (8003ab0 <HAL_UART_AbortTransmit_IT+0xac>)
 8003a60:	6383      	str	r3, [r0, #56]	@ 0x38
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8003a62:	f7fe fb9d 	bl	80021a0 <HAL_DMA_Abort_IT>
 8003a66:	2800      	cmp	r0, #0
 8003a68:	d002      	beq.n	8003a70 <HAL_UART_AbortTransmit_IT+0x6c>
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 8003a6a:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8003a6c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8003a6e:	4798      	blx	r3
}
 8003a70:	2000      	movs	r0, #0
 8003a72:	bd70      	pop	{r4, r5, r6, pc}
      huart->TxXferCount = 0U;
 8003a74:	0023      	movs	r3, r4
 8003a76:	3356      	adds	r3, #86	@ 0x56
 8003a78:	8018      	strh	r0, [r3, #0]
      huart->TxISR = NULL;
 8003a7a:	67a0      	str	r0, [r4, #120]	@ 0x78
      huart->gState = HAL_UART_STATE_READY;
 8003a7c:	3332      	adds	r3, #50	@ 0x32
    huart->gState = HAL_UART_STATE_READY;
 8003a7e:	2220      	movs	r2, #32
    HAL_UART_AbortTransmitCpltCallback(huart);
 8003a80:	0020      	movs	r0, r4
    huart->gState = HAL_UART_STATE_READY;
 8003a82:	601a      	str	r2, [r3, #0]
    HAL_UART_AbortTransmitCpltCallback(huart);
 8003a84:	f7ff ffbc 	bl	8003a00 <HAL_UART_AbortTransmitCpltCallback>
 8003a88:	e7f2      	b.n	8003a70 <HAL_UART_AbortTransmit_IT+0x6c>
    huart->TxXferCount = 0U;
 8003a8a:	0022      	movs	r2, r4
 8003a8c:	3256      	adds	r2, #86	@ 0x56
 8003a8e:	8010      	strh	r0, [r2, #0]
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8003a90:	2280      	movs	r2, #128	@ 0x80
 8003a92:	6e61      	ldr	r1, [r4, #100]	@ 0x64
    huart->TxISR = NULL;
 8003a94:	67a0      	str	r0, [r4, #120]	@ 0x78
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8003a96:	0592      	lsls	r2, r2, #22
 8003a98:	4291      	cmp	r1, r2
 8003a9a:	d103      	bne.n	8003aa4 <HAL_UART_AbortTransmit_IT+0xa0>
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8003a9c:	2210      	movs	r2, #16
 8003a9e:	6999      	ldr	r1, [r3, #24]
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	619a      	str	r2, [r3, #24]
    huart->gState = HAL_UART_STATE_READY;
 8003aa4:	0023      	movs	r3, r4
 8003aa6:	3388      	adds	r3, #136	@ 0x88
 8003aa8:	e7e9      	b.n	8003a7e <HAL_UART_AbortTransmit_IT+0x7a>
 8003aaa:	46c0      	nop			@ (mov r8, r8)
 8003aac:	ff7fffff 	.word	0xff7fffff
 8003ab0:	08003ab5 	.word	0x08003ab5

08003ab4 <UART_DMATxOnlyAbortCallback>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003ab4:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->TxXferCount = 0U;
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	0003      	movs	r3, r0
 8003aba:	3356      	adds	r3, #86	@ 0x56
{
 8003abc:	b510      	push	{r4, lr}
  huart->TxXferCount = 0U;
 8003abe:	801a      	strh	r2, [r3, #0]
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8003ac0:	2380      	movs	r3, #128	@ 0x80
 8003ac2:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 8003ac4:	059b      	lsls	r3, r3, #22
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d104      	bne.n	8003ad4 <UART_DMATxOnlyAbortCallback+0x20>
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8003aca:	2310      	movs	r3, #16
 8003acc:	6802      	ldr	r2, [r0, #0]
 8003ace:	6991      	ldr	r1, [r2, #24]
 8003ad0:	430b      	orrs	r3, r1
 8003ad2:	6193      	str	r3, [r2, #24]
  huart->gState = HAL_UART_STATE_READY;
 8003ad4:	0003      	movs	r3, r0
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	3388      	adds	r3, #136	@ 0x88
 8003ada:	601a      	str	r2, [r3, #0]
  HAL_UART_AbortTransmitCpltCallback(huart);
 8003adc:	f7ff ff90 	bl	8003a00 <HAL_UART_AbortTransmitCpltCallback>
}
 8003ae0:	bd10      	pop	{r4, pc}

08003ae2 <HAL_UART_AbortReceiveCpltCallback>:
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
 8003ae2:	4770      	bx	lr

08003ae4 <HAL_UART_AbortReceive_IT>:
{
 8003ae4:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ae6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aea:	2201      	movs	r2, #1
 8003aec:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8003af0:	6801      	ldr	r1, [r0, #0]
 8003af2:	4d2d      	ldr	r5, [pc, #180]	@ (8003ba8 <HAL_UART_AbortReceive_IT+0xc4>)
 8003af4:	680b      	ldr	r3, [r1, #0]
 8003af6:	402b      	ands	r3, r5
 8003af8:	600b      	str	r3, [r1, #0]
 8003afa:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003afe:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b02:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003b06:	6802      	ldr	r2, [r0, #0]
 8003b08:	4c28      	ldr	r4, [pc, #160]	@ (8003bac <HAL_UART_AbortReceive_IT+0xc8>)
 8003b0a:	6893      	ldr	r3, [r2, #8]
 8003b0c:	4023      	ands	r3, r4
 8003b0e:	6093      	str	r3, [r2, #8]
 8003b10:	f381 8810 	msr	PRIMASK, r1
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b14:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d10a      	bne.n	8003b30 <HAL_UART_AbortReceive_IT+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b1a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b1e:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8003b22:	2410      	movs	r4, #16
 8003b24:	6802      	ldr	r2, [r0, #0]
 8003b26:	6813      	ldr	r3, [r2, #0]
 8003b28:	43a3      	bics	r3, r4
 8003b2a:	6013      	str	r3, [r2, #0]
 8003b2c:	f381 8810 	msr	PRIMASK, r1
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b30:	6801      	ldr	r1, [r0, #0]
 8003b32:	2240      	movs	r2, #64	@ 0x40
 8003b34:	688c      	ldr	r4, [r1, #8]
 8003b36:	0023      	movs	r3, r4
 8003b38:	4013      	ands	r3, r2
 8003b3a:	4214      	tst	r4, r2
 8003b3c:	d02d      	beq.n	8003b9a <HAL_UART_AbortReceive_IT+0xb6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b3e:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b42:	2301      	movs	r3, #1
 8003b44:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b48:	0004      	movs	r4, r0
 8003b4a:	cc02      	ldmia	r4!, {r1}
 8003b4c:	688b      	ldr	r3, [r1, #8]
 8003b4e:	4393      	bics	r3, r2
 8003b50:	608b      	str	r3, [r1, #8]
 8003b52:	f385 8810 	msr	PRIMASK, r5
    if (huart->hdmarx != NULL)
 8003b56:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00b      	beq.n	8003b74 <HAL_UART_AbortReceive_IT+0x90>
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8003b5c:	4a14      	ldr	r2, [pc, #80]	@ (8003bb0 <HAL_UART_AbortReceive_IT+0xcc>)
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b5e:	0018      	movs	r0, r3
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8003b60:	639a      	str	r2, [r3, #56]	@ 0x38
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b62:	f7fe fb1d 	bl	80021a0 <HAL_DMA_Abort_IT>
 8003b66:	2800      	cmp	r0, #0
 8003b68:	d002      	beq.n	8003b70 <HAL_UART_AbortReceive_IT+0x8c>
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b6a:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8003b6c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8003b6e:	4798      	blx	r3
}
 8003b70:	2000      	movs	r0, #0
 8003b72:	bd70      	pop	{r4, r5, r6, pc}
      huart->RxXferCount = 0U;
 8003b74:	0002      	movs	r2, r0
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8003b76:	210f      	movs	r1, #15
      huart->RxXferCount = 0U;
 8003b78:	325e      	adds	r2, #94	@ 0x5e
 8003b7a:	8013      	strh	r3, [r2, #0]
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8003b7c:	6802      	ldr	r2, [r0, #0]
      huart->pRxBuffPtr = NULL;
 8003b7e:	6583      	str	r3, [r0, #88]	@ 0x58
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8003b80:	6211      	str	r1, [r2, #32]
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003b82:	6994      	ldr	r4, [r2, #24]
 8003b84:	3907      	subs	r1, #7
 8003b86:	4321      	orrs	r1, r4
 8003b88:	6191      	str	r1, [r2, #24]
    huart->RxState = HAL_UART_STATE_READY;
 8003b8a:	0002      	movs	r2, r0
 8003b8c:	2120      	movs	r1, #32
 8003b8e:	328c      	adds	r2, #140	@ 0x8c
 8003b90:	6011      	str	r1, [r2, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b92:	66c3      	str	r3, [r0, #108]	@ 0x6c
    HAL_UART_AbortReceiveCpltCallback(huart);
 8003b94:	f7ff ffa5 	bl	8003ae2 <HAL_UART_AbortReceiveCpltCallback>
 8003b98:	e7ea      	b.n	8003b70 <HAL_UART_AbortReceive_IT+0x8c>
    huart->RxXferCount = 0U;
 8003b9a:	0002      	movs	r2, r0
 8003b9c:	325e      	adds	r2, #94	@ 0x5e
 8003b9e:	8013      	strh	r3, [r2, #0]
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8003ba0:	220f      	movs	r2, #15
    huart->pRxBuffPtr = NULL;
 8003ba2:	6583      	str	r3, [r0, #88]	@ 0x58
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8003ba4:	620a      	str	r2, [r1, #32]
 8003ba6:	e7f0      	b.n	8003b8a <HAL_UART_AbortReceive_IT+0xa6>
 8003ba8:	fffffedf 	.word	0xfffffedf
 8003bac:	effffffe 	.word	0xeffffffe
 8003bb0:	08003bb5 	.word	0x08003bb5

08003bb4 <UART_DMARxOnlyAbortCallback>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bb4:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxXferCount = 0U;
 8003bb6:	2100      	movs	r1, #0
 8003bb8:	0003      	movs	r3, r0
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8003bba:	220f      	movs	r2, #15
  huart->RxXferCount = 0U;
 8003bbc:	335e      	adds	r3, #94	@ 0x5e
{
 8003bbe:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8003bc0:	8019      	strh	r1, [r3, #0]
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8003bc2:	6803      	ldr	r3, [r0, #0]
 8003bc4:	621a      	str	r2, [r3, #32]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003bc6:	699c      	ldr	r4, [r3, #24]
 8003bc8:	3a07      	subs	r2, #7
 8003bca:	4322      	orrs	r2, r4
 8003bcc:	619a      	str	r2, [r3, #24]
  huart->RxState = HAL_UART_STATE_READY;
 8003bce:	0003      	movs	r3, r0
 8003bd0:	2220      	movs	r2, #32
 8003bd2:	338c      	adds	r3, #140	@ 0x8c
 8003bd4:	601a      	str	r2, [r3, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bd6:	66c1      	str	r1, [r0, #108]	@ 0x6c
  HAL_UART_AbortReceiveCpltCallback(huart);
 8003bd8:	f7ff ff83 	bl	8003ae2 <HAL_UART_AbortReceiveCpltCallback>
}
 8003bdc:	bd10      	pop	{r4, pc}

08003bde <HAL_UARTEx_RxEventCallback>:
}
 8003bde:	4770      	bx	lr

08003be0 <HAL_UART_IRQHandler>:
{
 8003be0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003be2:	6801      	ldr	r1, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003be4:	4dc1      	ldr	r5, [pc, #772]	@ (8003eec <HAL_UART_IRQHandler+0x30c>)
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003be6:	69cb      	ldr	r3, [r1, #28]
{
 8003be8:	0004      	movs	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003bea:	680a      	ldr	r2, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003bec:	6888      	ldr	r0, [r1, #8]
  if (errorflags == 0U)
 8003bee:	422b      	tst	r3, r5
 8003bf0:	d110      	bne.n	8003c14 <HAL_UART_IRQHandler+0x34>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003bf2:	2520      	movs	r5, #32
 8003bf4:	422b      	tst	r3, r5
 8003bf6:	d100      	bne.n	8003bfa <HAL_UART_IRQHandler+0x1a>
 8003bf8:	e09b      	b.n	8003d32 <HAL_UART_IRQHandler+0x152>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003bfa:	2680      	movs	r6, #128	@ 0x80
 8003bfc:	0576      	lsls	r6, r6, #21
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003bfe:	4015      	ands	r5, r2
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003c00:	4006      	ands	r6, r0
 8003c02:	4335      	orrs	r5, r6
 8003c04:	d100      	bne.n	8003c08 <HAL_UART_IRQHandler+0x28>
 8003c06:	e094      	b.n	8003d32 <HAL_UART_IRQHandler+0x152>
      if (huart->RxISR != NULL)
 8003c08:	6f63      	ldr	r3, [r4, #116]	@ 0x74
      huart->TxISR(huart);
 8003c0a:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d000      	beq.n	8003c12 <HAL_UART_IRQHandler+0x32>
 8003c10:	e085      	b.n	8003d1e <HAL_UART_IRQHandler+0x13e>
 8003c12:	e085      	b.n	8003d20 <HAL_UART_IRQHandler+0x140>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003c14:	4db6      	ldr	r5, [pc, #728]	@ (8003ef0 <HAL_UART_IRQHandler+0x310>)
 8003c16:	4005      	ands	r5, r0
 8003c18:	9500      	str	r5, [sp, #0]
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003c1a:	4db6      	ldr	r5, [pc, #728]	@ (8003ef4 <HAL_UART_IRQHandler+0x314>)
 8003c1c:	9e00      	ldr	r6, [sp, #0]
 8003c1e:	4015      	ands	r5, r2
 8003c20:	4335      	orrs	r5, r6
 8003c22:	d100      	bne.n	8003c26 <HAL_UART_IRQHandler+0x46>
 8003c24:	e085      	b.n	8003d32 <HAL_UART_IRQHandler+0x152>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003c26:	0025      	movs	r5, r4
 8003c28:	2601      	movs	r6, #1
 8003c2a:	3590      	adds	r5, #144	@ 0x90
 8003c2c:	4233      	tst	r3, r6
 8003c2e:	d005      	beq.n	8003c3c <HAL_UART_IRQHandler+0x5c>
 8003c30:	05d7      	lsls	r7, r2, #23
 8003c32:	d503      	bpl.n	8003c3c <HAL_UART_IRQHandler+0x5c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003c34:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c36:	682f      	ldr	r7, [r5, #0]
 8003c38:	433e      	orrs	r6, r7
 8003c3a:	602e      	str	r6, [r5, #0]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c3c:	2602      	movs	r6, #2
 8003c3e:	4233      	tst	r3, r6
 8003c40:	d00c      	beq.n	8003c5c <HAL_UART_IRQHandler+0x7c>
 8003c42:	07c7      	lsls	r7, r0, #31
 8003c44:	d50a      	bpl.n	8003c5c <HAL_UART_IRQHandler+0x7c>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c46:	0027      	movs	r7, r4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003c48:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c4a:	3790      	adds	r7, #144	@ 0x90
 8003c4c:	683e      	ldr	r6, [r7, #0]
 8003c4e:	9701      	str	r7, [sp, #4]
 8003c50:	46b4      	mov	ip, r6
 8003c52:	2604      	movs	r6, #4
 8003c54:	4667      	mov	r7, ip
 8003c56:	433e      	orrs	r6, r7
 8003c58:	9f01      	ldr	r7, [sp, #4]
 8003c5a:	603e      	str	r6, [r7, #0]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c5c:	2604      	movs	r6, #4
 8003c5e:	4233      	tst	r3, r6
 8003c60:	d00c      	beq.n	8003c7c <HAL_UART_IRQHandler+0x9c>
 8003c62:	07c7      	lsls	r7, r0, #31
 8003c64:	d50a      	bpl.n	8003c7c <HAL_UART_IRQHandler+0x9c>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c66:	0027      	movs	r7, r4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003c68:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c6a:	3790      	adds	r7, #144	@ 0x90
 8003c6c:	683e      	ldr	r6, [r7, #0]
 8003c6e:	9701      	str	r7, [sp, #4]
 8003c70:	46b4      	mov	ip, r6
 8003c72:	2602      	movs	r6, #2
 8003c74:	4667      	mov	r7, ip
 8003c76:	433e      	orrs	r6, r7
 8003c78:	9f01      	ldr	r7, [sp, #4]
 8003c7a:	603e      	str	r6, [r7, #0]
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003c7c:	2608      	movs	r6, #8
 8003c7e:	46b4      	mov	ip, r6
 8003c80:	4233      	tst	r3, r6
 8003c82:	d009      	beq.n	8003c98 <HAL_UART_IRQHandler+0xb8>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003c84:	2720      	movs	r7, #32
 8003c86:	9e00      	ldr	r6, [sp, #0]
 8003c88:	4017      	ands	r7, r2
 8003c8a:	4337      	orrs	r7, r6
 8003c8c:	d004      	beq.n	8003c98 <HAL_UART_IRQHandler+0xb8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c8e:	4666      	mov	r6, ip
 8003c90:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c92:	682f      	ldr	r7, [r5, #0]
 8003c94:	433e      	orrs	r6, r7
 8003c96:	602e      	str	r6, [r5, #0]
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003c98:	2680      	movs	r6, #128	@ 0x80
 8003c9a:	0136      	lsls	r6, r6, #4
 8003c9c:	4233      	tst	r3, r6
 8003c9e:	d006      	beq.n	8003cae <HAL_UART_IRQHandler+0xce>
 8003ca0:	0157      	lsls	r7, r2, #5
 8003ca2:	d504      	bpl.n	8003cae <HAL_UART_IRQHandler+0xce>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ca4:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003ca6:	2120      	movs	r1, #32
 8003ca8:	682e      	ldr	r6, [r5, #0]
 8003caa:	4331      	orrs	r1, r6
 8003cac:	6029      	str	r1, [r5, #0]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003cae:	6829      	ldr	r1, [r5, #0]
 8003cb0:	2900      	cmp	r1, #0
 8003cb2:	d035      	beq.n	8003d20 <HAL_UART_IRQHandler+0x140>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003cb4:	2120      	movs	r1, #32
 8003cb6:	420b      	tst	r3, r1
 8003cb8:	d00a      	beq.n	8003cd0 <HAL_UART_IRQHandler+0xf0>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003cba:	2380      	movs	r3, #128	@ 0x80
 8003cbc:	055b      	lsls	r3, r3, #21
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003cbe:	4011      	ands	r1, r2
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003cc0:	4003      	ands	r3, r0
 8003cc2:	4319      	orrs	r1, r3
 8003cc4:	d004      	beq.n	8003cd0 <HAL_UART_IRQHandler+0xf0>
        if (huart->RxISR != NULL)
 8003cc6:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d001      	beq.n	8003cd0 <HAL_UART_IRQHandler+0xf0>
          huart->RxISR(huart);
 8003ccc:	0020      	movs	r0, r4
 8003cce:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003cd0:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 8003cd2:	682b      	ldr	r3, [r5, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003cd4:	2740      	movs	r7, #64	@ 0x40
 8003cd6:	6896      	ldr	r6, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003cd8:	2228      	movs	r2, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003cda:	403e      	ands	r6, r7
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003cdc:	4013      	ands	r3, r2
        UART_EndRxTransfer(huart);
 8003cde:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ce0:	431e      	orrs	r6, r3
 8003ce2:	d022      	beq.n	8003d2a <HAL_UART_IRQHandler+0x14a>
        UART_EndRxTransfer(huart);
 8003ce4:	f7ff fd2a 	bl	800373c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ce8:	6823      	ldr	r3, [r4, #0]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	423b      	tst	r3, r7
 8003cee:	d018      	beq.n	8003d22 <HAL_UART_IRQHandler+0x142>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cf0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cfa:	0025      	movs	r5, r4
 8003cfc:	cd04      	ldmia	r5!, {r2}
 8003cfe:	6893      	ldr	r3, [r2, #8]
 8003d00:	43bb      	bics	r3, r7
 8003d02:	6093      	str	r3, [r2, #8]
 8003d04:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 8003d08:	6fe8      	ldr	r0, [r5, #124]	@ 0x7c
 8003d0a:	2800      	cmp	r0, #0
 8003d0c:	d009      	beq.n	8003d22 <HAL_UART_IRQHandler+0x142>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d0e:	4b7a      	ldr	r3, [pc, #488]	@ (8003ef8 <HAL_UART_IRQHandler+0x318>)
 8003d10:	6383      	str	r3, [r0, #56]	@ 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d12:	f7fe fa45 	bl	80021a0 <HAL_DMA_Abort_IT>
 8003d16:	2800      	cmp	r0, #0
 8003d18:	d002      	beq.n	8003d20 <HAL_UART_IRQHandler+0x140>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d1a:	6fe8      	ldr	r0, [r5, #124]	@ 0x7c
 8003d1c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8003d1e:	4798      	blx	r3
}
 8003d20:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 8003d22:	0020      	movs	r0, r4
 8003d24:	f7ff fe60 	bl	80039e8 <HAL_UART_ErrorCallback>
 8003d28:	e7fa      	b.n	8003d20 <HAL_UART_IRQHandler+0x140>
        HAL_UART_ErrorCallback(huart);
 8003d2a:	f7ff fe5d 	bl	80039e8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d2e:	602e      	str	r6, [r5, #0]
 8003d30:	e7f6      	b.n	8003d20 <HAL_UART_IRQHandler+0x140>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d32:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
 8003d34:	2d01      	cmp	r5, #1
 8003d36:	d000      	beq.n	8003d3a <HAL_UART_IRQHandler+0x15a>
 8003d38:	e09f      	b.n	8003e7a <HAL_UART_IRQHandler+0x29a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003d3a:	2610      	movs	r6, #16
 8003d3c:	4233      	tst	r3, r6
 8003d3e:	d100      	bne.n	8003d42 <HAL_UART_IRQHandler+0x162>
 8003d40:	e09b      	b.n	8003e7a <HAL_UART_IRQHandler+0x29a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003d42:	4232      	tst	r2, r6
 8003d44:	d100      	bne.n	8003d48 <HAL_UART_IRQHandler+0x168>
 8003d46:	e098      	b.n	8003e7a <HAL_UART_IRQHandler+0x29a>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d48:	620e      	str	r6, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d4a:	6889      	ldr	r1, [r1, #8]
 8003d4c:	2340      	movs	r3, #64	@ 0x40
 8003d4e:	000a      	movs	r2, r1
 8003d50:	401a      	ands	r2, r3
 8003d52:	4219      	tst	r1, r3
 8003d54:	d057      	beq.n	8003e06 <HAL_UART_IRQHandler+0x226>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d56:	1d21      	adds	r1, r4, #4
 8003d58:	6fca      	ldr	r2, [r1, #124]	@ 0x7c
 8003d5a:	6810      	ldr	r0, [r2, #0]
 8003d5c:	6842      	ldr	r2, [r0, #4]
 8003d5e:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8003d60:	2a00      	cmp	r2, #0
 8003d62:	d0dd      	beq.n	8003d20 <HAL_UART_IRQHandler+0x140>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d64:	0027      	movs	r7, r4
 8003d66:	375c      	adds	r7, #92	@ 0x5c
 8003d68:	883f      	ldrh	r7, [r7, #0]
 8003d6a:	4297      	cmp	r7, r2
 8003d6c:	d9d8      	bls.n	8003d20 <HAL_UART_IRQHandler+0x140>
        huart->RxXferCount = nb_remaining_rx_data;
 8003d6e:	0027      	movs	r7, r4
 8003d70:	375e      	adds	r7, #94	@ 0x5e
 8003d72:	803a      	strh	r2, [r7, #0]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003d74:	6802      	ldr	r2, [r0, #0]
 8003d76:	2020      	movs	r0, #32
 8003d78:	4684      	mov	ip, r0
 8003d7a:	4010      	ands	r0, r2
 8003d7c:	9000      	str	r0, [sp, #0]
 8003d7e:	4660      	mov	r0, ip
 8003d80:	4202      	tst	r2, r0
 8003d82:	d132      	bne.n	8003dea <HAL_UART_IRQHandler+0x20a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d84:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d88:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d8c:	6820      	ldr	r0, [r4, #0]
 8003d8e:	4e5b      	ldr	r6, [pc, #364]	@ (8003efc <HAL_UART_IRQHandler+0x31c>)
 8003d90:	6802      	ldr	r2, [r0, #0]
 8003d92:	4032      	ands	r2, r6
 8003d94:	6002      	str	r2, [r0, #0]
 8003d96:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d9a:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d9e:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003da2:	6820      	ldr	r0, [r4, #0]
 8003da4:	6882      	ldr	r2, [r0, #8]
 8003da6:	43aa      	bics	r2, r5
 8003da8:	6082      	str	r2, [r0, #8]
 8003daa:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dae:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003db2:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003db6:	6820      	ldr	r0, [r4, #0]
 8003db8:	6882      	ldr	r2, [r0, #8]
 8003dba:	439a      	bics	r2, r3
 8003dbc:	6082      	str	r2, [r0, #8]
 8003dbe:	f387 8810 	msr	PRIMASK, r7
          huart->RxState = HAL_UART_STATE_READY;
 8003dc2:	0023      	movs	r3, r4
 8003dc4:	4662      	mov	r2, ip
 8003dc6:	338c      	adds	r3, #140	@ 0x8c
 8003dc8:	601a      	str	r2, [r3, #0]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dca:	9b00      	ldr	r3, [sp, #0]
 8003dcc:	66e3      	str	r3, [r4, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dce:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dd2:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dd6:	6822      	ldr	r2, [r4, #0]
 8003dd8:	350f      	adds	r5, #15
 8003dda:	6813      	ldr	r3, [r2, #0]
 8003ddc:	43ab      	bics	r3, r5
 8003dde:	6013      	str	r3, [r2, #0]
 8003de0:	f380 8810 	msr	PRIMASK, r0
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003de4:	6fc8      	ldr	r0, [r1, #124]	@ 0x7c
 8003de6:	f7fe f9a1 	bl	800212c <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003dea:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003dec:	0022      	movs	r2, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003dee:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003df0:	0023      	movs	r3, r4
 8003df2:	325c      	adds	r2, #92	@ 0x5c
 8003df4:	335e      	adds	r3, #94	@ 0x5e
 8003df6:	881b      	ldrh	r3, [r3, #0]
 8003df8:	8811      	ldrh	r1, [r2, #0]
 8003dfa:	1ac9      	subs	r1, r1, r3
 8003dfc:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003dfe:	0020      	movs	r0, r4
 8003e00:	f7ff feed 	bl	8003bde <HAL_UARTEx_RxEventCallback>
 8003e04:	e78c      	b.n	8003d20 <HAL_UART_IRQHandler+0x140>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e06:	0023      	movs	r3, r4
 8003e08:	0020      	movs	r0, r4
 8003e0a:	335c      	adds	r3, #92	@ 0x5c
 8003e0c:	305e      	adds	r0, #94	@ 0x5e
 8003e0e:	8819      	ldrh	r1, [r3, #0]
 8003e10:	8803      	ldrh	r3, [r0, #0]
      if ((huart->RxXferCount > 0U)
 8003e12:	8800      	ldrh	r0, [r0, #0]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e14:	b29b      	uxth	r3, r3
      if ((huart->RxXferCount > 0U)
 8003e16:	2800      	cmp	r0, #0
 8003e18:	d100      	bne.n	8003e1c <HAL_UART_IRQHandler+0x23c>
 8003e1a:	e781      	b.n	8003d20 <HAL_UART_IRQHandler+0x140>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e1c:	1ac9      	subs	r1, r1, r3
 8003e1e:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8003e20:	2900      	cmp	r1, #0
 8003e22:	d100      	bne.n	8003e26 <HAL_UART_IRQHandler+0x246>
 8003e24:	e77c      	b.n	8003d20 <HAL_UART_IRQHandler+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e26:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e2a:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003e2e:	6820      	ldr	r0, [r4, #0]
 8003e30:	4e33      	ldr	r6, [pc, #204]	@ (8003f00 <HAL_UART_IRQHandler+0x320>)
 8003e32:	6803      	ldr	r3, [r0, #0]
 8003e34:	4033      	ands	r3, r6
 8003e36:	6003      	str	r3, [r0, #0]
 8003e38:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e3c:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e40:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003e44:	6820      	ldr	r0, [r4, #0]
 8003e46:	4e2f      	ldr	r6, [pc, #188]	@ (8003f04 <HAL_UART_IRQHandler+0x324>)
 8003e48:	6883      	ldr	r3, [r0, #8]
 8003e4a:	4033      	ands	r3, r6
 8003e4c:	6083      	str	r3, [r0, #8]
 8003e4e:	f387 8810 	msr	PRIMASK, r7
        huart->RxState = HAL_UART_STATE_READY;
 8003e52:	0023      	movs	r3, r4
 8003e54:	2020      	movs	r0, #32
 8003e56:	338c      	adds	r3, #140	@ 0x8c
 8003e58:	6018      	str	r0, [r3, #0]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e5a:	66e2      	str	r2, [r4, #108]	@ 0x6c
        huart->RxISR = NULL;
 8003e5c:	6762      	str	r2, [r4, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e5e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e62:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e66:	2510      	movs	r5, #16
 8003e68:	6822      	ldr	r2, [r4, #0]
 8003e6a:	6813      	ldr	r3, [r2, #0]
 8003e6c:	43ab      	bics	r3, r5
 8003e6e:	6013      	str	r3, [r2, #0]
 8003e70:	f380 8810 	msr	PRIMASK, r0
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e74:	2302      	movs	r3, #2
 8003e76:	6723      	str	r3, [r4, #112]	@ 0x70
 8003e78:	e7c1      	b.n	8003dfe <HAL_UART_IRQHandler+0x21e>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003e7a:	2580      	movs	r5, #128	@ 0x80
 8003e7c:	036d      	lsls	r5, r5, #13
 8003e7e:	422b      	tst	r3, r5
 8003e80:	d006      	beq.n	8003e90 <HAL_UART_IRQHandler+0x2b0>
 8003e82:	0246      	lsls	r6, r0, #9
 8003e84:	d504      	bpl.n	8003e90 <HAL_UART_IRQHandler+0x2b0>
    HAL_UARTEx_WakeupCallback(huart);
 8003e86:	0020      	movs	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003e88:	620d      	str	r5, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8003e8a:	f000 fe6f 	bl	8004b6c <HAL_UARTEx_WakeupCallback>
    return;
 8003e8e:	e747      	b.n	8003d20 <HAL_UART_IRQHandler+0x140>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003e90:	2180      	movs	r1, #128	@ 0x80
 8003e92:	420b      	tst	r3, r1
 8003e94:	d007      	beq.n	8003ea6 <HAL_UART_IRQHandler+0x2c6>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003e96:	2580      	movs	r5, #128	@ 0x80
 8003e98:	042d      	lsls	r5, r5, #16
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003e9a:	4011      	ands	r1, r2
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003e9c:	4028      	ands	r0, r5
 8003e9e:	4301      	orrs	r1, r0
 8003ea0:	d001      	beq.n	8003ea6 <HAL_UART_IRQHandler+0x2c6>
    if (huart->TxISR != NULL)
 8003ea2:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8003ea4:	e6b1      	b.n	8003c0a <HAL_UART_IRQHandler+0x2a>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003ea6:	2140      	movs	r1, #64	@ 0x40
 8003ea8:	420b      	tst	r3, r1
 8003eaa:	d016      	beq.n	8003eda <HAL_UART_IRQHandler+0x2fa>
 8003eac:	420a      	tst	r2, r1
 8003eae:	d014      	beq.n	8003eda <HAL_UART_IRQHandler+0x2fa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eb0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003eba:	6822      	ldr	r2, [r4, #0]
 8003ebc:	6813      	ldr	r3, [r2, #0]
 8003ebe:	438b      	bics	r3, r1
 8003ec0:	6013      	str	r3, [r2, #0]
 8003ec2:	f380 8810 	msr	PRIMASK, r0

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ec6:	0023      	movs	r3, r4
 8003ec8:	2220      	movs	r2, #32
 8003eca:	3388      	adds	r3, #136	@ 0x88
 8003ecc:	601a      	str	r2, [r3, #0]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003ece:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ed0:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 8003ed2:	67a3      	str	r3, [r4, #120]	@ 0x78
  HAL_UART_TxCpltCallback(huart);
 8003ed4:	f001 f9e2 	bl	800529c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ed8:	e722      	b.n	8003d20 <HAL_UART_IRQHandler+0x140>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003eda:	0219      	lsls	r1, r3, #8
 8003edc:	d514      	bpl.n	8003f08 <HAL_UART_IRQHandler+0x328>
 8003ede:	0051      	lsls	r1, r2, #1
 8003ee0:	d512      	bpl.n	8003f08 <HAL_UART_IRQHandler+0x328>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003ee2:	0020      	movs	r0, r4
 8003ee4:	f000 fe44 	bl	8004b70 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8003ee8:	e71a      	b.n	8003d20 <HAL_UART_IRQHandler+0x140>
 8003eea:	46c0      	nop			@ (mov r8, r8)
 8003eec:	0000080f 	.word	0x0000080f
 8003ef0:	10000001 	.word	0x10000001
 8003ef4:	04000120 	.word	0x04000120
 8003ef8:	080039eb 	.word	0x080039eb
 8003efc:	fffffeff 	.word	0xfffffeff
 8003f00:	fffffedf 	.word	0xfffffedf
 8003f04:	effffffe 	.word	0xeffffffe
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003f08:	01db      	lsls	r3, r3, #7
 8003f0a:	d400      	bmi.n	8003f0e <HAL_UART_IRQHandler+0x32e>
 8003f0c:	e708      	b.n	8003d20 <HAL_UART_IRQHandler+0x140>
 8003f0e:	2a00      	cmp	r2, #0
 8003f10:	db00      	blt.n	8003f14 <HAL_UART_IRQHandler+0x334>
 8003f12:	e705      	b.n	8003d20 <HAL_UART_IRQHandler+0x140>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003f14:	0020      	movs	r0, r4
 8003f16:	f000 fe2a 	bl	8004b6e <HAL_UARTEx_RxFifoFullCallback>
    return;
 8003f1a:	e701      	b.n	8003d20 <HAL_UART_IRQHandler+0x140>

08003f1c <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f1c:	0001      	movs	r1, r0
{
 8003f1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t uhMask = huart->Mask;
 8003f20:	0003      	movs	r3, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f22:	318c      	adds	r1, #140	@ 0x8c
 8003f24:	680c      	ldr	r4, [r1, #0]
  uint16_t uhMask = huart->Mask;
 8003f26:	3360      	adds	r3, #96	@ 0x60
 8003f28:	881a      	ldrh	r2, [r3, #0]
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003f2a:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f2c:	2c22      	cmp	r4, #34	@ 0x22
 8003f2e:	d15a      	bne.n	8003fe6 <UART_RxISR_8BIT+0xca>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003f32:	6d84      	ldr	r4, [r0, #88]	@ 0x58
 8003f34:	4013      	ands	r3, r2
    huart->pRxBuffPtr++;
    huart->RxXferCount--;
 8003f36:	0002      	movs	r2, r0
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003f38:	7023      	strb	r3, [r4, #0]
    huart->pRxBuffPtr++;
 8003f3a:	6d83      	ldr	r3, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 8003f3c:	325e      	adds	r2, #94	@ 0x5e
    huart->pRxBuffPtr++;
 8003f3e:	3301      	adds	r3, #1
 8003f40:	6583      	str	r3, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 8003f42:	8813      	ldrh	r3, [r2, #0]
 8003f44:	3b01      	subs	r3, #1
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	8013      	strh	r3, [r2, #0]

    if (huart->RxXferCount == 0U)
 8003f4a:	8813      	ldrh	r3, [r2, #0]
 8003f4c:	b29c      	uxth	r4, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d145      	bne.n	8003fde <UART_RxISR_8BIT+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f52:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f56:	3301      	adds	r3, #1
 8003f58:	f383 8810 	msr	PRIMASK, r3
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003f5c:	6805      	ldr	r5, [r0, #0]
 8003f5e:	4f24      	ldr	r7, [pc, #144]	@ (8003ff0 <UART_RxISR_8BIT+0xd4>)
 8003f60:	682a      	ldr	r2, [r5, #0]
 8003f62:	403a      	ands	r2, r7
 8003f64:	602a      	str	r2, [r5, #0]
 8003f66:	f386 8810 	msr	PRIMASK, r6
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f6a:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f6e:	f383 8810 	msr	PRIMASK, r3

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f72:	6805      	ldr	r5, [r0, #0]
 8003f74:	68aa      	ldr	r2, [r5, #8]
 8003f76:	439a      	bics	r2, r3
 8003f78:	60aa      	str	r2, [r5, #8]
 8003f7a:	f386 8810 	msr	PRIMASK, r6

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f7e:	2220      	movs	r2, #32
 8003f80:	600a      	str	r2, [r1, #0]
      huart->RxISR = NULL;

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003f82:	6802      	ldr	r2, [r0, #0]
 8003f84:	491b      	ldr	r1, [pc, #108]	@ (8003ff4 <UART_RxISR_8BIT+0xd8>)
      huart->RxISR = NULL;
 8003f86:	6744      	str	r4, [r0, #116]	@ 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f88:	6704      	str	r4, [r0, #112]	@ 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003f8a:	428a      	cmp	r2, r1
 8003f8c:	d00d      	beq.n	8003faa <UART_RxISR_8BIT+0x8e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003f8e:	6852      	ldr	r2, [r2, #4]
 8003f90:	0212      	lsls	r2, r2, #8
 8003f92:	d50a      	bpl.n	8003faa <UART_RxISR_8BIT+0x8e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f94:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f98:	f383 8810 	msr	PRIMASK, r3
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003f9c:	6802      	ldr	r2, [r0, #0]
 8003f9e:	4c16      	ldr	r4, [pc, #88]	@ (8003ff8 <UART_RxISR_8BIT+0xdc>)
 8003fa0:	6813      	ldr	r3, [r2, #0]
 8003fa2:	4023      	ands	r3, r4
 8003fa4:	6013      	str	r3, [r2, #0]
 8003fa6:	f381 8810 	msr	PRIMASK, r1
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003faa:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d117      	bne.n	8003fe0 <UART_RxISR_8BIT+0xc4>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	66c2      	str	r2, [r0, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fb4:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fb8:	f383 8810 	msr	PRIMASK, r3

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fbc:	6801      	ldr	r1, [r0, #0]
 8003fbe:	330f      	adds	r3, #15
 8003fc0:	680a      	ldr	r2, [r1, #0]
 8003fc2:	439a      	bics	r2, r3
 8003fc4:	600a      	str	r2, [r1, #0]
 8003fc6:	f384 8810 	msr	PRIMASK, r4

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003fca:	6802      	ldr	r2, [r0, #0]
 8003fcc:	69d1      	ldr	r1, [r2, #28]
 8003fce:	4219      	tst	r1, r3
 8003fd0:	d000      	beq.n	8003fd4 <UART_RxISR_8BIT+0xb8>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003fd2:	6213      	str	r3, [r2, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fd4:	0003      	movs	r3, r0
 8003fd6:	335c      	adds	r3, #92	@ 0x5c
 8003fd8:	8819      	ldrh	r1, [r3, #0]
 8003fda:	f7ff fe00 	bl	8003bde <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        HAL_UART_RxCpltCallback(huart);
 8003fe0:	f001 f96c 	bl	80052bc <HAL_UART_RxCpltCallback>
 8003fe4:	e7fb      	b.n	8003fde <UART_RxISR_8BIT+0xc2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003fe6:	2208      	movs	r2, #8
 8003fe8:	6999      	ldr	r1, [r3, #24]
 8003fea:	430a      	orrs	r2, r1
 8003fec:	619a      	str	r2, [r3, #24]
}
 8003fee:	e7f6      	b.n	8003fde <UART_RxISR_8BIT+0xc2>
 8003ff0:	fffffedf 	.word	0xfffffedf
 8003ff4:	40008000 	.word	0x40008000
 8003ff8:	fbffffff 	.word	0xfbffffff

08003ffc <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ffc:	0002      	movs	r2, r0
{
 8003ffe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t uhMask = huart->Mask;
 8004000:	0003      	movs	r3, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004002:	328c      	adds	r2, #140	@ 0x8c
 8004004:	6811      	ldr	r1, [r2, #0]
  uint16_t uhMask = huart->Mask;
 8004006:	3360      	adds	r3, #96	@ 0x60
 8004008:	881c      	ldrh	r4, [r3, #0]
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800400a:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800400c:	2922      	cmp	r1, #34	@ 0x22
 800400e:	d159      	bne.n	80040c4 <UART_RxISR_16BIT+0xc8>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004010:	6a59      	ldr	r1, [r3, #36]	@ 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004012:	6d83      	ldr	r3, [r0, #88]	@ 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 8004014:	4021      	ands	r1, r4
 8004016:	8019      	strh	r1, [r3, #0]
    huart->pRxBuffPtr += 2U;
    huart->RxXferCount--;
 8004018:	0001      	movs	r1, r0
    huart->pRxBuffPtr += 2U;
 800401a:	3302      	adds	r3, #2
 800401c:	6583      	str	r3, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 800401e:	315e      	adds	r1, #94	@ 0x5e
 8004020:	880b      	ldrh	r3, [r1, #0]
 8004022:	3b01      	subs	r3, #1
 8004024:	b29b      	uxth	r3, r3
 8004026:	800b      	strh	r3, [r1, #0]

    if (huart->RxXferCount == 0U)
 8004028:	880b      	ldrh	r3, [r1, #0]
 800402a:	b29c      	uxth	r4, r3
 800402c:	2b00      	cmp	r3, #0
 800402e:	d145      	bne.n	80040bc <UART_RxISR_16BIT+0xc0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004030:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004034:	3301      	adds	r3, #1
 8004036:	f383 8810 	msr	PRIMASK, r3
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800403a:	6805      	ldr	r5, [r0, #0]
 800403c:	4f24      	ldr	r7, [pc, #144]	@ (80040d0 <UART_RxISR_16BIT+0xd4>)
 800403e:	6829      	ldr	r1, [r5, #0]
 8004040:	4039      	ands	r1, r7
 8004042:	6029      	str	r1, [r5, #0]
 8004044:	f386 8810 	msr	PRIMASK, r6
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004048:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800404c:	f383 8810 	msr	PRIMASK, r3

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004050:	6805      	ldr	r5, [r0, #0]
 8004052:	68a9      	ldr	r1, [r5, #8]
 8004054:	4399      	bics	r1, r3
 8004056:	60a9      	str	r1, [r5, #8]
 8004058:	f386 8810 	msr	PRIMASK, r6

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800405c:	2120      	movs	r1, #32
 800405e:	6011      	str	r1, [r2, #0]
      huart->RxISR = NULL;

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004060:	6802      	ldr	r2, [r0, #0]
 8004062:	491c      	ldr	r1, [pc, #112]	@ (80040d4 <UART_RxISR_16BIT+0xd8>)
      huart->RxISR = NULL;
 8004064:	6744      	str	r4, [r0, #116]	@ 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004066:	6704      	str	r4, [r0, #112]	@ 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004068:	428a      	cmp	r2, r1
 800406a:	d00d      	beq.n	8004088 <UART_RxISR_16BIT+0x8c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800406c:	6852      	ldr	r2, [r2, #4]
 800406e:	0212      	lsls	r2, r2, #8
 8004070:	d50a      	bpl.n	8004088 <UART_RxISR_16BIT+0x8c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004072:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004076:	f383 8810 	msr	PRIMASK, r3
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800407a:	6802      	ldr	r2, [r0, #0]
 800407c:	4c16      	ldr	r4, [pc, #88]	@ (80040d8 <UART_RxISR_16BIT+0xdc>)
 800407e:	6813      	ldr	r3, [r2, #0]
 8004080:	4023      	ands	r3, r4
 8004082:	6013      	str	r3, [r2, #0]
 8004084:	f381 8810 	msr	PRIMASK, r1
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004088:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800408a:	2b01      	cmp	r3, #1
 800408c:	d117      	bne.n	80040be <UART_RxISR_16BIT+0xc2>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800408e:	2200      	movs	r2, #0
 8004090:	66c2      	str	r2, [r0, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004092:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004096:	f383 8810 	msr	PRIMASK, r3

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800409a:	6801      	ldr	r1, [r0, #0]
 800409c:	330f      	adds	r3, #15
 800409e:	680a      	ldr	r2, [r1, #0]
 80040a0:	439a      	bics	r2, r3
 80040a2:	600a      	str	r2, [r1, #0]
 80040a4:	f384 8810 	msr	PRIMASK, r4

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80040a8:	6802      	ldr	r2, [r0, #0]
 80040aa:	69d1      	ldr	r1, [r2, #28]
 80040ac:	4219      	tst	r1, r3
 80040ae:	d000      	beq.n	80040b2 <UART_RxISR_16BIT+0xb6>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80040b0:	6213      	str	r3, [r2, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040b2:	0003      	movs	r3, r0
 80040b4:	335c      	adds	r3, #92	@ 0x5c
 80040b6:	8819      	ldrh	r1, [r3, #0]
 80040b8:	f7ff fd91 	bl	8003bde <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80040bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        HAL_UART_RxCpltCallback(huart);
 80040be:	f001 f8fd 	bl	80052bc <HAL_UART_RxCpltCallback>
 80040c2:	e7fb      	b.n	80040bc <UART_RxISR_16BIT+0xc0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80040c4:	2208      	movs	r2, #8
 80040c6:	6999      	ldr	r1, [r3, #24]
 80040c8:	430a      	orrs	r2, r1
 80040ca:	619a      	str	r2, [r3, #24]
}
 80040cc:	e7f6      	b.n	80040bc <UART_RxISR_16BIT+0xc0>
 80040ce:	46c0      	nop			@ (mov r8, r8)
 80040d0:	fffffedf 	.word	0xfffffedf
 80040d4:	40008000 	.word	0x40008000
 80040d8:	fbffffff 	.word	0xfbffffff

080040dc <UART_RxISR_8BIT_FIFOEN>:
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
  uint16_t  uhMask = huart->Mask;
 80040dc:	0003      	movs	r3, r0
{
 80040de:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t  uhMask = huart->Mask;
 80040e0:	3360      	adds	r3, #96	@ 0x60
 80040e2:	881b      	ldrh	r3, [r3, #0]
{
 80040e4:	b085      	sub	sp, #20
  uint16_t  uhMask = huart->Mask;
 80040e6:	9302      	str	r3, [sp, #8]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80040e8:	6803      	ldr	r3, [r0, #0]
{
 80040ea:	0004      	movs	r4, r0
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80040ec:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	9203      	str	r2, [sp, #12]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80040f2:	689a      	ldr	r2, [r3, #8]
 80040f4:	9201      	str	r2, [sp, #4]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040f6:	0002      	movs	r2, r0
 80040f8:	328c      	adds	r2, #140	@ 0x8c
 80040fa:	6812      	ldr	r2, [r2, #0]
 80040fc:	2a22      	cmp	r2, #34	@ 0x22
 80040fe:	d000      	beq.n	8004102 <UART_RxISR_8BIT_FIFOEN+0x26>
 8004100:	e0c5      	b.n	800428e <UART_RxISR_8BIT_FIFOEN+0x1b2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004102:	0003      	movs	r3, r0
 8004104:	3368      	adds	r3, #104	@ 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004106:	881b      	ldrh	r3, [r3, #0]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d002      	beq.n	8004112 <UART_RxISR_8BIT_FIFOEN+0x36>
 800410c:	2320      	movs	r3, #32
 800410e:	421d      	tst	r5, r3
 8004110:	d125      	bne.n	800415e <UART_RxISR_8BIT_FIFOEN+0x82>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004112:	0023      	movs	r3, r4
 8004114:	335e      	adds	r3, #94	@ 0x5e
 8004116:	881b      	ldrh	r3, [r3, #0]
 8004118:	b29a      	uxth	r2, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800411a:	2b00      	cmp	r3, #0
 800411c:	d01d      	beq.n	800415a <UART_RxISR_8BIT_FIFOEN+0x7e>
 800411e:	0023      	movs	r3, r4
 8004120:	3368      	adds	r3, #104	@ 0x68
 8004122:	881b      	ldrh	r3, [r3, #0]
 8004124:	4293      	cmp	r3, r2
 8004126:	d918      	bls.n	800415a <UART_RxISR_8BIT_FIFOEN+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004128:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800412c:	2201      	movs	r2, #1
 800412e:	f382 8810 	msr	PRIMASK, r2
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004132:	6821      	ldr	r1, [r4, #0]
 8004134:	4d58      	ldr	r5, [pc, #352]	@ (8004298 <UART_RxISR_8BIT_FIFOEN+0x1bc>)
 8004136:	688b      	ldr	r3, [r1, #8]
 8004138:	402b      	ands	r3, r5
 800413a:	608b      	str	r3, [r1, #8]
 800413c:	f380 8810 	msr	PRIMASK, r0

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8004140:	4b56      	ldr	r3, [pc, #344]	@ (800429c <UART_RxISR_8BIT_FIFOEN+0x1c0>)
 8004142:	6763      	str	r3, [r4, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004144:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004148:	f382 8810 	msr	PRIMASK, r2

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800414c:	2320      	movs	r3, #32
 800414e:	6822      	ldr	r2, [r4, #0]
 8004150:	6810      	ldr	r0, [r2, #0]
 8004152:	4303      	orrs	r3, r0
 8004154:	6013      	str	r3, [r2, #0]
 8004156:	f381 8810 	msr	PRIMASK, r1
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800415a:	b005      	add	sp, #20
 800415c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      huart->RxXferCount--;
 800415e:	0026      	movs	r6, r4
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004160:	6823      	ldr	r3, [r4, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004162:	9902      	ldr	r1, [sp, #8]
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004166:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8004168:	400b      	ands	r3, r1
 800416a:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 800416c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 800416e:	365e      	adds	r6, #94	@ 0x5e
      huart->pRxBuffPtr++;
 8004170:	3301      	adds	r3, #1
 8004172:	65a3      	str	r3, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 8004174:	8833      	ldrh	r3, [r6, #0]
      isrflags = READ_REG(huart->Instance->ISR);
 8004176:	6822      	ldr	r2, [r4, #0]
      huart->RxXferCount--;
 8004178:	3b01      	subs	r3, #1
 800417a:	b29b      	uxth	r3, r3
 800417c:	8033      	strh	r3, [r6, #0]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800417e:	2307      	movs	r3, #7
      isrflags = READ_REG(huart->Instance->ISR);
 8004180:	69d5      	ldr	r5, [r2, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004182:	421d      	tst	r5, r3
 8004184:	d02f      	beq.n	80041e6 <UART_RxISR_8BIT_FIFOEN+0x10a>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004186:	3b06      	subs	r3, #6
 8004188:	421d      	tst	r5, r3
 800418a:	d008      	beq.n	800419e <UART_RxISR_8BIT_FIFOEN+0xc2>
 800418c:	9903      	ldr	r1, [sp, #12]
 800418e:	05c9      	lsls	r1, r1, #23
 8004190:	d505      	bpl.n	800419e <UART_RxISR_8BIT_FIFOEN+0xc2>
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004192:	0021      	movs	r1, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004194:	6213      	str	r3, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004196:	3190      	adds	r1, #144	@ 0x90
 8004198:	6808      	ldr	r0, [r1, #0]
 800419a:	4303      	orrs	r3, r0
 800419c:	600b      	str	r3, [r1, #0]
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800419e:	2302      	movs	r3, #2
 80041a0:	421d      	tst	r5, r3
 80041a2:	d009      	beq.n	80041b8 <UART_RxISR_8BIT_FIFOEN+0xdc>
 80041a4:	9901      	ldr	r1, [sp, #4]
 80041a6:	07c9      	lsls	r1, r1, #31
 80041a8:	d506      	bpl.n	80041b8 <UART_RxISR_8BIT_FIFOEN+0xdc>
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041aa:	0021      	movs	r1, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80041ac:	6213      	str	r3, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041ae:	3190      	adds	r1, #144	@ 0x90
 80041b0:	6808      	ldr	r0, [r1, #0]
 80041b2:	18db      	adds	r3, r3, r3
 80041b4:	4303      	orrs	r3, r0
 80041b6:	600b      	str	r3, [r1, #0]
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80041b8:	2304      	movs	r3, #4
 80041ba:	421d      	tst	r5, r3
 80041bc:	d009      	beq.n	80041d2 <UART_RxISR_8BIT_FIFOEN+0xf6>
 80041be:	9901      	ldr	r1, [sp, #4]
 80041c0:	07c9      	lsls	r1, r1, #31
 80041c2:	d506      	bpl.n	80041d2 <UART_RxISR_8BIT_FIFOEN+0xf6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80041c4:	6213      	str	r3, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80041c6:	0022      	movs	r2, r4
 80041c8:	3290      	adds	r2, #144	@ 0x90
 80041ca:	6811      	ldr	r1, [r2, #0]
 80041cc:	3b02      	subs	r3, #2
 80041ce:	430b      	orrs	r3, r1
 80041d0:	6013      	str	r3, [r2, #0]
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041d2:	0027      	movs	r7, r4
 80041d4:	3790      	adds	r7, #144	@ 0x90
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d004      	beq.n	80041e6 <UART_RxISR_8BIT_FIFOEN+0x10a>
          HAL_UART_ErrorCallback(huart);
 80041dc:	0020      	movs	r0, r4
 80041de:	f7ff fc03 	bl	80039e8 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041e2:	2300      	movs	r3, #0
 80041e4:	603b      	str	r3, [r7, #0]
      if (huart->RxXferCount == 0U)
 80041e6:	8833      	ldrh	r3, [r6, #0]
 80041e8:	b299      	uxth	r1, r3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d000      	beq.n	80041f0 <UART_RxISR_8BIT_FIFOEN+0x114>
 80041ee:	e78d      	b.n	800410c <UART_RxISR_8BIT_FIFOEN+0x30>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041f0:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041f4:	3301      	adds	r3, #1
 80041f6:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041fa:	6820      	ldr	r0, [r4, #0]
 80041fc:	4f28      	ldr	r7, [pc, #160]	@ (80042a0 <UART_RxISR_8BIT_FIFOEN+0x1c4>)
 80041fe:	6802      	ldr	r2, [r0, #0]
 8004200:	403a      	ands	r2, r7
 8004202:	6002      	str	r2, [r0, #0]
 8004204:	f386 8810 	msr	PRIMASK, r6
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004208:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800420c:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004210:	6820      	ldr	r0, [r4, #0]
 8004212:	4f24      	ldr	r7, [pc, #144]	@ (80042a4 <UART_RxISR_8BIT_FIFOEN+0x1c8>)
 8004214:	6882      	ldr	r2, [r0, #8]
 8004216:	403a      	ands	r2, r7
 8004218:	6082      	str	r2, [r0, #8]
 800421a:	f386 8810 	msr	PRIMASK, r6
        huart->RxState = HAL_UART_STATE_READY;
 800421e:	0022      	movs	r2, r4
 8004220:	2020      	movs	r0, #32
 8004222:	328c      	adds	r2, #140	@ 0x8c
 8004224:	6010      	str	r0, [r2, #0]
        huart->RxISR = NULL;
 8004226:	6761      	str	r1, [r4, #116]	@ 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004228:	6721      	str	r1, [r4, #112]	@ 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800422a:	6822      	ldr	r2, [r4, #0]
 800422c:	491e      	ldr	r1, [pc, #120]	@ (80042a8 <UART_RxISR_8BIT_FIFOEN+0x1cc>)
 800422e:	428a      	cmp	r2, r1
 8004230:	d00d      	beq.n	800424e <UART_RxISR_8BIT_FIFOEN+0x172>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004232:	6852      	ldr	r2, [r2, #4]
 8004234:	0212      	lsls	r2, r2, #8
 8004236:	d50a      	bpl.n	800424e <UART_RxISR_8BIT_FIFOEN+0x172>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004238:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800423c:	f383 8810 	msr	PRIMASK, r3
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004240:	6822      	ldr	r2, [r4, #0]
 8004242:	481a      	ldr	r0, [pc, #104]	@ (80042ac <UART_RxISR_8BIT_FIFOEN+0x1d0>)
 8004244:	6813      	ldr	r3, [r2, #0]
 8004246:	4003      	ands	r3, r0
 8004248:	6013      	str	r3, [r2, #0]
 800424a:	f381 8810 	msr	PRIMASK, r1
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800424e:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8004250:	2b01      	cmp	r3, #1
 8004252:	d118      	bne.n	8004286 <UART_RxISR_8BIT_FIFOEN+0x1aa>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004254:	2200      	movs	r2, #0
 8004256:	66e2      	str	r2, [r4, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004258:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800425c:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004260:	6821      	ldr	r1, [r4, #0]
 8004262:	330f      	adds	r3, #15
 8004264:	680a      	ldr	r2, [r1, #0]
 8004266:	439a      	bics	r2, r3
 8004268:	600a      	str	r2, [r1, #0]
 800426a:	f380 8810 	msr	PRIMASK, r0
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800426e:	6822      	ldr	r2, [r4, #0]
 8004270:	69d1      	ldr	r1, [r2, #28]
 8004272:	4219      	tst	r1, r3
 8004274:	d000      	beq.n	8004278 <UART_RxISR_8BIT_FIFOEN+0x19c>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004276:	6213      	str	r3, [r2, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004278:	0023      	movs	r3, r4
 800427a:	335c      	adds	r3, #92	@ 0x5c
 800427c:	0020      	movs	r0, r4
 800427e:	8819      	ldrh	r1, [r3, #0]
 8004280:	f7ff fcad 	bl	8003bde <HAL_UARTEx_RxEventCallback>
 8004284:	e742      	b.n	800410c <UART_RxISR_8BIT_FIFOEN+0x30>
          HAL_UART_RxCpltCallback(huart);
 8004286:	0020      	movs	r0, r4
 8004288:	f001 f818 	bl	80052bc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800428c:	e73e      	b.n	800410c <UART_RxISR_8BIT_FIFOEN+0x30>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800428e:	2208      	movs	r2, #8
 8004290:	6999      	ldr	r1, [r3, #24]
 8004292:	430a      	orrs	r2, r1
 8004294:	619a      	str	r2, [r3, #24]
}
 8004296:	e760      	b.n	800415a <UART_RxISR_8BIT_FIFOEN+0x7e>
 8004298:	efffffff 	.word	0xefffffff
 800429c:	08003f1d 	.word	0x08003f1d
 80042a0:	fffffeff 	.word	0xfffffeff
 80042a4:	effffffe 	.word	0xeffffffe
 80042a8:	40008000 	.word	0x40008000
 80042ac:	fbffffff 	.word	0xfbffffff

080042b0 <UART_RxISR_16BIT_FIFOEN>:
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80042b0:	0003      	movs	r3, r0
{
 80042b2:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t  uhMask = huart->Mask;
 80042b4:	3360      	adds	r3, #96	@ 0x60
 80042b6:	881b      	ldrh	r3, [r3, #0]
{
 80042b8:	b085      	sub	sp, #20
  uint16_t  uhMask = huart->Mask;
 80042ba:	9302      	str	r3, [sp, #8]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80042bc:	6803      	ldr	r3, [r0, #0]
{
 80042be:	0004      	movs	r4, r0
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80042c0:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	9203      	str	r2, [sp, #12]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80042c6:	689a      	ldr	r2, [r3, #8]
 80042c8:	9201      	str	r2, [sp, #4]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042ca:	0002      	movs	r2, r0
 80042cc:	328c      	adds	r2, #140	@ 0x8c
 80042ce:	6812      	ldr	r2, [r2, #0]
 80042d0:	2a22      	cmp	r2, #34	@ 0x22
 80042d2:	d000      	beq.n	80042d6 <UART_RxISR_16BIT_FIFOEN+0x26>
 80042d4:	e0c3      	b.n	800445e <UART_RxISR_16BIT_FIFOEN+0x1ae>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80042d6:	0003      	movs	r3, r0
 80042d8:	3368      	adds	r3, #104	@ 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80042da:	881b      	ldrh	r3, [r3, #0]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d002      	beq.n	80042e6 <UART_RxISR_16BIT_FIFOEN+0x36>
 80042e0:	2320      	movs	r3, #32
 80042e2:	421d      	tst	r5, r3
 80042e4:	d125      	bne.n	8004332 <UART_RxISR_16BIT_FIFOEN+0x82>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80042e6:	0023      	movs	r3, r4
 80042e8:	335e      	adds	r3, #94	@ 0x5e
 80042ea:	881b      	ldrh	r3, [r3, #0]
 80042ec:	b29a      	uxth	r2, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d01d      	beq.n	800432e <UART_RxISR_16BIT_FIFOEN+0x7e>
 80042f2:	0023      	movs	r3, r4
 80042f4:	3368      	adds	r3, #104	@ 0x68
 80042f6:	881b      	ldrh	r3, [r3, #0]
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d918      	bls.n	800432e <UART_RxISR_16BIT_FIFOEN+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042fc:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004300:	2201      	movs	r2, #1
 8004302:	f382 8810 	msr	PRIMASK, r2
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004306:	6821      	ldr	r1, [r4, #0]
 8004308:	4d57      	ldr	r5, [pc, #348]	@ (8004468 <UART_RxISR_16BIT_FIFOEN+0x1b8>)
 800430a:	688b      	ldr	r3, [r1, #8]
 800430c:	402b      	ands	r3, r5
 800430e:	608b      	str	r3, [r1, #8]
 8004310:	f380 8810 	msr	PRIMASK, r0

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8004314:	4b55      	ldr	r3, [pc, #340]	@ (800446c <UART_RxISR_16BIT_FIFOEN+0x1bc>)
 8004316:	6763      	str	r3, [r4, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004318:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800431c:	f382 8810 	msr	PRIMASK, r2

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004320:	2320      	movs	r3, #32
 8004322:	6822      	ldr	r2, [r4, #0]
 8004324:	6810      	ldr	r0, [r2, #0]
 8004326:	4303      	orrs	r3, r0
 8004328:	6013      	str	r3, [r2, #0]
 800432a:	f381 8810 	msr	PRIMASK, r1
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800432e:	b005      	add	sp, #20
 8004330:	bdf0      	pop	{r4, r5, r6, r7, pc}
      huart->RxXferCount--;
 8004332:	0026      	movs	r6, r4
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004334:	6823      	ldr	r3, [r4, #0]
      *tmp = (uint16_t)(uhdata & uhMask);
 8004336:	9802      	ldr	r0, [sp, #8]
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004338:	6a59      	ldr	r1, [r3, #36]	@ 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800433a:	6da2      	ldr	r2, [r4, #88]	@ 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 800433c:	4001      	ands	r1, r0
 800433e:	8011      	strh	r1, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8004340:	3202      	adds	r2, #2
 8004342:	65a2      	str	r2, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 8004344:	365e      	adds	r6, #94	@ 0x5e
 8004346:	8832      	ldrh	r2, [r6, #0]
 8004348:	3a01      	subs	r2, #1
 800434a:	b292      	uxth	r2, r2
 800434c:	8032      	strh	r2, [r6, #0]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800434e:	2207      	movs	r2, #7
      isrflags = READ_REG(huart->Instance->ISR);
 8004350:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004352:	4215      	tst	r5, r2
 8004354:	d02f      	beq.n	80043b6 <UART_RxISR_16BIT_FIFOEN+0x106>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004356:	3a06      	subs	r2, #6
 8004358:	4215      	tst	r5, r2
 800435a:	d008      	beq.n	800436e <UART_RxISR_16BIT_FIFOEN+0xbe>
 800435c:	9903      	ldr	r1, [sp, #12]
 800435e:	05c9      	lsls	r1, r1, #23
 8004360:	d505      	bpl.n	800436e <UART_RxISR_16BIT_FIFOEN+0xbe>
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004362:	0021      	movs	r1, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004364:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004366:	3190      	adds	r1, #144	@ 0x90
 8004368:	6808      	ldr	r0, [r1, #0]
 800436a:	4302      	orrs	r2, r0
 800436c:	600a      	str	r2, [r1, #0]
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800436e:	2202      	movs	r2, #2
 8004370:	4215      	tst	r5, r2
 8004372:	d009      	beq.n	8004388 <UART_RxISR_16BIT_FIFOEN+0xd8>
 8004374:	9901      	ldr	r1, [sp, #4]
 8004376:	07c9      	lsls	r1, r1, #31
 8004378:	d506      	bpl.n	8004388 <UART_RxISR_16BIT_FIFOEN+0xd8>
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800437a:	0021      	movs	r1, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800437c:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800437e:	3190      	adds	r1, #144	@ 0x90
 8004380:	6808      	ldr	r0, [r1, #0]
 8004382:	1892      	adds	r2, r2, r2
 8004384:	4302      	orrs	r2, r0
 8004386:	600a      	str	r2, [r1, #0]
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004388:	2204      	movs	r2, #4
 800438a:	4215      	tst	r5, r2
 800438c:	d009      	beq.n	80043a2 <UART_RxISR_16BIT_FIFOEN+0xf2>
 800438e:	9901      	ldr	r1, [sp, #4]
 8004390:	07c9      	lsls	r1, r1, #31
 8004392:	d506      	bpl.n	80043a2 <UART_RxISR_16BIT_FIFOEN+0xf2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004394:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004396:	0022      	movs	r2, r4
 8004398:	2302      	movs	r3, #2
 800439a:	3290      	adds	r2, #144	@ 0x90
 800439c:	6811      	ldr	r1, [r2, #0]
 800439e:	430b      	orrs	r3, r1
 80043a0:	6013      	str	r3, [r2, #0]
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043a2:	0027      	movs	r7, r4
 80043a4:	3790      	adds	r7, #144	@ 0x90
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d004      	beq.n	80043b6 <UART_RxISR_16BIT_FIFOEN+0x106>
          HAL_UART_ErrorCallback(huart);
 80043ac:	0020      	movs	r0, r4
 80043ae:	f7ff fb1b 	bl	80039e8 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043b2:	2300      	movs	r3, #0
 80043b4:	603b      	str	r3, [r7, #0]
      if (huart->RxXferCount == 0U)
 80043b6:	8833      	ldrh	r3, [r6, #0]
 80043b8:	b299      	uxth	r1, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d000      	beq.n	80043c0 <UART_RxISR_16BIT_FIFOEN+0x110>
 80043be:	e78f      	b.n	80042e0 <UART_RxISR_16BIT_FIFOEN+0x30>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043c0:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043c4:	3301      	adds	r3, #1
 80043c6:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043ca:	6820      	ldr	r0, [r4, #0]
 80043cc:	4f28      	ldr	r7, [pc, #160]	@ (8004470 <UART_RxISR_16BIT_FIFOEN+0x1c0>)
 80043ce:	6802      	ldr	r2, [r0, #0]
 80043d0:	403a      	ands	r2, r7
 80043d2:	6002      	str	r2, [r0, #0]
 80043d4:	f386 8810 	msr	PRIMASK, r6
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043d8:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043dc:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80043e0:	6820      	ldr	r0, [r4, #0]
 80043e2:	4f24      	ldr	r7, [pc, #144]	@ (8004474 <UART_RxISR_16BIT_FIFOEN+0x1c4>)
 80043e4:	6882      	ldr	r2, [r0, #8]
 80043e6:	403a      	ands	r2, r7
 80043e8:	6082      	str	r2, [r0, #8]
 80043ea:	f386 8810 	msr	PRIMASK, r6
        huart->RxState = HAL_UART_STATE_READY;
 80043ee:	0022      	movs	r2, r4
 80043f0:	2020      	movs	r0, #32
 80043f2:	328c      	adds	r2, #140	@ 0x8c
 80043f4:	6010      	str	r0, [r2, #0]
        huart->RxISR = NULL;
 80043f6:	6761      	str	r1, [r4, #116]	@ 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043f8:	6721      	str	r1, [r4, #112]	@ 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80043fa:	6822      	ldr	r2, [r4, #0]
 80043fc:	491e      	ldr	r1, [pc, #120]	@ (8004478 <UART_RxISR_16BIT_FIFOEN+0x1c8>)
 80043fe:	428a      	cmp	r2, r1
 8004400:	d00d      	beq.n	800441e <UART_RxISR_16BIT_FIFOEN+0x16e>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004402:	6852      	ldr	r2, [r2, #4]
 8004404:	0212      	lsls	r2, r2, #8
 8004406:	d50a      	bpl.n	800441e <UART_RxISR_16BIT_FIFOEN+0x16e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004408:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800440c:	f383 8810 	msr	PRIMASK, r3
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004410:	6822      	ldr	r2, [r4, #0]
 8004412:	481a      	ldr	r0, [pc, #104]	@ (800447c <UART_RxISR_16BIT_FIFOEN+0x1cc>)
 8004414:	6813      	ldr	r3, [r2, #0]
 8004416:	4003      	ands	r3, r0
 8004418:	6013      	str	r3, [r2, #0]
 800441a:	f381 8810 	msr	PRIMASK, r1
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800441e:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8004420:	2b01      	cmp	r3, #1
 8004422:	d118      	bne.n	8004456 <UART_RxISR_16BIT_FIFOEN+0x1a6>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004424:	2200      	movs	r2, #0
 8004426:	66e2      	str	r2, [r4, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004428:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800442c:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004430:	6821      	ldr	r1, [r4, #0]
 8004432:	330f      	adds	r3, #15
 8004434:	680a      	ldr	r2, [r1, #0]
 8004436:	439a      	bics	r2, r3
 8004438:	600a      	str	r2, [r1, #0]
 800443a:	f380 8810 	msr	PRIMASK, r0
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800443e:	6822      	ldr	r2, [r4, #0]
 8004440:	69d1      	ldr	r1, [r2, #28]
 8004442:	4219      	tst	r1, r3
 8004444:	d000      	beq.n	8004448 <UART_RxISR_16BIT_FIFOEN+0x198>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004446:	6213      	str	r3, [r2, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004448:	0023      	movs	r3, r4
 800444a:	335c      	adds	r3, #92	@ 0x5c
 800444c:	0020      	movs	r0, r4
 800444e:	8819      	ldrh	r1, [r3, #0]
 8004450:	f7ff fbc5 	bl	8003bde <HAL_UARTEx_RxEventCallback>
 8004454:	e744      	b.n	80042e0 <UART_RxISR_16BIT_FIFOEN+0x30>
          HAL_UART_RxCpltCallback(huart);
 8004456:	0020      	movs	r0, r4
 8004458:	f000 ff30 	bl	80052bc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800445c:	e740      	b.n	80042e0 <UART_RxISR_16BIT_FIFOEN+0x30>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800445e:	2208      	movs	r2, #8
 8004460:	6999      	ldr	r1, [r3, #24]
 8004462:	430a      	orrs	r2, r1
 8004464:	619a      	str	r2, [r3, #24]
}
 8004466:	e762      	b.n	800432e <UART_RxISR_16BIT_FIFOEN+0x7e>
 8004468:	efffffff 	.word	0xefffffff
 800446c:	08003ffd 	.word	0x08003ffd
 8004470:	fffffeff 	.word	0xfffffeff
 8004474:	effffffe 	.word	0xeffffffe
 8004478:	40008000 	.word	0x40008000
 800447c:	fbffffff 	.word	0xfbffffff

08004480 <UART_SetConfig>:
{
 8004480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004482:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004484:	6925      	ldr	r5, [r4, #16]
 8004486:	68a2      	ldr	r2, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 8004488:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800448a:	432a      	orrs	r2, r5
 800448c:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800448e:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004490:	69c0      	ldr	r0, [r0, #28]
 8004492:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004494:	4d67      	ldr	r5, [pc, #412]	@ (8004634 <UART_SetConfig+0x1b4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004496:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004498:	4029      	ands	r1, r5
 800449a:	430a      	orrs	r2, r1
 800449c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800449e:	685a      	ldr	r2, [r3, #4]
 80044a0:	4965      	ldr	r1, [pc, #404]	@ (8004638 <UART_SetConfig+0x1b8>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044a2:	69a5      	ldr	r5, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044a4:	400a      	ands	r2, r1
 80044a6:	68e1      	ldr	r1, [r4, #12]
 80044a8:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80044aa:	4964      	ldr	r1, [pc, #400]	@ (800463c <UART_SetConfig+0x1bc>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044ac:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80044ae:	428b      	cmp	r3, r1
 80044b0:	d001      	beq.n	80044b6 <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 80044b2:	6a22      	ldr	r2, [r4, #32]
 80044b4:	4315      	orrs	r5, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044b6:	689a      	ldr	r2, [r3, #8]
 80044b8:	4e61      	ldr	r6, [pc, #388]	@ (8004640 <UART_SetConfig+0x1c0>)
 80044ba:	4032      	ands	r2, r6
 80044bc:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80044be:	250f      	movs	r5, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044c0:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80044c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044c4:	43aa      	bics	r2, r5
 80044c6:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80044c8:	432a      	orrs	r2, r5
 80044ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044cc:	4a5d      	ldr	r2, [pc, #372]	@ (8004644 <UART_SetConfig+0x1c4>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d113      	bne.n	80044fa <UART_SetConfig+0x7a>
 80044d2:	4b5d      	ldr	r3, [pc, #372]	@ (8004648 <UART_SetConfig+0x1c8>)
 80044d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80044d6:	2303      	movs	r3, #3
 80044d8:	401a      	ands	r2, r3
 80044da:	2380      	movs	r3, #128	@ 0x80
 80044dc:	021b      	lsls	r3, r3, #8
 80044de:	2a02      	cmp	r2, #2
 80044e0:	d100      	bne.n	80044e4 <UART_SetConfig+0x64>
 80044e2:	e098      	b.n	8004616 <UART_SetConfig+0x196>
 80044e4:	2a03      	cmp	r2, #3
 80044e6:	d100      	bne.n	80044ea <UART_SetConfig+0x6a>
 80044e8:	e0a0      	b.n	800462c <UART_SetConfig+0x1ac>
 80044ea:	2a01      	cmp	r2, #1
 80044ec:	d000      	beq.n	80044f0 <UART_SetConfig+0x70>
 80044ee:	e098      	b.n	8004622 <UART_SetConfig+0x1a2>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044f0:	4298      	cmp	r0, r3
 80044f2:	d05a      	beq.n	80045aa <UART_SetConfig+0x12a>
        pclk = HAL_RCC_GetSysClockFreq();
 80044f4:	f7fe fcee 	bl	8002ed4 <HAL_RCC_GetSysClockFreq>
        break;
 80044f8:	e07b      	b.n	80045f2 <UART_SetConfig+0x172>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044fa:	4a54      	ldr	r2, [pc, #336]	@ (800464c <UART_SetConfig+0x1cc>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d100      	bne.n	8004502 <UART_SetConfig+0x82>
 8004500:	e08d      	b.n	800461e <UART_SetConfig+0x19e>
 8004502:	428b      	cmp	r3, r1
 8004504:	d10f      	bne.n	8004526 <UART_SetConfig+0xa6>
 8004506:	22c0      	movs	r2, #192	@ 0xc0
 8004508:	2180      	movs	r1, #128	@ 0x80
 800450a:	4b4f      	ldr	r3, [pc, #316]	@ (8004648 <UART_SetConfig+0x1c8>)
 800450c:	0112      	lsls	r2, r2, #4
 800450e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004510:	0109      	lsls	r1, r1, #4
 8004512:	4013      	ands	r3, r2
 8004514:	428b      	cmp	r3, r1
 8004516:	d01b      	beq.n	8004550 <UART_SetConfig+0xd0>
 8004518:	d807      	bhi.n	800452a <UART_SetConfig+0xaa>
 800451a:	2b00      	cmp	r3, #0
 800451c:	d015      	beq.n	800454a <UART_SetConfig+0xca>
 800451e:	2280      	movs	r2, #128	@ 0x80
 8004520:	00d2      	lsls	r2, r2, #3
 8004522:	4293      	cmp	r3, r2
 8004524:	d006      	beq.n	8004534 <UART_SetConfig+0xb4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004526:	2001      	movs	r0, #1
 8004528:	e009      	b.n	800453e <UART_SetConfig+0xbe>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800452a:	4293      	cmp	r3, r2
 800452c:	d1fb      	bne.n	8004526 <UART_SetConfig+0xa6>
 800452e:	2680      	movs	r6, #128	@ 0x80
 8004530:	0236      	lsls	r6, r6, #8
 8004532:	e00e      	b.n	8004552 <UART_SetConfig+0xd2>
        pclk = HAL_RCC_GetSysClockFreq();
 8004534:	f7fe fcce 	bl	8002ed4 <HAL_RCC_GetSysClockFreq>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004538:	1e06      	subs	r6, r0, #0
    if (pclk != 0U)
 800453a:	d10a      	bne.n	8004552 <UART_SetConfig+0xd2>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800453c:	2000      	movs	r0, #0
  huart->NbRxDataToProcess = 1;
 800453e:	4b44      	ldr	r3, [pc, #272]	@ (8004650 <UART_SetConfig+0x1d0>)
 8004540:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 8004542:	2300      	movs	r3, #0
 8004544:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 8004546:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 8004548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pclk = HAL_RCC_GetPCLK1Freq();
 800454a:	f7fe fdb5 	bl	80030b8 <HAL_RCC_GetPCLK1Freq>
 800454e:	e7f3      	b.n	8004538 <UART_SetConfig+0xb8>
        pclk = (uint32_t) HSI_VALUE;
 8004550:	4e40      	ldr	r6, [pc, #256]	@ (8004654 <UART_SetConfig+0x1d4>)
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004552:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8004554:	4b40      	ldr	r3, [pc, #256]	@ (8004658 <UART_SetConfig+0x1d8>)
 8004556:	0052      	lsls	r2, r2, #1
 8004558:	5ad7      	ldrh	r7, [r2, r3]
 800455a:	0030      	movs	r0, r6
 800455c:	0039      	movs	r1, r7
 800455e:	f7fb fde5 	bl	800012c <__udivsi3>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004562:	2303      	movs	r3, #3
 8004564:	6865      	ldr	r5, [r4, #4]
 8004566:	436b      	muls	r3, r5
 8004568:	4283      	cmp	r3, r0
 800456a:	d8dc      	bhi.n	8004526 <UART_SetConfig+0xa6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800456c:	032b      	lsls	r3, r5, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800456e:	4283      	cmp	r3, r0
 8004570:	d3d9      	bcc.n	8004526 <UART_SetConfig+0xa6>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004572:	2300      	movs	r3, #0
 8004574:	003a      	movs	r2, r7
 8004576:	0030      	movs	r0, r6
 8004578:	0019      	movs	r1, r3
 800457a:	f7fb ff87 	bl	800048c <__aeabi_uldivmod>
 800457e:	2700      	movs	r7, #0
 8004580:	0e06      	lsrs	r6, r0, #24
 8004582:	020b      	lsls	r3, r1, #8
 8004584:	4333      	orrs	r3, r6
 8004586:	0202      	lsls	r2, r0, #8
 8004588:	086e      	lsrs	r6, r5, #1
 800458a:	1992      	adds	r2, r2, r6
 800458c:	417b      	adcs	r3, r7
 800458e:	0010      	movs	r0, r2
 8004590:	0019      	movs	r1, r3
 8004592:	002a      	movs	r2, r5
 8004594:	003b      	movs	r3, r7
 8004596:	f7fb ff79 	bl	800048c <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800459a:	4b30      	ldr	r3, [pc, #192]	@ (800465c <UART_SetConfig+0x1dc>)
 800459c:	18c2      	adds	r2, r0, r3
 800459e:	4b30      	ldr	r3, [pc, #192]	@ (8004660 <UART_SetConfig+0x1e0>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d8c0      	bhi.n	8004526 <UART_SetConfig+0xa6>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80045a4:	6823      	ldr	r3, [r4, #0]
 80045a6:	60d8      	str	r0, [r3, #12]
 80045a8:	e7c8      	b.n	800453c <UART_SetConfig+0xbc>
        pclk = HAL_RCC_GetSysClockFreq();
 80045aa:	f7fe fc93 	bl	8002ed4 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 80045ae:	2800      	cmp	r0, #0
 80045b0:	d0c4      	beq.n	800453c <UART_SetConfig+0xbc>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80045b2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80045b4:	4b28      	ldr	r3, [pc, #160]	@ (8004658 <UART_SetConfig+0x1d8>)
 80045b6:	0052      	lsls	r2, r2, #1
 80045b8:	5ad1      	ldrh	r1, [r2, r3]
 80045ba:	f7fb fdb7 	bl	800012c <__udivsi3>
 80045be:	6865      	ldr	r5, [r4, #4]
 80045c0:	0040      	lsls	r0, r0, #1
 80045c2:	086b      	lsrs	r3, r5, #1
 80045c4:	18c0      	adds	r0, r0, r3
 80045c6:	0029      	movs	r1, r5
 80045c8:	f7fb fdb0 	bl	800012c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045cc:	0002      	movs	r2, r0
 80045ce:	4b25      	ldr	r3, [pc, #148]	@ (8004664 <UART_SetConfig+0x1e4>)
 80045d0:	3a10      	subs	r2, #16
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d8a7      	bhi.n	8004526 <UART_SetConfig+0xa6>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045d6:	230f      	movs	r3, #15
 80045d8:	0002      	movs	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045da:	0700      	lsls	r0, r0, #28
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045dc:	439a      	bics	r2, r3
 80045de:	b293      	uxth	r3, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045e0:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 80045e2:	6822      	ldr	r2, [r4, #0]
 80045e4:	4303      	orrs	r3, r0
 80045e6:	60d3      	str	r3, [r2, #12]
 80045e8:	e7a8      	b.n	800453c <UART_SetConfig+0xbc>
        pclk = (uint32_t) HSI_VALUE;
 80045ea:	481a      	ldr	r0, [pc, #104]	@ (8004654 <UART_SetConfig+0x1d4>)
 80045ec:	e7e1      	b.n	80045b2 <UART_SetConfig+0x132>
        pclk = HAL_RCC_GetPCLK1Freq();
 80045ee:	f7fe fd63 	bl	80030b8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80045f2:	2800      	cmp	r0, #0
 80045f4:	d0a2      	beq.n	800453c <UART_SetConfig+0xbc>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80045f6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80045f8:	4b17      	ldr	r3, [pc, #92]	@ (8004658 <UART_SetConfig+0x1d8>)
 80045fa:	0052      	lsls	r2, r2, #1
 80045fc:	5ad1      	ldrh	r1, [r2, r3]
 80045fe:	f7fb fd95 	bl	800012c <__udivsi3>
 8004602:	6865      	ldr	r5, [r4, #4]
 8004604:	086b      	lsrs	r3, r5, #1
 8004606:	18c0      	adds	r0, r0, r3
 8004608:	0029      	movs	r1, r5
 800460a:	f7fb fd8f 	bl	800012c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800460e:	0002      	movs	r2, r0
 8004610:	4b14      	ldr	r3, [pc, #80]	@ (8004664 <UART_SetConfig+0x1e4>)
 8004612:	3a10      	subs	r2, #16
 8004614:	e7c4      	b.n	80045a0 <UART_SetConfig+0x120>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004616:	4298      	cmp	r0, r3
 8004618:	d0e7      	beq.n	80045ea <UART_SetConfig+0x16a>
 800461a:	480e      	ldr	r0, [pc, #56]	@ (8004654 <UART_SetConfig+0x1d4>)
 800461c:	e7eb      	b.n	80045f6 <UART_SetConfig+0x176>
 800461e:	2380      	movs	r3, #128	@ 0x80
 8004620:	021b      	lsls	r3, r3, #8
 8004622:	4298      	cmp	r0, r3
 8004624:	d1e3      	bne.n	80045ee <UART_SetConfig+0x16e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004626:	f7fe fd47 	bl	80030b8 <HAL_RCC_GetPCLK1Freq>
        break;
 800462a:	e7c0      	b.n	80045ae <UART_SetConfig+0x12e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800462c:	4298      	cmp	r0, r3
 800462e:	d0c0      	beq.n	80045b2 <UART_SetConfig+0x132>
        pclk = (uint32_t) LSE_VALUE;
 8004630:	0018      	movs	r0, r3
 8004632:	e7e0      	b.n	80045f6 <UART_SetConfig+0x176>
 8004634:	cfff69f3 	.word	0xcfff69f3
 8004638:	ffffcfff 	.word	0xffffcfff
 800463c:	40008000 	.word	0x40008000
 8004640:	11fff4ff 	.word	0x11fff4ff
 8004644:	40013800 	.word	0x40013800
 8004648:	40021000 	.word	0x40021000
 800464c:	40004400 	.word	0x40004400
 8004650:	00010001 	.word	0x00010001
 8004654:	00f42400 	.word	0x00f42400
 8004658:	08006a68 	.word	0x08006a68
 800465c:	fffffd00 	.word	0xfffffd00
 8004660:	000ffcff 	.word	0x000ffcff
 8004664:	0000ffef 	.word	0x0000ffef

08004668 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004668:	6a83      	ldr	r3, [r0, #40]	@ 0x28
{
 800466a:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800466c:	071a      	lsls	r2, r3, #28
 800466e:	d506      	bpl.n	800467e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004670:	6801      	ldr	r1, [r0, #0]
 8004672:	4c28      	ldr	r4, [pc, #160]	@ (8004714 <UART_AdvFeatureConfig+0xac>)
 8004674:	684a      	ldr	r2, [r1, #4]
 8004676:	4022      	ands	r2, r4
 8004678:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 800467a:	4322      	orrs	r2, r4
 800467c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800467e:	07da      	lsls	r2, r3, #31
 8004680:	d506      	bpl.n	8004690 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004682:	6801      	ldr	r1, [r0, #0]
 8004684:	4c24      	ldr	r4, [pc, #144]	@ (8004718 <UART_AdvFeatureConfig+0xb0>)
 8004686:	684a      	ldr	r2, [r1, #4]
 8004688:	4022      	ands	r2, r4
 800468a:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 800468c:	4322      	orrs	r2, r4
 800468e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004690:	079a      	lsls	r2, r3, #30
 8004692:	d506      	bpl.n	80046a2 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004694:	6801      	ldr	r1, [r0, #0]
 8004696:	4c21      	ldr	r4, [pc, #132]	@ (800471c <UART_AdvFeatureConfig+0xb4>)
 8004698:	684a      	ldr	r2, [r1, #4]
 800469a:	4022      	ands	r2, r4
 800469c:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 800469e:	4322      	orrs	r2, r4
 80046a0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046a2:	075a      	lsls	r2, r3, #29
 80046a4:	d506      	bpl.n	80046b4 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046a6:	6801      	ldr	r1, [r0, #0]
 80046a8:	4c1d      	ldr	r4, [pc, #116]	@ (8004720 <UART_AdvFeatureConfig+0xb8>)
 80046aa:	684a      	ldr	r2, [r1, #4]
 80046ac:	4022      	ands	r2, r4
 80046ae:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 80046b0:	4322      	orrs	r2, r4
 80046b2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80046b4:	06da      	lsls	r2, r3, #27
 80046b6:	d506      	bpl.n	80046c6 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046b8:	6801      	ldr	r1, [r0, #0]
 80046ba:	4c1a      	ldr	r4, [pc, #104]	@ (8004724 <UART_AdvFeatureConfig+0xbc>)
 80046bc:	688a      	ldr	r2, [r1, #8]
 80046be:	4022      	ands	r2, r4
 80046c0:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 80046c2:	4322      	orrs	r2, r4
 80046c4:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046c6:	069a      	lsls	r2, r3, #26
 80046c8:	d506      	bpl.n	80046d8 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046ca:	6801      	ldr	r1, [r0, #0]
 80046cc:	4c16      	ldr	r4, [pc, #88]	@ (8004728 <UART_AdvFeatureConfig+0xc0>)
 80046ce:	688a      	ldr	r2, [r1, #8]
 80046d0:	4022      	ands	r2, r4
 80046d2:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 80046d4:	4322      	orrs	r2, r4
 80046d6:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046d8:	065a      	lsls	r2, r3, #25
 80046da:	d510      	bpl.n	80046fe <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046dc:	6801      	ldr	r1, [r0, #0]
 80046de:	4d13      	ldr	r5, [pc, #76]	@ (800472c <UART_AdvFeatureConfig+0xc4>)
 80046e0:	684a      	ldr	r2, [r1, #4]
 80046e2:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 80046e4:	402a      	ands	r2, r5
 80046e6:	4322      	orrs	r2, r4
 80046e8:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046ea:	2280      	movs	r2, #128	@ 0x80
 80046ec:	0352      	lsls	r2, r2, #13
 80046ee:	4294      	cmp	r4, r2
 80046f0:	d105      	bne.n	80046fe <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046f2:	684a      	ldr	r2, [r1, #4]
 80046f4:	4c0e      	ldr	r4, [pc, #56]	@ (8004730 <UART_AdvFeatureConfig+0xc8>)
 80046f6:	4022      	ands	r2, r4
 80046f8:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 80046fa:	4322      	orrs	r2, r4
 80046fc:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046fe:	061b      	lsls	r3, r3, #24
 8004700:	d506      	bpl.n	8004710 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004702:	6802      	ldr	r2, [r0, #0]
 8004704:	490b      	ldr	r1, [pc, #44]	@ (8004734 <UART_AdvFeatureConfig+0xcc>)
 8004706:	6853      	ldr	r3, [r2, #4]
 8004708:	400b      	ands	r3, r1
 800470a:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800470c:	430b      	orrs	r3, r1
 800470e:	6053      	str	r3, [r2, #4]
}
 8004710:	bd30      	pop	{r4, r5, pc}
 8004712:	46c0      	nop			@ (mov r8, r8)
 8004714:	ffff7fff 	.word	0xffff7fff
 8004718:	fffdffff 	.word	0xfffdffff
 800471c:	fffeffff 	.word	0xfffeffff
 8004720:	fffbffff 	.word	0xfffbffff
 8004724:	ffffefff 	.word	0xffffefff
 8004728:	ffffdfff 	.word	0xffffdfff
 800472c:	ffefffff 	.word	0xffefffff
 8004730:	ff9fffff 	.word	0xff9fffff
 8004734:	fff7ffff 	.word	0xfff7ffff

08004738 <UART_WaitOnFlagUntilTimeout>:
{
 8004738:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800473a:	0004      	movs	r4, r0
 800473c:	000d      	movs	r5, r1
 800473e:	0017      	movs	r7, r2
 8004740:	9300      	str	r3, [sp, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004742:	6822      	ldr	r2, [r4, #0]
 8004744:	69d3      	ldr	r3, [r2, #28]
 8004746:	402b      	ands	r3, r5
 8004748:	1b5b      	subs	r3, r3, r5
 800474a:	4259      	negs	r1, r3
 800474c:	414b      	adcs	r3, r1
 800474e:	42bb      	cmp	r3, r7
 8004750:	d001      	beq.n	8004756 <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8004752:	2000      	movs	r0, #0
 8004754:	e026      	b.n	80047a4 <UART_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 8004756:	9b08      	ldr	r3, [sp, #32]
 8004758:	3301      	adds	r3, #1
 800475a:	d0f3      	beq.n	8004744 <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800475c:	f7fd fc90 	bl	8002080 <HAL_GetTick>
 8004760:	9b00      	ldr	r3, [sp, #0]
 8004762:	1ac0      	subs	r0, r0, r3
 8004764:	9b08      	ldr	r3, [sp, #32]
 8004766:	4298      	cmp	r0, r3
 8004768:	d82d      	bhi.n	80047c6 <UART_WaitOnFlagUntilTimeout+0x8e>
 800476a:	2b00      	cmp	r3, #0
 800476c:	d02b      	beq.n	80047c6 <UART_WaitOnFlagUntilTimeout+0x8e>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800476e:	6823      	ldr	r3, [r4, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	0752      	lsls	r2, r2, #29
 8004774:	d5e5      	bpl.n	8004742 <UART_WaitOnFlagUntilTimeout+0xa>
 8004776:	002a      	movs	r2, r5
 8004778:	2140      	movs	r1, #64	@ 0x40
 800477a:	3a40      	subs	r2, #64	@ 0x40
 800477c:	438a      	bics	r2, r1
 800477e:	d0e0      	beq.n	8004742 <UART_WaitOnFlagUntilTimeout+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004780:	69da      	ldr	r2, [r3, #28]
 8004782:	2608      	movs	r6, #8
 8004784:	0011      	movs	r1, r2
 8004786:	4031      	ands	r1, r6
 8004788:	9101      	str	r1, [sp, #4]
 800478a:	4232      	tst	r2, r6
 800478c:	d00b      	beq.n	80047a6 <UART_WaitOnFlagUntilTimeout+0x6e>
          UART_EndRxTransfer(huart);
 800478e:	0020      	movs	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004790:	621e      	str	r6, [r3, #32]
          UART_EndRxTransfer(huart);
 8004792:	f7fe ffd3 	bl	800373c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004796:	0023      	movs	r3, r4
 8004798:	3390      	adds	r3, #144	@ 0x90
 800479a:	601e      	str	r6, [r3, #0]
          __HAL_UNLOCK(huart);
 800479c:	2300      	movs	r3, #0
          return HAL_ERROR;
 800479e:	2001      	movs	r0, #1
          __HAL_UNLOCK(huart);
 80047a0:	3484      	adds	r4, #132	@ 0x84
 80047a2:	7023      	strb	r3, [r4, #0]
}
 80047a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80047a6:	2280      	movs	r2, #128	@ 0x80
 80047a8:	69d9      	ldr	r1, [r3, #28]
 80047aa:	0112      	lsls	r2, r2, #4
 80047ac:	4211      	tst	r1, r2
 80047ae:	d0c8      	beq.n	8004742 <UART_WaitOnFlagUntilTimeout+0xa>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047b0:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 80047b2:	0020      	movs	r0, r4
 80047b4:	f7fe ffc2 	bl	800373c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047b8:	0023      	movs	r3, r4
 80047ba:	2220      	movs	r2, #32
 80047bc:	3390      	adds	r3, #144	@ 0x90
 80047be:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(huart);
 80047c0:	9b01      	ldr	r3, [sp, #4]
 80047c2:	3484      	adds	r4, #132	@ 0x84
 80047c4:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 80047c6:	2003      	movs	r0, #3
 80047c8:	e7ec      	b.n	80047a4 <UART_WaitOnFlagUntilTimeout+0x6c>
	...

080047cc <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047cc:	0003      	movs	r3, r0
{
 80047ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047d0:	2600      	movs	r6, #0
{
 80047d2:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047d4:	3390      	adds	r3, #144	@ 0x90
 80047d6:	601e      	str	r6, [r3, #0]
  tickstart = HAL_GetTick();
 80047d8:	f7fd fc52 	bl	8002080 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047dc:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80047de:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	071b      	lsls	r3, r3, #28
 80047e4:	d51f      	bpl.n	8004826 <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047e6:	2180      	movs	r1, #128	@ 0x80
 80047e8:	4b28      	ldr	r3, [pc, #160]	@ (800488c <UART_CheckIdleState+0xc0>)
 80047ea:	0032      	movs	r2, r6
 80047ec:	9300      	str	r3, [sp, #0]
 80047ee:	0389      	lsls	r1, r1, #14
 80047f0:	0003      	movs	r3, r0
 80047f2:	0020      	movs	r0, r4
 80047f4:	f7ff ffa0 	bl	8004738 <UART_WaitOnFlagUntilTimeout>
 80047f8:	42b0      	cmp	r0, r6
 80047fa:	d014      	beq.n	8004826 <UART_CheckIdleState+0x5a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047fc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004800:	2301      	movs	r3, #1
 8004802:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004806:	2080      	movs	r0, #128	@ 0x80
 8004808:	6822      	ldr	r2, [r4, #0]
 800480a:	6813      	ldr	r3, [r2, #0]
 800480c:	4383      	bics	r3, r0
 800480e:	6013      	str	r3, [r2, #0]
 8004810:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8004814:	0023      	movs	r3, r4
 8004816:	2220      	movs	r2, #32
 8004818:	3388      	adds	r3, #136	@ 0x88
 800481a:	601a      	str	r2, [r3, #0]
      return HAL_TIMEOUT;
 800481c:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 800481e:	2300      	movs	r3, #0
 8004820:	3484      	adds	r4, #132	@ 0x84
 8004822:	7023      	strb	r3, [r4, #0]
}
 8004824:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004826:	0026      	movs	r6, r4
 8004828:	6823      	ldr	r3, [r4, #0]
 800482a:	368c      	adds	r6, #140	@ 0x8c
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	075b      	lsls	r3, r3, #29
 8004830:	d523      	bpl.n	800487a <UART_CheckIdleState+0xae>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004832:	2180      	movs	r1, #128	@ 0x80
 8004834:	4b15      	ldr	r3, [pc, #84]	@ (800488c <UART_CheckIdleState+0xc0>)
 8004836:	2200      	movs	r2, #0
 8004838:	9300      	str	r3, [sp, #0]
 800483a:	0020      	movs	r0, r4
 800483c:	002b      	movs	r3, r5
 800483e:	03c9      	lsls	r1, r1, #15
 8004840:	f7ff ff7a 	bl	8004738 <UART_WaitOnFlagUntilTimeout>
 8004844:	2800      	cmp	r0, #0
 8004846:	d018      	beq.n	800487a <UART_CheckIdleState+0xae>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004848:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800484c:	2201      	movs	r2, #1
 800484e:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004852:	6821      	ldr	r1, [r4, #0]
 8004854:	4d0e      	ldr	r5, [pc, #56]	@ (8004890 <UART_CheckIdleState+0xc4>)
 8004856:	680b      	ldr	r3, [r1, #0]
 8004858:	402b      	ands	r3, r5
 800485a:	600b      	str	r3, [r1, #0]
 800485c:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004860:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004864:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004868:	6821      	ldr	r1, [r4, #0]
 800486a:	688b      	ldr	r3, [r1, #8]
 800486c:	4393      	bics	r3, r2
 800486e:	608b      	str	r3, [r1, #8]
 8004870:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8004874:	2320      	movs	r3, #32
 8004876:	6033      	str	r3, [r6, #0]
      return HAL_TIMEOUT;
 8004878:	e7d0      	b.n	800481c <UART_CheckIdleState+0x50>
  huart->gState = HAL_UART_STATE_READY;
 800487a:	0023      	movs	r3, r4
 800487c:	2220      	movs	r2, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800487e:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8004880:	3388      	adds	r3, #136	@ 0x88
 8004882:	601a      	str	r2, [r3, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8004884:	6032      	str	r2, [r6, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004886:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004888:	6720      	str	r0, [r4, #112]	@ 0x70
  return HAL_OK;
 800488a:	e7c8      	b.n	800481e <UART_CheckIdleState+0x52>
 800488c:	01ffffff 	.word	0x01ffffff
 8004890:	fffffedf 	.word	0xfffffedf

08004894 <HAL_UART_Init>:
{
 8004894:	b570      	push	{r4, r5, r6, lr}
 8004896:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8004898:	d101      	bne.n	800489e <HAL_UART_Init+0xa>
    return HAL_ERROR;
 800489a:	2001      	movs	r0, #1
}
 800489c:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 800489e:	0005      	movs	r5, r0
 80048a0:	3588      	adds	r5, #136	@ 0x88
 80048a2:	682b      	ldr	r3, [r5, #0]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d104      	bne.n	80048b2 <HAL_UART_Init+0x1e>
    huart->Lock = HAL_UNLOCKED;
 80048a8:	0002      	movs	r2, r0
 80048aa:	3284      	adds	r2, #132	@ 0x84
 80048ac:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 80048ae:	f7fd fa9b 	bl	8001de8 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80048b2:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 80048b4:	2101      	movs	r1, #1
 80048b6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80048b8:	602b      	str	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 80048ba:	6813      	ldr	r3, [r2, #0]
 80048bc:	438b      	bics	r3, r1
 80048be:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048c0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d002      	beq.n	80048cc <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 80048c6:	0020      	movs	r0, r4
 80048c8:	f7ff fece 	bl	8004668 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048cc:	0020      	movs	r0, r4
 80048ce:	f7ff fdd7 	bl	8004480 <UART_SetConfig>
 80048d2:	2801      	cmp	r0, #1
 80048d4:	d0e1      	beq.n	800489a <HAL_UART_Init+0x6>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048d6:	6823      	ldr	r3, [r4, #0]
 80048d8:	4907      	ldr	r1, [pc, #28]	@ (80048f8 <HAL_UART_Init+0x64>)
 80048da:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 80048dc:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048de:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048e0:	212a      	movs	r1, #42	@ 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048e4:	689a      	ldr	r2, [r3, #8]
 80048e6:	438a      	bics	r2, r1
 80048e8:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80048ea:	2201      	movs	r2, #1
 80048ec:	6819      	ldr	r1, [r3, #0]
 80048ee:	430a      	orrs	r2, r1
 80048f0:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80048f2:	f7ff ff6b 	bl	80047cc <UART_CheckIdleState>
 80048f6:	e7d1      	b.n	800489c <HAL_UART_Init+0x8>
 80048f8:	ffffb7ff 	.word	0xffffb7ff

080048fc <UART_Start_Receive_IT>:
  huart->RxXferSize  = Size;
 80048fc:	0003      	movs	r3, r0
 80048fe:	335c      	adds	r3, #92	@ 0x5c
{
 8004900:	b570      	push	{r4, r5, r6, lr}
  huart->pRxBuffPtr  = pData;
 8004902:	6581      	str	r1, [r0, #88]	@ 0x58
  UART_MASK_COMPUTATION(huart);
 8004904:	2480      	movs	r4, #128	@ 0x80
  huart->RxXferSize  = Size;
 8004906:	801a      	strh	r2, [r3, #0]
  huart->RxXferCount = Size;
 8004908:	805a      	strh	r2, [r3, #2]
  huart->RxISR       = NULL;
 800490a:	2300      	movs	r3, #0
  UART_MASK_COMPUTATION(huart);
 800490c:	6881      	ldr	r1, [r0, #8]
  huart->RxISR       = NULL;
 800490e:	6743      	str	r3, [r0, #116]	@ 0x74
  UART_MASK_COMPUTATION(huart);
 8004910:	0164      	lsls	r4, r4, #5
 8004912:	42a1      	cmp	r1, r4
 8004914:	d14e      	bne.n	80049b4 <UART_Start_Receive_IT+0xb8>
 8004916:	6903      	ldr	r3, [r0, #16]
 8004918:	1e59      	subs	r1, r3, #1
 800491a:	418b      	sbcs	r3, r1
 800491c:	21ff      	movs	r1, #255	@ 0xff
 800491e:	425b      	negs	r3, r3
 8004920:	438b      	bics	r3, r1
 8004922:	493c      	ldr	r1, [pc, #240]	@ (8004a14 <UART_Start_Receive_IT+0x118>)
 8004924:	185b      	adds	r3, r3, r1
 8004926:	0001      	movs	r1, r0
 8004928:	3160      	adds	r1, #96	@ 0x60
 800492a:	800b      	strh	r3, [r1, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800492c:	0003      	movs	r3, r0
 800492e:	2100      	movs	r1, #0
 8004930:	3390      	adds	r3, #144	@ 0x90
 8004932:	6019      	str	r1, [r3, #0]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004934:	3122      	adds	r1, #34	@ 0x22
 8004936:	3b04      	subs	r3, #4
 8004938:	6019      	str	r1, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800493a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800493e:	2301      	movs	r3, #1
 8004940:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004944:	6801      	ldr	r1, [r0, #0]
 8004946:	688d      	ldr	r5, [r1, #8]
 8004948:	432b      	orrs	r3, r5
 800494a:	608b      	str	r3, [r1, #8]
 800494c:	f384 8810 	msr	PRIMASK, r4
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004950:	2580      	movs	r5, #128	@ 0x80
 8004952:	2180      	movs	r1, #128	@ 0x80
 8004954:	6e46      	ldr	r6, [r0, #100]	@ 0x64
 8004956:	6884      	ldr	r4, [r0, #8]
 8004958:	6903      	ldr	r3, [r0, #16]
 800495a:	05ad      	lsls	r5, r5, #22
 800495c:	0149      	lsls	r1, r1, #5
 800495e:	42ae      	cmp	r6, r5
 8004960:	d13a      	bne.n	80049d8 <UART_Start_Receive_IT+0xdc>
 8004962:	0005      	movs	r5, r0
 8004964:	3568      	adds	r5, #104	@ 0x68
 8004966:	882d      	ldrh	r5, [r5, #0]
 8004968:	4295      	cmp	r5, r2
 800496a:	d835      	bhi.n	80049d8 <UART_Start_Receive_IT+0xdc>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800496c:	4a2a      	ldr	r2, [pc, #168]	@ (8004a18 <UART_Start_Receive_IT+0x11c>)
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800496e:	428c      	cmp	r4, r1
 8004970:	d102      	bne.n	8004978 <UART_Start_Receive_IT+0x7c>
 8004972:	2b00      	cmp	r3, #0
 8004974:	d100      	bne.n	8004978 <UART_Start_Receive_IT+0x7c>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004976:	4a29      	ldr	r2, [pc, #164]	@ (8004a1c <UART_Start_Receive_IT+0x120>)
 8004978:	6742      	str	r2, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00b      	beq.n	8004996 <UART_Start_Receive_IT+0x9a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800497e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004982:	2301      	movs	r3, #1
 8004984:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004988:	6802      	ldr	r2, [r0, #0]
 800498a:	33ff      	adds	r3, #255	@ 0xff
 800498c:	6814      	ldr	r4, [r2, #0]
 800498e:	4323      	orrs	r3, r4
 8004990:	6013      	str	r3, [r2, #0]
 8004992:	f381 8810 	msr	PRIMASK, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004996:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800499a:	2301      	movs	r3, #1
 800499c:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80049a0:	2380      	movs	r3, #128	@ 0x80
 80049a2:	6802      	ldr	r2, [r0, #0]
 80049a4:	055b      	lsls	r3, r3, #21
 80049a6:	6890      	ldr	r0, [r2, #8]
 80049a8:	4303      	orrs	r3, r0
 80049aa:	6093      	str	r3, [r2, #8]
 80049ac:	f381 8810 	msr	PRIMASK, r1
}
 80049b0:	2000      	movs	r0, #0
 80049b2:	bd70      	pop	{r4, r5, r6, pc}
  UART_MASK_COMPUTATION(huart);
 80049b4:	2900      	cmp	r1, #0
 80049b6:	d105      	bne.n	80049c4 <UART_Start_Receive_IT+0xc8>
 80049b8:	6901      	ldr	r1, [r0, #16]
 80049ba:	237f      	movs	r3, #127	@ 0x7f
 80049bc:	2900      	cmp	r1, #0
 80049be:	d1b2      	bne.n	8004926 <UART_Start_Receive_IT+0x2a>
 80049c0:	3380      	adds	r3, #128	@ 0x80
 80049c2:	e7b0      	b.n	8004926 <UART_Start_Receive_IT+0x2a>
 80049c4:	2480      	movs	r4, #128	@ 0x80
 80049c6:	0564      	lsls	r4, r4, #21
 80049c8:	42a1      	cmp	r1, r4
 80049ca:	d1ac      	bne.n	8004926 <UART_Start_Receive_IT+0x2a>
 80049cc:	6901      	ldr	r1, [r0, #16]
 80049ce:	233f      	movs	r3, #63	@ 0x3f
 80049d0:	2900      	cmp	r1, #0
 80049d2:	d1a8      	bne.n	8004926 <UART_Start_Receive_IT+0x2a>
 80049d4:	3340      	adds	r3, #64	@ 0x40
 80049d6:	e7a6      	b.n	8004926 <UART_Start_Receive_IT+0x2a>
      huart->RxISR = UART_RxISR_8BIT;
 80049d8:	4a11      	ldr	r2, [pc, #68]	@ (8004a20 <UART_Start_Receive_IT+0x124>)
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049da:	428c      	cmp	r4, r1
 80049dc:	d102      	bne.n	80049e4 <UART_Start_Receive_IT+0xe8>
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d100      	bne.n	80049e4 <UART_Start_Receive_IT+0xe8>
      huart->RxISR = UART_RxISR_16BIT;
 80049e2:	4a10      	ldr	r2, [pc, #64]	@ (8004a24 <UART_Start_Receive_IT+0x128>)
 80049e4:	6742      	str	r2, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 80049e6:	2201      	movs	r2, #1
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00a      	beq.n	8004a02 <UART_Start_Receive_IT+0x106>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049ec:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049f0:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80049f4:	2390      	movs	r3, #144	@ 0x90
 80049f6:	6802      	ldr	r2, [r0, #0]
 80049f8:	005b      	lsls	r3, r3, #1
 80049fa:	6810      	ldr	r0, [r2, #0]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80049fc:	4303      	orrs	r3, r0
 80049fe:	6013      	str	r3, [r2, #0]
 8004a00:	e7d4      	b.n	80049ac <UART_Start_Receive_IT+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a02:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a06:	f382 8810 	msr	PRIMASK, r2
 8004a0a:	6802      	ldr	r2, [r0, #0]
 8004a0c:	2320      	movs	r3, #32
 8004a0e:	6810      	ldr	r0, [r2, #0]
 8004a10:	e7f4      	b.n	80049fc <UART_Start_Receive_IT+0x100>
 8004a12:	46c0      	nop			@ (mov r8, r8)
 8004a14:	000001ff 	.word	0x000001ff
 8004a18:	080040dd 	.word	0x080040dd
 8004a1c:	080042b1 	.word	0x080042b1
 8004a20:	08003f1d 	.word	0x08003f1d
 8004a24:	08003ffd 	.word	0x08003ffd

08004a28 <HAL_UART_Receive_IT>:
{
 8004a28:	0003      	movs	r3, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a2a:	308c      	adds	r0, #140	@ 0x8c
{
 8004a2c:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a2e:	6804      	ldr	r4, [r0, #0]
    return HAL_BUSY;
 8004a30:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a32:	2c20      	cmp	r4, #32
 8004a34:	d128      	bne.n	8004a88 <HAL_UART_Receive_IT+0x60>
      return HAL_ERROR;
 8004a36:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8004a38:	2900      	cmp	r1, #0
 8004a3a:	d025      	beq.n	8004a88 <HAL_UART_Receive_IT+0x60>
 8004a3c:	2a00      	cmp	r2, #0
 8004a3e:	d023      	beq.n	8004a88 <HAL_UART_Receive_IT+0x60>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a40:	2080      	movs	r0, #128	@ 0x80
 8004a42:	689c      	ldr	r4, [r3, #8]
 8004a44:	0140      	lsls	r0, r0, #5
 8004a46:	4284      	cmp	r4, r0
 8004a48:	d105      	bne.n	8004a56 <HAL_UART_Receive_IT+0x2e>
 8004a4a:	6918      	ldr	r0, [r3, #16]
 8004a4c:	2800      	cmp	r0, #0
 8004a4e:	d102      	bne.n	8004a56 <HAL_UART_Receive_IT+0x2e>
      return HAL_ERROR;
 8004a50:	3001      	adds	r0, #1
      if ((((uint32_t)pData) & 1U) != 0U)
 8004a52:	4201      	tst	r1, r0
 8004a54:	d118      	bne.n	8004a88 <HAL_UART_Receive_IT+0x60>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a56:	2000      	movs	r0, #0
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004a58:	4c0c      	ldr	r4, [pc, #48]	@ (8004a8c <HAL_UART_Receive_IT+0x64>)
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a5a:	66d8      	str	r0, [r3, #108]	@ 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004a5c:	6818      	ldr	r0, [r3, #0]
 8004a5e:	42a0      	cmp	r0, r4
 8004a60:	d00f      	beq.n	8004a82 <HAL_UART_Receive_IT+0x5a>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004a62:	6840      	ldr	r0, [r0, #4]
 8004a64:	0200      	lsls	r0, r0, #8
 8004a66:	d50c      	bpl.n	8004a82 <HAL_UART_Receive_IT+0x5a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a68:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a6c:	2001      	movs	r0, #1
 8004a6e:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004a72:	2080      	movs	r0, #128	@ 0x80
 8004a74:	681c      	ldr	r4, [r3, #0]
 8004a76:	04c0      	lsls	r0, r0, #19
 8004a78:	6826      	ldr	r6, [r4, #0]
 8004a7a:	4330      	orrs	r0, r6
 8004a7c:	6020      	str	r0, [r4, #0]
 8004a7e:	f385 8810 	msr	PRIMASK, r5
    return (UART_Start_Receive_IT(huart, pData, Size));
 8004a82:	0018      	movs	r0, r3
 8004a84:	f7ff ff3a 	bl	80048fc <UART_Start_Receive_IT>
}
 8004a88:	bd70      	pop	{r4, r5, r6, pc}
 8004a8a:	46c0      	nop			@ (mov r8, r8)
 8004a8c:	40008000 	.word	0x40008000

08004a90 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004a90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a92:	0007      	movs	r7, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004a94:	6e43      	ldr	r3, [r0, #100]	@ 0x64
{
 8004a96:	0004      	movs	r4, r0
 8004a98:	376a      	adds	r7, #106	@ 0x6a
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d104      	bne.n	8004aa8 <UARTEx_SetNbDataToProcess+0x18>
  {
    huart->NbTxDataToProcess = 1U;
 8004a9e:	2001      	movs	r0, #1
 8004aa0:	8038      	strh	r0, [r7, #0]
    huart->NbRxDataToProcess = 1U;
 8004aa2:	3468      	adds	r4, #104	@ 0x68
 8004aa4:	8020      	strh	r0, [r4, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004aa6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004aa8:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004aaa:	4e0b      	ldr	r6, [pc, #44]	@ (8004ad8 <UARTEx_SetNbDataToProcess+0x48>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004aac:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004aae:	689b      	ldr	r3, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 8004ab0:	4d0a      	ldr	r5, [pc, #40]	@ (8004adc <UARTEx_SetNbDataToProcess+0x4c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004ab2:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004ab4:	5cf0      	ldrb	r0, [r6, r3]
                               (uint16_t)denominator[tx_fifo_threshold];
 8004ab6:	5ce9      	ldrb	r1, [r5, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004ab8:	00c0      	lsls	r0, r0, #3
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004aba:	9201      	str	r2, [sp, #4]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004abc:	f7fb fbc0 	bl	8000240 <__divsi3>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004ac0:	9b01      	ldr	r3, [sp, #4]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004ac2:	8038      	strh	r0, [r7, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004ac4:	011b      	lsls	r3, r3, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004ac6:	0f5b      	lsrs	r3, r3, #29
 8004ac8:	5cf0      	ldrb	r0, [r6, r3]
                               (uint16_t)denominator[rx_fifo_threshold];
 8004aca:	5ce9      	ldrb	r1, [r5, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004acc:	00c0      	lsls	r0, r0, #3
 8004ace:	f7fb fbb7 	bl	8000240 <__divsi3>
 8004ad2:	b280      	uxth	r0, r0
}
 8004ad4:	e7e5      	b.n	8004aa2 <UARTEx_SetNbDataToProcess+0x12>
 8004ad6:	46c0      	nop			@ (mov r8, r8)
 8004ad8:	08006a88 	.word	0x08006a88
 8004adc:	08006a80 	.word	0x08006a80

08004ae0 <HAL_RS485Ex_Init>:
{
 8004ae0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ae2:	0004      	movs	r4, r0
 8004ae4:	000e      	movs	r6, r1
 8004ae6:	001d      	movs	r5, r3
 8004ae8:	9201      	str	r2, [sp, #4]
  if (huart == NULL)
 8004aea:	2800      	cmp	r0, #0
 8004aec:	d101      	bne.n	8004af2 <HAL_RS485Ex_Init+0x12>
    return HAL_ERROR;
 8004aee:	2001      	movs	r0, #1
}
 8004af0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8004af2:	0007      	movs	r7, r0
 8004af4:	3788      	adds	r7, #136	@ 0x88
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d104      	bne.n	8004b06 <HAL_RS485Ex_Init+0x26>
    huart->Lock = HAL_UNLOCKED;
 8004afc:	0002      	movs	r2, r0
 8004afe:	3284      	adds	r2, #132	@ 0x84
 8004b00:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8004b02:	f7fd f971 	bl	8001de8 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8004b06:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 8004b08:	2101      	movs	r1, #1
 8004b0a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004b0c:	603b      	str	r3, [r7, #0]
  __HAL_UART_DISABLE(huart);
 8004b0e:	6813      	ldr	r3, [r2, #0]
 8004b10:	438b      	bics	r3, r1
 8004b12:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b14:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d002      	beq.n	8004b20 <HAL_RS485Ex_Init+0x40>
    UART_AdvFeatureConfig(huart);
 8004b1a:	0020      	movs	r0, r4
 8004b1c:	f7ff fda4 	bl	8004668 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b20:	0020      	movs	r0, r4
 8004b22:	f7ff fcad 	bl	8004480 <UART_SetConfig>
 8004b26:	2801      	cmp	r0, #1
 8004b28:	d0e1      	beq.n	8004aee <HAL_RS485Ex_Init+0xe>
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8004b2a:	2280      	movs	r2, #128	@ 0x80
 8004b2c:	6823      	ldr	r3, [r4, #0]
 8004b2e:	01d2      	lsls	r2, r2, #7
 8004b30:	6899      	ldr	r1, [r3, #8]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8004b32:	042d      	lsls	r5, r5, #16
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8004b34:	430a      	orrs	r2, r1
 8004b36:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8004b38:	689a      	ldr	r2, [r3, #8]
 8004b3a:	490a      	ldr	r1, [pc, #40]	@ (8004b64 <HAL_RS485Ex_Init+0x84>)
  return (UART_CheckIdleState(huart));
 8004b3c:	0020      	movs	r0, r4
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8004b3e:	400a      	ands	r2, r1
 8004b40:	4332      	orrs	r2, r6
 8004b42:	609a      	str	r2, [r3, #8]
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8004b44:	9a01      	ldr	r2, [sp, #4]
 8004b46:	0551      	lsls	r1, r2, #21
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8004b48:	430d      	orrs	r5, r1
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	4906      	ldr	r1, [pc, #24]	@ (8004b68 <HAL_RS485Ex_Init+0x88>)
 8004b4e:	400a      	ands	r2, r1
 8004b50:	4315      	orrs	r5, r2
  __HAL_UART_ENABLE(huart);
 8004b52:	2201      	movs	r2, #1
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8004b54:	601d      	str	r5, [r3, #0]
  __HAL_UART_ENABLE(huart);
 8004b56:	6819      	ldr	r1, [r3, #0]
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8004b5c:	f7ff fe36 	bl	80047cc <UART_CheckIdleState>
 8004b60:	e7c6      	b.n	8004af0 <HAL_RS485Ex_Init+0x10>
 8004b62:	46c0      	nop			@ (mov r8, r8)
 8004b64:	ffff7fff 	.word	0xffff7fff
 8004b68:	fc00ffff 	.word	0xfc00ffff

08004b6c <HAL_UARTEx_WakeupCallback>:
}
 8004b6c:	4770      	bx	lr

08004b6e <HAL_UARTEx_RxFifoFullCallback>:
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
 8004b6e:	4770      	bx	lr

08004b70 <HAL_UARTEx_TxFifoEmptyCallback>:
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
 8004b70:	4770      	bx	lr
	...

08004b74 <HAL_UARTEx_DisableFifoMode>:
{
 8004b74:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8004b76:	0004      	movs	r4, r0
 8004b78:	3484      	adds	r4, #132	@ 0x84
 8004b7a:	7822      	ldrb	r2, [r4, #0]
{
 8004b7c:	0003      	movs	r3, r0
  __HAL_LOCK(huart);
 8004b7e:	2002      	movs	r0, #2
 8004b80:	2a01      	cmp	r2, #1
 8004b82:	d011      	beq.n	8004ba8 <HAL_UARTEx_DisableFifoMode+0x34>
  huart->gState = HAL_UART_STATE_BUSY;
 8004b84:	001d      	movs	r5, r3
 8004b86:	2224      	movs	r2, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 8004b88:	2601      	movs	r6, #1
  huart->gState = HAL_UART_STATE_BUSY;
 8004b8a:	3588      	adds	r5, #136	@ 0x88
 8004b8c:	602a      	str	r2, [r5, #0]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8004b92:	6810      	ldr	r0, [r2, #0]
 8004b94:	43b0      	bics	r0, r6
 8004b96:	6010      	str	r0, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004b98:	4804      	ldr	r0, [pc, #16]	@ (8004bac <HAL_UARTEx_DisableFifoMode+0x38>)
 8004b9a:	4001      	ands	r1, r0
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004b9c:	2000      	movs	r0, #0
 8004b9e:	6658      	str	r0, [r3, #100]	@ 0x64
  huart->gState = HAL_UART_STATE_READY;
 8004ba0:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ba2:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004ba4:	602b      	str	r3, [r5, #0]
  __HAL_UNLOCK(huart);
 8004ba6:	7020      	strb	r0, [r4, #0]
}
 8004ba8:	bd70      	pop	{r4, r5, r6, pc}
 8004baa:	46c0      	nop			@ (mov r8, r8)
 8004bac:	dfffffff 	.word	0xdfffffff

08004bb0 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8004bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 8004bb2:	0005      	movs	r5, r0
 8004bb4:	3584      	adds	r5, #132	@ 0x84
{
 8004bb6:	000b      	movs	r3, r1
  __HAL_LOCK(huart);
 8004bb8:	7829      	ldrb	r1, [r5, #0]
 8004bba:	2202      	movs	r2, #2
 8004bbc:	2901      	cmp	r1, #1
 8004bbe:	d015      	beq.n	8004bec <HAL_UARTEx_SetTxFifoThreshold+0x3c>
  huart->gState = HAL_UART_STATE_BUSY;
 8004bc0:	0006      	movs	r6, r0
  __HAL_UART_DISABLE(huart);
 8004bc2:	2101      	movs	r1, #1
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004bc4:	6804      	ldr	r4, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004bc6:	3688      	adds	r6, #136	@ 0x88
 8004bc8:	3222      	adds	r2, #34	@ 0x22
 8004bca:	6032      	str	r2, [r6, #0]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004bcc:	6827      	ldr	r7, [r4, #0]
  __HAL_UART_DISABLE(huart);
 8004bce:	6822      	ldr	r2, [r4, #0]
 8004bd0:	438a      	bics	r2, r1
 8004bd2:	6022      	str	r2, [r4, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004bd4:	68a1      	ldr	r1, [r4, #8]
 8004bd6:	00c9      	lsls	r1, r1, #3
 8004bd8:	08c9      	lsrs	r1, r1, #3
 8004bda:	4319      	orrs	r1, r3
 8004bdc:	60a1      	str	r1, [r4, #8]
  UARTEx_SetNbDataToProcess(huart);
 8004bde:	f7ff ff57 	bl	8004a90 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8004be2:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8004be4:	2200      	movs	r2, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004be6:	6027      	str	r7, [r4, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004be8:	6033      	str	r3, [r6, #0]
  __HAL_UNLOCK(huart);
 8004bea:	702a      	strb	r2, [r5, #0]
}
 8004bec:	0010      	movs	r0, r2
 8004bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004bf0 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8004bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 8004bf2:	0005      	movs	r5, r0
 8004bf4:	3584      	adds	r5, #132	@ 0x84
{
 8004bf6:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 8004bf8:	7829      	ldrb	r1, [r5, #0]
 8004bfa:	2302      	movs	r3, #2
 8004bfc:	2901      	cmp	r1, #1
 8004bfe:	d015      	beq.n	8004c2c <HAL_UARTEx_SetRxFifoThreshold+0x3c>
  huart->gState = HAL_UART_STATE_BUSY;
 8004c00:	0006      	movs	r6, r0
  __HAL_UART_DISABLE(huart);
 8004c02:	2101      	movs	r1, #1
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c04:	6804      	ldr	r4, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004c06:	3688      	adds	r6, #136	@ 0x88
 8004c08:	3322      	adds	r3, #34	@ 0x22
 8004c0a:	6033      	str	r3, [r6, #0]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c0c:	6827      	ldr	r7, [r4, #0]
  __HAL_UART_DISABLE(huart);
 8004c0e:	6823      	ldr	r3, [r4, #0]
 8004c10:	438b      	bics	r3, r1
 8004c12:	6023      	str	r3, [r4, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004c14:	68a1      	ldr	r1, [r4, #8]
 8004c16:	4b06      	ldr	r3, [pc, #24]	@ (8004c30 <HAL_UARTEx_SetRxFifoThreshold+0x40>)
 8004c18:	4019      	ands	r1, r3
 8004c1a:	4311      	orrs	r1, r2
 8004c1c:	60a1      	str	r1, [r4, #8]
  UARTEx_SetNbDataToProcess(huart);
 8004c1e:	f7ff ff37 	bl	8004a90 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8004c22:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c24:	6027      	str	r7, [r4, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004c26:	6033      	str	r3, [r6, #0]
  __HAL_UNLOCK(huart);
 8004c28:	2300      	movs	r3, #0
 8004c2a:	702b      	strb	r3, [r5, #0]
}
 8004c2c:	0018      	movs	r0, r3
 8004c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c30:	f1ffffff 	.word	0xf1ffffff

08004c34 <eMBFuncReadCoils>:
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8004c34:	880a      	ldrh	r2, [r1, #0]
{
 8004c36:	0003      	movs	r3, r0
 8004c38:	b570      	push	{r4, r5, r6, lr}
                *usLen += ucNBytes;;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004c3a:	2003      	movs	r0, #3
{
 8004c3c:	000c      	movs	r4, r1
    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8004c3e:	2a05      	cmp	r2, #5
 8004c40:	d12a      	bne.n	8004c98 <eMBFuncReadCoils+0x64>
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
 8004c42:	791a      	ldrb	r2, [r3, #4]
 8004c44:	78d9      	ldrb	r1, [r3, #3]
 8004c46:	0212      	lsls	r2, r2, #8
 8004c48:	430a      	orrs	r2, r1
 8004c4a:	ba52      	rev16	r2, r2
 8004c4c:	b292      	uxth	r2, r2
        if( ( usCoilCount >= 1 ) &&
 8004c4e:	1e51      	subs	r1, r2, #1
 8004c50:	4d14      	ldr	r5, [pc, #80]	@ (8004ca4 <eMBFuncReadCoils+0x70>)
 8004c52:	b289      	uxth	r1, r1
 8004c54:	42a9      	cmp	r1, r5
 8004c56:	d81f      	bhi.n	8004c98 <eMBFuncReadCoils+0x64>
 8004c58:	7899      	ldrb	r1, [r3, #2]
 8004c5a:	7858      	ldrb	r0, [r3, #1]
 8004c5c:	0209      	lsls	r1, r1, #8
 8004c5e:	4301      	orrs	r1, r0
            *usLen = MB_PDU_FUNC_OFF;
 8004c60:	2000      	movs	r0, #0
 8004c62:	8020      	strh	r0, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_COILS;
 8004c64:	3001      	adds	r0, #1
 8004c66:	7018      	strb	r0, [r3, #0]
            *usLen += 1;
 8004c68:	8820      	ldrh	r0, [r4, #0]
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
 8004c6a:	08d5      	lsrs	r5, r2, #3
            *usLen += 1;
 8004c6c:	3001      	adds	r0, #1
 8004c6e:	8020      	strh	r0, [r4, #0]
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
 8004c70:	b2ed      	uxtb	r5, r5
            if( ( usCoilCount & 0x0007 ) != 0 )
 8004c72:	0750      	lsls	r0, r2, #29
 8004c74:	d001      	beq.n	8004c7a <eMBFuncReadCoils+0x46>
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
 8004c76:	3501      	adds	r5, #1
 8004c78:	b2ed      	uxtb	r5, r5
            *pucFrameCur++ = ucNBytes;
 8004c7a:	705d      	strb	r5, [r3, #1]
            *usLen += 1;
 8004c7c:	8820      	ldrh	r0, [r4, #0]
 8004c7e:	ba49      	rev16	r1, r1
 8004c80:	3001      	adds	r0, #1
        usRegAddress++;
 8004c82:	3101      	adds	r1, #1
            *usLen += 1;
 8004c84:	8020      	strh	r0, [r4, #0]
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
 8004c86:	b289      	uxth	r1, r1
            *pucFrameCur++ = ucNBytes;
 8004c88:	1c98      	adds	r0, r3, #2
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	f7fc ff30 	bl	8001af0 <eMBRegCoilsCB>
            if( eRegStatus != MB_ENOERR )
 8004c90:	2800      	cmp	r0, #0
 8004c92:	d002      	beq.n	8004c9a <eMBFuncReadCoils+0x66>
                eStatus = prveMBError2Exception( eRegStatus );
 8004c94:	f000 f98e 	bl	8004fb4 <prveMBError2Exception>
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8004c98:	bd70      	pop	{r4, r5, r6, pc}
                *usLen += ucNBytes;;
 8004c9a:	8823      	ldrh	r3, [r4, #0]
 8004c9c:	18ed      	adds	r5, r5, r3
 8004c9e:	8025      	strh	r5, [r4, #0]
 8004ca0:	e7fa      	b.n	8004c98 <eMBFuncReadCoils+0x64>
 8004ca2:	46c0      	nop			@ (mov r8, r8)
 8004ca4:	000007ce 	.word	0x000007ce

08004ca8 <eMBFuncWriteCoil>:
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8004ca8:	880b      	ldrh	r3, [r1, #0]
{
 8004caa:	0002      	movs	r2, r0
 8004cac:	b513      	push	{r0, r1, r4, lr}
                eStatus = prveMBError2Exception( eRegStatus );
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004cae:	2003      	movs	r0, #3
    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8004cb0:	2b05      	cmp	r3, #5
 8004cb2:	d11e      	bne.n	8004cf2 <eMBFuncWriteCoil+0x4a>
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8004cb4:	7914      	ldrb	r4, [r2, #4]
 8004cb6:	2c00      	cmp	r4, #0
 8004cb8:	d11b      	bne.n	8004cf2 <eMBFuncWriteCoil+0x4a>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8004cba:	78d3      	ldrb	r3, [r2, #3]
 8004cbc:	1e59      	subs	r1, r3, #1
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8004cbe:	b2c9      	uxtb	r1, r1
 8004cc0:	29fd      	cmp	r1, #253	@ 0xfd
 8004cc2:	d916      	bls.n	8004cf2 <eMBFuncWriteCoil+0x4a>
 8004cc4:	7850      	ldrb	r0, [r2, #1]
 8004cc6:	7891      	ldrb	r1, [r2, #2]
            ucBuf[1] = 0;
 8004cc8:	466a      	mov	r2, sp
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 8004cca:	3bff      	subs	r3, #255	@ 0xff
            ucBuf[1] = 0;
 8004ccc:	7154      	strb	r4, [r2, #5]
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 8004cce:	425a      	negs	r2, r3
 8004cd0:	4153      	adcs	r3, r2
 8004cd2:	466a      	mov	r2, sp
 8004cd4:	7113      	strb	r3, [r2, #4]
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	0209      	lsls	r1, r1, #8
 8004cda:	4301      	orrs	r1, r0
            eRegStatus =
 8004cdc:	ba49      	rev16	r1, r1
        usRegAddress++;
 8004cde:	3101      	adds	r1, #1
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );
 8004ce0:	001a      	movs	r2, r3
 8004ce2:	b289      	uxth	r1, r1
 8004ce4:	a801      	add	r0, sp, #4
 8004ce6:	f7fc ff03 	bl	8001af0 <eMBRegCoilsCB>
            if( eRegStatus != MB_ENOERR )
 8004cea:	2800      	cmp	r0, #0
 8004cec:	d001      	beq.n	8004cf2 <eMBFuncWriteCoil+0x4a>
                eStatus = prveMBError2Exception( eRegStatus );
 8004cee:	f000 f961 	bl	8004fb4 <prveMBError2Exception>
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8004cf2:	bd16      	pop	{r1, r2, r4, pc}

08004cf4 <eMBFuncWriteMultipleCoils>:
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8004cf4:	880a      	ldrh	r2, [r1, #0]
{
 8004cf6:	0003      	movs	r3, r0
 8004cf8:	b570      	push	{r4, r5, r6, lr}
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004cfa:	2003      	movs	r0, #3
{
 8004cfc:	000c      	movs	r4, r1
    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8004cfe:	2a05      	cmp	r2, #5
 8004d00:	d924      	bls.n	8004d4c <eMBFuncWriteMultipleCoils+0x58>
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 8004d02:	791a      	ldrb	r2, [r3, #4]
 8004d04:	78d9      	ldrb	r1, [r3, #3]
 8004d06:	0212      	lsls	r2, r2, #8
 8004d08:	430a      	orrs	r2, r1
 8004d0a:	ba52      	rev16	r2, r2
 8004d0c:	b292      	uxth	r2, r2
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 8004d0e:	08d5      	lsrs	r5, r2, #3
 8004d10:	b2ed      	uxtb	r5, r5
        if( ( usCoilCnt & 0x0007 ) != 0 )
 8004d12:	0751      	lsls	r1, r2, #29
 8004d14:	d001      	beq.n	8004d1a <eMBFuncWriteMultipleCoils+0x26>
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 8004d16:	3501      	adds	r5, #1
 8004d18:	b2ed      	uxtb	r5, r5
        if( ( usCoilCnt >= 1 ) &&
 8004d1a:	26f6      	movs	r6, #246	@ 0xf6
 8004d1c:	1e51      	subs	r1, r2, #1
 8004d1e:	b289      	uxth	r1, r1
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004d20:	2003      	movs	r0, #3
        if( ( usCoilCnt >= 1 ) &&
 8004d22:	00f6      	lsls	r6, r6, #3
 8004d24:	42b1      	cmp	r1, r6
 8004d26:	d211      	bcs.n	8004d4c <eMBFuncWriteMultipleCoils+0x58>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
 8004d28:	7959      	ldrb	r1, [r3, #5]
 8004d2a:	42a9      	cmp	r1, r5
 8004d2c:	d10e      	bne.n	8004d4c <eMBFuncWriteMultipleCoils+0x58>
            eRegStatus =
 8004d2e:	7899      	ldrb	r1, [r3, #2]
 8004d30:	7858      	ldrb	r0, [r3, #1]
 8004d32:	0209      	lsls	r1, r1, #8
 8004d34:	4301      	orrs	r1, r0
 8004d36:	ba49      	rev16	r1, r1
        usRegAddress++;
 8004d38:	3101      	adds	r1, #1
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 8004d3a:	1d98      	adds	r0, r3, #6
 8004d3c:	b289      	uxth	r1, r1
 8004d3e:	2301      	movs	r3, #1
 8004d40:	f7fc fed6 	bl	8001af0 <eMBRegCoilsCB>
            if( eRegStatus != MB_ENOERR )
 8004d44:	2800      	cmp	r0, #0
 8004d46:	d002      	beq.n	8004d4e <eMBFuncWriteMultipleCoils+0x5a>
                eStatus = prveMBError2Exception( eRegStatus );
 8004d48:	f000 f934 	bl	8004fb4 <prveMBError2Exception>
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8004d4c:	bd70      	pop	{r4, r5, r6, pc}
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8004d4e:	2305      	movs	r3, #5
 8004d50:	8023      	strh	r3, [r4, #0]
 8004d52:	e7fb      	b.n	8004d4c <eMBFuncWriteMultipleCoils+0x58>

08004d54 <eMBFuncReadDiscreteInputs>:
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8004d54:	880a      	ldrh	r2, [r1, #0]
{
 8004d56:	0003      	movs	r3, r0
 8004d58:	b570      	push	{r4, r5, r6, lr}
                *usLen += ucNBytes;;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004d5a:	2003      	movs	r0, #3
{
 8004d5c:	000c      	movs	r4, r1
    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8004d5e:	2a05      	cmp	r2, #5
 8004d60:	d129      	bne.n	8004db6 <eMBFuncReadDiscreteInputs+0x62>
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
 8004d62:	791a      	ldrb	r2, [r3, #4]
 8004d64:	78d9      	ldrb	r1, [r3, #3]
 8004d66:	0212      	lsls	r2, r2, #8
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	ba52      	rev16	r2, r2
 8004d6c:	b292      	uxth	r2, r2
        if( ( usDiscreteCnt >= 1 ) &&
 8004d6e:	1e51      	subs	r1, r2, #1
 8004d70:	4d13      	ldr	r5, [pc, #76]	@ (8004dc0 <eMBFuncReadDiscreteInputs+0x6c>)
 8004d72:	b289      	uxth	r1, r1
 8004d74:	42a9      	cmp	r1, r5
 8004d76:	d81e      	bhi.n	8004db6 <eMBFuncReadDiscreteInputs+0x62>
 8004d78:	7899      	ldrb	r1, [r3, #2]
 8004d7a:	7858      	ldrb	r0, [r3, #1]
 8004d7c:	0209      	lsls	r1, r1, #8
 8004d7e:	4301      	orrs	r1, r0
            *usLen = MB_PDU_FUNC_OFF;
 8004d80:	2000      	movs	r0, #0
 8004d82:	8020      	strh	r0, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
 8004d84:	3002      	adds	r0, #2
 8004d86:	7018      	strb	r0, [r3, #0]
            *usLen += 1;
 8004d88:	8820      	ldrh	r0, [r4, #0]
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
 8004d8a:	08d5      	lsrs	r5, r2, #3
            *usLen += 1;
 8004d8c:	3001      	adds	r0, #1
 8004d8e:	8020      	strh	r0, [r4, #0]
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
 8004d90:	b2ed      	uxtb	r5, r5
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
 8004d92:	0750      	lsls	r0, r2, #29
 8004d94:	d001      	beq.n	8004d9a <eMBFuncReadDiscreteInputs+0x46>
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
 8004d96:	3501      	adds	r5, #1
 8004d98:	b2ed      	uxtb	r5, r5
            *pucFrameCur++ = ucNBytes;
 8004d9a:	705d      	strb	r5, [r3, #1]
            *usLen += 1;
 8004d9c:	8820      	ldrh	r0, [r4, #0]
 8004d9e:	ba49      	rev16	r1, r1
 8004da0:	3001      	adds	r0, #1
        usRegAddress++;
 8004da2:	3101      	adds	r1, #1
            *usLen += 1;
 8004da4:	8020      	strh	r0, [r4, #0]
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );
 8004da6:	b289      	uxth	r1, r1
            *pucFrameCur++ = ucNBytes;
 8004da8:	1c98      	adds	r0, r3, #2
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );
 8004daa:	f7fc fea3 	bl	8001af4 <eMBRegDiscreteCB>
            if( eRegStatus != MB_ENOERR )
 8004dae:	2800      	cmp	r0, #0
 8004db0:	d002      	beq.n	8004db8 <eMBFuncReadDiscreteInputs+0x64>
                eStatus = prveMBError2Exception( eRegStatus );
 8004db2:	f000 f8ff 	bl	8004fb4 <prveMBError2Exception>
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8004db6:	bd70      	pop	{r4, r5, r6, pc}
                *usLen += ucNBytes;;
 8004db8:	8823      	ldrh	r3, [r4, #0]
 8004dba:	18ed      	adds	r5, r5, r3
 8004dbc:	8025      	strh	r5, [r4, #0]
 8004dbe:	e7fa      	b.n	8004db6 <eMBFuncReadDiscreteInputs+0x62>
 8004dc0:	000007ce 	.word	0x000007ce

08004dc4 <eMBFuncWriteHoldingRegister>:
{
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8004dc4:	880a      	ldrh	r2, [r1, #0]
{
 8004dc6:	0003      	movs	r3, r0
 8004dc8:	b510      	push	{r4, lr}
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004dca:	2003      	movs	r0, #3
    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8004dcc:	2a05      	cmp	r2, #5
 8004dce:	d10f      	bne.n	8004df0 <eMBFuncWriteHoldingRegister+0x2c>
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8004dd0:	785a      	ldrb	r2, [r3, #1]
 8004dd2:	7899      	ldrb	r1, [r3, #2]
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 8004dd4:	1818      	adds	r0, r3, r0
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	0209      	lsls	r1, r1, #8
 8004dda:	4311      	orrs	r1, r2
 8004ddc:	ba49      	rev16	r1, r1
        usRegAddress++;
 8004dde:	3101      	adds	r1, #1
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 8004de0:	001a      	movs	r2, r3
 8004de2:	b289      	uxth	r1, r1
 8004de4:	f7fc fe5c 	bl	8001aa0 <eMBRegHoldingCB>
        if( eRegStatus != MB_ENOERR )
 8004de8:	2800      	cmp	r0, #0
 8004dea:	d001      	beq.n	8004df0 <eMBFuncWriteHoldingRegister+0x2c>
            eStatus = prveMBError2Exception( eRegStatus );
 8004dec:	f000 f8e2 	bl	8004fb4 <prveMBError2Exception>
    }
    return eStatus;
}
 8004df0:	bd10      	pop	{r4, pc}

08004df2 <eMBFuncWriteMultipleHoldingRegister>:
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8004df2:	880a      	ldrh	r2, [r1, #0]
{
 8004df4:	0003      	movs	r3, r0
 8004df6:	b570      	push	{r4, r5, r6, lr}
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004df8:	2003      	movs	r0, #3
{
 8004dfa:	000c      	movs	r4, r1
    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8004dfc:	2a05      	cmp	r2, #5
 8004dfe:	d91c      	bls.n	8004e3a <eMBFuncWriteMultipleHoldingRegister+0x48>
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 8004e00:	791a      	ldrb	r2, [r3, #4]
 8004e02:	78d9      	ldrb	r1, [r3, #3]
 8004e04:	0212      	lsls	r2, r2, #8
 8004e06:	430a      	orrs	r2, r1
 8004e08:	ba52      	rev16	r2, r2
 8004e0a:	b292      	uxth	r2, r2
        if( ( usRegCount >= 1 ) &&
 8004e0c:	1e51      	subs	r1, r2, #1
 8004e0e:	2977      	cmp	r1, #119	@ 0x77
 8004e10:	d813      	bhi.n	8004e3a <eMBFuncWriteMultipleHoldingRegister+0x48>
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
 8004e12:	0051      	lsls	r1, r2, #1
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 8004e14:	795d      	ldrb	r5, [r3, #5]
 8004e16:	b2c9      	uxtb	r1, r1
 8004e18:	428d      	cmp	r5, r1
 8004e1a:	d10e      	bne.n	8004e3a <eMBFuncWriteMultipleHoldingRegister+0x48>
            eRegStatus =
 8004e1c:	7899      	ldrb	r1, [r3, #2]
 8004e1e:	7858      	ldrb	r0, [r3, #1]
 8004e20:	0209      	lsls	r1, r1, #8
 8004e22:	4301      	orrs	r1, r0
 8004e24:	ba49      	rev16	r1, r1
        usRegAddress++;
 8004e26:	3101      	adds	r1, #1
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 8004e28:	1d98      	adds	r0, r3, #6
 8004e2a:	b289      	uxth	r1, r1
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	f7fc fe37 	bl	8001aa0 <eMBRegHoldingCB>
            if( eRegStatus != MB_ENOERR )
 8004e32:	2800      	cmp	r0, #0
 8004e34:	d002      	beq.n	8004e3c <eMBFuncWriteMultipleHoldingRegister+0x4a>
                eStatus = prveMBError2Exception( eRegStatus );
 8004e36:	f000 f8bd 	bl	8004fb4 <prveMBError2Exception>
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8004e3a:	bd70      	pop	{r4, r5, r6, pc}
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8004e3c:	2305      	movs	r3, #5
 8004e3e:	8023      	strh	r3, [r4, #0]
 8004e40:	e7fb      	b.n	8004e3a <eMBFuncWriteMultipleHoldingRegister+0x48>

08004e42 <eMBFuncReadHoldingRegister>:
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8004e42:	880b      	ldrh	r3, [r1, #0]
{
 8004e44:	b570      	push	{r4, r5, r6, lr}
 8004e46:	0006      	movs	r6, r0
 8004e48:	000c      	movs	r4, r1
                *usLen += usRegCount * 2;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004e4a:	2003      	movs	r0, #3
    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8004e4c:	2b05      	cmp	r3, #5
 8004e4e:	d11c      	bne.n	8004e8a <eMBFuncReadHoldingRegister+0x48>
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 8004e50:	7932      	ldrb	r2, [r6, #4]
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 8004e52:	1e53      	subs	r3, r2, #1
 8004e54:	2b7c      	cmp	r3, #124	@ 0x7c
 8004e56:	d818      	bhi.n	8004e8a <eMBFuncReadHoldingRegister+0x48>
 8004e58:	78b1      	ldrb	r1, [r6, #2]
 8004e5a:	7873      	ldrb	r3, [r6, #1]
 8004e5c:	0209      	lsls	r1, r1, #8
 8004e5e:	4319      	orrs	r1, r3
            *usLen = MB_PDU_FUNC_OFF;
 8004e60:	2300      	movs	r3, #0
 8004e62:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 8004e64:	7030      	strb	r0, [r6, #0]
            *usLen += 1;
 8004e66:	8820      	ldrh	r0, [r4, #0]
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 8004e68:	0055      	lsls	r5, r2, #1
            *usLen += 1;
 8004e6a:	3001      	adds	r0, #1
 8004e6c:	8020      	strh	r0, [r4, #0]
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 8004e6e:	7075      	strb	r5, [r6, #1]
            *usLen += 1;
 8004e70:	8820      	ldrh	r0, [r4, #0]
 8004e72:	ba49      	rev16	r1, r1
 8004e74:	3001      	adds	r0, #1
        usRegAddress++;
 8004e76:	3101      	adds	r1, #1
            *usLen += 1;
 8004e78:	8020      	strh	r0, [r4, #0]
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 8004e7a:	b289      	uxth	r1, r1
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 8004e7c:	1cb0      	adds	r0, r6, #2
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 8004e7e:	f7fc fe0f 	bl	8001aa0 <eMBRegHoldingCB>
            if( eRegStatus != MB_ENOERR )
 8004e82:	2800      	cmp	r0, #0
 8004e84:	d002      	beq.n	8004e8c <eMBFuncReadHoldingRegister+0x4a>
                eStatus = prveMBError2Exception( eRegStatus );
 8004e86:	f000 f895 	bl	8004fb4 <prveMBError2Exception>
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8004e8a:	bd70      	pop	{r4, r5, r6, pc}
                *usLen += usRegCount * 2;
 8004e8c:	8823      	ldrh	r3, [r4, #0]
 8004e8e:	195b      	adds	r3, r3, r5
 8004e90:	8023      	strh	r3, [r4, #0]
 8004e92:	e7fa      	b.n	8004e8a <eMBFuncReadHoldingRegister+0x48>

08004e94 <eMBFuncReadWriteMultipleHoldingRegister>:
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8004e94:	880b      	ldrh	r3, [r1, #0]
{
 8004e96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e98:	0004      	movs	r4, r0
 8004e9a:	000d      	movs	r5, r1
    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8004e9c:	2b09      	cmp	r3, #9
 8004e9e:	d942      	bls.n	8004f26 <eMBFuncReadWriteMultipleHoldingRegister+0x92>
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
        usRegReadAddress++;

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 8004ea0:	7906      	ldrb	r6, [r0, #4]
 8004ea2:	78c3      	ldrb	r3, [r0, #3]
 8004ea4:	0236      	lsls	r6, r6, #8
 8004ea6:	431e      	orrs	r6, r3
 8004ea8:	ba76      	rev16	r6, r6
 8004eaa:	b2b7      	uxth	r7, r6
        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 8004eac:	1e7b      	subs	r3, r7, #1
                eStatus = prveMBError2Exception( eRegStatus );
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004eae:	2003      	movs	r0, #3
        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 8004eb0:	2b7c      	cmp	r3, #124	@ 0x7c
 8004eb2:	d839      	bhi.n	8004f28 <eMBFuncReadWriteMultipleHoldingRegister+0x94>
 8004eb4:	7a22      	ldrb	r2, [r4, #8]
 8004eb6:	79e3      	ldrb	r3, [r4, #7]
 8004eb8:	0212      	lsls	r2, r2, #8
 8004eba:	431a      	orrs	r2, r3
 8004ebc:	ba52      	rev16	r2, r2
 8004ebe:	b292      	uxth	r2, r2
 8004ec0:	1e53      	subs	r3, r2, #1
 8004ec2:	2b78      	cmp	r3, #120	@ 0x78
 8004ec4:	d830      	bhi.n	8004f28 <eMBFuncReadWriteMultipleHoldingRegister+0x94>
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
 8004ec6:	7a61      	ldrb	r1, [r4, #9]
 8004ec8:	0053      	lsls	r3, r2, #1
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 8004eca:	428b      	cmp	r3, r1
 8004ecc:	d12c      	bne.n	8004f28 <eMBFuncReadWriteMultipleHoldingRegister+0x94>
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
 8004ece:	0020      	movs	r0, r4
 8004ed0:	78a3      	ldrb	r3, [r4, #2]
 8004ed2:	7861      	ldrb	r1, [r4, #1]
 8004ed4:	021b      	lsls	r3, r3, #8
 8004ed6:	430b      	orrs	r3, r1
 8004ed8:	79a1      	ldrb	r1, [r4, #6]
 8004eda:	9301      	str	r3, [sp, #4]
 8004edc:	7963      	ldrb	r3, [r4, #5]
 8004ede:	0209      	lsls	r1, r1, #8
 8004ee0:	4319      	orrs	r1, r3
 8004ee2:	ba49      	rev16	r1, r1
        usRegWriteAddress++;
 8004ee4:	3101      	adds	r1, #1
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	b289      	uxth	r1, r1
 8004eea:	300a      	adds	r0, #10
 8004eec:	f7fc fdd8 	bl	8001aa0 <eMBRegHoldingCB>
 8004ef0:	1e03      	subs	r3, r0, #0
            if( eRegStatus == MB_ENOERR )
 8004ef2:	d11a      	bne.n	8004f2a <eMBFuncReadWriteMultipleHoldingRegister+0x96>
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 8004ef4:	2217      	movs	r2, #23
                *usLen = MB_PDU_FUNC_OFF;
 8004ef6:	8028      	strh	r0, [r5, #0]
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 8004ef8:	7022      	strb	r2, [r4, #0]
                *usLen += 1;
 8004efa:	882a      	ldrh	r2, [r5, #0]
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 8004efc:	1ca0      	adds	r0, r4, #2
                *usLen += 1;
 8004efe:	3201      	adds	r2, #1
 8004f00:	802a      	strh	r2, [r5, #0]
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 8004f02:	007a      	lsls	r2, r7, #1
 8004f04:	7062      	strb	r2, [r4, #1]
                *usLen += 1;
 8004f06:	882a      	ldrh	r2, [r5, #0]
 8004f08:	3201      	adds	r2, #1
 8004f0a:	802a      	strh	r2, [r5, #0]
                eRegStatus =
 8004f0c:	9a01      	ldr	r2, [sp, #4]
 8004f0e:	ba51      	rev16	r1, r2
        usRegReadAddress++;
 8004f10:	3101      	adds	r1, #1
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
 8004f12:	003a      	movs	r2, r7
 8004f14:	b289      	uxth	r1, r1
 8004f16:	f7fc fdc3 	bl	8001aa0 <eMBRegHoldingCB>
                if( eRegStatus == MB_ENOERR )
 8004f1a:	2800      	cmp	r0, #0
 8004f1c:	d105      	bne.n	8004f2a <eMBFuncReadWriteMultipleHoldingRegister+0x96>
                    *usLen += 2 * usRegReadCount;
 8004f1e:	882b      	ldrh	r3, [r5, #0]
 8004f20:	0076      	lsls	r6, r6, #1
 8004f22:	199b      	adds	r3, r3, r6
 8004f24:	802b      	strh	r3, [r5, #0]
    eMBException    eStatus = MB_EX_NONE;
 8004f26:	2000      	movs	r0, #0
        }
    }
    return eStatus;
}
 8004f28:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
                eStatus = prveMBError2Exception( eRegStatus );
 8004f2a:	f000 f843 	bl	8004fb4 <prveMBError2Exception>
 8004f2e:	e7fb      	b.n	8004f28 <eMBFuncReadWriteMultipleHoldingRegister+0x94>

08004f30 <eMBFuncReadInputRegister>:
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8004f30:	880a      	ldrh	r2, [r1, #0]
{
 8004f32:	0003      	movs	r3, r0
 8004f34:	b570      	push	{r4, r5, r6, lr}
                *usLen += usRegCount * 2;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004f36:	2003      	movs	r0, #3
{
 8004f38:	000c      	movs	r4, r1
    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8004f3a:	2a05      	cmp	r2, #5
 8004f3c:	d122      	bne.n	8004f84 <eMBFuncReadInputRegister+0x54>
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 8004f3e:	791d      	ldrb	r5, [r3, #4]
 8004f40:	78da      	ldrb	r2, [r3, #3]
 8004f42:	022d      	lsls	r5, r5, #8
 8004f44:	4315      	orrs	r5, r2
 8004f46:	ba6d      	rev16	r5, r5
 8004f48:	b2aa      	uxth	r2, r5
        if( ( usRegCount >= 1 )
 8004f4a:	1e51      	subs	r1, r2, #1
 8004f4c:	297b      	cmp	r1, #123	@ 0x7b
 8004f4e:	d819      	bhi.n	8004f84 <eMBFuncReadInputRegister+0x54>
 8004f50:	7899      	ldrb	r1, [r3, #2]
 8004f52:	7858      	ldrb	r0, [r3, #1]
 8004f54:	0209      	lsls	r1, r1, #8
 8004f56:	4301      	orrs	r1, r0
            *usLen = MB_PDU_FUNC_OFF;
 8004f58:	2000      	movs	r0, #0
 8004f5a:	8020      	strh	r0, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
 8004f5c:	3004      	adds	r0, #4
 8004f5e:	7018      	strb	r0, [r3, #0]
            *usLen += 1;
 8004f60:	8820      	ldrh	r0, [r4, #0]
 8004f62:	ba49      	rev16	r1, r1
 8004f64:	3001      	adds	r0, #1
 8004f66:	8020      	strh	r0, [r4, #0]
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 8004f68:	0050      	lsls	r0, r2, #1
 8004f6a:	7058      	strb	r0, [r3, #1]
            *usLen += 1;
 8004f6c:	8820      	ldrh	r0, [r4, #0]
        usRegAddress++;
 8004f6e:	3101      	adds	r1, #1
            *usLen += 1;
 8004f70:	3001      	adds	r0, #1
 8004f72:	8020      	strh	r0, [r4, #0]
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );
 8004f74:	b289      	uxth	r1, r1
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 8004f76:	1c98      	adds	r0, r3, #2
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );
 8004f78:	f7fc fd90 	bl	8001a9c <eMBRegInputCB>
            if( eRegStatus != MB_ENOERR )
 8004f7c:	2800      	cmp	r0, #0
 8004f7e:	d002      	beq.n	8004f86 <eMBFuncReadInputRegister+0x56>
                eStatus = prveMBError2Exception( eRegStatus );
 8004f80:	f000 f818 	bl	8004fb4 <prveMBError2Exception>
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8004f84:	bd70      	pop	{r4, r5, r6, pc}
                *usLen += usRegCount * 2;
 8004f86:	8823      	ldrh	r3, [r4, #0]
 8004f88:	006d      	lsls	r5, r5, #1
 8004f8a:	195b      	adds	r3, r3, r5
 8004f8c:	8023      	strh	r3, [r4, #0]
 8004f8e:	e7f9      	b.n	8004f84 <eMBFuncReadInputRegister+0x54>

08004f90 <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 8004f90:	b570      	push	{r4, r5, r6, lr}
 8004f92:	000d      	movs	r5, r1
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 8004f94:	4b05      	ldr	r3, [pc, #20]	@ (8004fac <eMBFuncReportSlaveID+0x1c>)
 8004f96:	4906      	ldr	r1, [pc, #24]	@ (8004fb0 <eMBFuncReportSlaveID+0x20>)
 8004f98:	881c      	ldrh	r4, [r3, #0]
 8004f9a:	3001      	adds	r0, #1
 8004f9c:	0022      	movs	r2, r4
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 8004f9e:	3401      	adds	r4, #1
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 8004fa0:	f000 fecf 	bl	8005d42 <memcpy>
    return MB_EX_NONE;
}
 8004fa4:	2000      	movs	r0, #0
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 8004fa6:	802c      	strh	r4, [r5, #0]
}
 8004fa8:	bd70      	pop	{r4, r5, r6, pc}
 8004faa:	46c0      	nop			@ (mov r8, r8)
 8004fac:	2000036c 	.word	0x2000036c
 8004fb0:	2000036e 	.word	0x2000036e

08004fb4 <prveMBError2Exception>:
    return ( UCHAR ) usWordBuf;
}

eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
 8004fb4:	0003      	movs	r3, r0
 8004fb6:	2004      	movs	r0, #4
 8004fb8:	2b07      	cmp	r3, #7
 8004fba:	d801      	bhi.n	8004fc0 <prveMBError2Exception+0xc>
 8004fbc:	4a01      	ldr	r2, [pc, #4]	@ (8004fc4 <prveMBError2Exception+0x10>)
 8004fbe:	5cd0      	ldrb	r0, [r2, r3]
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
            break;
    }

    return eStatus;
}
 8004fc0:	4770      	bx	lr
 8004fc2:	46c0      	nop			@ (mov r8, r8)
 8004fc4:	08006a90 	.word	0x08006a90

08004fc8 <eMBInit>:
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 8004fc8:	b570      	push	{r4, r5, r6, lr}
 8004fca:	0004      	movs	r4, r0
 8004fcc:	0008      	movs	r0, r1
    eMBErrorCode    eStatus = MB_ENOERR;

    /* check preconditions */
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
        ( ucSlaveAddress < MB_ADDRESS_MIN ) || ( ucSlaveAddress > MB_ADDRESS_MAX ) )
 8004fce:	1e45      	subs	r5, r0, #1
{
 8004fd0:	0011      	movs	r1, r2
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
 8004fd2:	b2ed      	uxtb	r5, r5
{
 8004fd4:	001a      	movs	r2, r3
 8004fd6:	ab04      	add	r3, sp, #16
 8004fd8:	781b      	ldrb	r3, [r3, #0]
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
 8004fda:	2df6      	cmp	r5, #246	@ 0xf6
 8004fdc:	d902      	bls.n	8004fe4 <eMBInit+0x1c>
    {
        eStatus = MB_EINVAL;
 8004fde:	2402      	movs	r4, #2
                eMBState = STATE_DISABLED;
            }
        }
    }
    return eStatus;
}
 8004fe0:	0020      	movs	r0, r4
 8004fe2:	bd70      	pop	{r4, r5, r6, pc}
        ucMBAddress = ucSlaveAddress;
 8004fe4:	4d14      	ldr	r5, [pc, #80]	@ (8005038 <eMBInit+0x70>)
 8004fe6:	7028      	strb	r0, [r5, #0]
        switch ( eMode )
 8004fe8:	2c00      	cmp	r4, #0
 8004fea:	d1f8      	bne.n	8004fde <eMBInit+0x16>
            pvMBFrameStartCur = eMBRTUStart;
 8004fec:	4d13      	ldr	r5, [pc, #76]	@ (800503c <eMBInit+0x74>)
 8004fee:	4e14      	ldr	r6, [pc, #80]	@ (8005040 <eMBInit+0x78>)
 8004ff0:	602e      	str	r6, [r5, #0]
            pvMBFrameStopCur = eMBRTUStop;
 8004ff2:	4d14      	ldr	r5, [pc, #80]	@ (8005044 <eMBInit+0x7c>)
 8004ff4:	4e14      	ldr	r6, [pc, #80]	@ (8005048 <eMBInit+0x80>)
 8004ff6:	602e      	str	r6, [r5, #0]
            peMBFrameSendCur = eMBRTUSend;
 8004ff8:	4d14      	ldr	r5, [pc, #80]	@ (800504c <eMBInit+0x84>)
 8004ffa:	4e15      	ldr	r6, [pc, #84]	@ (8005050 <eMBInit+0x88>)
 8004ffc:	602e      	str	r6, [r5, #0]
            peMBFrameReceiveCur = eMBRTUReceive;
 8004ffe:	4d15      	ldr	r5, [pc, #84]	@ (8005054 <eMBInit+0x8c>)
 8005000:	4e15      	ldr	r6, [pc, #84]	@ (8005058 <eMBInit+0x90>)
 8005002:	602e      	str	r6, [r5, #0]
            pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
 8005004:	4d15      	ldr	r5, [pc, #84]	@ (800505c <eMBInit+0x94>)
 8005006:	602c      	str	r4, [r5, #0]
            pxMBFrameCBByteReceived = xMBRTUReceiveFSM;
 8005008:	4c15      	ldr	r4, [pc, #84]	@ (8005060 <eMBInit+0x98>)
 800500a:	4d16      	ldr	r5, [pc, #88]	@ (8005064 <eMBInit+0x9c>)
 800500c:	6025      	str	r5, [r4, #0]
            pxMBFrameCBTransmitterEmpty = xMBRTUTransmitFSM;
 800500e:	4c16      	ldr	r4, [pc, #88]	@ (8005068 <eMBInit+0xa0>)
 8005010:	4d16      	ldr	r5, [pc, #88]	@ (800506c <eMBInit+0xa4>)
 8005012:	6025      	str	r5, [r4, #0]
            pxMBPortCBTimerExpired = xMBRTUTimerT35Expired;
 8005014:	4c16      	ldr	r4, [pc, #88]	@ (8005070 <eMBInit+0xa8>)
 8005016:	4d17      	ldr	r5, [pc, #92]	@ (8005074 <eMBInit+0xac>)
 8005018:	6025      	str	r5, [r4, #0]
            eStatus = eMBRTUInit( ucMBAddress, ucPort, ulBaudRate, eParity );
 800501a:	f000 f9b1 	bl	8005380 <eMBRTUInit>
 800501e:	1e04      	subs	r4, r0, #0
        if( eStatus == MB_ENOERR )
 8005020:	d1de      	bne.n	8004fe0 <eMBInit+0x18>
            if( !xMBPortEventInit(  ) )
 8005022:	f000 f8d5 	bl	80051d0 <xMBPortEventInit>
 8005026:	2800      	cmp	r0, #0
 8005028:	d003      	beq.n	8005032 <eMBInit+0x6a>
                eMBState = STATE_DISABLED;
 800502a:	2201      	movs	r2, #1
 800502c:	4b12      	ldr	r3, [pc, #72]	@ (8005078 <eMBInit+0xb0>)
 800502e:	701a      	strb	r2, [r3, #0]
 8005030:	e7d6      	b.n	8004fe0 <eMBInit+0x18>
                eStatus = MB_EPORTERR;
 8005032:	2403      	movs	r4, #3
 8005034:	e7d4      	b.n	8004fe0 <eMBInit+0x18>
 8005036:	46c0      	nop			@ (mov r8, r8)
 8005038:	200003bc 	.word	0x200003bc
 800503c:	200003b4 	.word	0x200003b4
 8005040:	080053cd 	.word	0x080053cd
 8005044:	200003b0 	.word	0x200003b0
 8005048:	080053ed 	.word	0x080053ed
 800504c:	200003b8 	.word	0x200003b8
 8005050:	08005471 	.word	0x08005471
 8005054:	200003ac 	.word	0x200003ac
 8005058:	08005405 	.word	0x08005405
 800505c:	200003a8 	.word	0x200003a8
 8005060:	200003a4 	.word	0x200003a4
 8005064:	080054f1 	.word	0x080054f1
 8005068:	200003a0 	.word	0x200003a0
 800506c:	08005581 	.word	0x08005581
 8005070:	2000039c 	.word	0x2000039c
 8005074:	0800560d 	.word	0x0800560d
 8005078:	2000008c 	.word	0x2000008c

0800507c <eMBEnable>:
    return eStatus;
}

eMBErrorCode
eMBEnable( void )
{
 800507c:	b510      	push	{r4, lr}
    eMBErrorCode    eStatus = MB_ENOERR;

    if( eMBState == STATE_DISABLED )
 800507e:	4c05      	ldr	r4, [pc, #20]	@ (8005094 <eMBEnable+0x18>)
        pvMBFrameStartCur(  );
        eMBState = STATE_ENABLED;
    }
    else
    {
        eStatus = MB_EILLSTATE;
 8005080:	2006      	movs	r0, #6
    if( eMBState == STATE_DISABLED )
 8005082:	7823      	ldrb	r3, [r4, #0]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d104      	bne.n	8005092 <eMBEnable+0x16>
        pvMBFrameStartCur(  );
 8005088:	4b03      	ldr	r3, [pc, #12]	@ (8005098 <eMBEnable+0x1c>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 800508e:	2000      	movs	r0, #0
 8005090:	7020      	strb	r0, [r4, #0]
    }
    return eStatus;
}
 8005092:	bd10      	pop	{r4, pc}
 8005094:	2000008c 	.word	0x2000008c
 8005098:	200003b4 	.word	0x200003b4

0800509c <eMBPoll>:
    return eStatus;
}

eMBErrorCode
eMBPoll( void )
{
 800509c:	b5f0      	push	{r4, r5, r6, r7, lr}
    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 800509e:	4b33      	ldr	r3, [pc, #204]	@ (800516c <eMBPoll+0xd0>)
{
 80050a0:	b085      	sub	sp, #20
    if( eMBState != STATE_ENABLED )
 80050a2:	781c      	ldrb	r4, [r3, #0]
 80050a4:	2c00      	cmp	r4, #0
 80050a6:	d15e      	bne.n	8005166 <eMBPoll+0xca>
        return MB_EILLSTATE;
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
 80050a8:	ab02      	add	r3, sp, #8
 80050aa:	1ddd      	adds	r5, r3, #7
 80050ac:	0028      	movs	r0, r5
 80050ae:	f000 f8a3 	bl	80051f8 <xMBPortEventGet>
 80050b2:	0003      	movs	r3, r0
 80050b4:	2801      	cmp	r0, #1
 80050b6:	d104      	bne.n	80050c2 <eMBPoll+0x26>
    {
        switch ( eEvent )
 80050b8:	782a      	ldrb	r2, [r5, #0]
 80050ba:	2a01      	cmp	r2, #1
 80050bc:	d004      	beq.n	80050c8 <eMBPoll+0x2c>
 80050be:	2a02      	cmp	r2, #2
 80050c0:	d016      	beq.n	80050f0 <eMBPoll+0x54>
        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
}
 80050c2:	0020      	movs	r0, r4
 80050c4:	b005      	add	sp, #20
 80050c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 80050c8:	4d29      	ldr	r5, [pc, #164]	@ (8005170 <eMBPoll+0xd4>)
 80050ca:	4b2a      	ldr	r3, [pc, #168]	@ (8005174 <eMBPoll+0xd8>)
 80050cc:	0028      	movs	r0, r5
 80050ce:	4a2a      	ldr	r2, [pc, #168]	@ (8005178 <eMBPoll+0xdc>)
 80050d0:	492a      	ldr	r1, [pc, #168]	@ (800517c <eMBPoll+0xe0>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4798      	blx	r3
            if( eStatus == MB_ENOERR )
 80050d6:	2800      	cmp	r0, #0
 80050d8:	d1f3      	bne.n	80050c2 <eMBPoll+0x26>
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 80050da:	4a29      	ldr	r2, [pc, #164]	@ (8005180 <eMBPoll+0xe4>)
 80050dc:	782b      	ldrb	r3, [r5, #0]
 80050de:	7812      	ldrb	r2, [r2, #0]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d001      	beq.n	80050e8 <eMBPoll+0x4c>
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1ec      	bne.n	80050c2 <eMBPoll+0x26>
                    ( void )xMBPortEventPost( EV_EXECUTE );
 80050e8:	2002      	movs	r0, #2
 80050ea:	f000 f879 	bl	80051e0 <xMBPortEventPost>
 80050ee:	e7e8      	b.n	80050c2 <eMBPoll+0x26>
            eException = MB_EX_ILLEGAL_FUNCTION;
 80050f0:	4e24      	ldr	r6, [pc, #144]	@ (8005184 <eMBPoll+0xe8>)
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 80050f2:	4d22      	ldr	r5, [pc, #136]	@ (800517c <eMBPoll+0xe0>)
            eException = MB_EX_ILLEGAL_FUNCTION;
 80050f4:	7033      	strb	r3, [r6, #0]
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 80050f6:	0023      	movs	r3, r4
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 80050f8:	6828      	ldr	r0, [r5, #0]
 80050fa:	4923      	ldr	r1, [pc, #140]	@ (8005188 <eMBPoll+0xec>)
 80050fc:	7802      	ldrb	r2, [r0, #0]
 80050fe:	9101      	str	r1, [sp, #4]
 8005100:	700a      	strb	r2, [r1, #0]
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 8005102:	4922      	ldr	r1, [pc, #136]	@ (800518c <eMBPoll+0xf0>)
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 8005104:	9200      	str	r2, [sp, #0]
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 8005106:	00df      	lsls	r7, r3, #3
 8005108:	187a      	adds	r2, r7, r1
 800510a:	5dcf      	ldrb	r7, [r1, r7]
 800510c:	4694      	mov	ip, r2
 800510e:	2f00      	cmp	r7, #0
 8005110:	d007      	beq.n	8005122 <eMBPoll+0x86>
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 8005112:	9a00      	ldr	r2, [sp, #0]
 8005114:	42ba      	cmp	r2, r7
 8005116:	d122      	bne.n	800515e <eMBPoll+0xc2>
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 8005118:	4663      	mov	r3, ip
 800511a:	4917      	ldr	r1, [pc, #92]	@ (8005178 <eMBPoll+0xdc>)
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	4798      	blx	r3
 8005120:	7030      	strb	r0, [r6, #0]
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 8005122:	4b13      	ldr	r3, [pc, #76]	@ (8005170 <eMBPoll+0xd4>)
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d0cb      	beq.n	80050c2 <eMBPoll+0x26>
                if( eException != MB_EX_NONE )
 800512a:	7831      	ldrb	r1, [r6, #0]
 800512c:	2900      	cmp	r1, #0
 800512e:	d00d      	beq.n	800514c <eMBPoll+0xb0>
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 8005130:	2201      	movs	r2, #1
 8005132:	9b01      	ldr	r3, [sp, #4]
 8005134:	6828      	ldr	r0, [r5, #0]
 8005136:	781e      	ldrb	r6, [r3, #0]
 8005138:	4b0f      	ldr	r3, [pc, #60]	@ (8005178 <eMBPoll+0xdc>)
 800513a:	801a      	strh	r2, [r3, #0]
 800513c:	3a81      	subs	r2, #129	@ 0x81
 800513e:	4332      	orrs	r2, r6
 8005140:	7002      	strb	r2, [r0, #0]
                    ucMBFrame[usLength++] = eException;
 8005142:	881a      	ldrh	r2, [r3, #0]
 8005144:	6828      	ldr	r0, [r5, #0]
 8005146:	1c56      	adds	r6, r2, #1
 8005148:	801e      	strh	r6, [r3, #0]
 800514a:	5481      	strb	r1, [r0, r2]
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
 800514c:	4b0a      	ldr	r3, [pc, #40]	@ (8005178 <eMBPoll+0xdc>)
 800514e:	6829      	ldr	r1, [r5, #0]
 8005150:	881a      	ldrh	r2, [r3, #0]
 8005152:	4b0b      	ldr	r3, [pc, #44]	@ (8005180 <eMBPoll+0xe4>)
 8005154:	7818      	ldrb	r0, [r3, #0]
 8005156:	4b0e      	ldr	r3, [pc, #56]	@ (8005190 <eMBPoll+0xf4>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4798      	blx	r3
 800515c:	e7b1      	b.n	80050c2 <eMBPoll+0x26>
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 800515e:	3301      	adds	r3, #1
 8005160:	2b10      	cmp	r3, #16
 8005162:	d1d0      	bne.n	8005106 <eMBPoll+0x6a>
 8005164:	e7dd      	b.n	8005122 <eMBPoll+0x86>
        return MB_EILLSTATE;
 8005166:	2406      	movs	r4, #6
 8005168:	e7ab      	b.n	80050c2 <eMBPoll+0x26>
 800516a:	46c0      	nop			@ (mov r8, r8)
 800516c:	2000008c 	.word	0x2000008c
 8005170:	20000398 	.word	0x20000398
 8005174:	200003ac 	.word	0x200003ac
 8005178:	20000390 	.word	0x20000390
 800517c:	20000394 	.word	0x20000394
 8005180:	200003bc 	.word	0x200003bc
 8005184:	2000038e 	.word	0x2000038e
 8005188:	2000038f 	.word	0x2000038f
 800518c:	2000000c 	.word	0x2000000c
 8005190:	200003b8 	.word	0x200003b8

08005194 <EnterCriticalSection>:
  __ASM volatile ("cpsid i" : : : "memory");
 8005194:	b672      	cpsid	i

/*----------------------------------------------------------------------------*/
void EnterCriticalSection()
{
  __disable_irq();
  lockCounter++;
 8005196:	4a02      	ldr	r2, [pc, #8]	@ (80051a0 <EnterCriticalSection+0xc>)
 8005198:	6813      	ldr	r3, [r2, #0]
 800519a:	3301      	adds	r3, #1
 800519c:	6013      	str	r3, [r2, #0]
}
 800519e:	4770      	bx	lr
 80051a0:	200003c8 	.word	0x200003c8

080051a4 <ExitCriticalSection>:


/*----------------------------------------------------------------------------*/
void ExitCriticalSection()
{
  lockCounter--;
 80051a4:	4a03      	ldr	r2, [pc, #12]	@ (80051b4 <ExitCriticalSection+0x10>)
 80051a6:	6813      	ldr	r3, [r2, #0]
 80051a8:	3b01      	subs	r3, #1
 80051aa:	6013      	str	r3, [r2, #0]

  if (lockCounter == 0)
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d100      	bne.n	80051b2 <ExitCriticalSection+0xe>
  __ASM volatile ("cpsie i" : : : "memory");
 80051b0:	b662      	cpsie	i
  {
    __enable_irq();
  }
}
 80051b2:	4770      	bx	lr
 80051b4:	200003c8 	.word	0x200003c8

080051b8 <MT_PORT_SetTimerModule>:


/*----------------------------------------------------------------------------*/\
void MT_PORT_SetTimerModule(TIM_HandleTypeDef* timer)
{
  modbusTimer = timer;
 80051b8:	4b01      	ldr	r3, [pc, #4]	@ (80051c0 <MT_PORT_SetTimerModule+0x8>)
 80051ba:	6018      	str	r0, [r3, #0]
}
 80051bc:	4770      	bx	lr
 80051be:	46c0      	nop			@ (mov r8, r8)
 80051c0:	200003c0 	.word	0x200003c0

080051c4 <MT_PORT_SetUartModule>:


/*----------------------------------------------------------------------------*/\
void MT_PORT_SetUartModule(UART_HandleTypeDef* uart)
{
  modbusUart = uart;
 80051c4:	4b01      	ldr	r3, [pc, #4]	@ (80051cc <MT_PORT_SetUartModule+0x8>)
 80051c6:	6018      	str	r0, [r3, #0]
}
 80051c8:	4770      	bx	lr
 80051ca:	46c0      	nop			@ (mov r8, r8)
 80051cc:	200003c4 	.word	0x200003c4

080051d0 <xMBPortEventInit>:
/* ----------------------- Start implementation -----------------------------*/

/*----------------------------------------------------------------------------*/
BOOL xMBPortEventInit(void)
{
  xEventInQueue = FALSE;
 80051d0:	2200      	movs	r2, #0
 80051d2:	4b02      	ldr	r3, [pc, #8]	@ (80051dc <xMBPortEventInit+0xc>)
  return TRUE;
}
 80051d4:	2001      	movs	r0, #1
  xEventInQueue = FALSE;
 80051d6:	701a      	strb	r2, [r3, #0]
}
 80051d8:	4770      	bx	lr
 80051da:	46c0      	nop			@ (mov r8, r8)
 80051dc:	200003cc 	.word	0x200003cc

080051e0 <xMBPortEventPost>:


/*----------------------------------------------------------------------------*/
BOOL xMBPortEventPost(eMBEventType eEvent)
{
  xEventInQueue = TRUE;
 80051e0:	2201      	movs	r2, #1
 80051e2:	4b03      	ldr	r3, [pc, #12]	@ (80051f0 <xMBPortEventPost+0x10>)
 80051e4:	701a      	strb	r2, [r3, #0]
  eQueuedEvent = eEvent;
 80051e6:	4b03      	ldr	r3, [pc, #12]	@ (80051f4 <xMBPortEventPost+0x14>)
 80051e8:	7018      	strb	r0, [r3, #0]
  return TRUE;
}
 80051ea:	0010      	movs	r0, r2
 80051ec:	4770      	bx	lr
 80051ee:	46c0      	nop			@ (mov r8, r8)
 80051f0:	200003cc 	.word	0x200003cc
 80051f4:	200003cd 	.word	0x200003cd

080051f8 <xMBPortEventGet>:
/*----------------------------------------------------------------------------*/
BOOL xMBPortEventGet(eMBEventType * eEvent)
{
  BOOL xEventHappened = FALSE;

  if( xEventInQueue )
 80051f8:	4a05      	ldr	r2, [pc, #20]	@ (8005210 <xMBPortEventGet+0x18>)
{
 80051fa:	0003      	movs	r3, r0
  if( xEventInQueue )
 80051fc:	7810      	ldrb	r0, [r2, #0]
 80051fe:	2800      	cmp	r0, #0
 8005200:	d005      	beq.n	800520e <xMBPortEventGet+0x16>
  {
    *eEvent = eQueuedEvent;
 8005202:	4904      	ldr	r1, [pc, #16]	@ (8005214 <xMBPortEventGet+0x1c>)
    xEventInQueue = FALSE;
    xEventHappened = TRUE;
 8005204:	2001      	movs	r0, #1
    *eEvent = eQueuedEvent;
 8005206:	7809      	ldrb	r1, [r1, #0]
 8005208:	7019      	strb	r1, [r3, #0]
    xEventInQueue = FALSE;
 800520a:	2300      	movs	r3, #0
 800520c:	7013      	strb	r3, [r2, #0]
  }

  return xEventHappened;
}
 800520e:	4770      	bx	lr
 8005210:	200003cc 	.word	0x200003cc
 8005214:	200003cd 	.word	0x200003cd

08005218 <vMBPortSerialEnable>:

/* ----------------------- Start implementation -----------------------------*/

/*----------------------------------------------------------------------------*/
void vMBPortSerialEnable(BOOL xRxEnable, BOOL xTxEnable)
{
 8005218:	b570      	push	{r4, r5, r6, lr}
  if (xRxEnable == FALSE)
  {
    HAL_UART_AbortReceive_IT(modbusUart);
 800521a:	4d0d      	ldr	r5, [pc, #52]	@ (8005250 <vMBPortSerialEnable+0x38>)
{
 800521c:	0003      	movs	r3, r0
 800521e:	000c      	movs	r4, r1
    HAL_UART_AbortReceive_IT(modbusUart);
 8005220:	6828      	ldr	r0, [r5, #0]
  if (xRxEnable == FALSE)
 8005222:	2b00      	cmp	r3, #0
 8005224:	d107      	bne.n	8005236 <vMBPortSerialEnable+0x1e>
    HAL_UART_AbortReceive_IT(modbusUart);
 8005226:	f7fe fc5d 	bl	8003ae4 <HAL_UART_AbortReceive_IT>
    HAL_UART_Receive_IT(modbusUart, &rxByte, 1);
  }

  if (xTxEnable == FALSE)
  {
    HAL_UART_AbortTransmit_IT(modbusUart);
 800522a:	6828      	ldr	r0, [r5, #0]
  if (xTxEnable == FALSE)
 800522c:	2c00      	cmp	r4, #0
 800522e:	d107      	bne.n	8005240 <vMBPortSerialEnable+0x28>
    HAL_UART_AbortTransmit_IT(modbusUart);
 8005230:	f7fe fbe8 	bl	8003a04 <HAL_UART_AbortTransmit_IT>
    if (modbusUart->gState == HAL_UART_STATE_READY)
    {
      prvvUARTTxReadyISR();
    }
  }
}
 8005234:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UART_Receive_IT(modbusUart, &rxByte, 1);
 8005236:	2201      	movs	r2, #1
 8005238:	4906      	ldr	r1, [pc, #24]	@ (8005254 <vMBPortSerialEnable+0x3c>)
 800523a:	f7ff fbf5 	bl	8004a28 <HAL_UART_Receive_IT>
 800523e:	e7f4      	b.n	800522a <vMBPortSerialEnable+0x12>
    if (modbusUart->gState == HAL_UART_STATE_READY)
 8005240:	3088      	adds	r0, #136	@ 0x88
 8005242:	6803      	ldr	r3, [r0, #0]
 8005244:	2b20      	cmp	r3, #32
 8005246:	d1f5      	bne.n	8005234 <vMBPortSerialEnable+0x1c>


/* --------------------------------------------------------------------------*/
static void prvvUARTTxReadyISR(void)
{
  pxMBFrameCBTransmitterEmpty();
 8005248:	4b03      	ldr	r3, [pc, #12]	@ (8005258 <vMBPortSerialEnable+0x40>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4798      	blx	r3
}
 800524e:	e7f1      	b.n	8005234 <vMBPortSerialEnable+0x1c>
 8005250:	200003c4 	.word	0x200003c4
 8005254:	200003ce 	.word	0x200003ce
 8005258:	200003a0 	.word	0x200003a0

0800525c <xMBPortSerialInit>:
}
 800525c:	2001      	movs	r0, #1
 800525e:	4770      	bx	lr

08005260 <xMBPortSerialPutByte>:
{
 8005260:	b510      	push	{r4, lr}
  txByte = ucByte;
 8005262:	4904      	ldr	r1, [pc, #16]	@ (8005274 <xMBPortSerialPutByte+0x14>)
  HAL_UART_Transmit_IT(modbusUart, &txByte, 1);
 8005264:	4b04      	ldr	r3, [pc, #16]	@ (8005278 <xMBPortSerialPutByte+0x18>)
  txByte = ucByte;
 8005266:	7008      	strb	r0, [r1, #0]
  HAL_UART_Transmit_IT(modbusUart, &txByte, 1);
 8005268:	2201      	movs	r2, #1
 800526a:	6818      	ldr	r0, [r3, #0]
 800526c:	f7fe fb60 	bl	8003930 <HAL_UART_Transmit_IT>
}
 8005270:	2001      	movs	r0, #1
 8005272:	bd10      	pop	{r4, pc}
 8005274:	200003cf 	.word	0x200003cf
 8005278:	200003c4 	.word	0x200003c4

0800527c <xMBPortSerialGetByte>:
{
 800527c:	b510      	push	{r4, lr}
  *pucByte = rxByte;
 800527e:	4905      	ldr	r1, [pc, #20]	@ (8005294 <xMBPortSerialGetByte+0x18>)
  HAL_UART_Receive_IT(modbusUart, &rxByte, 1);
 8005280:	2201      	movs	r2, #1
  *pucByte = rxByte;
 8005282:	780b      	ldrb	r3, [r1, #0]
 8005284:	7003      	strb	r3, [r0, #0]
  HAL_UART_Receive_IT(modbusUart, &rxByte, 1);
 8005286:	4b04      	ldr	r3, [pc, #16]	@ (8005298 <xMBPortSerialGetByte+0x1c>)
 8005288:	6818      	ldr	r0, [r3, #0]
 800528a:	f7ff fbcd 	bl	8004a28 <HAL_UART_Receive_IT>
}
 800528e:	2001      	movs	r0, #1
 8005290:	bd10      	pop	{r4, pc}
 8005292:	46c0      	nop			@ (mov r8, r8)
 8005294:	200003ce 	.word	0x200003ce
 8005298:	200003c4 	.word	0x200003c4

0800529c <HAL_UART_TxCpltCallback>:


/* --------------------------------------------------------------------------*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
  if (huart->Instance == modbusUart->Instance)
 800529c:	4b05      	ldr	r3, [pc, #20]	@ (80052b4 <HAL_UART_TxCpltCallback+0x18>)
 800529e:	6802      	ldr	r2, [r0, #0]
 80052a0:	681b      	ldr	r3, [r3, #0]
{
 80052a2:	b510      	push	{r4, lr}
  if (huart->Instance == modbusUart->Instance)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d102      	bne.n	80052b0 <HAL_UART_TxCpltCallback+0x14>
  pxMBFrameCBTransmitterEmpty();
 80052aa:	4b03      	ldr	r3, [pc, #12]	@ (80052b8 <HAL_UART_TxCpltCallback+0x1c>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4798      	blx	r3
  {
    prvvUARTTxReadyISR();
  }
}
 80052b0:	bd10      	pop	{r4, pc}
 80052b2:	46c0      	nop			@ (mov r8, r8)
 80052b4:	200003c4 	.word	0x200003c4
 80052b8:	200003a0 	.word	0x200003a0

080052bc <HAL_UART_RxCpltCallback>:


/* --------------------------------------------------------------------------*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  if (huart->Instance == modbusUart->Instance)
 80052bc:	4b05      	ldr	r3, [pc, #20]	@ (80052d4 <HAL_UART_RxCpltCallback+0x18>)
 80052be:	6802      	ldr	r2, [r0, #0]
 80052c0:	681b      	ldr	r3, [r3, #0]
{
 80052c2:	b510      	push	{r4, lr}
  if (huart->Instance == modbusUart->Instance)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d102      	bne.n	80052d0 <HAL_UART_RxCpltCallback+0x14>
  pxMBFrameCBByteReceived();
 80052ca:	4b03      	ldr	r3, [pc, #12]	@ (80052d8 <HAL_UART_RxCpltCallback+0x1c>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4798      	blx	r3
  {
    prvvUARTRxISR();
  }
}
 80052d0:	bd10      	pop	{r4, pc}
 80052d2:	46c0      	nop			@ (mov r8, r8)
 80052d4:	200003c4 	.word	0x200003c4
 80052d8:	200003a4 	.word	0x200003a4

080052dc <xMBPortTimersInit>:
/* ----------------------- Start implementation -----------------------------*/

/*----------------------------------------------------------------------------*/
BOOL xMBPortTimersInit(USHORT usTim1Timerout50us)
{
  timerPeriod = usTim1Timerout50us;
 80052dc:	4b01      	ldr	r3, [pc, #4]	@ (80052e4 <xMBPortTimersInit+0x8>)
 80052de:	8018      	strh	r0, [r3, #0]
  return TRUE;
}
 80052e0:	2001      	movs	r0, #1
 80052e2:	4770      	bx	lr
 80052e4:	200003d2 	.word	0x200003d2

080052e8 <vMBPortTimersEnable>:


/* --------------------------------------------------------------------------*/
inline void vMBPortTimersEnable()
{
  timerCounter = 0;
 80052e8:	2200      	movs	r2, #0
{
 80052ea:	b510      	push	{r4, lr}
  timerCounter = 0;
 80052ec:	4b03      	ldr	r3, [pc, #12]	@ (80052fc <vMBPortTimersEnable+0x14>)
 80052ee:	801a      	strh	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(modbusTimer);
 80052f0:	4b03      	ldr	r3, [pc, #12]	@ (8005300 <vMBPortTimersEnable+0x18>)
 80052f2:	6818      	ldr	r0, [r3, #0]
 80052f4:	f7fd ffd4 	bl	80032a0 <HAL_TIM_Base_Start_IT>
}
 80052f8:	bd10      	pop	{r4, pc}
 80052fa:	46c0      	nop			@ (mov r8, r8)
 80052fc:	200003d0 	.word	0x200003d0
 8005300:	200003c0 	.word	0x200003c0

08005304 <vMBPortTimersDisable>:



/* --------------------------------------------------------------------------*/
inline void vMBPortTimersDisable()
{
 8005304:	b510      	push	{r4, lr}
  HAL_TIM_Base_Stop_IT(modbusTimer);
 8005306:	4b02      	ldr	r3, [pc, #8]	@ (8005310 <vMBPortTimersDisable+0xc>)
 8005308:	6818      	ldr	r0, [r3, #0]
 800530a:	f7fd fff9 	bl	8003300 <HAL_TIM_Base_Stop_IT>
}
 800530e:	bd10      	pop	{r4, pc}
 8005310:	200003c0 	.word	0x200003c0

08005314 <HAL_TIM_PeriodElapsedCallback>:


/* --------------------------------------------------------------------------*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  if (htim->Instance == modbusTimer->Instance)
 8005314:	4b09      	ldr	r3, [pc, #36]	@ (800533c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8005316:	6802      	ldr	r2, [r0, #0]
 8005318:	681b      	ldr	r3, [r3, #0]
{
 800531a:	b510      	push	{r4, lr}
  if (htim->Instance == modbusTimer->Instance)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	429a      	cmp	r2, r3
 8005320:	d10b      	bne.n	800533a <HAL_TIM_PeriodElapsedCallback+0x26>
  {
    timerCounter++;
 8005322:	4a07      	ldr	r2, [pc, #28]	@ (8005340 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8005324:	8813      	ldrh	r3, [r2, #0]
 8005326:	3301      	adds	r3, #1
 8005328:	b29b      	uxth	r3, r3
 800532a:	8013      	strh	r3, [r2, #0]

    if (timerCounter == timerPeriod)
 800532c:	4a05      	ldr	r2, [pc, #20]	@ (8005344 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800532e:	8812      	ldrh	r2, [r2, #0]
 8005330:	429a      	cmp	r2, r3
 8005332:	d102      	bne.n	800533a <HAL_TIM_PeriodElapsedCallback+0x26>
    (void)pxMBPortCBTimerExpired();
 8005334:	4b04      	ldr	r3, [pc, #16]	@ (8005348 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4798      	blx	r3
    {
      prvvTIMERExpiredISR();
    }
  }
}
 800533a:	bd10      	pop	{r4, pc}
 800533c:	200003c0 	.word	0x200003c0
 8005340:	200003d0 	.word	0x200003d0
 8005344:	200003d2 	.word	0x200003d2
 8005348:	2000039c 	.word	0x2000039c

0800534c <usMBCRC16>:

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
    UCHAR           ucCRCHi = 0xFF;
    UCHAR           ucCRCLo = 0xFF;
 800534c:	22ff      	movs	r2, #255	@ 0xff
    UCHAR           ucCRCHi = 0xFF;
 800534e:	0013      	movs	r3, r2
{
 8005350:	b5f0      	push	{r4, r5, r6, r7, lr}
    int             iIndex;

    while( usLen-- )
 8005352:	4d08      	ldr	r5, [pc, #32]	@ (8005374 <usMBCRC16+0x28>)
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 8005354:	4e08      	ldr	r6, [pc, #32]	@ (8005378 <usMBCRC16+0x2c>)
        ucCRCHi = aucCRCLo[iIndex];
 8005356:	4f09      	ldr	r7, [pc, #36]	@ (800537c <usMBCRC16+0x30>)
    while( usLen-- )
 8005358:	3901      	subs	r1, #1
 800535a:	b289      	uxth	r1, r1
 800535c:	42a9      	cmp	r1, r5
 800535e:	d102      	bne.n	8005366 <usMBCRC16+0x1a>
    }
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
 8005360:	0218      	lsls	r0, r3, #8
 8005362:	4310      	orrs	r0, r2
}
 8005364:	bdf0      	pop	{r4, r5, r6, r7, pc}
        iIndex = ucCRCLo ^ *( pucFrame++ );
 8005366:	7804      	ldrb	r4, [r0, #0]
 8005368:	3001      	adds	r0, #1
 800536a:	4054      	eors	r4, r2
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 800536c:	5d32      	ldrb	r2, [r6, r4]
 800536e:	405a      	eors	r2, r3
        ucCRCHi = aucCRCLo[iIndex];
 8005370:	5d3b      	ldrb	r3, [r7, r4]
 8005372:	e7f1      	b.n	8005358 <usMBCRC16+0xc>
 8005374:	0000ffff 	.word	0x0000ffff
 8005378:	08006b98 	.word	0x08006b98
 800537c:	08006a98 	.word	0x08006a98

08005380 <eMBRTUInit>:
static volatile USHORT usRcvBufferPos;

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBRTUInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 8005380:	b570      	push	{r4, r5, r6, lr}
 8005382:	000d      	movs	r5, r1
 8005384:	0014      	movs	r4, r2
 8005386:	001e      	movs	r6, r3
    eMBErrorCode    eStatus = MB_ENOERR;
    ULONG           usTimerT35_50us;

    ( void )ucSlaveAddress;
    ENTER_CRITICAL_SECTION(  );
 8005388:	f7ff ff04 	bl	8005194 <EnterCriticalSection>

    /* Modbus RTU uses 8 Databits. */
    if( xMBPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
 800538c:	0033      	movs	r3, r6
 800538e:	2208      	movs	r2, #8
 8005390:	0021      	movs	r1, r4
 8005392:	0028      	movs	r0, r5
 8005394:	f7ff ff62 	bl	800525c <xMBPortSerialInit>
 8005398:	2801      	cmp	r0, #1
 800539a:	d004      	beq.n	80053a6 <eMBRTUInit+0x26>
    {
        eStatus = MB_EPORTERR;
 800539c:	2403      	movs	r4, #3
        if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
        {
            eStatus = MB_EPORTERR;
        }
    }
    EXIT_CRITICAL_SECTION(  );
 800539e:	f7ff ff01 	bl	80051a4 <ExitCriticalSection>

    return eStatus;
}
 80053a2:	0020      	movs	r0, r4
 80053a4:	bd70      	pop	{r4, r5, r6, pc}
        if( ulBaudRate > 19200 )
 80053a6:	2396      	movs	r3, #150	@ 0x96
            usTimerT35_50us = 35;       /* 1800us. */
 80053a8:	2023      	movs	r0, #35	@ 0x23
        if( ulBaudRate > 19200 )
 80053aa:	01db      	lsls	r3, r3, #7
 80053ac:	429c      	cmp	r4, r3
 80053ae:	d803      	bhi.n	80053b8 <eMBRTUInit+0x38>
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
 80053b0:	4805      	ldr	r0, [pc, #20]	@ (80053c8 <eMBRTUInit+0x48>)
 80053b2:	0061      	lsls	r1, r4, #1
 80053b4:	f7fa feba 	bl	800012c <__udivsi3>
        if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
 80053b8:	b280      	uxth	r0, r0
 80053ba:	f7ff ff8f 	bl	80052dc <xMBPortTimersInit>
 80053be:	2801      	cmp	r0, #1
 80053c0:	d1ec      	bne.n	800539c <eMBRTUInit+0x1c>
    eMBErrorCode    eStatus = MB_ENOERR;
 80053c2:	2400      	movs	r4, #0
 80053c4:	e7eb      	b.n	800539e <eMBRTUInit+0x1e>
 80053c6:	46c0      	nop			@ (mov r8, r8)
 80053c8:	00177fa0 	.word	0x00177fa0

080053cc <eMBRTUStart>:

void
eMBRTUStart( void )
{
 80053cc:	b510      	push	{r4, lr}
    ENTER_CRITICAL_SECTION(  );
 80053ce:	f7ff fee1 	bl	8005194 <EnterCriticalSection>
    /* Initially the receiver is in the state STATE_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_RX_INIT;
 80053d2:	2100      	movs	r1, #0
 80053d4:	4b04      	ldr	r3, [pc, #16]	@ (80053e8 <eMBRTUStart+0x1c>)
    vMBPortSerialEnable( TRUE, FALSE );
 80053d6:	2001      	movs	r0, #1
    eRcvState = STATE_RX_INIT;
 80053d8:	7019      	strb	r1, [r3, #0]
    vMBPortSerialEnable( TRUE, FALSE );
 80053da:	f7ff ff1d 	bl	8005218 <vMBPortSerialEnable>
    vMBPortTimersEnable(  );
 80053de:	f7ff ff83 	bl	80052e8 <vMBPortTimersEnable>

    EXIT_CRITICAL_SECTION(  );
 80053e2:	f7ff fedf 	bl	80051a4 <ExitCriticalSection>
}
 80053e6:	bd10      	pop	{r4, pc}
 80053e8:	200004dc 	.word	0x200004dc

080053ec <eMBRTUStop>:

void
eMBRTUStop( void )
{
 80053ec:	b510      	push	{r4, lr}
    ENTER_CRITICAL_SECTION(  );
 80053ee:	f7ff fed1 	bl	8005194 <EnterCriticalSection>
    vMBPortSerialEnable( FALSE, FALSE );
 80053f2:	2100      	movs	r1, #0
 80053f4:	0008      	movs	r0, r1
 80053f6:	f7ff ff0f 	bl	8005218 <vMBPortSerialEnable>
    vMBPortTimersDisable(  );
 80053fa:	f7ff ff83 	bl	8005304 <vMBPortTimersDisable>
    EXIT_CRITICAL_SECTION(  );
 80053fe:	f7ff fed1 	bl	80051a4 <ExitCriticalSection>
}
 8005402:	bd10      	pop	{r4, pc}

08005404 <eMBRTUReceive>:

eMBErrorCode
eMBRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
 8005404:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005406:	0006      	movs	r6, r0
 8005408:	000d      	movs	r5, r1
 800540a:	9201      	str	r2, [sp, #4]
    BOOL            xFrameReceived = FALSE;
    eMBErrorCode    eStatus = MB_ENOERR;

    ENTER_CRITICAL_SECTION(  );
 800540c:	f7ff fec2 	bl	8005194 <EnterCriticalSection>
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );
 8005410:	4c11      	ldr	r4, [pc, #68]	@ (8005458 <eMBRTUReceive+0x54>)
 8005412:	8823      	ldrh	r3, [r4, #0]
 8005414:	2bff      	cmp	r3, #255	@ 0xff
 8005416:	d905      	bls.n	8005424 <eMBRTUReceive+0x20>
 8005418:	219c      	movs	r1, #156	@ 0x9c
 800541a:	4b10      	ldr	r3, [pc, #64]	@ (800545c <eMBRTUReceive+0x58>)
 800541c:	4a10      	ldr	r2, [pc, #64]	@ (8005460 <eMBRTUReceive+0x5c>)
 800541e:	4811      	ldr	r0, [pc, #68]	@ (8005464 <eMBRTUReceive+0x60>)
 8005420:	f000 face 	bl	80059c0 <__assert_func>

    /* Length and CRC check */
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
 8005424:	8823      	ldrh	r3, [r4, #0]
 8005426:	2b03      	cmp	r3, #3
 8005428:	d804      	bhi.n	8005434 <eMBRTUReceive+0x30>
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
        xFrameReceived = TRUE;
    }
    else
    {
        eStatus = MB_EIO;
 800542a:	2405      	movs	r4, #5
    }

    EXIT_CRITICAL_SECTION(  );
 800542c:	f7ff feba 	bl	80051a4 <ExitCriticalSection>
    return eStatus;
}
 8005430:	0020      	movs	r0, r4
 8005432:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        && ( usMBCRC16( ( UCHAR * ) ucRTUBuf, usRcvBufferPos ) == 0 ) )
 8005434:	8821      	ldrh	r1, [r4, #0]
 8005436:	4f0c      	ldr	r7, [pc, #48]	@ (8005468 <eMBRTUReceive+0x64>)
 8005438:	b289      	uxth	r1, r1
 800543a:	0038      	movs	r0, r7
 800543c:	f7ff ff86 	bl	800534c <usMBCRC16>
 8005440:	2800      	cmp	r0, #0
 8005442:	d1f2      	bne.n	800542a <eMBRTUReceive+0x26>
        *pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
 8005444:	783b      	ldrb	r3, [r7, #0]
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 8005446:	9a01      	ldr	r2, [sp, #4]
        *pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
 8005448:	7033      	strb	r3, [r6, #0]
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 800544a:	8823      	ldrh	r3, [r4, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 800544c:	0004      	movs	r4, r0
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 800544e:	3b03      	subs	r3, #3
 8005450:	8013      	strh	r3, [r2, #0]
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
 8005452:	4b06      	ldr	r3, [pc, #24]	@ (800546c <eMBRTUReceive+0x68>)
 8005454:	602b      	str	r3, [r5, #0]
        xFrameReceived = TRUE;
 8005456:	e7e9      	b.n	800542c <eMBRTUReceive+0x28>
 8005458:	200003d4 	.word	0x200003d4
 800545c:	08006c98 	.word	0x08006c98
 8005460:	08006dad 	.word	0x08006dad
 8005464:	08006cbd 	.word	0x08006cbd
 8005468:	200003dc 	.word	0x200003dc
 800546c:	200003dd 	.word	0x200003dd

08005470 <eMBRTUSend>:

eMBErrorCode
eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
 8005470:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005472:	0006      	movs	r6, r0
 8005474:	000c      	movs	r4, r1
 8005476:	9201      	str	r2, [sp, #4]
    eMBErrorCode    eStatus = MB_ENOERR;
    USHORT          usCRC16;

    ENTER_CRITICAL_SECTION(  );
 8005478:	f7ff fe8c 	bl	8005194 <EnterCriticalSection>

    /* Check if the receiver is still in idle state. If not we where to
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_RX_IDLE )
 800547c:	4b17      	ldr	r3, [pc, #92]	@ (80054dc <eMBRTUSend+0x6c>)
        eSndState = STATE_TX_XMIT;
        vMBPortSerialEnable( FALSE, TRUE );
    }
    else
    {
        eStatus = MB_EIO;
 800547e:	2705      	movs	r7, #5
    if( eRcvState == STATE_RX_IDLE )
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	b2dd      	uxtb	r5, r3
 8005484:	2b01      	cmp	r3, #1
 8005486:	d125      	bne.n	80054d4 <eMBRTUSend+0x64>
        usSndBufferCount = 1;
 8005488:	4f15      	ldr	r7, [pc, #84]	@ (80054e0 <eMBRTUSend+0x70>)
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
 800548a:	4b16      	ldr	r3, [pc, #88]	@ (80054e4 <eMBRTUSend+0x74>)
 800548c:	1e60      	subs	r0, r4, #1
        usSndBufferCount = 1;
 800548e:	803d      	strh	r5, [r7, #0]
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 8005490:	7006      	strb	r6, [r0, #0]
        usSndBufferCount += usLength;
 8005492:	9a01      	ldr	r2, [sp, #4]
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
 8005494:	6018      	str	r0, [r3, #0]
        usSndBufferCount += usLength;
 8005496:	883b      	ldrh	r3, [r7, #0]
 8005498:	189b      	adds	r3, r3, r2
 800549a:	b29b      	uxth	r3, r3
 800549c:	803b      	strh	r3, [r7, #0]
        usCRC16 = usMBCRC16( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
 800549e:	8839      	ldrh	r1, [r7, #0]
 80054a0:	b289      	uxth	r1, r1
 80054a2:	f7ff ff53 	bl	800534c <usMBCRC16>
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 80054a6:	883b      	ldrh	r3, [r7, #0]
 80054a8:	4a0f      	ldr	r2, [pc, #60]	@ (80054e8 <eMBRTUSend+0x78>)
 80054aa:	b299      	uxth	r1, r3
 80054ac:	3301      	adds	r3, #1
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	803b      	strh	r3, [r7, #0]
 80054b2:	b2c3      	uxtb	r3, r0
 80054b4:	5453      	strb	r3, [r2, r1]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 80054b6:	883b      	ldrh	r3, [r7, #0]
 80054b8:	0a00      	lsrs	r0, r0, #8
 80054ba:	b299      	uxth	r1, r3
 80054bc:	3301      	adds	r3, #1
 80054be:	b29b      	uxth	r3, r3
 80054c0:	803b      	strh	r3, [r7, #0]
 80054c2:	b2c0      	uxtb	r0, r0
        eSndState = STATE_TX_XMIT;
 80054c4:	4b09      	ldr	r3, [pc, #36]	@ (80054ec <eMBRTUSend+0x7c>)
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 80054c6:	5450      	strb	r0, [r2, r1]
        vMBPortSerialEnable( FALSE, TRUE );
 80054c8:	0029      	movs	r1, r5
 80054ca:	2000      	movs	r0, #0
        eSndState = STATE_TX_XMIT;
 80054cc:	701d      	strb	r5, [r3, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 80054ce:	2700      	movs	r7, #0
        vMBPortSerialEnable( FALSE, TRUE );
 80054d0:	f7ff fea2 	bl	8005218 <vMBPortSerialEnable>
    }
    EXIT_CRITICAL_SECTION(  );
 80054d4:	f7ff fe66 	bl	80051a4 <ExitCriticalSection>
    return eStatus;
}
 80054d8:	0038      	movs	r0, r7
 80054da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80054dc:	200004dc 	.word	0x200004dc
 80054e0:	200003d6 	.word	0x200003d6
 80054e4:	200003d8 	.word	0x200003d8
 80054e8:	200003dc 	.word	0x200003dc
 80054ec:	200004dd 	.word	0x200004dd

080054f0 <xMBRTUReceiveFSM>:

BOOL
xMBRTUReceiveFSM( void )
{
 80054f0:	b507      	push	{r0, r1, r2, lr}
    BOOL            xTaskNeedSwitch = FALSE;
    UCHAR           ucByte;

    assert( eSndState == STATE_TX_IDLE );
 80054f2:	4b1c      	ldr	r3, [pc, #112]	@ (8005564 <xMBRTUReceiveFSM+0x74>)
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d005      	beq.n	8005506 <xMBRTUReceiveFSM+0x16>
 80054fa:	21e6      	movs	r1, #230	@ 0xe6
 80054fc:	4b1a      	ldr	r3, [pc, #104]	@ (8005568 <xMBRTUReceiveFSM+0x78>)
 80054fe:	4a1b      	ldr	r2, [pc, #108]	@ (800556c <xMBRTUReceiveFSM+0x7c>)
 8005500:	481b      	ldr	r0, [pc, #108]	@ (8005570 <xMBRTUReceiveFSM+0x80>)
 8005502:	f000 fa5d 	bl	80059c0 <__assert_func>

    /* Always read the character. */
    ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
 8005506:	466b      	mov	r3, sp
 8005508:	1dd8      	adds	r0, r3, #7
 800550a:	f7ff feb7 	bl	800527c <xMBPortSerialGetByte>

    switch ( eRcvState )
 800550e:	4919      	ldr	r1, [pc, #100]	@ (8005574 <xMBRTUReceiveFSM+0x84>)
 8005510:	780b      	ldrb	r3, [r1, #0]
 8005512:	b2d8      	uxtb	r0, r3
 8005514:	2b03      	cmp	r3, #3
 8005516:	d821      	bhi.n	800555c <xMBRTUReceiveFSM+0x6c>
 8005518:	f7fa fdf4 	bl	8000104 <__gnu_thumb1_case_uqi>
 800551c:	1e11021e 	.word	0x1e11021e
        /* In the idle state we wait for a new character. If a character
         * is received the t1.5 and t3.5 timers are started and the
         * receiver is in the state STATE_RX_RECEIVCE.
         */
    case STATE_RX_IDLE:
        usRcvBufferPos = 0;
 8005520:	2300      	movs	r3, #0
 8005522:	4a15      	ldr	r2, [pc, #84]	@ (8005578 <xMBRTUReceiveFSM+0x88>)
 8005524:	8013      	strh	r3, [r2, #0]
        ucRTUBuf[usRcvBufferPos++] = ucByte;
 8005526:	8813      	ldrh	r3, [r2, #0]
 8005528:	b298      	uxth	r0, r3
 800552a:	3301      	adds	r3, #1
 800552c:	b29b      	uxth	r3, r3
 800552e:	8013      	strh	r3, [r2, #0]
 8005530:	466b      	mov	r3, sp
 8005532:	79da      	ldrb	r2, [r3, #7]
 8005534:	4b11      	ldr	r3, [pc, #68]	@ (800557c <xMBRTUReceiveFSM+0x8c>)
 8005536:	541a      	strb	r2, [r3, r0]
        eRcvState = STATE_RX_RCV;
 8005538:	2302      	movs	r3, #2
        {
            ucRTUBuf[usRcvBufferPos++] = ucByte;
        }
        else
        {
            eRcvState = STATE_RX_ERROR;
 800553a:	700b      	strb	r3, [r1, #0]
 800553c:	e00c      	b.n	8005558 <xMBRTUReceiveFSM+0x68>
        if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 800553e:	4a0e      	ldr	r2, [pc, #56]	@ (8005578 <xMBRTUReceiveFSM+0x88>)
 8005540:	8813      	ldrh	r3, [r2, #0]
 8005542:	2bff      	cmp	r3, #255	@ 0xff
 8005544:	d80c      	bhi.n	8005560 <xMBRTUReceiveFSM+0x70>
            ucRTUBuf[usRcvBufferPos++] = ucByte;
 8005546:	8813      	ldrh	r3, [r2, #0]
 8005548:	b299      	uxth	r1, r3
 800554a:	3301      	adds	r3, #1
 800554c:	b29b      	uxth	r3, r3
 800554e:	8013      	strh	r3, [r2, #0]
 8005550:	466b      	mov	r3, sp
 8005552:	79da      	ldrb	r2, [r3, #7]
 8005554:	4b09      	ldr	r3, [pc, #36]	@ (800557c <xMBRTUReceiveFSM+0x8c>)
 8005556:	545a      	strb	r2, [r3, r1]
        }
        vMBPortTimersEnable(  );
 8005558:	f7ff fec6 	bl	80052e8 <vMBPortTimersEnable>
        break;
    }
    return xTaskNeedSwitch;
}
 800555c:	2000      	movs	r0, #0
 800555e:	bd0e      	pop	{r1, r2, r3, pc}
            eRcvState = STATE_RX_ERROR;
 8005560:	2303      	movs	r3, #3
 8005562:	e7ea      	b.n	800553a <xMBRTUReceiveFSM+0x4a>
 8005564:	200004dd 	.word	0x200004dd
 8005568:	08006cdb 	.word	0x08006cdb
 800556c:	08006d9c 	.word	0x08006d9c
 8005570:	08006cbd 	.word	0x08006cbd
 8005574:	200004dc 	.word	0x200004dc
 8005578:	200003d4 	.word	0x200003d4
 800557c:	200003dc 	.word	0x200003dc

08005580 <xMBRTUTransmitFSM>:

BOOL
xMBRTUTransmitFSM( void )
{
 8005580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    BOOL            xNeedPoll = FALSE;

    assert( eRcvState == STATE_RX_IDLE );
 8005582:	4b1b      	ldr	r3, [pc, #108]	@ (80055f0 <xMBRTUTransmitFSM+0x70>)
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	b2d8      	uxtb	r0, r3
 8005588:	2b01      	cmp	r3, #1
 800558a:	d006      	beq.n	800559a <xMBRTUTransmitFSM+0x1a>
 800558c:	2122      	movs	r1, #34	@ 0x22
 800558e:	4b19      	ldr	r3, [pc, #100]	@ (80055f4 <xMBRTUTransmitFSM+0x74>)
 8005590:	4a19      	ldr	r2, [pc, #100]	@ (80055f8 <xMBRTUTransmitFSM+0x78>)
 8005592:	481a      	ldr	r0, [pc, #104]	@ (80055fc <xMBRTUTransmitFSM+0x7c>)
 8005594:	31ff      	adds	r1, #255	@ 0xff
 8005596:	f000 fa13 	bl	80059c0 <__assert_func>

    switch ( eSndState )
 800559a:	4e19      	ldr	r6, [pc, #100]	@ (8005600 <xMBRTUTransmitFSM+0x80>)
 800559c:	7833      	ldrb	r3, [r6, #0]
 800559e:	b2dd      	uxtb	r5, r3
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d004      	beq.n	80055ae <xMBRTUTransmitFSM+0x2e>
 80055a4:	2d01      	cmp	r5, #1
 80055a6:	d006      	beq.n	80055b6 <xMBRTUTransmitFSM+0x36>
    BOOL            xNeedPoll = FALSE;
 80055a8:	2400      	movs	r4, #0
        }
        break;
    }

    return xNeedPoll;
}
 80055aa:	0020      	movs	r0, r4
 80055ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        vMBPortSerialEnable( TRUE, FALSE );
 80055ae:	0029      	movs	r1, r5
 80055b0:	f7ff fe32 	bl	8005218 <vMBPortSerialEnable>
        break;
 80055b4:	e7f8      	b.n	80055a8 <xMBRTUTransmitFSM+0x28>
        if( usSndBufferCount != 0 )
 80055b6:	4c13      	ldr	r4, [pc, #76]	@ (8005604 <xMBRTUTransmitFSM+0x84>)
 80055b8:	8823      	ldrh	r3, [r4, #0]
 80055ba:	b29f      	uxth	r7, r3
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d00d      	beq.n	80055dc <xMBRTUTransmitFSM+0x5c>
            xMBPortSerialPutByte( ( CHAR )*pucSndBufferCur );
 80055c0:	4d11      	ldr	r5, [pc, #68]	@ (8005608 <xMBRTUTransmitFSM+0x88>)
 80055c2:	682b      	ldr	r3, [r5, #0]
 80055c4:	7818      	ldrb	r0, [r3, #0]
 80055c6:	b2c0      	uxtb	r0, r0
 80055c8:	f7ff fe4a 	bl	8005260 <xMBPortSerialPutByte>
            pucSndBufferCur++;  /* next byte in sendbuffer. */
 80055cc:	682b      	ldr	r3, [r5, #0]
 80055ce:	3301      	adds	r3, #1
 80055d0:	602b      	str	r3, [r5, #0]
            usSndBufferCount--;
 80055d2:	8823      	ldrh	r3, [r4, #0]
 80055d4:	3b01      	subs	r3, #1
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	8023      	strh	r3, [r4, #0]
 80055da:	e7e5      	b.n	80055a8 <xMBRTUTransmitFSM+0x28>
            xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
 80055dc:	2003      	movs	r0, #3
 80055de:	f7ff fdff 	bl	80051e0 <xMBPortEventPost>
            vMBPortSerialEnable( TRUE, FALSE );
 80055e2:	0039      	movs	r1, r7
            xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
 80055e4:	0004      	movs	r4, r0
            vMBPortSerialEnable( TRUE, FALSE );
 80055e6:	0028      	movs	r0, r5
 80055e8:	f7ff fe16 	bl	8005218 <vMBPortSerialEnable>
            eSndState = STATE_TX_IDLE;
 80055ec:	7037      	strb	r7, [r6, #0]
 80055ee:	e7dc      	b.n	80055aa <xMBRTUTransmitFSM+0x2a>
 80055f0:	200004dc 	.word	0x200004dc
 80055f4:	08006cf6 	.word	0x08006cf6
 80055f8:	08006d8a 	.word	0x08006d8a
 80055fc:	08006cbd 	.word	0x08006cbd
 8005600:	200004dd 	.word	0x200004dd
 8005604:	200003d6 	.word	0x200003d6
 8005608:	200003d8 	.word	0x200003d8

0800560c <xMBRTUTimerT35Expired>:

BOOL
xMBRTUTimerT35Expired( void )
{
 800560c:	b570      	push	{r4, r5, r6, lr}
    BOOL            xNeedPoll = FALSE;

    switch ( eRcvState )
 800560e:	4d14      	ldr	r5, [pc, #80]	@ (8005660 <xMBRTUTimerT35Expired+0x54>)
 8005610:	782b      	ldrb	r3, [r5, #0]
 8005612:	b2d8      	uxtb	r0, r3
 8005614:	2b02      	cmp	r3, #2
 8005616:	d00c      	beq.n	8005632 <xMBRTUTimerT35Expired+0x26>
 8005618:	2803      	cmp	r0, #3
 800561a:	d01e      	beq.n	800565a <xMBRTUTimerT35Expired+0x4e>
 800561c:	2800      	cmp	r0, #0
 800561e:	d10a      	bne.n	8005636 <xMBRTUTimerT35Expired+0x2a>
        break;

        /* A frame was received and t35 expired. Notify the listener that
         * a new frame was received. */
    case STATE_RX_RCV:
        xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
 8005620:	f7ff fdde 	bl	80051e0 <xMBPortEventPost>
 8005624:	0004      	movs	r4, r0
    default:
        assert( ( eRcvState == STATE_RX_INIT ) ||
                ( eRcvState == STATE_RX_RCV ) || ( eRcvState == STATE_RX_ERROR ) );
    }

    vMBPortTimersDisable(  );
 8005626:	f7ff fe6d 	bl	8005304 <vMBPortTimersDisable>
    eRcvState = STATE_RX_IDLE;
 800562a:	2301      	movs	r3, #1

    return xNeedPoll;
}
 800562c:	0020      	movs	r0, r4
    eRcvState = STATE_RX_IDLE;
 800562e:	702b      	strb	r3, [r5, #0]
}
 8005630:	bd70      	pop	{r4, r5, r6, pc}
        xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
 8005632:	2001      	movs	r0, #1
 8005634:	e7f4      	b.n	8005620 <xMBRTUTimerT35Expired+0x14>
        assert( ( eRcvState == STATE_RX_INIT ) ||
 8005636:	782b      	ldrb	r3, [r5, #0]
 8005638:	b2dc      	uxtb	r4, r3
 800563a:	2b00      	cmp	r3, #0
 800563c:	d0f3      	beq.n	8005626 <xMBRTUTimerT35Expired+0x1a>
 800563e:	782b      	ldrb	r3, [r5, #0]
 8005640:	2b02      	cmp	r3, #2
 8005642:	d00a      	beq.n	800565a <xMBRTUTimerT35Expired+0x4e>
 8005644:	782b      	ldrb	r3, [r5, #0]
    BOOL            xNeedPoll = FALSE;
 8005646:	2400      	movs	r4, #0
        assert( ( eRcvState == STATE_RX_INIT ) ||
 8005648:	2b03      	cmp	r3, #3
 800564a:	d0ec      	beq.n	8005626 <xMBRTUTimerT35Expired+0x1a>
 800564c:	21ad      	movs	r1, #173	@ 0xad
 800564e:	4b05      	ldr	r3, [pc, #20]	@ (8005664 <xMBRTUTimerT35Expired+0x58>)
 8005650:	4a05      	ldr	r2, [pc, #20]	@ (8005668 <xMBRTUTimerT35Expired+0x5c>)
 8005652:	4806      	ldr	r0, [pc, #24]	@ (800566c <xMBRTUTimerT35Expired+0x60>)
 8005654:	0049      	lsls	r1, r1, #1
 8005656:	f000 f9b3 	bl	80059c0 <__assert_func>
    BOOL            xNeedPoll = FALSE;
 800565a:	2400      	movs	r4, #0
 800565c:	e7e3      	b.n	8005626 <xMBRTUTimerT35Expired+0x1a>
 800565e:	46c0      	nop			@ (mov r8, r8)
 8005660:	200004dc 	.word	0x200004dc
 8005664:	08006d11 	.word	0x08006d11
 8005668:	08006d74 	.word	0x08006d74
 800566c:	08006cbd 	.word	0x08006cbd

08005670 <sqrtf>:
 8005670:	b570      	push	{r4, r5, r6, lr}
 8005672:	1c05      	adds	r5, r0, #0
 8005674:	f000 f92c 	bl	80058d0 <__ieee754_sqrtf>
 8005678:	1c29      	adds	r1, r5, #0
 800567a:	1c04      	adds	r4, r0, #0
 800567c:	1c28      	adds	r0, r5, #0
 800567e:	f7fb fe43 	bl	8001308 <__aeabi_fcmpun>
 8005682:	2800      	cmp	r0, #0
 8005684:	d10e      	bne.n	80056a4 <sqrtf+0x34>
 8005686:	2100      	movs	r1, #0
 8005688:	1c28      	adds	r0, r5, #0
 800568a:	f7fa fed7 	bl	800043c <__aeabi_fcmplt>
 800568e:	2800      	cmp	r0, #0
 8005690:	d008      	beq.n	80056a4 <sqrtf+0x34>
 8005692:	f000 fb29 	bl	8005ce8 <__errno>
 8005696:	2321      	movs	r3, #33	@ 0x21
 8005698:	2100      	movs	r1, #0
 800569a:	6003      	str	r3, [r0, #0]
 800569c:	1c08      	adds	r0, r1, #0
 800569e:	f7fb f96b 	bl	8000978 <__aeabi_fdiv>
 80056a2:	1c04      	adds	r4, r0, #0
 80056a4:	1c20      	adds	r0, r4, #0
 80056a6:	bd70      	pop	{r4, r5, r6, pc}

080056a8 <atanf>:
 80056a8:	23a1      	movs	r3, #161	@ 0xa1
 80056aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80056ac:	0045      	lsls	r5, r0, #1
 80056ae:	1c04      	adds	r4, r0, #0
 80056b0:	9001      	str	r0, [sp, #4]
 80056b2:	086d      	lsrs	r5, r5, #1
 80056b4:	05db      	lsls	r3, r3, #23
 80056b6:	429d      	cmp	r5, r3
 80056b8:	d30f      	bcc.n	80056da <atanf+0x32>
 80056ba:	23ff      	movs	r3, #255	@ 0xff
 80056bc:	05db      	lsls	r3, r3, #23
 80056be:	429d      	cmp	r5, r3
 80056c0:	d904      	bls.n	80056cc <atanf+0x24>
 80056c2:	1c01      	adds	r1, r0, #0
 80056c4:	f7fa ffce 	bl	8000664 <__aeabi_fadd>
 80056c8:	1c04      	adds	r4, r0, #0
 80056ca:	e004      	b.n	80056d6 <atanf+0x2e>
 80056cc:	9b01      	ldr	r3, [sp, #4]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	dc00      	bgt.n	80056d4 <atanf+0x2c>
 80056d2:	e0cc      	b.n	800586e <atanf+0x1c6>
 80056d4:	4c67      	ldr	r4, [pc, #412]	@ (8005874 <atanf+0x1cc>)
 80056d6:	1c20      	adds	r0, r4, #0
 80056d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80056da:	4b67      	ldr	r3, [pc, #412]	@ (8005878 <atanf+0x1d0>)
 80056dc:	429d      	cmp	r5, r3
 80056de:	d80f      	bhi.n	8005700 <atanf+0x58>
 80056e0:	23c4      	movs	r3, #196	@ 0xc4
 80056e2:	059b      	lsls	r3, r3, #22
 80056e4:	429d      	cmp	r5, r3
 80056e6:	d208      	bcs.n	80056fa <atanf+0x52>
 80056e8:	4964      	ldr	r1, [pc, #400]	@ (800587c <atanf+0x1d4>)
 80056ea:	f7fa ffbb 	bl	8000664 <__aeabi_fadd>
 80056ee:	21fe      	movs	r1, #254	@ 0xfe
 80056f0:	0589      	lsls	r1, r1, #22
 80056f2:	f7fa feb7 	bl	8000464 <__aeabi_fcmpgt>
 80056f6:	2800      	cmp	r0, #0
 80056f8:	d1ed      	bne.n	80056d6 <atanf+0x2e>
 80056fa:	2601      	movs	r6, #1
 80056fc:	4276      	negs	r6, r6
 80056fe:	e01b      	b.n	8005738 <atanf+0x90>
 8005700:	f000 f8e2 	bl	80058c8 <fabsf>
 8005704:	4b5e      	ldr	r3, [pc, #376]	@ (8005880 <atanf+0x1d8>)
 8005706:	1c04      	adds	r4, r0, #0
 8005708:	429d      	cmp	r5, r3
 800570a:	d87b      	bhi.n	8005804 <atanf+0x15c>
 800570c:	4b5d      	ldr	r3, [pc, #372]	@ (8005884 <atanf+0x1dc>)
 800570e:	429d      	cmp	r5, r3
 8005710:	d867      	bhi.n	80057e2 <atanf+0x13a>
 8005712:	1c01      	adds	r1, r0, #0
 8005714:	f7fa ffa6 	bl	8000664 <__aeabi_fadd>
 8005718:	21fe      	movs	r1, #254	@ 0xfe
 800571a:	0589      	lsls	r1, r1, #22
 800571c:	f7fb fc50 	bl	8000fc0 <__aeabi_fsub>
 8005720:	2180      	movs	r1, #128	@ 0x80
 8005722:	1c05      	adds	r5, r0, #0
 8005724:	05c9      	lsls	r1, r1, #23
 8005726:	1c20      	adds	r0, r4, #0
 8005728:	f7fa ff9c 	bl	8000664 <__aeabi_fadd>
 800572c:	1c01      	adds	r1, r0, #0
 800572e:	1c28      	adds	r0, r5, #0
 8005730:	f7fb f922 	bl	8000978 <__aeabi_fdiv>
 8005734:	2600      	movs	r6, #0
 8005736:	1c04      	adds	r4, r0, #0
 8005738:	1c21      	adds	r1, r4, #0
 800573a:	1c20      	adds	r0, r4, #0
 800573c:	f7fb fb02 	bl	8000d44 <__aeabi_fmul>
 8005740:	1c01      	adds	r1, r0, #0
 8005742:	1c07      	adds	r7, r0, #0
 8005744:	f7fb fafe 	bl	8000d44 <__aeabi_fmul>
 8005748:	494f      	ldr	r1, [pc, #316]	@ (8005888 <atanf+0x1e0>)
 800574a:	1c05      	adds	r5, r0, #0
 800574c:	f7fb fafa 	bl	8000d44 <__aeabi_fmul>
 8005750:	494e      	ldr	r1, [pc, #312]	@ (800588c <atanf+0x1e4>)
 8005752:	f7fa ff87 	bl	8000664 <__aeabi_fadd>
 8005756:	1c29      	adds	r1, r5, #0
 8005758:	f7fb faf4 	bl	8000d44 <__aeabi_fmul>
 800575c:	494c      	ldr	r1, [pc, #304]	@ (8005890 <atanf+0x1e8>)
 800575e:	f7fa ff81 	bl	8000664 <__aeabi_fadd>
 8005762:	1c29      	adds	r1, r5, #0
 8005764:	f7fb faee 	bl	8000d44 <__aeabi_fmul>
 8005768:	494a      	ldr	r1, [pc, #296]	@ (8005894 <atanf+0x1ec>)
 800576a:	f7fa ff7b 	bl	8000664 <__aeabi_fadd>
 800576e:	1c29      	adds	r1, r5, #0
 8005770:	f7fb fae8 	bl	8000d44 <__aeabi_fmul>
 8005774:	4948      	ldr	r1, [pc, #288]	@ (8005898 <atanf+0x1f0>)
 8005776:	f7fa ff75 	bl	8000664 <__aeabi_fadd>
 800577a:	1c29      	adds	r1, r5, #0
 800577c:	f7fb fae2 	bl	8000d44 <__aeabi_fmul>
 8005780:	4946      	ldr	r1, [pc, #280]	@ (800589c <atanf+0x1f4>)
 8005782:	f7fa ff6f 	bl	8000664 <__aeabi_fadd>
 8005786:	1c39      	adds	r1, r7, #0
 8005788:	f7fb fadc 	bl	8000d44 <__aeabi_fmul>
 800578c:	4944      	ldr	r1, [pc, #272]	@ (80058a0 <atanf+0x1f8>)
 800578e:	1c07      	adds	r7, r0, #0
 8005790:	1c28      	adds	r0, r5, #0
 8005792:	f7fb fad7 	bl	8000d44 <__aeabi_fmul>
 8005796:	4943      	ldr	r1, [pc, #268]	@ (80058a4 <atanf+0x1fc>)
 8005798:	f7fb fc12 	bl	8000fc0 <__aeabi_fsub>
 800579c:	1c29      	adds	r1, r5, #0
 800579e:	f7fb fad1 	bl	8000d44 <__aeabi_fmul>
 80057a2:	4941      	ldr	r1, [pc, #260]	@ (80058a8 <atanf+0x200>)
 80057a4:	f7fb fc0c 	bl	8000fc0 <__aeabi_fsub>
 80057a8:	1c29      	adds	r1, r5, #0
 80057aa:	f7fb facb 	bl	8000d44 <__aeabi_fmul>
 80057ae:	493f      	ldr	r1, [pc, #252]	@ (80058ac <atanf+0x204>)
 80057b0:	f7fb fc06 	bl	8000fc0 <__aeabi_fsub>
 80057b4:	1c29      	adds	r1, r5, #0
 80057b6:	f7fb fac5 	bl	8000d44 <__aeabi_fmul>
 80057ba:	493d      	ldr	r1, [pc, #244]	@ (80058b0 <atanf+0x208>)
 80057bc:	f7fb fc00 	bl	8000fc0 <__aeabi_fsub>
 80057c0:	1c29      	adds	r1, r5, #0
 80057c2:	f7fb fabf 	bl	8000d44 <__aeabi_fmul>
 80057c6:	1c01      	adds	r1, r0, #0
 80057c8:	1c38      	adds	r0, r7, #0
 80057ca:	f7fa ff4b 	bl	8000664 <__aeabi_fadd>
 80057ce:	1c21      	adds	r1, r4, #0
 80057d0:	f7fb fab8 	bl	8000d44 <__aeabi_fmul>
 80057d4:	1c73      	adds	r3, r6, #1
 80057d6:	d134      	bne.n	8005842 <atanf+0x19a>
 80057d8:	1c01      	adds	r1, r0, #0
 80057da:	1c20      	adds	r0, r4, #0
 80057dc:	f7fb fbf0 	bl	8000fc0 <__aeabi_fsub>
 80057e0:	e772      	b.n	80056c8 <atanf+0x20>
 80057e2:	21fe      	movs	r1, #254	@ 0xfe
 80057e4:	0589      	lsls	r1, r1, #22
 80057e6:	f7fb fbeb 	bl	8000fc0 <__aeabi_fsub>
 80057ea:	21fe      	movs	r1, #254	@ 0xfe
 80057ec:	1c05      	adds	r5, r0, #0
 80057ee:	0589      	lsls	r1, r1, #22
 80057f0:	1c20      	adds	r0, r4, #0
 80057f2:	f7fa ff37 	bl	8000664 <__aeabi_fadd>
 80057f6:	1c01      	adds	r1, r0, #0
 80057f8:	1c28      	adds	r0, r5, #0
 80057fa:	f7fb f8bd 	bl	8000978 <__aeabi_fdiv>
 80057fe:	2601      	movs	r6, #1
 8005800:	1c04      	adds	r4, r0, #0
 8005802:	e799      	b.n	8005738 <atanf+0x90>
 8005804:	4b2b      	ldr	r3, [pc, #172]	@ (80058b4 <atanf+0x20c>)
 8005806:	429d      	cmp	r5, r3
 8005808:	d814      	bhi.n	8005834 <atanf+0x18c>
 800580a:	21ff      	movs	r1, #255	@ 0xff
 800580c:	0589      	lsls	r1, r1, #22
 800580e:	f7fb fbd7 	bl	8000fc0 <__aeabi_fsub>
 8005812:	21ff      	movs	r1, #255	@ 0xff
 8005814:	1c05      	adds	r5, r0, #0
 8005816:	0589      	lsls	r1, r1, #22
 8005818:	1c20      	adds	r0, r4, #0
 800581a:	f7fb fa93 	bl	8000d44 <__aeabi_fmul>
 800581e:	21fe      	movs	r1, #254	@ 0xfe
 8005820:	0589      	lsls	r1, r1, #22
 8005822:	f7fa ff1f 	bl	8000664 <__aeabi_fadd>
 8005826:	1c01      	adds	r1, r0, #0
 8005828:	1c28      	adds	r0, r5, #0
 800582a:	f7fb f8a5 	bl	8000978 <__aeabi_fdiv>
 800582e:	2602      	movs	r6, #2
 8005830:	1c04      	adds	r4, r0, #0
 8005832:	e781      	b.n	8005738 <atanf+0x90>
 8005834:	1c01      	adds	r1, r0, #0
 8005836:	4820      	ldr	r0, [pc, #128]	@ (80058b8 <atanf+0x210>)
 8005838:	f7fb f89e 	bl	8000978 <__aeabi_fdiv>
 800583c:	2603      	movs	r6, #3
 800583e:	1c04      	adds	r4, r0, #0
 8005840:	e77a      	b.n	8005738 <atanf+0x90>
 8005842:	4b1e      	ldr	r3, [pc, #120]	@ (80058bc <atanf+0x214>)
 8005844:	00b6      	lsls	r6, r6, #2
 8005846:	58f1      	ldr	r1, [r6, r3]
 8005848:	f7fb fbba 	bl	8000fc0 <__aeabi_fsub>
 800584c:	1c21      	adds	r1, r4, #0
 800584e:	f7fb fbb7 	bl	8000fc0 <__aeabi_fsub>
 8005852:	4d1b      	ldr	r5, [pc, #108]	@ (80058c0 <atanf+0x218>)
 8005854:	1c01      	adds	r1, r0, #0
 8005856:	5970      	ldr	r0, [r6, r5]
 8005858:	f7fb fbb2 	bl	8000fc0 <__aeabi_fsub>
 800585c:	9b01      	ldr	r3, [sp, #4]
 800585e:	1c04      	adds	r4, r0, #0
 8005860:	2b00      	cmp	r3, #0
 8005862:	db00      	blt.n	8005866 <atanf+0x1be>
 8005864:	e737      	b.n	80056d6 <atanf+0x2e>
 8005866:	2380      	movs	r3, #128	@ 0x80
 8005868:	061b      	lsls	r3, r3, #24
 800586a:	18c4      	adds	r4, r0, r3
 800586c:	e733      	b.n	80056d6 <atanf+0x2e>
 800586e:	4c15      	ldr	r4, [pc, #84]	@ (80058c4 <atanf+0x21c>)
 8005870:	e731      	b.n	80056d6 <atanf+0x2e>
 8005872:	46c0      	nop			@ (mov r8, r8)
 8005874:	3fc90fdb 	.word	0x3fc90fdb
 8005878:	3edfffff 	.word	0x3edfffff
 800587c:	7149f2ca 	.word	0x7149f2ca
 8005880:	3f97ffff 	.word	0x3f97ffff
 8005884:	3f2fffff 	.word	0x3f2fffff
 8005888:	3c8569d7 	.word	0x3c8569d7
 800588c:	3d4bda59 	.word	0x3d4bda59
 8005890:	3d886b35 	.word	0x3d886b35
 8005894:	3dba2e6e 	.word	0x3dba2e6e
 8005898:	3e124925 	.word	0x3e124925
 800589c:	3eaaaaab 	.word	0x3eaaaaab
 80058a0:	bd15a221 	.word	0xbd15a221
 80058a4:	3d6ef16b 	.word	0x3d6ef16b
 80058a8:	3d9d8795 	.word	0x3d9d8795
 80058ac:	3de38e38 	.word	0x3de38e38
 80058b0:	3e4ccccd 	.word	0x3e4ccccd
 80058b4:	401bffff 	.word	0x401bffff
 80058b8:	bf800000 	.word	0xbf800000
 80058bc:	08006dbc 	.word	0x08006dbc
 80058c0:	08006dcc 	.word	0x08006dcc
 80058c4:	bfc90fdb 	.word	0xbfc90fdb

080058c8 <fabsf>:
 80058c8:	0040      	lsls	r0, r0, #1
 80058ca:	0840      	lsrs	r0, r0, #1
 80058cc:	4770      	bx	lr
	...

080058d0 <__ieee754_sqrtf>:
 80058d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058d2:	0003      	movs	r3, r0
 80058d4:	0042      	lsls	r2, r0, #1
 80058d6:	1c04      	adds	r4, r0, #0
 80058d8:	20ff      	movs	r0, #255	@ 0xff
 80058da:	0852      	lsrs	r2, r2, #1
 80058dc:	05c0      	lsls	r0, r0, #23
 80058de:	4282      	cmp	r2, r0
 80058e0:	d30a      	bcc.n	80058f8 <__ieee754_sqrtf+0x28>
 80058e2:	1c21      	adds	r1, r4, #0
 80058e4:	1c20      	adds	r0, r4, #0
 80058e6:	f7fb fa2d 	bl	8000d44 <__aeabi_fmul>
 80058ea:	1c01      	adds	r1, r0, #0
 80058ec:	1c20      	adds	r0, r4, #0
 80058ee:	f7fa feb9 	bl	8000664 <__aeabi_fadd>
 80058f2:	1c04      	adds	r4, r0, #0
 80058f4:	1c20      	adds	r0, r4, #0
 80058f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80058f8:	2a00      	cmp	r2, #0
 80058fa:	d0fb      	beq.n	80058f4 <__ieee754_sqrtf+0x24>
 80058fc:	2c00      	cmp	r4, #0
 80058fe:	da07      	bge.n	8005910 <__ieee754_sqrtf+0x40>
 8005900:	1c21      	adds	r1, r4, #0
 8005902:	1c20      	adds	r0, r4, #0
 8005904:	f7fb fb5c 	bl	8000fc0 <__aeabi_fsub>
 8005908:	1c01      	adds	r1, r0, #0
 800590a:	f7fb f835 	bl	8000978 <__aeabi_fdiv>
 800590e:	e7f0      	b.n	80058f2 <__ieee754_sqrtf+0x22>
 8005910:	0022      	movs	r2, r4
 8005912:	15e1      	asrs	r1, r4, #23
 8005914:	4002      	ands	r2, r0
 8005916:	4204      	tst	r4, r0
 8005918:	d046      	beq.n	80059a8 <__ieee754_sqrtf+0xd8>
 800591a:	2280      	movs	r2, #128	@ 0x80
 800591c:	000f      	movs	r7, r1
 800591e:	025b      	lsls	r3, r3, #9
 8005920:	0a5b      	lsrs	r3, r3, #9
 8005922:	0412      	lsls	r2, r2, #16
 8005924:	3f7f      	subs	r7, #127	@ 0x7f
 8005926:	4313      	orrs	r3, r2
 8005928:	07c9      	lsls	r1, r1, #31
 800592a:	d400      	bmi.n	800592e <__ieee754_sqrtf+0x5e>
 800592c:	005b      	lsls	r3, r3, #1
 800592e:	2400      	movs	r4, #0
 8005930:	2180      	movs	r1, #128	@ 0x80
 8005932:	2019      	movs	r0, #25
 8005934:	0026      	movs	r6, r4
 8005936:	107f      	asrs	r7, r7, #1
 8005938:	005b      	lsls	r3, r3, #1
 800593a:	0449      	lsls	r1, r1, #17
 800593c:	1875      	adds	r5, r6, r1
 800593e:	001a      	movs	r2, r3
 8005940:	429d      	cmp	r5, r3
 8005942:	dc02      	bgt.n	800594a <__ieee754_sqrtf+0x7a>
 8005944:	186e      	adds	r6, r5, r1
 8005946:	1b5a      	subs	r2, r3, r5
 8005948:	1864      	adds	r4, r4, r1
 800594a:	3801      	subs	r0, #1
 800594c:	0053      	lsls	r3, r2, #1
 800594e:	0849      	lsrs	r1, r1, #1
 8005950:	2800      	cmp	r0, #0
 8005952:	d1f3      	bne.n	800593c <__ieee754_sqrtf+0x6c>
 8005954:	2a00      	cmp	r2, #0
 8005956:	d019      	beq.n	800598c <__ieee754_sqrtf+0xbc>
 8005958:	4d17      	ldr	r5, [pc, #92]	@ (80059b8 <__ieee754_sqrtf+0xe8>)
 800595a:	4e18      	ldr	r6, [pc, #96]	@ (80059bc <__ieee754_sqrtf+0xec>)
 800595c:	6828      	ldr	r0, [r5, #0]
 800595e:	6831      	ldr	r1, [r6, #0]
 8005960:	682b      	ldr	r3, [r5, #0]
 8005962:	9301      	str	r3, [sp, #4]
 8005964:	f7fb fb2c 	bl	8000fc0 <__aeabi_fsub>
 8005968:	1c01      	adds	r1, r0, #0
 800596a:	9801      	ldr	r0, [sp, #4]
 800596c:	f7fa fd70 	bl	8000450 <__aeabi_fcmple>
 8005970:	2800      	cmp	r0, #0
 8005972:	d00b      	beq.n	800598c <__ieee754_sqrtf+0xbc>
 8005974:	6828      	ldr	r0, [r5, #0]
 8005976:	6831      	ldr	r1, [r6, #0]
 8005978:	f7fa fe74 	bl	8000664 <__aeabi_fadd>
 800597c:	682d      	ldr	r5, [r5, #0]
 800597e:	1c01      	adds	r1, r0, #0
 8005980:	1c28      	adds	r0, r5, #0
 8005982:	f7fa fd5b 	bl	800043c <__aeabi_fcmplt>
 8005986:	2800      	cmp	r0, #0
 8005988:	d011      	beq.n	80059ae <__ieee754_sqrtf+0xde>
 800598a:	3402      	adds	r4, #2
 800598c:	23fc      	movs	r3, #252	@ 0xfc
 800598e:	1064      	asrs	r4, r4, #1
 8005990:	059b      	lsls	r3, r3, #22
 8005992:	18e3      	adds	r3, r4, r3
 8005994:	05fc      	lsls	r4, r7, #23
 8005996:	18e4      	adds	r4, r4, r3
 8005998:	e7ac      	b.n	80058f4 <__ieee754_sqrtf+0x24>
 800599a:	005b      	lsls	r3, r3, #1
 800599c:	3201      	adds	r2, #1
 800599e:	4203      	tst	r3, r0
 80059a0:	d0fb      	beq.n	800599a <__ieee754_sqrtf+0xca>
 80059a2:	3a01      	subs	r2, #1
 80059a4:	1a89      	subs	r1, r1, r2
 80059a6:	e7b8      	b.n	800591a <__ieee754_sqrtf+0x4a>
 80059a8:	2080      	movs	r0, #128	@ 0x80
 80059aa:	0400      	lsls	r0, r0, #16
 80059ac:	e7f7      	b.n	800599e <__ieee754_sqrtf+0xce>
 80059ae:	2301      	movs	r3, #1
 80059b0:	3401      	adds	r4, #1
 80059b2:	439c      	bics	r4, r3
 80059b4:	e7ea      	b.n	800598c <__ieee754_sqrtf+0xbc>
 80059b6:	46c0      	nop			@ (mov r8, r8)
 80059b8:	20000094 	.word	0x20000094
 80059bc:	20000090 	.word	0x20000090

080059c0 <__assert_func>:
 80059c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80059c2:	0014      	movs	r4, r2
 80059c4:	001a      	movs	r2, r3
 80059c6:	4b09      	ldr	r3, [pc, #36]	@ (80059ec <__assert_func+0x2c>)
 80059c8:	0005      	movs	r5, r0
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	000e      	movs	r6, r1
 80059ce:	68d8      	ldr	r0, [r3, #12]
 80059d0:	4b07      	ldr	r3, [pc, #28]	@ (80059f0 <__assert_func+0x30>)
 80059d2:	2c00      	cmp	r4, #0
 80059d4:	d101      	bne.n	80059da <__assert_func+0x1a>
 80059d6:	4b07      	ldr	r3, [pc, #28]	@ (80059f4 <__assert_func+0x34>)
 80059d8:	001c      	movs	r4, r3
 80059da:	4907      	ldr	r1, [pc, #28]	@ (80059f8 <__assert_func+0x38>)
 80059dc:	9301      	str	r3, [sp, #4]
 80059de:	9402      	str	r4, [sp, #8]
 80059e0:	002b      	movs	r3, r5
 80059e2:	9600      	str	r6, [sp, #0]
 80059e4:	f000 f8b2 	bl	8005b4c <fiprintf>
 80059e8:	f000 f9b4 	bl	8005d54 <abort>
 80059ec:	200000a4 	.word	0x200000a4
 80059f0:	08006ddc 	.word	0x08006ddc
 80059f4:	08006e17 	.word	0x08006e17
 80059f8:	08006de9 	.word	0x08006de9

080059fc <std>:
 80059fc:	2300      	movs	r3, #0
 80059fe:	b510      	push	{r4, lr}
 8005a00:	0004      	movs	r4, r0
 8005a02:	6003      	str	r3, [r0, #0]
 8005a04:	6043      	str	r3, [r0, #4]
 8005a06:	6083      	str	r3, [r0, #8]
 8005a08:	8181      	strh	r1, [r0, #12]
 8005a0a:	6643      	str	r3, [r0, #100]	@ 0x64
 8005a0c:	81c2      	strh	r2, [r0, #14]
 8005a0e:	6103      	str	r3, [r0, #16]
 8005a10:	6143      	str	r3, [r0, #20]
 8005a12:	6183      	str	r3, [r0, #24]
 8005a14:	0019      	movs	r1, r3
 8005a16:	2208      	movs	r2, #8
 8005a18:	305c      	adds	r0, #92	@ 0x5c
 8005a1a:	f000 f90f 	bl	8005c3c <memset>
 8005a1e:	4b0b      	ldr	r3, [pc, #44]	@ (8005a4c <std+0x50>)
 8005a20:	6224      	str	r4, [r4, #32]
 8005a22:	6263      	str	r3, [r4, #36]	@ 0x24
 8005a24:	4b0a      	ldr	r3, [pc, #40]	@ (8005a50 <std+0x54>)
 8005a26:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005a28:	4b0a      	ldr	r3, [pc, #40]	@ (8005a54 <std+0x58>)
 8005a2a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8005a58 <std+0x5c>)
 8005a2e:	6323      	str	r3, [r4, #48]	@ 0x30
 8005a30:	4b0a      	ldr	r3, [pc, #40]	@ (8005a5c <std+0x60>)
 8005a32:	429c      	cmp	r4, r3
 8005a34:	d005      	beq.n	8005a42 <std+0x46>
 8005a36:	4b0a      	ldr	r3, [pc, #40]	@ (8005a60 <std+0x64>)
 8005a38:	429c      	cmp	r4, r3
 8005a3a:	d002      	beq.n	8005a42 <std+0x46>
 8005a3c:	4b09      	ldr	r3, [pc, #36]	@ (8005a64 <std+0x68>)
 8005a3e:	429c      	cmp	r4, r3
 8005a40:	d103      	bne.n	8005a4a <std+0x4e>
 8005a42:	0020      	movs	r0, r4
 8005a44:	3058      	adds	r0, #88	@ 0x58
 8005a46:	f000 f979 	bl	8005d3c <__retarget_lock_init_recursive>
 8005a4a:	bd10      	pop	{r4, pc}
 8005a4c:	08005ba5 	.word	0x08005ba5
 8005a50:	08005bcd 	.word	0x08005bcd
 8005a54:	08005c05 	.word	0x08005c05
 8005a58:	08005c31 	.word	0x08005c31
 8005a5c:	200004e0 	.word	0x200004e0
 8005a60:	20000548 	.word	0x20000548
 8005a64:	200005b0 	.word	0x200005b0

08005a68 <stdio_exit_handler>:
 8005a68:	b510      	push	{r4, lr}
 8005a6a:	4a03      	ldr	r2, [pc, #12]	@ (8005a78 <stdio_exit_handler+0x10>)
 8005a6c:	4903      	ldr	r1, [pc, #12]	@ (8005a7c <stdio_exit_handler+0x14>)
 8005a6e:	4804      	ldr	r0, [pc, #16]	@ (8005a80 <stdio_exit_handler+0x18>)
 8005a70:	f000 f87c 	bl	8005b6c <_fwalk_sglue>
 8005a74:	bd10      	pop	{r4, pc}
 8005a76:	46c0      	nop			@ (mov r8, r8)
 8005a78:	20000098 	.word	0x20000098
 8005a7c:	080065ed 	.word	0x080065ed
 8005a80:	200000a8 	.word	0x200000a8

08005a84 <cleanup_stdio>:
 8005a84:	6841      	ldr	r1, [r0, #4]
 8005a86:	4b0b      	ldr	r3, [pc, #44]	@ (8005ab4 <cleanup_stdio+0x30>)
 8005a88:	b510      	push	{r4, lr}
 8005a8a:	0004      	movs	r4, r0
 8005a8c:	4299      	cmp	r1, r3
 8005a8e:	d001      	beq.n	8005a94 <cleanup_stdio+0x10>
 8005a90:	f000 fdac 	bl	80065ec <_fflush_r>
 8005a94:	68a1      	ldr	r1, [r4, #8]
 8005a96:	4b08      	ldr	r3, [pc, #32]	@ (8005ab8 <cleanup_stdio+0x34>)
 8005a98:	4299      	cmp	r1, r3
 8005a9a:	d002      	beq.n	8005aa2 <cleanup_stdio+0x1e>
 8005a9c:	0020      	movs	r0, r4
 8005a9e:	f000 fda5 	bl	80065ec <_fflush_r>
 8005aa2:	68e1      	ldr	r1, [r4, #12]
 8005aa4:	4b05      	ldr	r3, [pc, #20]	@ (8005abc <cleanup_stdio+0x38>)
 8005aa6:	4299      	cmp	r1, r3
 8005aa8:	d002      	beq.n	8005ab0 <cleanup_stdio+0x2c>
 8005aaa:	0020      	movs	r0, r4
 8005aac:	f000 fd9e 	bl	80065ec <_fflush_r>
 8005ab0:	bd10      	pop	{r4, pc}
 8005ab2:	46c0      	nop			@ (mov r8, r8)
 8005ab4:	200004e0 	.word	0x200004e0
 8005ab8:	20000548 	.word	0x20000548
 8005abc:	200005b0 	.word	0x200005b0

08005ac0 <global_stdio_init.part.0>:
 8005ac0:	b510      	push	{r4, lr}
 8005ac2:	4b09      	ldr	r3, [pc, #36]	@ (8005ae8 <global_stdio_init.part.0+0x28>)
 8005ac4:	4a09      	ldr	r2, [pc, #36]	@ (8005aec <global_stdio_init.part.0+0x2c>)
 8005ac6:	2104      	movs	r1, #4
 8005ac8:	601a      	str	r2, [r3, #0]
 8005aca:	4809      	ldr	r0, [pc, #36]	@ (8005af0 <global_stdio_init.part.0+0x30>)
 8005acc:	2200      	movs	r2, #0
 8005ace:	f7ff ff95 	bl	80059fc <std>
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	2109      	movs	r1, #9
 8005ad6:	4807      	ldr	r0, [pc, #28]	@ (8005af4 <global_stdio_init.part.0+0x34>)
 8005ad8:	f7ff ff90 	bl	80059fc <std>
 8005adc:	2202      	movs	r2, #2
 8005ade:	2112      	movs	r1, #18
 8005ae0:	4805      	ldr	r0, [pc, #20]	@ (8005af8 <global_stdio_init.part.0+0x38>)
 8005ae2:	f7ff ff8b 	bl	80059fc <std>
 8005ae6:	bd10      	pop	{r4, pc}
 8005ae8:	20000618 	.word	0x20000618
 8005aec:	08005a69 	.word	0x08005a69
 8005af0:	200004e0 	.word	0x200004e0
 8005af4:	20000548 	.word	0x20000548
 8005af8:	200005b0 	.word	0x200005b0

08005afc <__sfp_lock_acquire>:
 8005afc:	b510      	push	{r4, lr}
 8005afe:	4802      	ldr	r0, [pc, #8]	@ (8005b08 <__sfp_lock_acquire+0xc>)
 8005b00:	f000 f91d 	bl	8005d3e <__retarget_lock_acquire_recursive>
 8005b04:	bd10      	pop	{r4, pc}
 8005b06:	46c0      	nop			@ (mov r8, r8)
 8005b08:	20000621 	.word	0x20000621

08005b0c <__sfp_lock_release>:
 8005b0c:	b510      	push	{r4, lr}
 8005b0e:	4802      	ldr	r0, [pc, #8]	@ (8005b18 <__sfp_lock_release+0xc>)
 8005b10:	f000 f916 	bl	8005d40 <__retarget_lock_release_recursive>
 8005b14:	bd10      	pop	{r4, pc}
 8005b16:	46c0      	nop			@ (mov r8, r8)
 8005b18:	20000621 	.word	0x20000621

08005b1c <__sinit>:
 8005b1c:	b510      	push	{r4, lr}
 8005b1e:	0004      	movs	r4, r0
 8005b20:	f7ff ffec 	bl	8005afc <__sfp_lock_acquire>
 8005b24:	6a23      	ldr	r3, [r4, #32]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d002      	beq.n	8005b30 <__sinit+0x14>
 8005b2a:	f7ff ffef 	bl	8005b0c <__sfp_lock_release>
 8005b2e:	bd10      	pop	{r4, pc}
 8005b30:	4b04      	ldr	r3, [pc, #16]	@ (8005b44 <__sinit+0x28>)
 8005b32:	6223      	str	r3, [r4, #32]
 8005b34:	4b04      	ldr	r3, [pc, #16]	@ (8005b48 <__sinit+0x2c>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d1f6      	bne.n	8005b2a <__sinit+0xe>
 8005b3c:	f7ff ffc0 	bl	8005ac0 <global_stdio_init.part.0>
 8005b40:	e7f3      	b.n	8005b2a <__sinit+0xe>
 8005b42:	46c0      	nop			@ (mov r8, r8)
 8005b44:	08005a85 	.word	0x08005a85
 8005b48:	20000618 	.word	0x20000618

08005b4c <fiprintf>:
 8005b4c:	b40e      	push	{r1, r2, r3}
 8005b4e:	b517      	push	{r0, r1, r2, r4, lr}
 8005b50:	4c05      	ldr	r4, [pc, #20]	@ (8005b68 <fiprintf+0x1c>)
 8005b52:	ab05      	add	r3, sp, #20
 8005b54:	cb04      	ldmia	r3!, {r2}
 8005b56:	0001      	movs	r1, r0
 8005b58:	6820      	ldr	r0, [r4, #0]
 8005b5a:	9301      	str	r3, [sp, #4]
 8005b5c:	f000 fa26 	bl	8005fac <_vfiprintf_r>
 8005b60:	bc1e      	pop	{r1, r2, r3, r4}
 8005b62:	bc08      	pop	{r3}
 8005b64:	b003      	add	sp, #12
 8005b66:	4718      	bx	r3
 8005b68:	200000a4 	.word	0x200000a4

08005b6c <_fwalk_sglue>:
 8005b6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b6e:	0014      	movs	r4, r2
 8005b70:	2600      	movs	r6, #0
 8005b72:	9000      	str	r0, [sp, #0]
 8005b74:	9101      	str	r1, [sp, #4]
 8005b76:	68a5      	ldr	r5, [r4, #8]
 8005b78:	6867      	ldr	r7, [r4, #4]
 8005b7a:	3f01      	subs	r7, #1
 8005b7c:	d504      	bpl.n	8005b88 <_fwalk_sglue+0x1c>
 8005b7e:	6824      	ldr	r4, [r4, #0]
 8005b80:	2c00      	cmp	r4, #0
 8005b82:	d1f8      	bne.n	8005b76 <_fwalk_sglue+0xa>
 8005b84:	0030      	movs	r0, r6
 8005b86:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005b88:	89ab      	ldrh	r3, [r5, #12]
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d908      	bls.n	8005ba0 <_fwalk_sglue+0x34>
 8005b8e:	220e      	movs	r2, #14
 8005b90:	5eab      	ldrsh	r3, [r5, r2]
 8005b92:	3301      	adds	r3, #1
 8005b94:	d004      	beq.n	8005ba0 <_fwalk_sglue+0x34>
 8005b96:	0029      	movs	r1, r5
 8005b98:	9800      	ldr	r0, [sp, #0]
 8005b9a:	9b01      	ldr	r3, [sp, #4]
 8005b9c:	4798      	blx	r3
 8005b9e:	4306      	orrs	r6, r0
 8005ba0:	3568      	adds	r5, #104	@ 0x68
 8005ba2:	e7ea      	b.n	8005b7a <_fwalk_sglue+0xe>

08005ba4 <__sread>:
 8005ba4:	b570      	push	{r4, r5, r6, lr}
 8005ba6:	000c      	movs	r4, r1
 8005ba8:	250e      	movs	r5, #14
 8005baa:	5f49      	ldrsh	r1, [r1, r5]
 8005bac:	f000 f874 	bl	8005c98 <_read_r>
 8005bb0:	2800      	cmp	r0, #0
 8005bb2:	db03      	blt.n	8005bbc <__sread+0x18>
 8005bb4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005bb6:	181b      	adds	r3, r3, r0
 8005bb8:	6563      	str	r3, [r4, #84]	@ 0x54
 8005bba:	bd70      	pop	{r4, r5, r6, pc}
 8005bbc:	89a3      	ldrh	r3, [r4, #12]
 8005bbe:	4a02      	ldr	r2, [pc, #8]	@ (8005bc8 <__sread+0x24>)
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	81a3      	strh	r3, [r4, #12]
 8005bc4:	e7f9      	b.n	8005bba <__sread+0x16>
 8005bc6:	46c0      	nop			@ (mov r8, r8)
 8005bc8:	ffffefff 	.word	0xffffefff

08005bcc <__swrite>:
 8005bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bce:	001f      	movs	r7, r3
 8005bd0:	898b      	ldrh	r3, [r1, #12]
 8005bd2:	0005      	movs	r5, r0
 8005bd4:	000c      	movs	r4, r1
 8005bd6:	0016      	movs	r6, r2
 8005bd8:	05db      	lsls	r3, r3, #23
 8005bda:	d505      	bpl.n	8005be8 <__swrite+0x1c>
 8005bdc:	230e      	movs	r3, #14
 8005bde:	5ec9      	ldrsh	r1, [r1, r3]
 8005be0:	2200      	movs	r2, #0
 8005be2:	2302      	movs	r3, #2
 8005be4:	f000 f844 	bl	8005c70 <_lseek_r>
 8005be8:	89a3      	ldrh	r3, [r4, #12]
 8005bea:	4a05      	ldr	r2, [pc, #20]	@ (8005c00 <__swrite+0x34>)
 8005bec:	0028      	movs	r0, r5
 8005bee:	4013      	ands	r3, r2
 8005bf0:	81a3      	strh	r3, [r4, #12]
 8005bf2:	0032      	movs	r2, r6
 8005bf4:	230e      	movs	r3, #14
 8005bf6:	5ee1      	ldrsh	r1, [r4, r3]
 8005bf8:	003b      	movs	r3, r7
 8005bfa:	f000 f861 	bl	8005cc0 <_write_r>
 8005bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c00:	ffffefff 	.word	0xffffefff

08005c04 <__sseek>:
 8005c04:	b570      	push	{r4, r5, r6, lr}
 8005c06:	000c      	movs	r4, r1
 8005c08:	250e      	movs	r5, #14
 8005c0a:	5f49      	ldrsh	r1, [r1, r5]
 8005c0c:	f000 f830 	bl	8005c70 <_lseek_r>
 8005c10:	89a3      	ldrh	r3, [r4, #12]
 8005c12:	1c42      	adds	r2, r0, #1
 8005c14:	d103      	bne.n	8005c1e <__sseek+0x1a>
 8005c16:	4a05      	ldr	r2, [pc, #20]	@ (8005c2c <__sseek+0x28>)
 8005c18:	4013      	ands	r3, r2
 8005c1a:	81a3      	strh	r3, [r4, #12]
 8005c1c:	bd70      	pop	{r4, r5, r6, pc}
 8005c1e:	2280      	movs	r2, #128	@ 0x80
 8005c20:	0152      	lsls	r2, r2, #5
 8005c22:	4313      	orrs	r3, r2
 8005c24:	81a3      	strh	r3, [r4, #12]
 8005c26:	6560      	str	r0, [r4, #84]	@ 0x54
 8005c28:	e7f8      	b.n	8005c1c <__sseek+0x18>
 8005c2a:	46c0      	nop			@ (mov r8, r8)
 8005c2c:	ffffefff 	.word	0xffffefff

08005c30 <__sclose>:
 8005c30:	b510      	push	{r4, lr}
 8005c32:	230e      	movs	r3, #14
 8005c34:	5ec9      	ldrsh	r1, [r1, r3]
 8005c36:	f000 f809 	bl	8005c4c <_close_r>
 8005c3a:	bd10      	pop	{r4, pc}

08005c3c <memset>:
 8005c3c:	0003      	movs	r3, r0
 8005c3e:	1882      	adds	r2, r0, r2
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d100      	bne.n	8005c46 <memset+0xa>
 8005c44:	4770      	bx	lr
 8005c46:	7019      	strb	r1, [r3, #0]
 8005c48:	3301      	adds	r3, #1
 8005c4a:	e7f9      	b.n	8005c40 <memset+0x4>

08005c4c <_close_r>:
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	b570      	push	{r4, r5, r6, lr}
 8005c50:	4d06      	ldr	r5, [pc, #24]	@ (8005c6c <_close_r+0x20>)
 8005c52:	0004      	movs	r4, r0
 8005c54:	0008      	movs	r0, r1
 8005c56:	602b      	str	r3, [r5, #0]
 8005c58:	f7fc f972 	bl	8001f40 <_close>
 8005c5c:	1c43      	adds	r3, r0, #1
 8005c5e:	d103      	bne.n	8005c68 <_close_r+0x1c>
 8005c60:	682b      	ldr	r3, [r5, #0]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d000      	beq.n	8005c68 <_close_r+0x1c>
 8005c66:	6023      	str	r3, [r4, #0]
 8005c68:	bd70      	pop	{r4, r5, r6, pc}
 8005c6a:	46c0      	nop			@ (mov r8, r8)
 8005c6c:	2000061c 	.word	0x2000061c

08005c70 <_lseek_r>:
 8005c70:	b570      	push	{r4, r5, r6, lr}
 8005c72:	0004      	movs	r4, r0
 8005c74:	0008      	movs	r0, r1
 8005c76:	0011      	movs	r1, r2
 8005c78:	001a      	movs	r2, r3
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	4d05      	ldr	r5, [pc, #20]	@ (8005c94 <_lseek_r+0x24>)
 8005c7e:	602b      	str	r3, [r5, #0]
 8005c80:	f7fc f968 	bl	8001f54 <_lseek>
 8005c84:	1c43      	adds	r3, r0, #1
 8005c86:	d103      	bne.n	8005c90 <_lseek_r+0x20>
 8005c88:	682b      	ldr	r3, [r5, #0]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d000      	beq.n	8005c90 <_lseek_r+0x20>
 8005c8e:	6023      	str	r3, [r4, #0]
 8005c90:	bd70      	pop	{r4, r5, r6, pc}
 8005c92:	46c0      	nop			@ (mov r8, r8)
 8005c94:	2000061c 	.word	0x2000061c

08005c98 <_read_r>:
 8005c98:	b570      	push	{r4, r5, r6, lr}
 8005c9a:	0004      	movs	r4, r0
 8005c9c:	0008      	movs	r0, r1
 8005c9e:	0011      	movs	r1, r2
 8005ca0:	001a      	movs	r2, r3
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	4d05      	ldr	r5, [pc, #20]	@ (8005cbc <_read_r+0x24>)
 8005ca6:	602b      	str	r3, [r5, #0]
 8005ca8:	f7fc f930 	bl	8001f0c <_read>
 8005cac:	1c43      	adds	r3, r0, #1
 8005cae:	d103      	bne.n	8005cb8 <_read_r+0x20>
 8005cb0:	682b      	ldr	r3, [r5, #0]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d000      	beq.n	8005cb8 <_read_r+0x20>
 8005cb6:	6023      	str	r3, [r4, #0]
 8005cb8:	bd70      	pop	{r4, r5, r6, pc}
 8005cba:	46c0      	nop			@ (mov r8, r8)
 8005cbc:	2000061c 	.word	0x2000061c

08005cc0 <_write_r>:
 8005cc0:	b570      	push	{r4, r5, r6, lr}
 8005cc2:	0004      	movs	r4, r0
 8005cc4:	0008      	movs	r0, r1
 8005cc6:	0011      	movs	r1, r2
 8005cc8:	001a      	movs	r2, r3
 8005cca:	2300      	movs	r3, #0
 8005ccc:	4d05      	ldr	r5, [pc, #20]	@ (8005ce4 <_write_r+0x24>)
 8005cce:	602b      	str	r3, [r5, #0]
 8005cd0:	f7fc f929 	bl	8001f26 <_write>
 8005cd4:	1c43      	adds	r3, r0, #1
 8005cd6:	d103      	bne.n	8005ce0 <_write_r+0x20>
 8005cd8:	682b      	ldr	r3, [r5, #0]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d000      	beq.n	8005ce0 <_write_r+0x20>
 8005cde:	6023      	str	r3, [r4, #0]
 8005ce0:	bd70      	pop	{r4, r5, r6, pc}
 8005ce2:	46c0      	nop			@ (mov r8, r8)
 8005ce4:	2000061c 	.word	0x2000061c

08005ce8 <__errno>:
 8005ce8:	4b01      	ldr	r3, [pc, #4]	@ (8005cf0 <__errno+0x8>)
 8005cea:	6818      	ldr	r0, [r3, #0]
 8005cec:	4770      	bx	lr
 8005cee:	46c0      	nop			@ (mov r8, r8)
 8005cf0:	200000a4 	.word	0x200000a4

08005cf4 <__libc_init_array>:
 8005cf4:	b570      	push	{r4, r5, r6, lr}
 8005cf6:	2600      	movs	r6, #0
 8005cf8:	4c0c      	ldr	r4, [pc, #48]	@ (8005d2c <__libc_init_array+0x38>)
 8005cfa:	4d0d      	ldr	r5, [pc, #52]	@ (8005d30 <__libc_init_array+0x3c>)
 8005cfc:	1b64      	subs	r4, r4, r5
 8005cfe:	10a4      	asrs	r4, r4, #2
 8005d00:	42a6      	cmp	r6, r4
 8005d02:	d109      	bne.n	8005d18 <__libc_init_array+0x24>
 8005d04:	2600      	movs	r6, #0
 8005d06:	f000 fe35 	bl	8006974 <_init>
 8005d0a:	4c0a      	ldr	r4, [pc, #40]	@ (8005d34 <__libc_init_array+0x40>)
 8005d0c:	4d0a      	ldr	r5, [pc, #40]	@ (8005d38 <__libc_init_array+0x44>)
 8005d0e:	1b64      	subs	r4, r4, r5
 8005d10:	10a4      	asrs	r4, r4, #2
 8005d12:	42a6      	cmp	r6, r4
 8005d14:	d105      	bne.n	8005d22 <__libc_init_array+0x2e>
 8005d16:	bd70      	pop	{r4, r5, r6, pc}
 8005d18:	00b3      	lsls	r3, r6, #2
 8005d1a:	58eb      	ldr	r3, [r5, r3]
 8005d1c:	4798      	blx	r3
 8005d1e:	3601      	adds	r6, #1
 8005d20:	e7ee      	b.n	8005d00 <__libc_init_array+0xc>
 8005d22:	00b3      	lsls	r3, r6, #2
 8005d24:	58eb      	ldr	r3, [r5, r3]
 8005d26:	4798      	blx	r3
 8005d28:	3601      	adds	r6, #1
 8005d2a:	e7f2      	b.n	8005d12 <__libc_init_array+0x1e>
 8005d2c:	08006e54 	.word	0x08006e54
 8005d30:	08006e54 	.word	0x08006e54
 8005d34:	08006e58 	.word	0x08006e58
 8005d38:	08006e54 	.word	0x08006e54

08005d3c <__retarget_lock_init_recursive>:
 8005d3c:	4770      	bx	lr

08005d3e <__retarget_lock_acquire_recursive>:
 8005d3e:	4770      	bx	lr

08005d40 <__retarget_lock_release_recursive>:
 8005d40:	4770      	bx	lr

08005d42 <memcpy>:
 8005d42:	2300      	movs	r3, #0
 8005d44:	b510      	push	{r4, lr}
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d100      	bne.n	8005d4c <memcpy+0xa>
 8005d4a:	bd10      	pop	{r4, pc}
 8005d4c:	5ccc      	ldrb	r4, [r1, r3]
 8005d4e:	54c4      	strb	r4, [r0, r3]
 8005d50:	3301      	adds	r3, #1
 8005d52:	e7f8      	b.n	8005d46 <memcpy+0x4>

08005d54 <abort>:
 8005d54:	2006      	movs	r0, #6
 8005d56:	b510      	push	{r4, lr}
 8005d58:	f000 fd3e 	bl	80067d8 <raise>
 8005d5c:	2001      	movs	r0, #1
 8005d5e:	f7fc f8cf 	bl	8001f00 <_exit>
	...

08005d64 <_free_r>:
 8005d64:	b570      	push	{r4, r5, r6, lr}
 8005d66:	0005      	movs	r5, r0
 8005d68:	1e0c      	subs	r4, r1, #0
 8005d6a:	d010      	beq.n	8005d8e <_free_r+0x2a>
 8005d6c:	3c04      	subs	r4, #4
 8005d6e:	6823      	ldr	r3, [r4, #0]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	da00      	bge.n	8005d76 <_free_r+0x12>
 8005d74:	18e4      	adds	r4, r4, r3
 8005d76:	0028      	movs	r0, r5
 8005d78:	f000 f8e0 	bl	8005f3c <__malloc_lock>
 8005d7c:	4a1d      	ldr	r2, [pc, #116]	@ (8005df4 <_free_r+0x90>)
 8005d7e:	6813      	ldr	r3, [r2, #0]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d105      	bne.n	8005d90 <_free_r+0x2c>
 8005d84:	6063      	str	r3, [r4, #4]
 8005d86:	6014      	str	r4, [r2, #0]
 8005d88:	0028      	movs	r0, r5
 8005d8a:	f000 f8df 	bl	8005f4c <__malloc_unlock>
 8005d8e:	bd70      	pop	{r4, r5, r6, pc}
 8005d90:	42a3      	cmp	r3, r4
 8005d92:	d908      	bls.n	8005da6 <_free_r+0x42>
 8005d94:	6820      	ldr	r0, [r4, #0]
 8005d96:	1821      	adds	r1, r4, r0
 8005d98:	428b      	cmp	r3, r1
 8005d9a:	d1f3      	bne.n	8005d84 <_free_r+0x20>
 8005d9c:	6819      	ldr	r1, [r3, #0]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	1809      	adds	r1, r1, r0
 8005da2:	6021      	str	r1, [r4, #0]
 8005da4:	e7ee      	b.n	8005d84 <_free_r+0x20>
 8005da6:	001a      	movs	r2, r3
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d001      	beq.n	8005db2 <_free_r+0x4e>
 8005dae:	42a3      	cmp	r3, r4
 8005db0:	d9f9      	bls.n	8005da6 <_free_r+0x42>
 8005db2:	6811      	ldr	r1, [r2, #0]
 8005db4:	1850      	adds	r0, r2, r1
 8005db6:	42a0      	cmp	r0, r4
 8005db8:	d10b      	bne.n	8005dd2 <_free_r+0x6e>
 8005dba:	6820      	ldr	r0, [r4, #0]
 8005dbc:	1809      	adds	r1, r1, r0
 8005dbe:	1850      	adds	r0, r2, r1
 8005dc0:	6011      	str	r1, [r2, #0]
 8005dc2:	4283      	cmp	r3, r0
 8005dc4:	d1e0      	bne.n	8005d88 <_free_r+0x24>
 8005dc6:	6818      	ldr	r0, [r3, #0]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	1841      	adds	r1, r0, r1
 8005dcc:	6011      	str	r1, [r2, #0]
 8005dce:	6053      	str	r3, [r2, #4]
 8005dd0:	e7da      	b.n	8005d88 <_free_r+0x24>
 8005dd2:	42a0      	cmp	r0, r4
 8005dd4:	d902      	bls.n	8005ddc <_free_r+0x78>
 8005dd6:	230c      	movs	r3, #12
 8005dd8:	602b      	str	r3, [r5, #0]
 8005dda:	e7d5      	b.n	8005d88 <_free_r+0x24>
 8005ddc:	6820      	ldr	r0, [r4, #0]
 8005dde:	1821      	adds	r1, r4, r0
 8005de0:	428b      	cmp	r3, r1
 8005de2:	d103      	bne.n	8005dec <_free_r+0x88>
 8005de4:	6819      	ldr	r1, [r3, #0]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	1809      	adds	r1, r1, r0
 8005dea:	6021      	str	r1, [r4, #0]
 8005dec:	6063      	str	r3, [r4, #4]
 8005dee:	6054      	str	r4, [r2, #4]
 8005df0:	e7ca      	b.n	8005d88 <_free_r+0x24>
 8005df2:	46c0      	nop			@ (mov r8, r8)
 8005df4:	20000628 	.word	0x20000628

08005df8 <sbrk_aligned>:
 8005df8:	b570      	push	{r4, r5, r6, lr}
 8005dfa:	4e0f      	ldr	r6, [pc, #60]	@ (8005e38 <sbrk_aligned+0x40>)
 8005dfc:	000d      	movs	r5, r1
 8005dfe:	6831      	ldr	r1, [r6, #0]
 8005e00:	0004      	movs	r4, r0
 8005e02:	2900      	cmp	r1, #0
 8005e04:	d102      	bne.n	8005e0c <sbrk_aligned+0x14>
 8005e06:	f000 fd07 	bl	8006818 <_sbrk_r>
 8005e0a:	6030      	str	r0, [r6, #0]
 8005e0c:	0029      	movs	r1, r5
 8005e0e:	0020      	movs	r0, r4
 8005e10:	f000 fd02 	bl	8006818 <_sbrk_r>
 8005e14:	1c43      	adds	r3, r0, #1
 8005e16:	d103      	bne.n	8005e20 <sbrk_aligned+0x28>
 8005e18:	2501      	movs	r5, #1
 8005e1a:	426d      	negs	r5, r5
 8005e1c:	0028      	movs	r0, r5
 8005e1e:	bd70      	pop	{r4, r5, r6, pc}
 8005e20:	2303      	movs	r3, #3
 8005e22:	1cc5      	adds	r5, r0, #3
 8005e24:	439d      	bics	r5, r3
 8005e26:	42a8      	cmp	r0, r5
 8005e28:	d0f8      	beq.n	8005e1c <sbrk_aligned+0x24>
 8005e2a:	1a29      	subs	r1, r5, r0
 8005e2c:	0020      	movs	r0, r4
 8005e2e:	f000 fcf3 	bl	8006818 <_sbrk_r>
 8005e32:	3001      	adds	r0, #1
 8005e34:	d1f2      	bne.n	8005e1c <sbrk_aligned+0x24>
 8005e36:	e7ef      	b.n	8005e18 <sbrk_aligned+0x20>
 8005e38:	20000624 	.word	0x20000624

08005e3c <_malloc_r>:
 8005e3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e3e:	2203      	movs	r2, #3
 8005e40:	1ccb      	adds	r3, r1, #3
 8005e42:	4393      	bics	r3, r2
 8005e44:	3308      	adds	r3, #8
 8005e46:	0005      	movs	r5, r0
 8005e48:	001f      	movs	r7, r3
 8005e4a:	2b0c      	cmp	r3, #12
 8005e4c:	d234      	bcs.n	8005eb8 <_malloc_r+0x7c>
 8005e4e:	270c      	movs	r7, #12
 8005e50:	42b9      	cmp	r1, r7
 8005e52:	d833      	bhi.n	8005ebc <_malloc_r+0x80>
 8005e54:	0028      	movs	r0, r5
 8005e56:	f000 f871 	bl	8005f3c <__malloc_lock>
 8005e5a:	4e37      	ldr	r6, [pc, #220]	@ (8005f38 <_malloc_r+0xfc>)
 8005e5c:	6833      	ldr	r3, [r6, #0]
 8005e5e:	001c      	movs	r4, r3
 8005e60:	2c00      	cmp	r4, #0
 8005e62:	d12f      	bne.n	8005ec4 <_malloc_r+0x88>
 8005e64:	0039      	movs	r1, r7
 8005e66:	0028      	movs	r0, r5
 8005e68:	f7ff ffc6 	bl	8005df8 <sbrk_aligned>
 8005e6c:	0004      	movs	r4, r0
 8005e6e:	1c43      	adds	r3, r0, #1
 8005e70:	d15f      	bne.n	8005f32 <_malloc_r+0xf6>
 8005e72:	6834      	ldr	r4, [r6, #0]
 8005e74:	9400      	str	r4, [sp, #0]
 8005e76:	9b00      	ldr	r3, [sp, #0]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d14a      	bne.n	8005f12 <_malloc_r+0xd6>
 8005e7c:	2c00      	cmp	r4, #0
 8005e7e:	d052      	beq.n	8005f26 <_malloc_r+0xea>
 8005e80:	6823      	ldr	r3, [r4, #0]
 8005e82:	0028      	movs	r0, r5
 8005e84:	18e3      	adds	r3, r4, r3
 8005e86:	9900      	ldr	r1, [sp, #0]
 8005e88:	9301      	str	r3, [sp, #4]
 8005e8a:	f000 fcc5 	bl	8006818 <_sbrk_r>
 8005e8e:	9b01      	ldr	r3, [sp, #4]
 8005e90:	4283      	cmp	r3, r0
 8005e92:	d148      	bne.n	8005f26 <_malloc_r+0xea>
 8005e94:	6823      	ldr	r3, [r4, #0]
 8005e96:	0028      	movs	r0, r5
 8005e98:	1aff      	subs	r7, r7, r3
 8005e9a:	0039      	movs	r1, r7
 8005e9c:	f7ff ffac 	bl	8005df8 <sbrk_aligned>
 8005ea0:	3001      	adds	r0, #1
 8005ea2:	d040      	beq.n	8005f26 <_malloc_r+0xea>
 8005ea4:	6823      	ldr	r3, [r4, #0]
 8005ea6:	19db      	adds	r3, r3, r7
 8005ea8:	6023      	str	r3, [r4, #0]
 8005eaa:	6833      	ldr	r3, [r6, #0]
 8005eac:	685a      	ldr	r2, [r3, #4]
 8005eae:	2a00      	cmp	r2, #0
 8005eb0:	d133      	bne.n	8005f1a <_malloc_r+0xde>
 8005eb2:	9b00      	ldr	r3, [sp, #0]
 8005eb4:	6033      	str	r3, [r6, #0]
 8005eb6:	e019      	b.n	8005eec <_malloc_r+0xb0>
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	dac9      	bge.n	8005e50 <_malloc_r+0x14>
 8005ebc:	230c      	movs	r3, #12
 8005ebe:	602b      	str	r3, [r5, #0]
 8005ec0:	2000      	movs	r0, #0
 8005ec2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005ec4:	6821      	ldr	r1, [r4, #0]
 8005ec6:	1bc9      	subs	r1, r1, r7
 8005ec8:	d420      	bmi.n	8005f0c <_malloc_r+0xd0>
 8005eca:	290b      	cmp	r1, #11
 8005ecc:	d90a      	bls.n	8005ee4 <_malloc_r+0xa8>
 8005ece:	19e2      	adds	r2, r4, r7
 8005ed0:	6027      	str	r7, [r4, #0]
 8005ed2:	42a3      	cmp	r3, r4
 8005ed4:	d104      	bne.n	8005ee0 <_malloc_r+0xa4>
 8005ed6:	6032      	str	r2, [r6, #0]
 8005ed8:	6863      	ldr	r3, [r4, #4]
 8005eda:	6011      	str	r1, [r2, #0]
 8005edc:	6053      	str	r3, [r2, #4]
 8005ede:	e005      	b.n	8005eec <_malloc_r+0xb0>
 8005ee0:	605a      	str	r2, [r3, #4]
 8005ee2:	e7f9      	b.n	8005ed8 <_malloc_r+0x9c>
 8005ee4:	6862      	ldr	r2, [r4, #4]
 8005ee6:	42a3      	cmp	r3, r4
 8005ee8:	d10e      	bne.n	8005f08 <_malloc_r+0xcc>
 8005eea:	6032      	str	r2, [r6, #0]
 8005eec:	0028      	movs	r0, r5
 8005eee:	f000 f82d 	bl	8005f4c <__malloc_unlock>
 8005ef2:	0020      	movs	r0, r4
 8005ef4:	2207      	movs	r2, #7
 8005ef6:	300b      	adds	r0, #11
 8005ef8:	1d23      	adds	r3, r4, #4
 8005efa:	4390      	bics	r0, r2
 8005efc:	1ac2      	subs	r2, r0, r3
 8005efe:	4298      	cmp	r0, r3
 8005f00:	d0df      	beq.n	8005ec2 <_malloc_r+0x86>
 8005f02:	1a1b      	subs	r3, r3, r0
 8005f04:	50a3      	str	r3, [r4, r2]
 8005f06:	e7dc      	b.n	8005ec2 <_malloc_r+0x86>
 8005f08:	605a      	str	r2, [r3, #4]
 8005f0a:	e7ef      	b.n	8005eec <_malloc_r+0xb0>
 8005f0c:	0023      	movs	r3, r4
 8005f0e:	6864      	ldr	r4, [r4, #4]
 8005f10:	e7a6      	b.n	8005e60 <_malloc_r+0x24>
 8005f12:	9c00      	ldr	r4, [sp, #0]
 8005f14:	6863      	ldr	r3, [r4, #4]
 8005f16:	9300      	str	r3, [sp, #0]
 8005f18:	e7ad      	b.n	8005e76 <_malloc_r+0x3a>
 8005f1a:	001a      	movs	r2, r3
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	42a3      	cmp	r3, r4
 8005f20:	d1fb      	bne.n	8005f1a <_malloc_r+0xde>
 8005f22:	2300      	movs	r3, #0
 8005f24:	e7da      	b.n	8005edc <_malloc_r+0xa0>
 8005f26:	230c      	movs	r3, #12
 8005f28:	0028      	movs	r0, r5
 8005f2a:	602b      	str	r3, [r5, #0]
 8005f2c:	f000 f80e 	bl	8005f4c <__malloc_unlock>
 8005f30:	e7c6      	b.n	8005ec0 <_malloc_r+0x84>
 8005f32:	6007      	str	r7, [r0, #0]
 8005f34:	e7da      	b.n	8005eec <_malloc_r+0xb0>
 8005f36:	46c0      	nop			@ (mov r8, r8)
 8005f38:	20000628 	.word	0x20000628

08005f3c <__malloc_lock>:
 8005f3c:	b510      	push	{r4, lr}
 8005f3e:	4802      	ldr	r0, [pc, #8]	@ (8005f48 <__malloc_lock+0xc>)
 8005f40:	f7ff fefd 	bl	8005d3e <__retarget_lock_acquire_recursive>
 8005f44:	bd10      	pop	{r4, pc}
 8005f46:	46c0      	nop			@ (mov r8, r8)
 8005f48:	20000620 	.word	0x20000620

08005f4c <__malloc_unlock>:
 8005f4c:	b510      	push	{r4, lr}
 8005f4e:	4802      	ldr	r0, [pc, #8]	@ (8005f58 <__malloc_unlock+0xc>)
 8005f50:	f7ff fef6 	bl	8005d40 <__retarget_lock_release_recursive>
 8005f54:	bd10      	pop	{r4, pc}
 8005f56:	46c0      	nop			@ (mov r8, r8)
 8005f58:	20000620 	.word	0x20000620

08005f5c <__sfputc_r>:
 8005f5c:	6893      	ldr	r3, [r2, #8]
 8005f5e:	b510      	push	{r4, lr}
 8005f60:	3b01      	subs	r3, #1
 8005f62:	6093      	str	r3, [r2, #8]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	da04      	bge.n	8005f72 <__sfputc_r+0x16>
 8005f68:	6994      	ldr	r4, [r2, #24]
 8005f6a:	42a3      	cmp	r3, r4
 8005f6c:	db07      	blt.n	8005f7e <__sfputc_r+0x22>
 8005f6e:	290a      	cmp	r1, #10
 8005f70:	d005      	beq.n	8005f7e <__sfputc_r+0x22>
 8005f72:	6813      	ldr	r3, [r2, #0]
 8005f74:	1c58      	adds	r0, r3, #1
 8005f76:	6010      	str	r0, [r2, #0]
 8005f78:	7019      	strb	r1, [r3, #0]
 8005f7a:	0008      	movs	r0, r1
 8005f7c:	bd10      	pop	{r4, pc}
 8005f7e:	f000 fb60 	bl	8006642 <__swbuf_r>
 8005f82:	0001      	movs	r1, r0
 8005f84:	e7f9      	b.n	8005f7a <__sfputc_r+0x1e>

08005f86 <__sfputs_r>:
 8005f86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f88:	0006      	movs	r6, r0
 8005f8a:	000f      	movs	r7, r1
 8005f8c:	0014      	movs	r4, r2
 8005f8e:	18d5      	adds	r5, r2, r3
 8005f90:	42ac      	cmp	r4, r5
 8005f92:	d101      	bne.n	8005f98 <__sfputs_r+0x12>
 8005f94:	2000      	movs	r0, #0
 8005f96:	e007      	b.n	8005fa8 <__sfputs_r+0x22>
 8005f98:	7821      	ldrb	r1, [r4, #0]
 8005f9a:	003a      	movs	r2, r7
 8005f9c:	0030      	movs	r0, r6
 8005f9e:	f7ff ffdd 	bl	8005f5c <__sfputc_r>
 8005fa2:	3401      	adds	r4, #1
 8005fa4:	1c43      	adds	r3, r0, #1
 8005fa6:	d1f3      	bne.n	8005f90 <__sfputs_r+0xa>
 8005fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005fac <_vfiprintf_r>:
 8005fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fae:	b0a1      	sub	sp, #132	@ 0x84
 8005fb0:	000f      	movs	r7, r1
 8005fb2:	0015      	movs	r5, r2
 8005fb4:	001e      	movs	r6, r3
 8005fb6:	9003      	str	r0, [sp, #12]
 8005fb8:	2800      	cmp	r0, #0
 8005fba:	d004      	beq.n	8005fc6 <_vfiprintf_r+0x1a>
 8005fbc:	6a03      	ldr	r3, [r0, #32]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d101      	bne.n	8005fc6 <_vfiprintf_r+0x1a>
 8005fc2:	f7ff fdab 	bl	8005b1c <__sinit>
 8005fc6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005fc8:	07db      	lsls	r3, r3, #31
 8005fca:	d405      	bmi.n	8005fd8 <_vfiprintf_r+0x2c>
 8005fcc:	89bb      	ldrh	r3, [r7, #12]
 8005fce:	059b      	lsls	r3, r3, #22
 8005fd0:	d402      	bmi.n	8005fd8 <_vfiprintf_r+0x2c>
 8005fd2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005fd4:	f7ff feb3 	bl	8005d3e <__retarget_lock_acquire_recursive>
 8005fd8:	89bb      	ldrh	r3, [r7, #12]
 8005fda:	071b      	lsls	r3, r3, #28
 8005fdc:	d502      	bpl.n	8005fe4 <_vfiprintf_r+0x38>
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d113      	bne.n	800600c <_vfiprintf_r+0x60>
 8005fe4:	0039      	movs	r1, r7
 8005fe6:	9803      	ldr	r0, [sp, #12]
 8005fe8:	f000 fb6e 	bl	80066c8 <__swsetup_r>
 8005fec:	2800      	cmp	r0, #0
 8005fee:	d00d      	beq.n	800600c <_vfiprintf_r+0x60>
 8005ff0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ff2:	07db      	lsls	r3, r3, #31
 8005ff4:	d503      	bpl.n	8005ffe <_vfiprintf_r+0x52>
 8005ff6:	2001      	movs	r0, #1
 8005ff8:	4240      	negs	r0, r0
 8005ffa:	b021      	add	sp, #132	@ 0x84
 8005ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ffe:	89bb      	ldrh	r3, [r7, #12]
 8006000:	059b      	lsls	r3, r3, #22
 8006002:	d4f8      	bmi.n	8005ff6 <_vfiprintf_r+0x4a>
 8006004:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8006006:	f7ff fe9b 	bl	8005d40 <__retarget_lock_release_recursive>
 800600a:	e7f4      	b.n	8005ff6 <_vfiprintf_r+0x4a>
 800600c:	2300      	movs	r3, #0
 800600e:	ac08      	add	r4, sp, #32
 8006010:	6163      	str	r3, [r4, #20]
 8006012:	3320      	adds	r3, #32
 8006014:	7663      	strb	r3, [r4, #25]
 8006016:	3310      	adds	r3, #16
 8006018:	76a3      	strb	r3, [r4, #26]
 800601a:	9607      	str	r6, [sp, #28]
 800601c:	002e      	movs	r6, r5
 800601e:	7833      	ldrb	r3, [r6, #0]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d001      	beq.n	8006028 <_vfiprintf_r+0x7c>
 8006024:	2b25      	cmp	r3, #37	@ 0x25
 8006026:	d148      	bne.n	80060ba <_vfiprintf_r+0x10e>
 8006028:	1b73      	subs	r3, r6, r5
 800602a:	9305      	str	r3, [sp, #20]
 800602c:	42ae      	cmp	r6, r5
 800602e:	d00b      	beq.n	8006048 <_vfiprintf_r+0x9c>
 8006030:	002a      	movs	r2, r5
 8006032:	0039      	movs	r1, r7
 8006034:	9803      	ldr	r0, [sp, #12]
 8006036:	f7ff ffa6 	bl	8005f86 <__sfputs_r>
 800603a:	3001      	adds	r0, #1
 800603c:	d100      	bne.n	8006040 <_vfiprintf_r+0x94>
 800603e:	e0ae      	b.n	800619e <_vfiprintf_r+0x1f2>
 8006040:	6963      	ldr	r3, [r4, #20]
 8006042:	9a05      	ldr	r2, [sp, #20]
 8006044:	189b      	adds	r3, r3, r2
 8006046:	6163      	str	r3, [r4, #20]
 8006048:	7833      	ldrb	r3, [r6, #0]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d100      	bne.n	8006050 <_vfiprintf_r+0xa4>
 800604e:	e0a6      	b.n	800619e <_vfiprintf_r+0x1f2>
 8006050:	2201      	movs	r2, #1
 8006052:	2300      	movs	r3, #0
 8006054:	4252      	negs	r2, r2
 8006056:	6062      	str	r2, [r4, #4]
 8006058:	a904      	add	r1, sp, #16
 800605a:	3254      	adds	r2, #84	@ 0x54
 800605c:	1852      	adds	r2, r2, r1
 800605e:	1c75      	adds	r5, r6, #1
 8006060:	6023      	str	r3, [r4, #0]
 8006062:	60e3      	str	r3, [r4, #12]
 8006064:	60a3      	str	r3, [r4, #8]
 8006066:	7013      	strb	r3, [r2, #0]
 8006068:	65a3      	str	r3, [r4, #88]	@ 0x58
 800606a:	4b59      	ldr	r3, [pc, #356]	@ (80061d0 <_vfiprintf_r+0x224>)
 800606c:	2205      	movs	r2, #5
 800606e:	0018      	movs	r0, r3
 8006070:	7829      	ldrb	r1, [r5, #0]
 8006072:	9305      	str	r3, [sp, #20]
 8006074:	f000 fbe2 	bl	800683c <memchr>
 8006078:	1c6e      	adds	r6, r5, #1
 800607a:	2800      	cmp	r0, #0
 800607c:	d11f      	bne.n	80060be <_vfiprintf_r+0x112>
 800607e:	6822      	ldr	r2, [r4, #0]
 8006080:	06d3      	lsls	r3, r2, #27
 8006082:	d504      	bpl.n	800608e <_vfiprintf_r+0xe2>
 8006084:	2353      	movs	r3, #83	@ 0x53
 8006086:	a904      	add	r1, sp, #16
 8006088:	185b      	adds	r3, r3, r1
 800608a:	2120      	movs	r1, #32
 800608c:	7019      	strb	r1, [r3, #0]
 800608e:	0713      	lsls	r3, r2, #28
 8006090:	d504      	bpl.n	800609c <_vfiprintf_r+0xf0>
 8006092:	2353      	movs	r3, #83	@ 0x53
 8006094:	a904      	add	r1, sp, #16
 8006096:	185b      	adds	r3, r3, r1
 8006098:	212b      	movs	r1, #43	@ 0x2b
 800609a:	7019      	strb	r1, [r3, #0]
 800609c:	782b      	ldrb	r3, [r5, #0]
 800609e:	2b2a      	cmp	r3, #42	@ 0x2a
 80060a0:	d016      	beq.n	80060d0 <_vfiprintf_r+0x124>
 80060a2:	002e      	movs	r6, r5
 80060a4:	2100      	movs	r1, #0
 80060a6:	200a      	movs	r0, #10
 80060a8:	68e3      	ldr	r3, [r4, #12]
 80060aa:	7832      	ldrb	r2, [r6, #0]
 80060ac:	1c75      	adds	r5, r6, #1
 80060ae:	3a30      	subs	r2, #48	@ 0x30
 80060b0:	2a09      	cmp	r2, #9
 80060b2:	d950      	bls.n	8006156 <_vfiprintf_r+0x1aa>
 80060b4:	2900      	cmp	r1, #0
 80060b6:	d111      	bne.n	80060dc <_vfiprintf_r+0x130>
 80060b8:	e017      	b.n	80060ea <_vfiprintf_r+0x13e>
 80060ba:	3601      	adds	r6, #1
 80060bc:	e7af      	b.n	800601e <_vfiprintf_r+0x72>
 80060be:	9b05      	ldr	r3, [sp, #20]
 80060c0:	6822      	ldr	r2, [r4, #0]
 80060c2:	1ac0      	subs	r0, r0, r3
 80060c4:	2301      	movs	r3, #1
 80060c6:	4083      	lsls	r3, r0
 80060c8:	4313      	orrs	r3, r2
 80060ca:	0035      	movs	r5, r6
 80060cc:	6023      	str	r3, [r4, #0]
 80060ce:	e7cc      	b.n	800606a <_vfiprintf_r+0xbe>
 80060d0:	9b07      	ldr	r3, [sp, #28]
 80060d2:	1d19      	adds	r1, r3, #4
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	9107      	str	r1, [sp, #28]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	db01      	blt.n	80060e0 <_vfiprintf_r+0x134>
 80060dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80060de:	e004      	b.n	80060ea <_vfiprintf_r+0x13e>
 80060e0:	425b      	negs	r3, r3
 80060e2:	60e3      	str	r3, [r4, #12]
 80060e4:	2302      	movs	r3, #2
 80060e6:	4313      	orrs	r3, r2
 80060e8:	6023      	str	r3, [r4, #0]
 80060ea:	7833      	ldrb	r3, [r6, #0]
 80060ec:	2b2e      	cmp	r3, #46	@ 0x2e
 80060ee:	d10c      	bne.n	800610a <_vfiprintf_r+0x15e>
 80060f0:	7873      	ldrb	r3, [r6, #1]
 80060f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80060f4:	d134      	bne.n	8006160 <_vfiprintf_r+0x1b4>
 80060f6:	9b07      	ldr	r3, [sp, #28]
 80060f8:	3602      	adds	r6, #2
 80060fa:	1d1a      	adds	r2, r3, #4
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	9207      	str	r2, [sp, #28]
 8006100:	2b00      	cmp	r3, #0
 8006102:	da01      	bge.n	8006108 <_vfiprintf_r+0x15c>
 8006104:	2301      	movs	r3, #1
 8006106:	425b      	negs	r3, r3
 8006108:	9309      	str	r3, [sp, #36]	@ 0x24
 800610a:	4d32      	ldr	r5, [pc, #200]	@ (80061d4 <_vfiprintf_r+0x228>)
 800610c:	2203      	movs	r2, #3
 800610e:	0028      	movs	r0, r5
 8006110:	7831      	ldrb	r1, [r6, #0]
 8006112:	f000 fb93 	bl	800683c <memchr>
 8006116:	2800      	cmp	r0, #0
 8006118:	d006      	beq.n	8006128 <_vfiprintf_r+0x17c>
 800611a:	2340      	movs	r3, #64	@ 0x40
 800611c:	1b40      	subs	r0, r0, r5
 800611e:	4083      	lsls	r3, r0
 8006120:	6822      	ldr	r2, [r4, #0]
 8006122:	3601      	adds	r6, #1
 8006124:	4313      	orrs	r3, r2
 8006126:	6023      	str	r3, [r4, #0]
 8006128:	7831      	ldrb	r1, [r6, #0]
 800612a:	2206      	movs	r2, #6
 800612c:	482a      	ldr	r0, [pc, #168]	@ (80061d8 <_vfiprintf_r+0x22c>)
 800612e:	1c75      	adds	r5, r6, #1
 8006130:	7621      	strb	r1, [r4, #24]
 8006132:	f000 fb83 	bl	800683c <memchr>
 8006136:	2800      	cmp	r0, #0
 8006138:	d040      	beq.n	80061bc <_vfiprintf_r+0x210>
 800613a:	4b28      	ldr	r3, [pc, #160]	@ (80061dc <_vfiprintf_r+0x230>)
 800613c:	2b00      	cmp	r3, #0
 800613e:	d122      	bne.n	8006186 <_vfiprintf_r+0x1da>
 8006140:	2207      	movs	r2, #7
 8006142:	9b07      	ldr	r3, [sp, #28]
 8006144:	3307      	adds	r3, #7
 8006146:	4393      	bics	r3, r2
 8006148:	3308      	adds	r3, #8
 800614a:	9307      	str	r3, [sp, #28]
 800614c:	6963      	ldr	r3, [r4, #20]
 800614e:	9a04      	ldr	r2, [sp, #16]
 8006150:	189b      	adds	r3, r3, r2
 8006152:	6163      	str	r3, [r4, #20]
 8006154:	e762      	b.n	800601c <_vfiprintf_r+0x70>
 8006156:	4343      	muls	r3, r0
 8006158:	002e      	movs	r6, r5
 800615a:	2101      	movs	r1, #1
 800615c:	189b      	adds	r3, r3, r2
 800615e:	e7a4      	b.n	80060aa <_vfiprintf_r+0xfe>
 8006160:	2300      	movs	r3, #0
 8006162:	200a      	movs	r0, #10
 8006164:	0019      	movs	r1, r3
 8006166:	3601      	adds	r6, #1
 8006168:	6063      	str	r3, [r4, #4]
 800616a:	7832      	ldrb	r2, [r6, #0]
 800616c:	1c75      	adds	r5, r6, #1
 800616e:	3a30      	subs	r2, #48	@ 0x30
 8006170:	2a09      	cmp	r2, #9
 8006172:	d903      	bls.n	800617c <_vfiprintf_r+0x1d0>
 8006174:	2b00      	cmp	r3, #0
 8006176:	d0c8      	beq.n	800610a <_vfiprintf_r+0x15e>
 8006178:	9109      	str	r1, [sp, #36]	@ 0x24
 800617a:	e7c6      	b.n	800610a <_vfiprintf_r+0x15e>
 800617c:	4341      	muls	r1, r0
 800617e:	002e      	movs	r6, r5
 8006180:	2301      	movs	r3, #1
 8006182:	1889      	adds	r1, r1, r2
 8006184:	e7f1      	b.n	800616a <_vfiprintf_r+0x1be>
 8006186:	aa07      	add	r2, sp, #28
 8006188:	9200      	str	r2, [sp, #0]
 800618a:	0021      	movs	r1, r4
 800618c:	003a      	movs	r2, r7
 800618e:	4b14      	ldr	r3, [pc, #80]	@ (80061e0 <_vfiprintf_r+0x234>)
 8006190:	9803      	ldr	r0, [sp, #12]
 8006192:	e000      	b.n	8006196 <_vfiprintf_r+0x1ea>
 8006194:	bf00      	nop
 8006196:	9004      	str	r0, [sp, #16]
 8006198:	9b04      	ldr	r3, [sp, #16]
 800619a:	3301      	adds	r3, #1
 800619c:	d1d6      	bne.n	800614c <_vfiprintf_r+0x1a0>
 800619e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80061a0:	07db      	lsls	r3, r3, #31
 80061a2:	d405      	bmi.n	80061b0 <_vfiprintf_r+0x204>
 80061a4:	89bb      	ldrh	r3, [r7, #12]
 80061a6:	059b      	lsls	r3, r3, #22
 80061a8:	d402      	bmi.n	80061b0 <_vfiprintf_r+0x204>
 80061aa:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80061ac:	f7ff fdc8 	bl	8005d40 <__retarget_lock_release_recursive>
 80061b0:	89bb      	ldrh	r3, [r7, #12]
 80061b2:	065b      	lsls	r3, r3, #25
 80061b4:	d500      	bpl.n	80061b8 <_vfiprintf_r+0x20c>
 80061b6:	e71e      	b.n	8005ff6 <_vfiprintf_r+0x4a>
 80061b8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80061ba:	e71e      	b.n	8005ffa <_vfiprintf_r+0x4e>
 80061bc:	aa07      	add	r2, sp, #28
 80061be:	9200      	str	r2, [sp, #0]
 80061c0:	0021      	movs	r1, r4
 80061c2:	003a      	movs	r2, r7
 80061c4:	4b06      	ldr	r3, [pc, #24]	@ (80061e0 <_vfiprintf_r+0x234>)
 80061c6:	9803      	ldr	r0, [sp, #12]
 80061c8:	f000 f87c 	bl	80062c4 <_printf_i>
 80061cc:	e7e3      	b.n	8006196 <_vfiprintf_r+0x1ea>
 80061ce:	46c0      	nop			@ (mov r8, r8)
 80061d0:	08006e18 	.word	0x08006e18
 80061d4:	08006e1e 	.word	0x08006e1e
 80061d8:	08006e22 	.word	0x08006e22
 80061dc:	00000000 	.word	0x00000000
 80061e0:	08005f87 	.word	0x08005f87

080061e4 <_printf_common>:
 80061e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061e6:	0016      	movs	r6, r2
 80061e8:	9301      	str	r3, [sp, #4]
 80061ea:	688a      	ldr	r2, [r1, #8]
 80061ec:	690b      	ldr	r3, [r1, #16]
 80061ee:	000c      	movs	r4, r1
 80061f0:	9000      	str	r0, [sp, #0]
 80061f2:	4293      	cmp	r3, r2
 80061f4:	da00      	bge.n	80061f8 <_printf_common+0x14>
 80061f6:	0013      	movs	r3, r2
 80061f8:	0022      	movs	r2, r4
 80061fa:	6033      	str	r3, [r6, #0]
 80061fc:	3243      	adds	r2, #67	@ 0x43
 80061fe:	7812      	ldrb	r2, [r2, #0]
 8006200:	2a00      	cmp	r2, #0
 8006202:	d001      	beq.n	8006208 <_printf_common+0x24>
 8006204:	3301      	adds	r3, #1
 8006206:	6033      	str	r3, [r6, #0]
 8006208:	6823      	ldr	r3, [r4, #0]
 800620a:	069b      	lsls	r3, r3, #26
 800620c:	d502      	bpl.n	8006214 <_printf_common+0x30>
 800620e:	6833      	ldr	r3, [r6, #0]
 8006210:	3302      	adds	r3, #2
 8006212:	6033      	str	r3, [r6, #0]
 8006214:	6822      	ldr	r2, [r4, #0]
 8006216:	2306      	movs	r3, #6
 8006218:	0015      	movs	r5, r2
 800621a:	401d      	ands	r5, r3
 800621c:	421a      	tst	r2, r3
 800621e:	d027      	beq.n	8006270 <_printf_common+0x8c>
 8006220:	0023      	movs	r3, r4
 8006222:	3343      	adds	r3, #67	@ 0x43
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	1e5a      	subs	r2, r3, #1
 8006228:	4193      	sbcs	r3, r2
 800622a:	6822      	ldr	r2, [r4, #0]
 800622c:	0692      	lsls	r2, r2, #26
 800622e:	d430      	bmi.n	8006292 <_printf_common+0xae>
 8006230:	0022      	movs	r2, r4
 8006232:	9901      	ldr	r1, [sp, #4]
 8006234:	9800      	ldr	r0, [sp, #0]
 8006236:	9d08      	ldr	r5, [sp, #32]
 8006238:	3243      	adds	r2, #67	@ 0x43
 800623a:	47a8      	blx	r5
 800623c:	3001      	adds	r0, #1
 800623e:	d025      	beq.n	800628c <_printf_common+0xa8>
 8006240:	2206      	movs	r2, #6
 8006242:	6823      	ldr	r3, [r4, #0]
 8006244:	2500      	movs	r5, #0
 8006246:	4013      	ands	r3, r2
 8006248:	2b04      	cmp	r3, #4
 800624a:	d105      	bne.n	8006258 <_printf_common+0x74>
 800624c:	6833      	ldr	r3, [r6, #0]
 800624e:	68e5      	ldr	r5, [r4, #12]
 8006250:	1aed      	subs	r5, r5, r3
 8006252:	43eb      	mvns	r3, r5
 8006254:	17db      	asrs	r3, r3, #31
 8006256:	401d      	ands	r5, r3
 8006258:	68a3      	ldr	r3, [r4, #8]
 800625a:	6922      	ldr	r2, [r4, #16]
 800625c:	4293      	cmp	r3, r2
 800625e:	dd01      	ble.n	8006264 <_printf_common+0x80>
 8006260:	1a9b      	subs	r3, r3, r2
 8006262:	18ed      	adds	r5, r5, r3
 8006264:	2600      	movs	r6, #0
 8006266:	42b5      	cmp	r5, r6
 8006268:	d120      	bne.n	80062ac <_printf_common+0xc8>
 800626a:	2000      	movs	r0, #0
 800626c:	e010      	b.n	8006290 <_printf_common+0xac>
 800626e:	3501      	adds	r5, #1
 8006270:	68e3      	ldr	r3, [r4, #12]
 8006272:	6832      	ldr	r2, [r6, #0]
 8006274:	1a9b      	subs	r3, r3, r2
 8006276:	42ab      	cmp	r3, r5
 8006278:	ddd2      	ble.n	8006220 <_printf_common+0x3c>
 800627a:	0022      	movs	r2, r4
 800627c:	2301      	movs	r3, #1
 800627e:	9901      	ldr	r1, [sp, #4]
 8006280:	9800      	ldr	r0, [sp, #0]
 8006282:	9f08      	ldr	r7, [sp, #32]
 8006284:	3219      	adds	r2, #25
 8006286:	47b8      	blx	r7
 8006288:	3001      	adds	r0, #1
 800628a:	d1f0      	bne.n	800626e <_printf_common+0x8a>
 800628c:	2001      	movs	r0, #1
 800628e:	4240      	negs	r0, r0
 8006290:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006292:	2030      	movs	r0, #48	@ 0x30
 8006294:	18e1      	adds	r1, r4, r3
 8006296:	3143      	adds	r1, #67	@ 0x43
 8006298:	7008      	strb	r0, [r1, #0]
 800629a:	0021      	movs	r1, r4
 800629c:	1c5a      	adds	r2, r3, #1
 800629e:	3145      	adds	r1, #69	@ 0x45
 80062a0:	7809      	ldrb	r1, [r1, #0]
 80062a2:	18a2      	adds	r2, r4, r2
 80062a4:	3243      	adds	r2, #67	@ 0x43
 80062a6:	3302      	adds	r3, #2
 80062a8:	7011      	strb	r1, [r2, #0]
 80062aa:	e7c1      	b.n	8006230 <_printf_common+0x4c>
 80062ac:	0022      	movs	r2, r4
 80062ae:	2301      	movs	r3, #1
 80062b0:	9901      	ldr	r1, [sp, #4]
 80062b2:	9800      	ldr	r0, [sp, #0]
 80062b4:	9f08      	ldr	r7, [sp, #32]
 80062b6:	321a      	adds	r2, #26
 80062b8:	47b8      	blx	r7
 80062ba:	3001      	adds	r0, #1
 80062bc:	d0e6      	beq.n	800628c <_printf_common+0xa8>
 80062be:	3601      	adds	r6, #1
 80062c0:	e7d1      	b.n	8006266 <_printf_common+0x82>
	...

080062c4 <_printf_i>:
 80062c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062c6:	b08b      	sub	sp, #44	@ 0x2c
 80062c8:	9206      	str	r2, [sp, #24]
 80062ca:	000a      	movs	r2, r1
 80062cc:	3243      	adds	r2, #67	@ 0x43
 80062ce:	9307      	str	r3, [sp, #28]
 80062d0:	9005      	str	r0, [sp, #20]
 80062d2:	9203      	str	r2, [sp, #12]
 80062d4:	7e0a      	ldrb	r2, [r1, #24]
 80062d6:	000c      	movs	r4, r1
 80062d8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80062da:	2a78      	cmp	r2, #120	@ 0x78
 80062dc:	d809      	bhi.n	80062f2 <_printf_i+0x2e>
 80062de:	2a62      	cmp	r2, #98	@ 0x62
 80062e0:	d80b      	bhi.n	80062fa <_printf_i+0x36>
 80062e2:	2a00      	cmp	r2, #0
 80062e4:	d100      	bne.n	80062e8 <_printf_i+0x24>
 80062e6:	e0bc      	b.n	8006462 <_printf_i+0x19e>
 80062e8:	497b      	ldr	r1, [pc, #492]	@ (80064d8 <_printf_i+0x214>)
 80062ea:	9104      	str	r1, [sp, #16]
 80062ec:	2a58      	cmp	r2, #88	@ 0x58
 80062ee:	d100      	bne.n	80062f2 <_printf_i+0x2e>
 80062f0:	e090      	b.n	8006414 <_printf_i+0x150>
 80062f2:	0025      	movs	r5, r4
 80062f4:	3542      	adds	r5, #66	@ 0x42
 80062f6:	702a      	strb	r2, [r5, #0]
 80062f8:	e022      	b.n	8006340 <_printf_i+0x7c>
 80062fa:	0010      	movs	r0, r2
 80062fc:	3863      	subs	r0, #99	@ 0x63
 80062fe:	2815      	cmp	r0, #21
 8006300:	d8f7      	bhi.n	80062f2 <_printf_i+0x2e>
 8006302:	f7f9 ff09 	bl	8000118 <__gnu_thumb1_case_shi>
 8006306:	0016      	.short	0x0016
 8006308:	fff6001f 	.word	0xfff6001f
 800630c:	fff6fff6 	.word	0xfff6fff6
 8006310:	001ffff6 	.word	0x001ffff6
 8006314:	fff6fff6 	.word	0xfff6fff6
 8006318:	fff6fff6 	.word	0xfff6fff6
 800631c:	003600a1 	.word	0x003600a1
 8006320:	fff60080 	.word	0xfff60080
 8006324:	00b2fff6 	.word	0x00b2fff6
 8006328:	0036fff6 	.word	0x0036fff6
 800632c:	fff6fff6 	.word	0xfff6fff6
 8006330:	0084      	.short	0x0084
 8006332:	0025      	movs	r5, r4
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	3542      	adds	r5, #66	@ 0x42
 8006338:	1d11      	adds	r1, r2, #4
 800633a:	6019      	str	r1, [r3, #0]
 800633c:	6813      	ldr	r3, [r2, #0]
 800633e:	702b      	strb	r3, [r5, #0]
 8006340:	2301      	movs	r3, #1
 8006342:	e0a0      	b.n	8006486 <_printf_i+0x1c2>
 8006344:	6818      	ldr	r0, [r3, #0]
 8006346:	6809      	ldr	r1, [r1, #0]
 8006348:	1d02      	adds	r2, r0, #4
 800634a:	060d      	lsls	r5, r1, #24
 800634c:	d50b      	bpl.n	8006366 <_printf_i+0xa2>
 800634e:	6806      	ldr	r6, [r0, #0]
 8006350:	601a      	str	r2, [r3, #0]
 8006352:	2e00      	cmp	r6, #0
 8006354:	da03      	bge.n	800635e <_printf_i+0x9a>
 8006356:	232d      	movs	r3, #45	@ 0x2d
 8006358:	9a03      	ldr	r2, [sp, #12]
 800635a:	4276      	negs	r6, r6
 800635c:	7013      	strb	r3, [r2, #0]
 800635e:	4b5e      	ldr	r3, [pc, #376]	@ (80064d8 <_printf_i+0x214>)
 8006360:	270a      	movs	r7, #10
 8006362:	9304      	str	r3, [sp, #16]
 8006364:	e018      	b.n	8006398 <_printf_i+0xd4>
 8006366:	6806      	ldr	r6, [r0, #0]
 8006368:	601a      	str	r2, [r3, #0]
 800636a:	0649      	lsls	r1, r1, #25
 800636c:	d5f1      	bpl.n	8006352 <_printf_i+0x8e>
 800636e:	b236      	sxth	r6, r6
 8006370:	e7ef      	b.n	8006352 <_printf_i+0x8e>
 8006372:	6808      	ldr	r0, [r1, #0]
 8006374:	6819      	ldr	r1, [r3, #0]
 8006376:	c940      	ldmia	r1!, {r6}
 8006378:	0605      	lsls	r5, r0, #24
 800637a:	d402      	bmi.n	8006382 <_printf_i+0xbe>
 800637c:	0640      	lsls	r0, r0, #25
 800637e:	d500      	bpl.n	8006382 <_printf_i+0xbe>
 8006380:	b2b6      	uxth	r6, r6
 8006382:	6019      	str	r1, [r3, #0]
 8006384:	4b54      	ldr	r3, [pc, #336]	@ (80064d8 <_printf_i+0x214>)
 8006386:	270a      	movs	r7, #10
 8006388:	9304      	str	r3, [sp, #16]
 800638a:	2a6f      	cmp	r2, #111	@ 0x6f
 800638c:	d100      	bne.n	8006390 <_printf_i+0xcc>
 800638e:	3f02      	subs	r7, #2
 8006390:	0023      	movs	r3, r4
 8006392:	2200      	movs	r2, #0
 8006394:	3343      	adds	r3, #67	@ 0x43
 8006396:	701a      	strb	r2, [r3, #0]
 8006398:	6863      	ldr	r3, [r4, #4]
 800639a:	60a3      	str	r3, [r4, #8]
 800639c:	2b00      	cmp	r3, #0
 800639e:	db03      	blt.n	80063a8 <_printf_i+0xe4>
 80063a0:	2104      	movs	r1, #4
 80063a2:	6822      	ldr	r2, [r4, #0]
 80063a4:	438a      	bics	r2, r1
 80063a6:	6022      	str	r2, [r4, #0]
 80063a8:	2e00      	cmp	r6, #0
 80063aa:	d102      	bne.n	80063b2 <_printf_i+0xee>
 80063ac:	9d03      	ldr	r5, [sp, #12]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d00c      	beq.n	80063cc <_printf_i+0x108>
 80063b2:	9d03      	ldr	r5, [sp, #12]
 80063b4:	0030      	movs	r0, r6
 80063b6:	0039      	movs	r1, r7
 80063b8:	f7f9 ff3e 	bl	8000238 <__aeabi_uidivmod>
 80063bc:	9b04      	ldr	r3, [sp, #16]
 80063be:	3d01      	subs	r5, #1
 80063c0:	5c5b      	ldrb	r3, [r3, r1]
 80063c2:	702b      	strb	r3, [r5, #0]
 80063c4:	0033      	movs	r3, r6
 80063c6:	0006      	movs	r6, r0
 80063c8:	429f      	cmp	r7, r3
 80063ca:	d9f3      	bls.n	80063b4 <_printf_i+0xf0>
 80063cc:	2f08      	cmp	r7, #8
 80063ce:	d109      	bne.n	80063e4 <_printf_i+0x120>
 80063d0:	6823      	ldr	r3, [r4, #0]
 80063d2:	07db      	lsls	r3, r3, #31
 80063d4:	d506      	bpl.n	80063e4 <_printf_i+0x120>
 80063d6:	6862      	ldr	r2, [r4, #4]
 80063d8:	6923      	ldr	r3, [r4, #16]
 80063da:	429a      	cmp	r2, r3
 80063dc:	dc02      	bgt.n	80063e4 <_printf_i+0x120>
 80063de:	2330      	movs	r3, #48	@ 0x30
 80063e0:	3d01      	subs	r5, #1
 80063e2:	702b      	strb	r3, [r5, #0]
 80063e4:	9b03      	ldr	r3, [sp, #12]
 80063e6:	1b5b      	subs	r3, r3, r5
 80063e8:	6123      	str	r3, [r4, #16]
 80063ea:	9b07      	ldr	r3, [sp, #28]
 80063ec:	0021      	movs	r1, r4
 80063ee:	9300      	str	r3, [sp, #0]
 80063f0:	9805      	ldr	r0, [sp, #20]
 80063f2:	9b06      	ldr	r3, [sp, #24]
 80063f4:	aa09      	add	r2, sp, #36	@ 0x24
 80063f6:	f7ff fef5 	bl	80061e4 <_printf_common>
 80063fa:	3001      	adds	r0, #1
 80063fc:	d148      	bne.n	8006490 <_printf_i+0x1cc>
 80063fe:	2001      	movs	r0, #1
 8006400:	4240      	negs	r0, r0
 8006402:	b00b      	add	sp, #44	@ 0x2c
 8006404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006406:	2220      	movs	r2, #32
 8006408:	6809      	ldr	r1, [r1, #0]
 800640a:	430a      	orrs	r2, r1
 800640c:	6022      	str	r2, [r4, #0]
 800640e:	2278      	movs	r2, #120	@ 0x78
 8006410:	4932      	ldr	r1, [pc, #200]	@ (80064dc <_printf_i+0x218>)
 8006412:	9104      	str	r1, [sp, #16]
 8006414:	0021      	movs	r1, r4
 8006416:	3145      	adds	r1, #69	@ 0x45
 8006418:	700a      	strb	r2, [r1, #0]
 800641a:	6819      	ldr	r1, [r3, #0]
 800641c:	6822      	ldr	r2, [r4, #0]
 800641e:	c940      	ldmia	r1!, {r6}
 8006420:	0610      	lsls	r0, r2, #24
 8006422:	d402      	bmi.n	800642a <_printf_i+0x166>
 8006424:	0650      	lsls	r0, r2, #25
 8006426:	d500      	bpl.n	800642a <_printf_i+0x166>
 8006428:	b2b6      	uxth	r6, r6
 800642a:	6019      	str	r1, [r3, #0]
 800642c:	07d3      	lsls	r3, r2, #31
 800642e:	d502      	bpl.n	8006436 <_printf_i+0x172>
 8006430:	2320      	movs	r3, #32
 8006432:	4313      	orrs	r3, r2
 8006434:	6023      	str	r3, [r4, #0]
 8006436:	2e00      	cmp	r6, #0
 8006438:	d001      	beq.n	800643e <_printf_i+0x17a>
 800643a:	2710      	movs	r7, #16
 800643c:	e7a8      	b.n	8006390 <_printf_i+0xcc>
 800643e:	2220      	movs	r2, #32
 8006440:	6823      	ldr	r3, [r4, #0]
 8006442:	4393      	bics	r3, r2
 8006444:	6023      	str	r3, [r4, #0]
 8006446:	e7f8      	b.n	800643a <_printf_i+0x176>
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	680d      	ldr	r5, [r1, #0]
 800644c:	1d10      	adds	r0, r2, #4
 800644e:	6949      	ldr	r1, [r1, #20]
 8006450:	6018      	str	r0, [r3, #0]
 8006452:	6813      	ldr	r3, [r2, #0]
 8006454:	062e      	lsls	r6, r5, #24
 8006456:	d501      	bpl.n	800645c <_printf_i+0x198>
 8006458:	6019      	str	r1, [r3, #0]
 800645a:	e002      	b.n	8006462 <_printf_i+0x19e>
 800645c:	066d      	lsls	r5, r5, #25
 800645e:	d5fb      	bpl.n	8006458 <_printf_i+0x194>
 8006460:	8019      	strh	r1, [r3, #0]
 8006462:	2300      	movs	r3, #0
 8006464:	9d03      	ldr	r5, [sp, #12]
 8006466:	6123      	str	r3, [r4, #16]
 8006468:	e7bf      	b.n	80063ea <_printf_i+0x126>
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	1d11      	adds	r1, r2, #4
 800646e:	6019      	str	r1, [r3, #0]
 8006470:	6815      	ldr	r5, [r2, #0]
 8006472:	2100      	movs	r1, #0
 8006474:	0028      	movs	r0, r5
 8006476:	6862      	ldr	r2, [r4, #4]
 8006478:	f000 f9e0 	bl	800683c <memchr>
 800647c:	2800      	cmp	r0, #0
 800647e:	d001      	beq.n	8006484 <_printf_i+0x1c0>
 8006480:	1b40      	subs	r0, r0, r5
 8006482:	6060      	str	r0, [r4, #4]
 8006484:	6863      	ldr	r3, [r4, #4]
 8006486:	6123      	str	r3, [r4, #16]
 8006488:	2300      	movs	r3, #0
 800648a:	9a03      	ldr	r2, [sp, #12]
 800648c:	7013      	strb	r3, [r2, #0]
 800648e:	e7ac      	b.n	80063ea <_printf_i+0x126>
 8006490:	002a      	movs	r2, r5
 8006492:	6923      	ldr	r3, [r4, #16]
 8006494:	9906      	ldr	r1, [sp, #24]
 8006496:	9805      	ldr	r0, [sp, #20]
 8006498:	9d07      	ldr	r5, [sp, #28]
 800649a:	47a8      	blx	r5
 800649c:	3001      	adds	r0, #1
 800649e:	d0ae      	beq.n	80063fe <_printf_i+0x13a>
 80064a0:	6823      	ldr	r3, [r4, #0]
 80064a2:	079b      	lsls	r3, r3, #30
 80064a4:	d415      	bmi.n	80064d2 <_printf_i+0x20e>
 80064a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064a8:	68e0      	ldr	r0, [r4, #12]
 80064aa:	4298      	cmp	r0, r3
 80064ac:	daa9      	bge.n	8006402 <_printf_i+0x13e>
 80064ae:	0018      	movs	r0, r3
 80064b0:	e7a7      	b.n	8006402 <_printf_i+0x13e>
 80064b2:	0022      	movs	r2, r4
 80064b4:	2301      	movs	r3, #1
 80064b6:	9906      	ldr	r1, [sp, #24]
 80064b8:	9805      	ldr	r0, [sp, #20]
 80064ba:	9e07      	ldr	r6, [sp, #28]
 80064bc:	3219      	adds	r2, #25
 80064be:	47b0      	blx	r6
 80064c0:	3001      	adds	r0, #1
 80064c2:	d09c      	beq.n	80063fe <_printf_i+0x13a>
 80064c4:	3501      	adds	r5, #1
 80064c6:	68e3      	ldr	r3, [r4, #12]
 80064c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80064ca:	1a9b      	subs	r3, r3, r2
 80064cc:	42ab      	cmp	r3, r5
 80064ce:	dcf0      	bgt.n	80064b2 <_printf_i+0x1ee>
 80064d0:	e7e9      	b.n	80064a6 <_printf_i+0x1e2>
 80064d2:	2500      	movs	r5, #0
 80064d4:	e7f7      	b.n	80064c6 <_printf_i+0x202>
 80064d6:	46c0      	nop			@ (mov r8, r8)
 80064d8:	08006e29 	.word	0x08006e29
 80064dc:	08006e3a 	.word	0x08006e3a

080064e0 <__sflush_r>:
 80064e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064e2:	220c      	movs	r2, #12
 80064e4:	5e8b      	ldrsh	r3, [r1, r2]
 80064e6:	0005      	movs	r5, r0
 80064e8:	000c      	movs	r4, r1
 80064ea:	071a      	lsls	r2, r3, #28
 80064ec:	d456      	bmi.n	800659c <__sflush_r+0xbc>
 80064ee:	684a      	ldr	r2, [r1, #4]
 80064f0:	2a00      	cmp	r2, #0
 80064f2:	dc02      	bgt.n	80064fa <__sflush_r+0x1a>
 80064f4:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80064f6:	2a00      	cmp	r2, #0
 80064f8:	dd4e      	ble.n	8006598 <__sflush_r+0xb8>
 80064fa:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80064fc:	2f00      	cmp	r7, #0
 80064fe:	d04b      	beq.n	8006598 <__sflush_r+0xb8>
 8006500:	2200      	movs	r2, #0
 8006502:	2080      	movs	r0, #128	@ 0x80
 8006504:	682e      	ldr	r6, [r5, #0]
 8006506:	602a      	str	r2, [r5, #0]
 8006508:	001a      	movs	r2, r3
 800650a:	0140      	lsls	r0, r0, #5
 800650c:	6a21      	ldr	r1, [r4, #32]
 800650e:	4002      	ands	r2, r0
 8006510:	4203      	tst	r3, r0
 8006512:	d033      	beq.n	800657c <__sflush_r+0x9c>
 8006514:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006516:	89a3      	ldrh	r3, [r4, #12]
 8006518:	075b      	lsls	r3, r3, #29
 800651a:	d506      	bpl.n	800652a <__sflush_r+0x4a>
 800651c:	6863      	ldr	r3, [r4, #4]
 800651e:	1ad2      	subs	r2, r2, r3
 8006520:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006522:	2b00      	cmp	r3, #0
 8006524:	d001      	beq.n	800652a <__sflush_r+0x4a>
 8006526:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006528:	1ad2      	subs	r2, r2, r3
 800652a:	2300      	movs	r3, #0
 800652c:	0028      	movs	r0, r5
 800652e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8006530:	6a21      	ldr	r1, [r4, #32]
 8006532:	47b8      	blx	r7
 8006534:	89a2      	ldrh	r2, [r4, #12]
 8006536:	1c43      	adds	r3, r0, #1
 8006538:	d106      	bne.n	8006548 <__sflush_r+0x68>
 800653a:	6829      	ldr	r1, [r5, #0]
 800653c:	291d      	cmp	r1, #29
 800653e:	d846      	bhi.n	80065ce <__sflush_r+0xee>
 8006540:	4b29      	ldr	r3, [pc, #164]	@ (80065e8 <__sflush_r+0x108>)
 8006542:	410b      	asrs	r3, r1
 8006544:	07db      	lsls	r3, r3, #31
 8006546:	d442      	bmi.n	80065ce <__sflush_r+0xee>
 8006548:	2300      	movs	r3, #0
 800654a:	6063      	str	r3, [r4, #4]
 800654c:	6923      	ldr	r3, [r4, #16]
 800654e:	6023      	str	r3, [r4, #0]
 8006550:	04d2      	lsls	r2, r2, #19
 8006552:	d505      	bpl.n	8006560 <__sflush_r+0x80>
 8006554:	1c43      	adds	r3, r0, #1
 8006556:	d102      	bne.n	800655e <__sflush_r+0x7e>
 8006558:	682b      	ldr	r3, [r5, #0]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d100      	bne.n	8006560 <__sflush_r+0x80>
 800655e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006560:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006562:	602e      	str	r6, [r5, #0]
 8006564:	2900      	cmp	r1, #0
 8006566:	d017      	beq.n	8006598 <__sflush_r+0xb8>
 8006568:	0023      	movs	r3, r4
 800656a:	3344      	adds	r3, #68	@ 0x44
 800656c:	4299      	cmp	r1, r3
 800656e:	d002      	beq.n	8006576 <__sflush_r+0x96>
 8006570:	0028      	movs	r0, r5
 8006572:	f7ff fbf7 	bl	8005d64 <_free_r>
 8006576:	2300      	movs	r3, #0
 8006578:	6363      	str	r3, [r4, #52]	@ 0x34
 800657a:	e00d      	b.n	8006598 <__sflush_r+0xb8>
 800657c:	2301      	movs	r3, #1
 800657e:	0028      	movs	r0, r5
 8006580:	47b8      	blx	r7
 8006582:	0002      	movs	r2, r0
 8006584:	1c43      	adds	r3, r0, #1
 8006586:	d1c6      	bne.n	8006516 <__sflush_r+0x36>
 8006588:	682b      	ldr	r3, [r5, #0]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d0c3      	beq.n	8006516 <__sflush_r+0x36>
 800658e:	2b1d      	cmp	r3, #29
 8006590:	d001      	beq.n	8006596 <__sflush_r+0xb6>
 8006592:	2b16      	cmp	r3, #22
 8006594:	d11a      	bne.n	80065cc <__sflush_r+0xec>
 8006596:	602e      	str	r6, [r5, #0]
 8006598:	2000      	movs	r0, #0
 800659a:	e01e      	b.n	80065da <__sflush_r+0xfa>
 800659c:	690e      	ldr	r6, [r1, #16]
 800659e:	2e00      	cmp	r6, #0
 80065a0:	d0fa      	beq.n	8006598 <__sflush_r+0xb8>
 80065a2:	680f      	ldr	r7, [r1, #0]
 80065a4:	600e      	str	r6, [r1, #0]
 80065a6:	1bba      	subs	r2, r7, r6
 80065a8:	9201      	str	r2, [sp, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	079b      	lsls	r3, r3, #30
 80065ae:	d100      	bne.n	80065b2 <__sflush_r+0xd2>
 80065b0:	694a      	ldr	r2, [r1, #20]
 80065b2:	60a2      	str	r2, [r4, #8]
 80065b4:	9b01      	ldr	r3, [sp, #4]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	ddee      	ble.n	8006598 <__sflush_r+0xb8>
 80065ba:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80065bc:	0032      	movs	r2, r6
 80065be:	001f      	movs	r7, r3
 80065c0:	0028      	movs	r0, r5
 80065c2:	9b01      	ldr	r3, [sp, #4]
 80065c4:	6a21      	ldr	r1, [r4, #32]
 80065c6:	47b8      	blx	r7
 80065c8:	2800      	cmp	r0, #0
 80065ca:	dc07      	bgt.n	80065dc <__sflush_r+0xfc>
 80065cc:	89a2      	ldrh	r2, [r4, #12]
 80065ce:	2340      	movs	r3, #64	@ 0x40
 80065d0:	2001      	movs	r0, #1
 80065d2:	4313      	orrs	r3, r2
 80065d4:	b21b      	sxth	r3, r3
 80065d6:	81a3      	strh	r3, [r4, #12]
 80065d8:	4240      	negs	r0, r0
 80065da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80065dc:	9b01      	ldr	r3, [sp, #4]
 80065de:	1836      	adds	r6, r6, r0
 80065e0:	1a1b      	subs	r3, r3, r0
 80065e2:	9301      	str	r3, [sp, #4]
 80065e4:	e7e6      	b.n	80065b4 <__sflush_r+0xd4>
 80065e6:	46c0      	nop			@ (mov r8, r8)
 80065e8:	dfbffffe 	.word	0xdfbffffe

080065ec <_fflush_r>:
 80065ec:	690b      	ldr	r3, [r1, #16]
 80065ee:	b570      	push	{r4, r5, r6, lr}
 80065f0:	0005      	movs	r5, r0
 80065f2:	000c      	movs	r4, r1
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d102      	bne.n	80065fe <_fflush_r+0x12>
 80065f8:	2500      	movs	r5, #0
 80065fa:	0028      	movs	r0, r5
 80065fc:	bd70      	pop	{r4, r5, r6, pc}
 80065fe:	2800      	cmp	r0, #0
 8006600:	d004      	beq.n	800660c <_fflush_r+0x20>
 8006602:	6a03      	ldr	r3, [r0, #32]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d101      	bne.n	800660c <_fflush_r+0x20>
 8006608:	f7ff fa88 	bl	8005b1c <__sinit>
 800660c:	220c      	movs	r2, #12
 800660e:	5ea3      	ldrsh	r3, [r4, r2]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d0f1      	beq.n	80065f8 <_fflush_r+0xc>
 8006614:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006616:	07d2      	lsls	r2, r2, #31
 8006618:	d404      	bmi.n	8006624 <_fflush_r+0x38>
 800661a:	059b      	lsls	r3, r3, #22
 800661c:	d402      	bmi.n	8006624 <_fflush_r+0x38>
 800661e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006620:	f7ff fb8d 	bl	8005d3e <__retarget_lock_acquire_recursive>
 8006624:	0028      	movs	r0, r5
 8006626:	0021      	movs	r1, r4
 8006628:	f7ff ff5a 	bl	80064e0 <__sflush_r>
 800662c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800662e:	0005      	movs	r5, r0
 8006630:	07db      	lsls	r3, r3, #31
 8006632:	d4e2      	bmi.n	80065fa <_fflush_r+0xe>
 8006634:	89a3      	ldrh	r3, [r4, #12]
 8006636:	059b      	lsls	r3, r3, #22
 8006638:	d4df      	bmi.n	80065fa <_fflush_r+0xe>
 800663a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800663c:	f7ff fb80 	bl	8005d40 <__retarget_lock_release_recursive>
 8006640:	e7db      	b.n	80065fa <_fflush_r+0xe>

08006642 <__swbuf_r>:
 8006642:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006644:	0006      	movs	r6, r0
 8006646:	000d      	movs	r5, r1
 8006648:	0014      	movs	r4, r2
 800664a:	2800      	cmp	r0, #0
 800664c:	d004      	beq.n	8006658 <__swbuf_r+0x16>
 800664e:	6a03      	ldr	r3, [r0, #32]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d101      	bne.n	8006658 <__swbuf_r+0x16>
 8006654:	f7ff fa62 	bl	8005b1c <__sinit>
 8006658:	69a3      	ldr	r3, [r4, #24]
 800665a:	60a3      	str	r3, [r4, #8]
 800665c:	89a3      	ldrh	r3, [r4, #12]
 800665e:	071b      	lsls	r3, r3, #28
 8006660:	d502      	bpl.n	8006668 <__swbuf_r+0x26>
 8006662:	6923      	ldr	r3, [r4, #16]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d109      	bne.n	800667c <__swbuf_r+0x3a>
 8006668:	0021      	movs	r1, r4
 800666a:	0030      	movs	r0, r6
 800666c:	f000 f82c 	bl	80066c8 <__swsetup_r>
 8006670:	2800      	cmp	r0, #0
 8006672:	d003      	beq.n	800667c <__swbuf_r+0x3a>
 8006674:	2501      	movs	r5, #1
 8006676:	426d      	negs	r5, r5
 8006678:	0028      	movs	r0, r5
 800667a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800667c:	6923      	ldr	r3, [r4, #16]
 800667e:	6820      	ldr	r0, [r4, #0]
 8006680:	b2ef      	uxtb	r7, r5
 8006682:	1ac0      	subs	r0, r0, r3
 8006684:	6963      	ldr	r3, [r4, #20]
 8006686:	b2ed      	uxtb	r5, r5
 8006688:	4283      	cmp	r3, r0
 800668a:	dc05      	bgt.n	8006698 <__swbuf_r+0x56>
 800668c:	0021      	movs	r1, r4
 800668e:	0030      	movs	r0, r6
 8006690:	f7ff ffac 	bl	80065ec <_fflush_r>
 8006694:	2800      	cmp	r0, #0
 8006696:	d1ed      	bne.n	8006674 <__swbuf_r+0x32>
 8006698:	68a3      	ldr	r3, [r4, #8]
 800669a:	3001      	adds	r0, #1
 800669c:	3b01      	subs	r3, #1
 800669e:	60a3      	str	r3, [r4, #8]
 80066a0:	6823      	ldr	r3, [r4, #0]
 80066a2:	1c5a      	adds	r2, r3, #1
 80066a4:	6022      	str	r2, [r4, #0]
 80066a6:	701f      	strb	r7, [r3, #0]
 80066a8:	6963      	ldr	r3, [r4, #20]
 80066aa:	4283      	cmp	r3, r0
 80066ac:	d004      	beq.n	80066b8 <__swbuf_r+0x76>
 80066ae:	89a3      	ldrh	r3, [r4, #12]
 80066b0:	07db      	lsls	r3, r3, #31
 80066b2:	d5e1      	bpl.n	8006678 <__swbuf_r+0x36>
 80066b4:	2d0a      	cmp	r5, #10
 80066b6:	d1df      	bne.n	8006678 <__swbuf_r+0x36>
 80066b8:	0021      	movs	r1, r4
 80066ba:	0030      	movs	r0, r6
 80066bc:	f7ff ff96 	bl	80065ec <_fflush_r>
 80066c0:	2800      	cmp	r0, #0
 80066c2:	d0d9      	beq.n	8006678 <__swbuf_r+0x36>
 80066c4:	e7d6      	b.n	8006674 <__swbuf_r+0x32>
	...

080066c8 <__swsetup_r>:
 80066c8:	4b2d      	ldr	r3, [pc, #180]	@ (8006780 <__swsetup_r+0xb8>)
 80066ca:	b570      	push	{r4, r5, r6, lr}
 80066cc:	0005      	movs	r5, r0
 80066ce:	6818      	ldr	r0, [r3, #0]
 80066d0:	000c      	movs	r4, r1
 80066d2:	2800      	cmp	r0, #0
 80066d4:	d004      	beq.n	80066e0 <__swsetup_r+0x18>
 80066d6:	6a03      	ldr	r3, [r0, #32]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d101      	bne.n	80066e0 <__swsetup_r+0x18>
 80066dc:	f7ff fa1e 	bl	8005b1c <__sinit>
 80066e0:	230c      	movs	r3, #12
 80066e2:	5ee2      	ldrsh	r2, [r4, r3]
 80066e4:	0713      	lsls	r3, r2, #28
 80066e6:	d423      	bmi.n	8006730 <__swsetup_r+0x68>
 80066e8:	06d3      	lsls	r3, r2, #27
 80066ea:	d407      	bmi.n	80066fc <__swsetup_r+0x34>
 80066ec:	2309      	movs	r3, #9
 80066ee:	602b      	str	r3, [r5, #0]
 80066f0:	2340      	movs	r3, #64	@ 0x40
 80066f2:	2001      	movs	r0, #1
 80066f4:	4313      	orrs	r3, r2
 80066f6:	81a3      	strh	r3, [r4, #12]
 80066f8:	4240      	negs	r0, r0
 80066fa:	e03a      	b.n	8006772 <__swsetup_r+0xaa>
 80066fc:	0752      	lsls	r2, r2, #29
 80066fe:	d513      	bpl.n	8006728 <__swsetup_r+0x60>
 8006700:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006702:	2900      	cmp	r1, #0
 8006704:	d008      	beq.n	8006718 <__swsetup_r+0x50>
 8006706:	0023      	movs	r3, r4
 8006708:	3344      	adds	r3, #68	@ 0x44
 800670a:	4299      	cmp	r1, r3
 800670c:	d002      	beq.n	8006714 <__swsetup_r+0x4c>
 800670e:	0028      	movs	r0, r5
 8006710:	f7ff fb28 	bl	8005d64 <_free_r>
 8006714:	2300      	movs	r3, #0
 8006716:	6363      	str	r3, [r4, #52]	@ 0x34
 8006718:	2224      	movs	r2, #36	@ 0x24
 800671a:	89a3      	ldrh	r3, [r4, #12]
 800671c:	4393      	bics	r3, r2
 800671e:	81a3      	strh	r3, [r4, #12]
 8006720:	2300      	movs	r3, #0
 8006722:	6063      	str	r3, [r4, #4]
 8006724:	6923      	ldr	r3, [r4, #16]
 8006726:	6023      	str	r3, [r4, #0]
 8006728:	2308      	movs	r3, #8
 800672a:	89a2      	ldrh	r2, [r4, #12]
 800672c:	4313      	orrs	r3, r2
 800672e:	81a3      	strh	r3, [r4, #12]
 8006730:	6923      	ldr	r3, [r4, #16]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d10b      	bne.n	800674e <__swsetup_r+0x86>
 8006736:	21a0      	movs	r1, #160	@ 0xa0
 8006738:	2280      	movs	r2, #128	@ 0x80
 800673a:	89a3      	ldrh	r3, [r4, #12]
 800673c:	0089      	lsls	r1, r1, #2
 800673e:	0092      	lsls	r2, r2, #2
 8006740:	400b      	ands	r3, r1
 8006742:	4293      	cmp	r3, r2
 8006744:	d003      	beq.n	800674e <__swsetup_r+0x86>
 8006746:	0021      	movs	r1, r4
 8006748:	0028      	movs	r0, r5
 800674a:	f000 f8ad 	bl	80068a8 <__smakebuf_r>
 800674e:	230c      	movs	r3, #12
 8006750:	5ee2      	ldrsh	r2, [r4, r3]
 8006752:	2101      	movs	r1, #1
 8006754:	0013      	movs	r3, r2
 8006756:	400b      	ands	r3, r1
 8006758:	420a      	tst	r2, r1
 800675a:	d00b      	beq.n	8006774 <__swsetup_r+0xac>
 800675c:	2300      	movs	r3, #0
 800675e:	60a3      	str	r3, [r4, #8]
 8006760:	6963      	ldr	r3, [r4, #20]
 8006762:	425b      	negs	r3, r3
 8006764:	61a3      	str	r3, [r4, #24]
 8006766:	2000      	movs	r0, #0
 8006768:	6923      	ldr	r3, [r4, #16]
 800676a:	4283      	cmp	r3, r0
 800676c:	d101      	bne.n	8006772 <__swsetup_r+0xaa>
 800676e:	0613      	lsls	r3, r2, #24
 8006770:	d4be      	bmi.n	80066f0 <__swsetup_r+0x28>
 8006772:	bd70      	pop	{r4, r5, r6, pc}
 8006774:	0791      	lsls	r1, r2, #30
 8006776:	d400      	bmi.n	800677a <__swsetup_r+0xb2>
 8006778:	6963      	ldr	r3, [r4, #20]
 800677a:	60a3      	str	r3, [r4, #8]
 800677c:	e7f3      	b.n	8006766 <__swsetup_r+0x9e>
 800677e:	46c0      	nop			@ (mov r8, r8)
 8006780:	200000a4 	.word	0x200000a4

08006784 <_raise_r>:
 8006784:	b570      	push	{r4, r5, r6, lr}
 8006786:	0004      	movs	r4, r0
 8006788:	000d      	movs	r5, r1
 800678a:	291f      	cmp	r1, #31
 800678c:	d904      	bls.n	8006798 <_raise_r+0x14>
 800678e:	2316      	movs	r3, #22
 8006790:	6003      	str	r3, [r0, #0]
 8006792:	2001      	movs	r0, #1
 8006794:	4240      	negs	r0, r0
 8006796:	bd70      	pop	{r4, r5, r6, pc}
 8006798:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800679a:	2b00      	cmp	r3, #0
 800679c:	d004      	beq.n	80067a8 <_raise_r+0x24>
 800679e:	008a      	lsls	r2, r1, #2
 80067a0:	189b      	adds	r3, r3, r2
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	2a00      	cmp	r2, #0
 80067a6:	d108      	bne.n	80067ba <_raise_r+0x36>
 80067a8:	0020      	movs	r0, r4
 80067aa:	f000 f831 	bl	8006810 <_getpid_r>
 80067ae:	002a      	movs	r2, r5
 80067b0:	0001      	movs	r1, r0
 80067b2:	0020      	movs	r0, r4
 80067b4:	f000 f81a 	bl	80067ec <_kill_r>
 80067b8:	e7ed      	b.n	8006796 <_raise_r+0x12>
 80067ba:	2a01      	cmp	r2, #1
 80067bc:	d009      	beq.n	80067d2 <_raise_r+0x4e>
 80067be:	1c51      	adds	r1, r2, #1
 80067c0:	d103      	bne.n	80067ca <_raise_r+0x46>
 80067c2:	2316      	movs	r3, #22
 80067c4:	6003      	str	r3, [r0, #0]
 80067c6:	2001      	movs	r0, #1
 80067c8:	e7e5      	b.n	8006796 <_raise_r+0x12>
 80067ca:	2100      	movs	r1, #0
 80067cc:	0028      	movs	r0, r5
 80067ce:	6019      	str	r1, [r3, #0]
 80067d0:	4790      	blx	r2
 80067d2:	2000      	movs	r0, #0
 80067d4:	e7df      	b.n	8006796 <_raise_r+0x12>
	...

080067d8 <raise>:
 80067d8:	b510      	push	{r4, lr}
 80067da:	4b03      	ldr	r3, [pc, #12]	@ (80067e8 <raise+0x10>)
 80067dc:	0001      	movs	r1, r0
 80067de:	6818      	ldr	r0, [r3, #0]
 80067e0:	f7ff ffd0 	bl	8006784 <_raise_r>
 80067e4:	bd10      	pop	{r4, pc}
 80067e6:	46c0      	nop			@ (mov r8, r8)
 80067e8:	200000a4 	.word	0x200000a4

080067ec <_kill_r>:
 80067ec:	2300      	movs	r3, #0
 80067ee:	b570      	push	{r4, r5, r6, lr}
 80067f0:	4d06      	ldr	r5, [pc, #24]	@ (800680c <_kill_r+0x20>)
 80067f2:	0004      	movs	r4, r0
 80067f4:	0008      	movs	r0, r1
 80067f6:	0011      	movs	r1, r2
 80067f8:	602b      	str	r3, [r5, #0]
 80067fa:	f7fb fb79 	bl	8001ef0 <_kill>
 80067fe:	1c43      	adds	r3, r0, #1
 8006800:	d103      	bne.n	800680a <_kill_r+0x1e>
 8006802:	682b      	ldr	r3, [r5, #0]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d000      	beq.n	800680a <_kill_r+0x1e>
 8006808:	6023      	str	r3, [r4, #0]
 800680a:	bd70      	pop	{r4, r5, r6, pc}
 800680c:	2000061c 	.word	0x2000061c

08006810 <_getpid_r>:
 8006810:	b510      	push	{r4, lr}
 8006812:	f7fb fb6b 	bl	8001eec <_getpid>
 8006816:	bd10      	pop	{r4, pc}

08006818 <_sbrk_r>:
 8006818:	2300      	movs	r3, #0
 800681a:	b570      	push	{r4, r5, r6, lr}
 800681c:	4d06      	ldr	r5, [pc, #24]	@ (8006838 <_sbrk_r+0x20>)
 800681e:	0004      	movs	r4, r0
 8006820:	0008      	movs	r0, r1
 8006822:	602b      	str	r3, [r5, #0]
 8006824:	f7fb fb98 	bl	8001f58 <_sbrk>
 8006828:	1c43      	adds	r3, r0, #1
 800682a:	d103      	bne.n	8006834 <_sbrk_r+0x1c>
 800682c:	682b      	ldr	r3, [r5, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d000      	beq.n	8006834 <_sbrk_r+0x1c>
 8006832:	6023      	str	r3, [r4, #0]
 8006834:	bd70      	pop	{r4, r5, r6, pc}
 8006836:	46c0      	nop			@ (mov r8, r8)
 8006838:	2000061c 	.word	0x2000061c

0800683c <memchr>:
 800683c:	b2c9      	uxtb	r1, r1
 800683e:	1882      	adds	r2, r0, r2
 8006840:	4290      	cmp	r0, r2
 8006842:	d101      	bne.n	8006848 <memchr+0xc>
 8006844:	2000      	movs	r0, #0
 8006846:	4770      	bx	lr
 8006848:	7803      	ldrb	r3, [r0, #0]
 800684a:	428b      	cmp	r3, r1
 800684c:	d0fb      	beq.n	8006846 <memchr+0xa>
 800684e:	3001      	adds	r0, #1
 8006850:	e7f6      	b.n	8006840 <memchr+0x4>
	...

08006854 <__swhatbuf_r>:
 8006854:	b570      	push	{r4, r5, r6, lr}
 8006856:	000e      	movs	r6, r1
 8006858:	001d      	movs	r5, r3
 800685a:	230e      	movs	r3, #14
 800685c:	5ec9      	ldrsh	r1, [r1, r3]
 800685e:	0014      	movs	r4, r2
 8006860:	b096      	sub	sp, #88	@ 0x58
 8006862:	2900      	cmp	r1, #0
 8006864:	da0c      	bge.n	8006880 <__swhatbuf_r+0x2c>
 8006866:	89b2      	ldrh	r2, [r6, #12]
 8006868:	2380      	movs	r3, #128	@ 0x80
 800686a:	0011      	movs	r1, r2
 800686c:	4019      	ands	r1, r3
 800686e:	421a      	tst	r2, r3
 8006870:	d114      	bne.n	800689c <__swhatbuf_r+0x48>
 8006872:	2380      	movs	r3, #128	@ 0x80
 8006874:	00db      	lsls	r3, r3, #3
 8006876:	2000      	movs	r0, #0
 8006878:	6029      	str	r1, [r5, #0]
 800687a:	6023      	str	r3, [r4, #0]
 800687c:	b016      	add	sp, #88	@ 0x58
 800687e:	bd70      	pop	{r4, r5, r6, pc}
 8006880:	466a      	mov	r2, sp
 8006882:	f000 f853 	bl	800692c <_fstat_r>
 8006886:	2800      	cmp	r0, #0
 8006888:	dbed      	blt.n	8006866 <__swhatbuf_r+0x12>
 800688a:	23f0      	movs	r3, #240	@ 0xf0
 800688c:	9901      	ldr	r1, [sp, #4]
 800688e:	021b      	lsls	r3, r3, #8
 8006890:	4019      	ands	r1, r3
 8006892:	4b04      	ldr	r3, [pc, #16]	@ (80068a4 <__swhatbuf_r+0x50>)
 8006894:	18c9      	adds	r1, r1, r3
 8006896:	424b      	negs	r3, r1
 8006898:	4159      	adcs	r1, r3
 800689a:	e7ea      	b.n	8006872 <__swhatbuf_r+0x1e>
 800689c:	2100      	movs	r1, #0
 800689e:	2340      	movs	r3, #64	@ 0x40
 80068a0:	e7e9      	b.n	8006876 <__swhatbuf_r+0x22>
 80068a2:	46c0      	nop			@ (mov r8, r8)
 80068a4:	ffffe000 	.word	0xffffe000

080068a8 <__smakebuf_r>:
 80068a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068aa:	2602      	movs	r6, #2
 80068ac:	898b      	ldrh	r3, [r1, #12]
 80068ae:	0005      	movs	r5, r0
 80068b0:	000c      	movs	r4, r1
 80068b2:	b085      	sub	sp, #20
 80068b4:	4233      	tst	r3, r6
 80068b6:	d007      	beq.n	80068c8 <__smakebuf_r+0x20>
 80068b8:	0023      	movs	r3, r4
 80068ba:	3347      	adds	r3, #71	@ 0x47
 80068bc:	6023      	str	r3, [r4, #0]
 80068be:	6123      	str	r3, [r4, #16]
 80068c0:	2301      	movs	r3, #1
 80068c2:	6163      	str	r3, [r4, #20]
 80068c4:	b005      	add	sp, #20
 80068c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068c8:	ab03      	add	r3, sp, #12
 80068ca:	aa02      	add	r2, sp, #8
 80068cc:	f7ff ffc2 	bl	8006854 <__swhatbuf_r>
 80068d0:	9f02      	ldr	r7, [sp, #8]
 80068d2:	9001      	str	r0, [sp, #4]
 80068d4:	0039      	movs	r1, r7
 80068d6:	0028      	movs	r0, r5
 80068d8:	f7ff fab0 	bl	8005e3c <_malloc_r>
 80068dc:	2800      	cmp	r0, #0
 80068de:	d108      	bne.n	80068f2 <__smakebuf_r+0x4a>
 80068e0:	220c      	movs	r2, #12
 80068e2:	5ea3      	ldrsh	r3, [r4, r2]
 80068e4:	059a      	lsls	r2, r3, #22
 80068e6:	d4ed      	bmi.n	80068c4 <__smakebuf_r+0x1c>
 80068e8:	2203      	movs	r2, #3
 80068ea:	4393      	bics	r3, r2
 80068ec:	431e      	orrs	r6, r3
 80068ee:	81a6      	strh	r6, [r4, #12]
 80068f0:	e7e2      	b.n	80068b8 <__smakebuf_r+0x10>
 80068f2:	2380      	movs	r3, #128	@ 0x80
 80068f4:	89a2      	ldrh	r2, [r4, #12]
 80068f6:	6020      	str	r0, [r4, #0]
 80068f8:	4313      	orrs	r3, r2
 80068fa:	81a3      	strh	r3, [r4, #12]
 80068fc:	9b03      	ldr	r3, [sp, #12]
 80068fe:	6120      	str	r0, [r4, #16]
 8006900:	6167      	str	r7, [r4, #20]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d00c      	beq.n	8006920 <__smakebuf_r+0x78>
 8006906:	0028      	movs	r0, r5
 8006908:	230e      	movs	r3, #14
 800690a:	5ee1      	ldrsh	r1, [r4, r3]
 800690c:	f000 f820 	bl	8006950 <_isatty_r>
 8006910:	2800      	cmp	r0, #0
 8006912:	d005      	beq.n	8006920 <__smakebuf_r+0x78>
 8006914:	2303      	movs	r3, #3
 8006916:	89a2      	ldrh	r2, [r4, #12]
 8006918:	439a      	bics	r2, r3
 800691a:	3b02      	subs	r3, #2
 800691c:	4313      	orrs	r3, r2
 800691e:	81a3      	strh	r3, [r4, #12]
 8006920:	89a3      	ldrh	r3, [r4, #12]
 8006922:	9a01      	ldr	r2, [sp, #4]
 8006924:	4313      	orrs	r3, r2
 8006926:	81a3      	strh	r3, [r4, #12]
 8006928:	e7cc      	b.n	80068c4 <__smakebuf_r+0x1c>
	...

0800692c <_fstat_r>:
 800692c:	2300      	movs	r3, #0
 800692e:	b570      	push	{r4, r5, r6, lr}
 8006930:	4d06      	ldr	r5, [pc, #24]	@ (800694c <_fstat_r+0x20>)
 8006932:	0004      	movs	r4, r0
 8006934:	0008      	movs	r0, r1
 8006936:	0011      	movs	r1, r2
 8006938:	602b      	str	r3, [r5, #0]
 800693a:	f7fb fb04 	bl	8001f46 <_fstat>
 800693e:	1c43      	adds	r3, r0, #1
 8006940:	d103      	bne.n	800694a <_fstat_r+0x1e>
 8006942:	682b      	ldr	r3, [r5, #0]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d000      	beq.n	800694a <_fstat_r+0x1e>
 8006948:	6023      	str	r3, [r4, #0]
 800694a:	bd70      	pop	{r4, r5, r6, pc}
 800694c:	2000061c 	.word	0x2000061c

08006950 <_isatty_r>:
 8006950:	2300      	movs	r3, #0
 8006952:	b570      	push	{r4, r5, r6, lr}
 8006954:	4d06      	ldr	r5, [pc, #24]	@ (8006970 <_isatty_r+0x20>)
 8006956:	0004      	movs	r4, r0
 8006958:	0008      	movs	r0, r1
 800695a:	602b      	str	r3, [r5, #0]
 800695c:	f7fb faf8 	bl	8001f50 <_isatty>
 8006960:	1c43      	adds	r3, r0, #1
 8006962:	d103      	bne.n	800696c <_isatty_r+0x1c>
 8006964:	682b      	ldr	r3, [r5, #0]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d000      	beq.n	800696c <_isatty_r+0x1c>
 800696a:	6023      	str	r3, [r4, #0]
 800696c:	bd70      	pop	{r4, r5, r6, pc}
 800696e:	46c0      	nop			@ (mov r8, r8)
 8006970:	2000061c 	.word	0x2000061c

08006974 <_init>:
 8006974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006976:	46c0      	nop			@ (mov r8, r8)
 8006978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800697a:	bc08      	pop	{r3}
 800697c:	469e      	mov	lr, r3
 800697e:	4770      	bx	lr

08006980 <_fini>:
 8006980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006982:	46c0      	nop			@ (mov r8, r8)
 8006984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006986:	bc08      	pop	{r3}
 8006988:	469e      	mov	lr, r3
 800698a:	4770      	bx	lr
